% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh1m1TE
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JRD_rot [9x4]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-13 14:34
% Revision: 394980f89398455cc479283a21eae791ed9f69cb (2020-04-12)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh1m1TE_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1TE_jacobiRD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1TE_jacobiRD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1TE_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1TE_jacobiRD_rot_sym_varpar: pkin has to be [23x1] (double)');
JRD_rot=NaN(9,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:59
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:59
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0; -t31, 0, 0, 0; 0, 0, 0, 0; t31, 0, 0, 0; -t30, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:59
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (10->8), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t32 = sin(qJ(1));
	t39 = qJD(1) * t32;
	t34 = cos(qJ(1));
	t38 = qJD(1) * t34;
	t31 = sin(qJ(2));
	t37 = qJD(2) * t31;
	t33 = cos(qJ(2));
	t36 = qJD(2) * t33;
	t35 = qJD(2) * t34;
	t30 = -t32 * t37 + t33 * t38;
	t29 = t31 * t38 + t32 * t36;
	t28 = t31 * t35 + t33 * t39;
	t27 = t31 * t39 - t33 * t35;
	t1 = [t29, t28, 0, 0; t27, -t30, 0, 0; 0, -t36, 0, 0; t30, -t27, 0, 0; t28, t29, 0, 0; 0, t37, 0, 0; -t39, 0, 0, 0; t38, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:59
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (73->18), mult. (250->24), div. (0->0), fcn. (250->6), ass. (0->25)
	t108 = qJD(2) + qJD(3);
	t92 = sin(qJ(1));
	t107 = t108 * t92;
	t90 = sin(qJ(3));
	t91 = sin(qJ(2));
	t106 = t90 * t91;
	t94 = cos(qJ(2));
	t105 = t90 * t94;
	t93 = cos(qJ(3));
	t104 = t91 * t93;
	t103 = t93 * t94;
	t102 = qJD(1) * t92;
	t95 = cos(qJ(1));
	t101 = qJD(1) * t95;
	t100 = t92 * t106;
	t99 = t95 * t105;
	t97 = t104 + t105;
	t96 = -t103 + t106;
	t82 = t108 * t96;
	t81 = t108 * t97;
	t80 = qJD(1) * t99 + (t91 * t101 + t94 * t107) * t93 - t108 * t100;
	t79 = t96 * t101 + t97 * t107;
	t78 = t97 * t102 + t82 * t95;
	t77 = qJD(1) * t100 - t102 * t103 + t108 * (-t95 * t104 - t99);
	t1 = [t79, t78, t78, 0; t77, -t80, -t80, 0; 0, -t81, -t81, 0; t80, -t77, -t77, 0; t78, t79, t79, 0; 0, t82, t82, 0; -t102, 0, 0, 0; t101, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:20:11
	% EndTime: 2020-04-13 14:21:14
	% DurationCPUTime: 63.12s
	% Computational Cost: add. (1690873->284), mult. (2678026->514), div. (89600->10), fcn. (1667106->16), ass. (0->239)
	t1229 = 0.1e1 / pkin(11);
	t1232 = pkin(4) ^ 2;
	t1231 = pkin(5) ^ 2;
	t1230 = pkin(7) ^ 2;
	t1234 = pkin(1) ^ 2;
	t1223 = sin(qJ(2));
	t1226 = cos(qJ(2));
	t1228 = cos(pkin(19));
	t1391 = sin(pkin(19));
	t1268 = -t1223 * t1228 + t1226 * t1391;
	t1379 = pkin(7) * t1268;
	t1399 = -2 * pkin(1);
	t1343 = -t1379 * t1399 + t1234;
	t1189 = t1230 + t1343;
	t1185 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1189;
	t1194 = pkin(1) + t1379;
	t1394 = -pkin(8) - pkin(3);
	t1183 = (pkin(7) - t1394) * (pkin(7) + t1394) + t1343;
	t1395 = pkin(3) - pkin(8);
	t1184 = (pkin(7) - t1395) * (pkin(7) + t1395) + t1343;
	t1362 = t1184 * t1183;
	t1236 = sqrt(-t1362);
	t1201 = t1223 * t1391 + t1226 * t1228;
	t1378 = pkin(7) * t1201;
	t1171 = t1185 * t1378 + t1194 * t1236;
	t1225 = cos(qJ(3));
	t1363 = t1171 * t1225;
	t1358 = t1201 * t1236;
	t1170 = -pkin(7) * t1358 + t1185 * t1194;
	t1222 = sin(qJ(3));
	t1366 = t1170 * t1222;
	t1266 = t1366 / 0.2e1 + t1363 / 0.2e1;
	t1186 = 0.1e1 / t1189;
	t1233 = 0.1e1 / pkin(3);
	t1361 = t1186 * t1233;
	t1162 = t1266 * t1361;
	t1364 = t1171 * t1222;
	t1365 = t1170 * t1225;
	t1265 = t1365 / 0.2e1 - t1364 / 0.2e1;
	t1163 = t1265 * t1361;
	t1219 = pkin(23) + pkin(22);
	t1217 = sin(t1219);
	t1218 = cos(t1219);
	t1151 = t1162 * t1218 + t1163 * t1217;
	t1382 = pkin(4) * t1151;
	t1398 = -2 * pkin(5);
	t1344 = -t1382 * t1398 + t1231;
	t1148 = t1232 + t1344;
	t1397 = 0.1e1 / t1148;
	t1349 = t1229 * t1397;
	t1416 = t1349 / 0.2e1;
	t1411 = qJD(2) + qJD(3);
	t1393 = -pkin(9) - pkin(11);
	t1144 = (pkin(4) - t1393) * (pkin(4) + t1393) + t1344;
	t1392 = pkin(11) - pkin(9);
	t1145 = (pkin(4) - t1392) * (pkin(4) + t1392) + t1344;
	t1371 = t1145 * t1144;
	t1235 = sqrt(-t1371);
	t1139 = 0.1e1 / t1235;
	t1415 = 0.1e1 / t1148 ^ 2;
	t1312 = t1162 * t1217 - t1218 * t1163;
	t1381 = pkin(4) * t1312;
	t1414 = -t1381 / 0.2e1;
	t1413 = t1231 * t1312;
	t1224 = sin(qJ(1));
	t1284 = t1226 * t1222 + t1223 * t1225;
	t1191 = t1284 * t1224;
	t1285 = t1363 + t1366;
	t1187 = 0.1e1 / t1189 ^ 2;
	t1396 = pkin(1) * pkin(7);
	t1339 = t1187 * t1396;
	t1412 = t1285 * t1339;
	t1146 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1148;
	t1149 = pkin(5) + t1382;
	t1377 = t1149 * pkin(5);
	t1317 = -t1146 - 0.2e1 * t1377;
	t1196 = t1268 * qJD(2);
	t1197 = t1201 * qJD(2);
	t1256 = 0.4e1 * t1285;
	t1286 = t1364 - t1365;
	t1257 = 0.4e1 * t1286;
	t1282 = 0.2e1 * (t1183 + t1184) * t1396;
	t1173 = t1201 * t1282;
	t1179 = 0.1e1 / t1236;
	t1387 = -t1179 / 0.2e1;
	t1305 = t1173 * t1387 - t1185;
	t1340 = t1194 * t1399;
	t1159 = (-t1268 * t1236 + (t1305 + t1340) * t1201) * pkin(7);
	t1353 = t1225 * t1159;
	t1386 = t1179 / 0.2e1;
	t1322 = t1194 * t1386;
	t1384 = pkin(1) * t1230;
	t1160 = t1173 * t1322 - 0.2e1 * t1201 ^ 2 * t1384 + (t1185 * t1268 - t1358) * pkin(7);
	t1356 = t1222 * t1160;
	t1261 = -t1353 / 0.2e1 + t1356 / 0.2e1;
	t1172 = t1197 * t1282;
	t1164 = t1172 * t1378 * t1387;
	t1335 = t1197 * t1201 * t1230;
	t1308 = t1234 * t1335;
	t1169 = t1196 * t1282 - 0.8e1 * t1308;
	t1336 = t1179 / t1362 * t1173 * t1172;
	t1360 = t1196 * t1236;
	t1140 = t1164 + (t1336 / 0.4e1 + t1169 * t1386) * t1194 + (-0.4e1 * t1196 * t1201 - 0.2e1 * t1197 * t1268) * t1384 + (t1305 * t1197 - t1360) * pkin(7);
	t1311 = pkin(1) * t1335;
	t1318 = -t1185 + t1340;
	t1359 = t1197 * t1236;
	t1141 = 0.4e1 * t1311 + (t1359 - t1201 * t1336 / 0.4e1 + t1318 * t1196 + (-t1268 * t1172 / 0.2e1 - t1196 * t1173 / 0.2e1 - t1201 * t1169 / 0.2e1) * t1179) * pkin(7);
	t1385 = -t1225 / 0.2e1;
	t1262 = t1141 * t1385 + t1222 * t1140 / 0.2e1;
	t1352 = t1225 * t1160;
	t1357 = t1222 * t1159;
	t1263 = t1357 / 0.2e1 + t1352 / 0.2e1;
	t1264 = -t1222 * t1141 / 0.2e1 + t1140 * t1385;
	t1287 = -t1352 - t1357;
	t1288 = -t1353 + t1356;
	t1158 = t1172 * t1322 - 0.2e1 * t1311 + (t1196 * t1185 - t1359) * pkin(7);
	t1367 = t1158 * t1225;
	t1157 = t1164 + (t1318 * t1197 - t1360) * pkin(7);
	t1370 = t1157 * t1222;
	t1289 = -t1367 - t1370;
	t1368 = t1158 * t1222;
	t1369 = t1157 * t1225;
	t1290 = t1368 - t1369;
	t1291 = t1186 * t1187 * t1308;
	t1401 = -t1217 * t1286 + t1218 * t1285;
	t1402 = t1217 * t1285 + t1218 * t1286;
	t1100 = ((t1217 * t1257 - t1218 * t1256) * t1291 + (t1218 * t1264 + t1217 * t1262 + (t1217 * t1263 + t1218 * t1261) * qJD(3)) * t1186 + ((t1217 * t1288 + t1218 * t1287) * t1197 - t1401 * t1196 + (t1402 * qJD(3) + t1217 * t1290 + t1218 * t1289) * t1201) * t1339) * t1233;
	t1142 = (-t1263 * t1186 - t1201 * t1412) * t1233;
	t1251 = t1286 * t1339;
	t1143 = (t1261 * t1186 + t1201 * t1251) * t1233;
	t1133 = t1142 * t1218 + t1143 * t1217;
	t1345 = t1144 + t1145;
	t1376 = 2 * pkin(5);
	t1281 = pkin(4) * t1345 * t1376;
	t1124 = t1133 * t1281;
	t1128 = t1146 * t1381 + t1149 * t1235;
	t1136 = (t1197 * t1251 + (-t1369 / 0.2e1 + t1368 / 0.2e1 + t1266 * qJD(3)) * t1186) * t1233;
	t1137 = (t1197 * t1412 + (t1370 / 0.2e1 + t1367 / 0.2e1 + t1265 * qJD(3)) * t1186) * t1233;
	t1131 = t1136 * t1217 - t1137 * t1218;
	t1134 = -t1142 * t1217 + t1143 * t1218;
	t1245 = pkin(4) * t1233 * ((t1217 * t1256 + t1218 * t1257) * t1291 + (t1218 * t1262 - t1217 * t1264 + (-t1217 * t1261 + t1218 * t1263) * qJD(3)) * t1186 + ((-t1217 * t1287 + t1218 * t1288) * t1197 + t1402 * t1196 + (t1401 * qJD(3) - t1217 * t1289 + t1218 * t1290) * t1201) * t1339);
	t1374 = t1131 * t1232;
	t1327 = t1133 * t1374;
	t1248 = t1139 * (t1100 * t1281 - 0.8e1 * t1231 * t1327);
	t1338 = pkin(4) * pkin(5) * t1415;
	t1316 = t1229 * t1338;
	t1298 = t1100 * t1316;
	t1123 = t1131 * t1281;
	t1375 = t1123 * t1139 / t1371;
	t1307 = t1149 * t1375 / 0.4e1;
	t1388 = -t1139 / 0.2e1;
	t1337 = pkin(4) * t1388;
	t1309 = t1123 * t1337;
	t1310 = t1124 * t1337;
	t1313 = t1218 * t1136 + t1137 * t1217;
	t1342 = t1232 * t1398;
	t1319 = t1312 * t1342;
	t1348 = t1397 / 0.2e1;
	t1320 = t1229 * t1348;
	t1380 = pkin(4) * t1235;
	t1410 = (t1124 * t1307 + t1149 * t1248 / 0.2e1 + t1146 * t1245 + (t1313 * t1342 + t1309) * t1133 + (t1134 * t1342 + t1310) * t1131 + (-t1380 + t1319) * t1100) * t1320 + t1128 * t1298;
	t1227 = cos(qJ(1));
	t1350 = t1226 * t1227;
	t1354 = t1223 * t1227;
	t1409 = t1222 * t1354 - t1225 * t1350;
	t1355 = t1222 * t1223;
	t1334 = t1224 * t1355;
	t1351 = t1225 * t1226;
	t1190 = -t1224 * t1351 + t1334;
	t1127 = t1146 * t1149 - t1312 * t1380;
	t1132 = t1312 * t1281;
	t1293 = 0.2e1 * t1139 * t1345;
	t1297 = t1313 * t1316;
	t1306 = -t1312 * t1375 / 0.4e1;
	t1314 = 0.4e1 * t1312 * t1374;
	t1373 = t1131 * t1235;
	t1389 = -t1132 / 0.2e1;
	t1390 = -t1123 / 0.2e1;
	t1407 = (pkin(5) * t1314 + (t1373 + t1132 * t1306 + (t1151 * t1390 + t1313 * t1389 + t1314 * t1413) * t1139 + (-t1146 + (t1293 * t1414 - 0.2e1 * t1149) * pkin(5)) * t1313) * pkin(4)) * t1416 + t1127 * t1297;
	t1325 = t1312 * t1388;
	t1094 = (t1123 * t1325 + t1317 * t1131 - t1235 * t1313) * pkin(4);
	t1372 = t1139 * t1149;
	t1326 = t1372 / 0.2e1;
	t1095 = t1123 * t1326 + t1131 * t1319 + (t1146 * t1313 - t1373) * pkin(4);
	t1220 = sin(pkin(21));
	t1221 = cos(pkin(21));
	t1249 = (t1127 * t1220 + t1128 * t1221) * t1338;
	t1321 = t1220 * t1348;
	t1323 = t1221 * t1348;
	t1085 = (t1094 * t1321 + t1095 * t1323 + t1131 * t1249) * t1229;
	t1250 = (-t1127 * t1221 + t1128 * t1220) * t1338;
	t1324 = -t1397 * t1221 / 0.2e1;
	t1086 = (t1094 * t1324 + t1095 * t1321 + t1131 * t1250) * t1229;
	t1119 = (t1127 * t1321 + t1128 * t1323) * t1229;
	t1120 = (t1127 * t1324 + t1128 * t1321) * t1229;
	t1176 = t1409 * qJD(1) + t1411 * t1191;
	t1315 = t1411 * t1226;
	t1332 = qJD(3) * t1355;
	t1333 = t1222 * t1350;
	t1177 = qJD(1) * t1333 - t1224 * t1332 - qJD(2) * t1334 + (qJD(1) * t1354 + t1224 * t1315) * t1225;
	t1303 = t1191 * t1085 + t1190 * t1086 + t1177 * t1119 + t1176 * t1120;
	t1174 = t1190 * qJD(1) + t1411 * (-t1225 * t1354 - t1333);
	t1283 = -t1351 + t1355;
	t1175 = t1411 * t1227 * t1283 + qJD(1) * t1191;
	t1193 = t1284 * t1227;
	t1301 = t1085 * t1409 - t1193 * t1086 - t1174 * t1119 + t1175 * t1120;
	t1104 = t1132 * t1326 + t1312 * t1319 + (t1146 * t1151 - t1235 * t1312) * pkin(4);
	t1296 = t1131 * t1316;
	t1406 = (t1132 * t1307 + (-0.4e1 * t1131 * t1372 * t1413 + (-t1131 * t1151 - 0.2e1 * t1312 * t1313) * t1376) * t1232 + (-t1131 * t1146 + (t1131 * t1389 + t1312 * t1390) * t1139 + (-t1235 + t1293 * t1377 / 0.2e1) * t1313) * pkin(4)) * t1320 + t1104 * t1296 + t1128 * t1297;
	t1292 = t1231 * t1415 * t1374 * t1349;
	t1267 = t1221 * t1292;
	t1294 = t1221 * t1316;
	t1295 = t1220 * t1316;
	t1405 = -t1094 * t1294 + t1095 * t1295 - 0.4e1 * t1127 * t1267;
	t1404 = t1094 * t1295 + t1095 * t1294 + 0.4e1 * t1128 * t1267;
	t1098 = (t1124 * t1325 + t1317 * t1133 - t1134 * t1235) * pkin(4);
	t1403 = (0.4e1 * pkin(5) * t1327 + t1134 * t1309 - t1235 * t1245 + t1248 * t1414 + t1313 * t1310 + (t1100 * t1317 + t1124 * t1306) * pkin(4)) * t1416 + t1098 * t1296 + t1127 * t1298;
	t1304 = t1190 * t1085 - t1191 * t1086 + t1176 * t1119 - t1177 * t1120;
	t1400 = -t1193 * t1085 - t1086 * t1409 + t1175 * t1119 + t1174 * t1120;
	t1181 = -qJD(2) * t1355 + t1225 * t1315 - t1332;
	t1182 = t1411 * t1284;
	t1300 = -t1085 * t1284 - t1086 * t1283 - t1181 * t1119 - t1182 * t1120;
	t1299 = t1085 * t1283 - t1086 * t1284 + t1182 * t1119 - t1181 * t1120;
	t1276 = t1131 * t1295;
	t1275 = t1131 * t1294;
	t1258 = 0.4e1 * t1220 * t1292;
	t1253 = t1133 * t1258;
	t1252 = t1312 * t1258;
	t1103 = (t1132 * t1325 - t1151 * t1235 + t1312 * t1317) * pkin(4);
	t1099 = t1124 * t1326 + t1133 * t1319 + (-t1133 * t1235 + t1134 * t1146) * pkin(4);
	t1091 = (t1103 * t1324 + t1104 * t1321 + t1250 * t1312) * t1229;
	t1090 = (t1103 * t1321 + t1104 * t1323 + t1249 * t1312) * t1229;
	t1089 = (t1098 * t1324 + t1099 * t1321 + t1133 * t1250) * t1229;
	t1088 = (t1098 * t1321 + t1099 * t1323 + t1133 * t1249) * t1229;
	t1069 = -t1103 * t1275 + t1128 * t1252 + t1406 * t1220 - t1407 * t1221 + t1405 * t1312;
	t1068 = t1103 * t1276 + t1127 * t1252 + t1407 * t1220 + t1406 * t1221 + t1404 * t1312;
	t1067 = t1099 * t1276 + t1128 * t1253 + t1405 * t1133 + t1410 * t1220 - t1403 * t1221;
	t1066 = t1099 * t1275 + t1127 * t1253 + t1404 * t1133 + t1403 * t1220 + t1410 * t1221;
	t1 = [t1303, -t1066 * t1193 - t1067 * t1409 + t1088 * t1175 + t1089 * t1174 + t1301, -t1068 * t1193 - t1069 * t1409 + t1090 * t1175 + t1091 * t1174 + t1301, 0; t1400, -t1066 * t1191 - t1067 * t1190 - t1088 * t1177 - t1089 * t1176 + t1304, -t1068 * t1191 - t1069 * t1190 - t1090 * t1177 - t1091 * t1176 + t1304, 0; 0, -t1066 * t1283 + t1067 * t1284 - t1088 * t1182 + t1089 * t1181 + t1300, -t1068 * t1283 + t1069 * t1284 - t1090 * t1182 + t1091 * t1181 + t1300, 0; -t1304, t1066 * t1409 - t1067 * t1193 - t1088 * t1174 + t1089 * t1175 - t1400, t1068 * t1409 - t1069 * t1193 - t1090 * t1174 + t1091 * t1175 - t1400, 0; t1301, t1066 * t1190 - t1067 * t1191 + t1088 * t1176 - t1089 * t1177 + t1303, t1068 * t1190 - t1069 * t1191 + t1090 * t1176 - t1091 * t1177 + t1303, 0; 0, -t1066 * t1284 - t1067 * t1283 - t1088 * t1181 - t1089 * t1182 + t1299, -t1068 * t1284 - t1069 * t1283 - t1090 * t1181 - t1091 * t1182 + t1299, 0; -qJD(1) * t1224, 0, 0, 0; qJD(1) * t1227, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:32:21
	% EndTime: 2020-04-13 14:34:13
	% DurationCPUTime: 116.69s
	% Computational Cost: add. (2890898->329), mult. (4562810->583), div. (156416->10), fcn. (2844300->18), ass. (0->286)
	t2021 = pkin(5) ^ 2;
	t2020 = pkin(7) ^ 2;
	t2024 = pkin(1) ^ 2;
	t2018 = cos(pkin(19));
	t2211 = sin(qJ(2));
	t2213 = sin(pkin(19));
	t2214 = cos(qJ(2));
	t1989 = t2211 * t2018 - t2214 * t2213;
	t2200 = pkin(7) * t1989;
	t2223 = -2 * pkin(1);
	t2160 = t2200 * t2223 + t2024;
	t1979 = t2020 + t2160;
	t1975 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1979;
	t1984 = pkin(1) - t2200;
	t2218 = -pkin(8) - pkin(3);
	t1973 = (pkin(7) - t2218) * (pkin(7) + t2218) + t2160;
	t2217 = -pkin(8) + pkin(3);
	t1974 = (pkin(7) - t2217) * (pkin(7) + t2217) + t2160;
	t2190 = t1974 * t1973;
	t2026 = sqrt(-t2190);
	t1991 = t2214 * t2018 + t2211 * t2213;
	t2199 = pkin(7) * t1991;
	t1961 = t1975 * t2199 + t1984 * t2026;
	t2016 = cos(qJ(3));
	t2191 = t1961 * t2016;
	t2186 = t1991 * t2026;
	t1960 = -pkin(7) * t2186 + t1975 * t1984;
	t2014 = sin(qJ(3));
	t2194 = t1960 * t2014;
	t2088 = t2194 / 0.2e1 + t2191 / 0.2e1;
	t1976 = 0.1e1 / t1979;
	t2023 = 0.1e1 / pkin(3);
	t2189 = t1976 * t2023;
	t1954 = t2088 * t2189;
	t2192 = t1961 * t2014;
	t2193 = t1960 * t2016;
	t2087 = t2193 / 0.2e1 - t2192 / 0.2e1;
	t1955 = t2087 * t2189;
	t2010 = pkin(23) + pkin(22);
	t2008 = sin(t2010);
	t2009 = cos(t2010);
	t1945 = t1954 * t2009 + t1955 * t2008;
	t2204 = pkin(4) * t1945;
	t2222 = -2 * pkin(5);
	t2161 = -t2204 * t2222 + t2021;
	t2216 = -pkin(9) - pkin(11);
	t1938 = (pkin(4) - t2216) * (pkin(4) + t2216) + t2161;
	t2215 = -pkin(9) + pkin(11);
	t1939 = (pkin(4) - t2215) * (pkin(4) + t2215) + t2161;
	t2195 = t1939 * t1938;
	t2025 = sqrt(-t2195);
	t1933 = 0.1e1 / t2025;
	t2210 = -t1933 / 0.2e1;
	t2148 = t2211 * t2014;
	t2150 = t2214 * t2016;
	t2076 = t2148 - t2150;
	t2240 = -qJD(3) - qJD(2);
	t1971 = t2076 * t2240;
	t2022 = pkin(4) ^ 2;
	t1942 = t2022 + t2161;
	t1940 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1942;
	t1943 = pkin(5) + t2204;
	t2132 = t1943 * t2222 - t1940;
	t2099 = t2191 + t2194;
	t2100 = t2192 - t2193;
	t2054 = -t2008 * t2100 + t2009 * t2099;
	t1987 = t1991 * qJD(2);
	t2219 = pkin(1) * pkin(7);
	t2098 = 0.2e1 * (t1973 + t1974) * t2219;
	t1962 = t1987 * t2098;
	t1969 = 0.1e1 / t2026;
	t2209 = -t1969 / 0.2e1;
	t1956 = t1962 * t2199 * t2209;
	t2157 = t1984 * t2223;
	t2133 = -t1975 + t2157;
	t1986 = t1989 * qJD(2);
	t2188 = t1986 * t2026;
	t1949 = t1956 + (t2133 * t1987 + t2188) * pkin(7);
	t2179 = t2016 * t1949;
	t2144 = t1987 * t1991 * t2020;
	t2126 = pkin(1) * t2144;
	t2208 = t1969 / 0.2e1;
	t2141 = t1984 * t2208;
	t2187 = t1987 * t2026;
	t1950 = t1962 * t2141 - 0.2e1 * t2126 + (-t1986 * t1975 - t2187) * pkin(7);
	t2183 = t2014 * t1950;
	t2082 = -t2179 / 0.2e1 + t2183 / 0.2e1;
	t2178 = t2016 * t1950;
	t2184 = t2014 * t1949;
	t2085 = t2184 / 0.2e1 + t2178 / 0.2e1;
	t1977 = 0.1e1 / t1979 ^ 2;
	t2156 = t1977 * t2219;
	t2131 = t1987 * t2156;
	t2251 = ((-t2008 * t2088 + t2009 * t2087) * qJD(3) - t2008 * t2082 + t2009 * t2085) * t1976 + t2054 * t2131;
	t1928 = t2251 * t2023;
	t2012 = cos(pkin(21));
	t2019 = 0.1e1 / pkin(11);
	t2227 = t2008 * t2099 + t2009 * t2100;
	t2247 = (t2131 * t2227 + (t2009 * t2082 + t2008 * t2085 + (t2008 * t2087 + t2009 * t2088) * qJD(3)) * t1976) * t2023;
	t2051 = pkin(4) * t2247;
	t2111 = 0.2e1 * pkin(5) * (t1938 + t1939);
	t2090 = t1928 * t2111;
	t2073 = pkin(4) * t1943 * t2090;
	t2127 = t1954 * t2008 - t2009 * t1955;
	t2159 = t2022 * t2222;
	t2134 = t2127 * t2159;
	t2201 = pkin(4) * t2025;
	t2232 = -t2201 + t2134;
	t2046 = t2019 * (-t2232 * t1928 + t1940 * t2051 + t2073 * t2210);
	t2221 = 0.1e1 / t1942;
	t2174 = t2221 / 0.2e1;
	t2043 = t2046 * t2174;
	t2080 = t2022 * t2090;
	t2062 = t2080 * t2210;
	t2231 = t2132 * pkin(4);
	t2047 = t2019 * (-t2231 * t1928 - t2025 * t2051 - t2127 * t2062);
	t2045 = t2221 * t2047;
	t1925 = t1940 * t1943 - t2127 * t2201;
	t2203 = pkin(4) * t2127;
	t1926 = t1940 * t2203 + t1943 * t2025;
	t2245 = 0.1e1 / t1942 ^ 2;
	t2155 = pkin(4) * pkin(5) * t2245;
	t2129 = t2019 * t2155;
	t2112 = t2012 * t2129;
	t2011 = sin(pkin(21));
	t2113 = t2011 * t2129;
	t2236 = t1925 * t2113 + t1926 * t2112;
	t2243 = t2011 / 0.2e1;
	t1882 = -t2236 * t1928 + t2012 * t2043 + t2045 * t2243;
	t2237 = -t1925 * t2112 + t1926 * t2113;
	t2242 = -t2012 / 0.2e1;
	t1883 = -t2237 * t1928 + t2011 * t2043 + t2045 * t2242;
	t2138 = t2012 * t2174;
	t2140 = t2011 * t2174;
	t1918 = (t1925 * t2140 + t1926 * t2138) * t2019;
	t2139 = t2221 * t2242;
	t1919 = (t1925 * t2139 + t1926 * t2140) * t2019;
	t2017 = cos(qJ(1));
	t2212 = sin(qJ(1));
	t2124 = t2214 * t2212;
	t2053 = t2211 * qJD(1) * t2017 - t2240 * t2124;
	t2120 = t2017 * t2150;
	t2123 = t2212 * t2211;
	t2235 = t2240 * t2123;
	t1966 = -qJD(1) * t2120 + t2053 * t2014 - t2235 * t2016;
	t2151 = t2214 * t2014;
	t2121 = t2017 * t2151;
	t1967 = qJD(1) * t2121 + t2235 * t2014 + t2053 * t2016;
	t1980 = t2014 * t2123 - t2016 * t2124;
	t1981 = t2014 * t2124 + t2016 * t2123;
	t1864 = t1882 * t1981 + t1883 * t1980 + t1918 * t1967 + t1919 * t1966;
	t1895 = t1918 * t1981 + t1919 * t1980;
	t2013 = sin(qJ(4));
	t2015 = cos(qJ(4));
	t2149 = t2212 * t2015;
	t2185 = t2013 * t2017;
	t2252 = (t1895 * t2015 + t2185) * qJD(4) + qJD(1) * t2149 + t1864 * t2013;
	t2175 = t2019 * t2221;
	t2180 = t2015 * t2017;
	t2246 = t1864 * t2015 + qJD(4) * t2180 + (-qJD(1) * t2212 - qJD(4) * t1895) * t2013;
	t2244 = t1943 / 0.2e1;
	t2241 = -t2203 / 0.2e1;
	t2220 = t1933 / t2195;
	t2239 = t2127 * t2220 * t2080 / 0.4e1 + t2051 * t2210;
	t2238 = t2159 * t2247 - t2062;
	t2233 = -pkin(4) * t1928 * t2210 - t2220 * t2073 / 0.4e1;
	t2147 = t2211 * t2016;
	t1964 = t1980 * qJD(1) - t2240 * (-t2017 * t2147 - t2121);
	t1965 = t1981 * qJD(1) - t2017 * t1971;
	t1982 = -t2017 * t2148 + t2120;
	t1988 = -t2147 - t2151;
	t1983 = t1988 * t2017;
	t2230 = t1982 * t1882 - t1983 * t1883 + t1964 * t1918 - t1965 * t1919;
	t2042 = t2046 * t2155;
	t2044 = t2047 * t2155;
	t2196 = t1928 * t2022;
	t2146 = t2021 * t2196;
	t2106 = t2245 * t2146 * t2175;
	t2089 = t2012 * t2106;
	t2229 = 0.4e1 * t1925 * t2089 + t2011 * t2042 - t2012 * t2044;
	t2228 = -0.4e1 * t1926 * t2089 + t2011 * t2044 + t2012 * t2042;
	t2116 = t1980 * t1882 - t1981 * t1883 + t1966 * t1918 - t1967 * t1919;
	t2207 = -t2016 / 0.2e1;
	t2206 = pkin(1) * t2020;
	t2202 = pkin(4) * t2023;
	t2198 = qJD(4) * t2013;
	t2197 = qJD(4) * t2015;
	t1963 = t1991 * t2098;
	t2117 = t1963 * t2209 - t1975;
	t1951 = (t1989 * t2026 + (t2117 + t2157) * t1991) * pkin(7);
	t2182 = t2014 * t1951;
	t1952 = t1963 * t2141 - 0.2e1 * t1991 ^ 2 * t2206 + (-t1975 * t1989 - t2186) * pkin(7);
	t2181 = t2014 * t1952;
	t2177 = t2016 * t1951;
	t2176 = t2016 * t1952;
	t2084 = t2182 / 0.2e1 + t2176 / 0.2e1;
	t2130 = t1991 * t2156;
	t1936 = (-t2084 * t1976 - t2099 * t2130) * t2023;
	t2081 = -t2177 / 0.2e1 + t2181 / 0.2e1;
	t1937 = (t2081 * t1976 + t2100 * t2130) * t2023;
	t1930 = t1936 * t2009 + t1937 * t2008;
	t2097 = pkin(4) * t2111;
	t1922 = t1930 * t2097;
	t1931 = -t1936 * t2008 + t1937 * t2009;
	t2142 = t2127 * t2210;
	t1893 = (t1922 * t2142 + t2132 * t1930 - t1931 * t2025) * pkin(4);
	t2143 = t1933 * t2244;
	t1894 = t1922 * t2143 + t1930 * t2134 + (-t1930 * t2025 + t1931 * t1940) * pkin(4);
	t2074 = 0.4e1 * t2099;
	t2075 = 0.4e1 * t2100;
	t2118 = t2024 * t2144;
	t1959 = -t1986 * t2098 - 0.8e1 * t2118;
	t2145 = t1969 / t2190 * t1963 * t1962;
	t1934 = t1956 + (t2145 / 0.4e1 + t1959 * t2208) * t1984 + (0.4e1 * t1986 * t1991 + 0.2e1 * t1987 * t1989) * t2206 + (t2117 * t1987 + t2188) * pkin(7);
	t1935 = 0.4e1 * t2126 + (t2187 - t1991 * t2145 / 0.4e1 - t2133 * t1986 + (t1989 * t1962 / 0.2e1 + t1986 * t1963 / 0.2e1 - t1991 * t1959 / 0.2e1) * t1969) * pkin(7);
	t2083 = t1935 * t2207 + t2014 * t1934 / 0.2e1;
	t2086 = -t2014 * t1935 / 0.2e1 + t1934 * t2207;
	t2101 = -t2176 - t2182;
	t2102 = -t2177 + t2181;
	t2103 = -t2178 - t2184;
	t2104 = -t2179 + t2183;
	t2105 = t1976 * t1977 * t2118;
	t1899 = ((t2008 * t2075 - t2009 * t2074) * t2105 + (t2009 * t2086 + t2008 * t2083 + (t2008 * t2084 + t2009 * t2081) * qJD(3)) * t1976 + ((t2008 * t2102 + t2009 * t2101) * t1987 + t2054 * t1986 + (qJD(3) * t2227 + t2008 * t2104 + t2009 * t2103) * t1991) * t2156) * t2023;
	t2037 = ((t2008 * t2074 + t2009 * t2075) * t2105 + (t2009 * t2083 - t2008 * t2086 + (-t2008 * t2081 + t2009 * t2084) * qJD(3)) * t1976 + ((-t2008 * t2101 + t2009 * t2102) * t1987 - t2227 * t1986 + (t2054 * qJD(3) - t2008 * t2103 + t2009 * t2104) * t1991) * t2156) * t2202;
	t2128 = 0.8e1 * t2146;
	t2059 = t1933 * (t1899 * t2097 + t1930 * t2128);
	t2154 = pkin(5) * t2196;
	t2136 = 0.2e1 * t2154;
	t2137 = t2019 * t2174;
	t2033 = (t2232 * t1899 + t2233 * t1922 + t2238 * t1930 + t1931 * t2136 + t1940 * t2037 + t2059 * t2244) * t2137;
	t2135 = -0.4e1 * t2154;
	t2034 = (t2231 * t1899 + t2239 * t1922 + t1930 * t2135 - t1931 * t2062 - t2025 * t2037 + t2059 * t2241) * t2175;
	t2077 = -0.4e1 * t2011 * t2106;
	t2066 = t1930 * t2077;
	t2095 = t1928 * t2112;
	t2096 = t1928 * t2113;
	t1857 = -t1893 * t2096 - t1894 * t2095 + t2236 * t1899 + t1925 * t2066 + t2228 * t1930 + t2012 * t2033 + t2034 * t2243;
	t2173 = t1857 + t1883;
	t1858 = t1893 * t2095 - t1894 * t2096 + t2237 * t1899 + t1926 * t2066 + t2229 * t1930 + t2011 * t2033 + t2034 * t2242;
	t2172 = t1858 - t1882;
	t1929 = t2127 * t2097;
	t1902 = (t1929 * t2142 - t1945 * t2025 + t2127 * t2132) * pkin(4);
	t1903 = t1929 * t2143 + t2127 * t2134 + (t1940 * t1945 - t2025 * t2127) * pkin(4);
	t2050 = t2251 * t2202;
	t2058 = t1933 * (t2097 * t2247 + t2127 * t2128);
	t2035 = (t2233 * t1929 + t1940 * t2050 + t1945 * t2136 + t2058 * t2244 + t2238 * t2127 + t2232 * t2247) * t2137;
	t2036 = (t2239 * t1929 - t1945 * t2062 - t2025 * t2050 + t2058 * t2241 + t2127 * t2135 + t2231 * t2247) * t2175;
	t2065 = t2127 * t2077;
	t1859 = -t1902 * t2096 - t1903 * t2095 + t1925 * t2065 + t2012 * t2035 + t2036 * t2243 + t2228 * t2127 + t2236 * t2247;
	t2171 = t1859 + t1883;
	t1860 = t1902 * t2095 - t1903 * t2096 + t1926 * t2065 + t2011 * t2035 + t2036 * t2242 + t2229 * t2127 + t2237 * t2247;
	t2170 = t1860 - t1882;
	t2063 = (t1925 * t2011 + t1926 * t2012) * t2155;
	t1885 = (t1893 * t2140 + t1894 * t2138 + t1930 * t2063) * t2019;
	t2168 = t1885 + t1919;
	t2064 = (-t1925 * t2012 + t1926 * t2011) * t2155;
	t1886 = (t1893 * t2139 + t1894 * t2140 + t1930 * t2064) * t2019;
	t2167 = t1886 - t1918;
	t1887 = (t1902 * t2140 + t1903 * t2138 + t2063 * t2127) * t2019;
	t2166 = t1887 + t1919;
	t1888 = (t1902 * t2139 + t1903 * t2140 + t2064 * t2127) * t2019;
	t2165 = t1888 - t1918;
	t2164 = t1980 * t1918 - t1981 * t1919;
	t2163 = -t1982 * t1918 + t1983 * t1919;
	t2162 = t1988 * t1918 - t1919 * t2076;
	t1972 = t2240 * t1988;
	t2114 = t1988 * t1882 - t1883 * t2076 - t1971 * t1918 - t1972 * t1919;
	t1898 = -t1918 * t2076 - t1919 * t1988;
	t1897 = t1918 * t1983 + t1919 * t1982;
	t1874 = -t1887 * t2076 - t1888 * t1988 + t2162;
	t1873 = t1887 * t1983 + t1888 * t1982 + t2163;
	t1872 = -t1887 * t1981 - t1888 * t1980 + t2164;
	t1870 = -t1885 * t2076 - t1886 * t1988 + t2162;
	t1869 = t1885 * t1983 + t1886 * t1982 + t2163;
	t1868 = -t1885 * t1981 - t1886 * t1980 + t2164;
	t1866 = -t1882 * t2076 - t1883 * t1988 - t1918 * t1972 + t1919 * t1971;
	t1863 = t1882 * t1983 + t1883 * t1982 + t1918 * t1965 + t1919 * t1964;
	t1862 = qJD(1) * t2185 + t1863 * t2015 + (-t1897 * t2013 + t2149) * qJD(4);
	t1861 = qJD(1) * t2180 - t1863 * t2013 + (-t1897 * t2015 - t2212 * t2013) * qJD(4);
	t1856 = -t1859 * t2076 - t1860 * t1988 - t1887 * t1972 + t1888 * t1971 + t2114;
	t1855 = -t1859 * t1981 - t1860 * t1980 - t1887 * t1967 - t1888 * t1966 + t2116;
	t1854 = t1859 * t1983 + t1860 * t1982 + t1887 * t1965 + t1888 * t1964 - t2230;
	t1853 = -t1857 * t2076 - t1858 * t1988 - t1885 * t1972 + t1886 * t1971 + t2114;
	t1852 = -t1857 * t1981 - t1858 * t1980 - t1885 * t1967 - t1886 * t1966 + t2116;
	t1851 = t1857 * t1983 + t1858 * t1982 + t1885 * t1965 + t1886 * t1964 - t2230;
	t1 = [t2246, t1851 * t2015 - t1869 * t2198, t1854 * t2015 - t1873 * t2198, t1861; t1862, t1852 * t2015 - t1868 * t2198, t1855 * t2015 - t1872 * t2198, t2252; 0, t1853 * t2015 - t1870 * t2198, t1856 * t2015 - t1874 * t2198, -t1866 * t2013 - t1898 * t2197; -t2252, -t1851 * t2013 - t1869 * t2197, -t1854 * t2013 - t1873 * t2197, -t1862; t1861, -t1852 * t2013 - t1868 * t2197, -t1855 * t2013 - t1872 * t2197, t2246; 0, -t1853 * t2013 - t1870 * t2197, -t1856 * t2013 - t1874 * t2197, -t1866 * t2015 + t1898 * t2198; t2116, t2168 * t1964 - t2167 * t1965 + t2173 * t1982 - t2172 * t1983, t2166 * t1964 - t2165 * t1965 + t2171 * t1982 - t2170 * t1983, 0; t2230, -t2168 * t1966 + t2167 * t1967 - t2173 * t1980 + t2172 * t1981, -t2166 * t1966 + t2165 * t1967 - t2171 * t1980 + t2170 * t1981, 0; 0, t2168 * t1971 + t2167 * t1972 - t2173 * t1988 + t2076 * t2172, t2166 * t1971 + t2165 * t1972 - t2171 * t1988 + t2076 * t2170, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:04
	% EndTime: 2020-04-13 14:18:05
	% DurationCPUTime: 0.83s
	% Computational Cost: add. (6287->76), mult. (10430->152), div. (200->5), fcn. (6422->10), ass. (0->87)
	t429 = pkin(7) ^ 2;
	t430 = pkin(1) ^ 2;
	t421 = sin(qJ(2));
	t425 = cos(pkin(19));
	t478 = sin(pkin(19));
	t479 = cos(qJ(2));
	t440 = -t421 * t425 + t479 * t478;
	t477 = pkin(1) * t440;
	t493 = 2 * pkin(7);
	t464 = t477 * t493 + t430;
	t413 = t429 + t464;
	t411 = 0.1e1 / t413 ^ 2;
	t416 = t440 * qJD(2);
	t419 = t421 * t478 + t479 * t425;
	t417 = t419 * qJD(2);
	t459 = t430 * t419 * t417;
	t453 = t429 * t459;
	t428 = 0.1e1 / pkin(8);
	t485 = pkin(1) * pkin(7);
	t460 = t411 * t485;
	t457 = t428 * t460;
	t410 = 0.1e1 / t413;
	t471 = t410 * t428;
	t495 = 0.4e1 * t411 * t453 * t471 + t416 * t457;
	t484 = (-pkin(8) - pkin(3));
	t407 = ((pkin(7) - t484) * (pkin(7) + t484)) + t464;
	t483 = (-pkin(8) + pkin(3));
	t408 = ((pkin(7) - t483) * (pkin(7) + t483)) + t464;
	t454 = (t407 + t408) * t485;
	t402 = t417 * t454;
	t472 = t408 * t407;
	t431 = sqrt(-t472);
	t405 = 0.1e1 / t431;
	t492 = t402 * t405;
	t403 = t419 * t454;
	t491 = t405 * t403;
	t426 = cos(pkin(18));
	t490 = t495 * t426;
	t423 = sin(pkin(18));
	t489 = t495 * t423;
	t409 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t413;
	t455 = pkin(7) * t459;
	t469 = t417 * t431;
	t414 = -pkin(7) - t477;
	t473 = t405 * t414;
	t391 = -t402 * t473 - 0.2e1 * t455 + (t416 * t409 - t469) * pkin(1);
	t468 = t419 * t431;
	t475 = pkin(7) * t430;
	t393 = -t403 * t473 - 0.2e1 * t419 ^ 2 * t475 + (t409 * t440 - t468) * pkin(1);
	t450 = t419 * t457;
	t451 = t417 * t457;
	t488 = t391 * t450 + t393 * t451;
	t476 = pkin(1) * t419;
	t398 = t476 * t492;
	t461 = t414 * t493;
	t458 = -t409 + t461;
	t470 = t416 * t431;
	t390 = -t398 + (t458 * t417 - t470) * pkin(1);
	t456 = -t409 - t491;
	t392 = (-t440 * t431 + (t456 + t461) * t419) * pkin(1);
	t486 = -t405 * (t416 * t454 - 0.4e1 * t453) - 0.1e1 / t472 * t402 * t491;
	t487 = (0.4e1 * t455 + (-t440 * t492 + t469 + t486 * t419 + (t458 - t491) * t416) * pkin(1)) * t471 / 0.2e1 + t392 * t451 + t390 * t450;
	t482 = -t423 / 0.2e1;
	t481 = -t426 / 0.2e1;
	t480 = t426 / 0.2e1;
	t400 = -pkin(1) * t468 - t409 * t414;
	t474 = t400 * t423;
	t401 = t409 * t476 - t414 * t431;
	t467 = t423 * t401;
	t466 = t426 * t400;
	t465 = t426 * t401;
	t422 = sin(qJ(1));
	t463 = qJD(1) * t422;
	t424 = cos(qJ(1));
	t462 = qJD(1) * t424;
	t438 = (t466 - t467) * t460;
	t437 = (-t465 - t474) * t460;
	t436 = (-t398 + t486 * t414 + (-0.4e1 * t416 * t419 - 0.2e1 * t417 * t440) * t475 + (t456 * t417 - t470) * pkin(1)) * t471;
	t395 = (-t465 / 0.2e1 - t474 / 0.2e1) * t471;
	t394 = (t466 / 0.2e1 - t467 / 0.2e1) * t471;
	t389 = ((t392 * t482 + t393 * t481) * t410 + t419 * t437) * t428;
	t388 = ((t392 * t480 + t393 * t482) * t410 + t419 * t438) * t428;
	t385 = ((t390 * t482 + t391 * t481) * t410 + t417 * t437) * t428;
	t384 = ((t390 * t480 + t391 * t482) * t410 + t417 * t438) * t428;
	t383 = t490 * t400 - t489 * t401 - t488 * t423 + t487 * t426 + t436 * t482;
	t382 = t489 * t400 + t490 * t401 + t487 * t423 + t488 * t426 + t436 * t480;
	t1 = [-t384 * t422 - t394 * t462, t383 * t424 - t388 * t463, 0, 0; t384 * t424 - t394 * t463, t383 * t422 + t388 * t462, 0, 0; 0, t382, 0, 0; -t385 * t422 - t395 * t462, -t382 * t424 - t389 * t463, 0, 0; t385 * t424 - t395 * t463, -t382 * t422 + t389 * t462, 0, 0; 0, t383, 0, 0; -t463, 0, 0, 0; t462, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:07
	% EndTime: 2020-04-13 14:18:10
	% DurationCPUTime: 2.40s
	% Computational Cost: add. (18651->111), mult. (30650->195), div. (704->5), fcn. (19042->10), ass. (0->114)
	t479 = sin(qJ(2));
	t482 = cos(qJ(2));
	t481 = sin(pkin(19));
	t484 = cos(pkin(19));
	t478 = t479 * t481 + t482 * t484;
	t477 = t478 * qJD(2);
	t486 = pkin(3) ^ 2;
	t540 = t479 * t484 - t482 * t481;
	t539 = pkin(7) * t540;
	t535 = (-0.2e1 * t539 + pkin(1)) * pkin(1);
	t580 = pkin(1) * pkin(7);
	t528 = ((pkin(7) + pkin(8)) * (pkin(7) - pkin(8)) + t535) * t580;
	t573 = t477 * pkin(7);
	t554 = pkin(1) * t573;
	t524 = t477 * t528 - t486 * t554;
	t579 = -pkin(8) - pkin(3);
	t529 = (pkin(7) - t579) * (pkin(7) + t579) + t535;
	t578 = -pkin(8) + pkin(3);
	t530 = (pkin(7) - t578) * (pkin(7) + t578) + t535;
	t507 = t530 * t529;
	t485 = sqrt(-t507);
	t582 = 0.1e1 / t485;
	t553 = 0.2e1 * t582;
	t522 = t524 * t553;
	t476 = t540 * qJD(2);
	t584 = pkin(7) ^ 2;
	t475 = t535 + t584;
	t533 = -pkin(8) ^ 2 + t475 + t486;
	t532 = pkin(7) * t533;
	t526 = -t476 * t532 - t485 * t573;
	t537 = -t539 + pkin(1);
	t572 = t477 * t584;
	t551 = t478 * t572;
	t547 = pkin(1) * t551;
	t585 = 0.1e1 / pkin(3);
	t503 = t585 * (t537 * t522 + t526 - 0.2e1 * t547);
	t583 = 0.1e1 / t475;
	t599 = t583 / 0.2e1;
	t500 = t503 * t599;
	t520 = pkin(7) * t522;
	t574 = t476 * pkin(7);
	t505 = -t477 * t532 - t478 * t520 + t485 * t574;
	t534 = -0.2e1 * t537 * t580;
	t502 = t585 * (t477 * t534 + t505);
	t501 = t583 * t502;
	t570 = cos(pkin(23));
	t575 = pkin(7) * t485;
	t552 = t478 * t575;
	t518 = t585 * (t537 * t533 - t552);
	t474 = 0.1e1 / t475 ^ 2;
	t596 = t474 * t580;
	t514 = t518 * t596;
	t531 = t478 * t532;
	t519 = t585 * (t537 * t485 + t531);
	t515 = t519 * t596;
	t569 = sin(pkin(23));
	t589 = t569 * t514 + t570 * t515;
	t601 = t569 / 0.2e1;
	t455 = t589 * t477 + t570 * t500 + t501 * t601;
	t571 = t478 * pkin(1);
	t556 = pkin(7) * t571;
	t525 = t478 * t528 - t486 * t556;
	t523 = t525 * t553;
	t521 = pkin(7) * t523;
	t588 = -t521 + t534;
	t496 = t585 * (t588 * t478 + t540 * t575 - t531);
	t546 = pkin(1) ^ 2 * t551;
	t591 = (0.4e1 / t507 * t525 * t524 - 0.4e1 * t546 - (t529 + t530) * pkin(1) * t574) * t582;
	t597 = t474 * t556;
	t598 = t474 * t554;
	t605 = t585 * t599;
	t606 = 0.4e1 * t546 * t583 * t474;
	t586 = (-t591 * pkin(7) * t478 - t588 * t476 + t540 * t520 - t526 + 0.4e1 * t547) * t605 + t496 * t598 + t502 * t597 + t518 * t606;
	t498 = t585 * (-0.2e1 * t584 * t478 ^ 2 * pkin(1) + t537 * t523 - t540 * t532 - t552);
	t587 = (0.2e1 * t540 * pkin(1) * t572 + 0.4e1 * t584 * t476 * t571 - t477 * t521 + t591 * t537 + t505) * t605 + t498 * t598 + t503 * t597 + t519 * t606;
	t590 = -t570 * t514 + t569 * t515;
	t562 = -t590 * t476 + t587 * t569 - t586 * t570 - t455;
	t545 = t562 * t482;
	t451 = -t589 * t476 + t586 * t569 + t587 * t570;
	t600 = -t570 / 0.2e1;
	t454 = t590 * t477 + t569 * t500 + t501 * t600;
	t563 = t451 + t454;
	t516 = t519 * t599;
	t517 = t583 * t518;
	t469 = t570 * t516 + t517 * t601;
	t494 = t583 * t496;
	t495 = t498 * t599;
	t561 = t590 * t478 + t494 * t600 + t569 * t495 - t469;
	t543 = t561 * t479;
	t459 = t589 * t478 + t494 * t601 + t570 * t495;
	t468 = t569 * t516 + t517 * t600;
	t560 = t459 + t468;
	t604 = t560 * t482 + t543;
	t607 = t604 * qJD(2) + t563 * t479 - t545;
	t544 = t561 * t482;
	t603 = -t560 * t479 + t544;
	t568 = t455 * t479;
	t567 = t468 * t479;
	t566 = t469 * t479;
	t480 = sin(qJ(1));
	t565 = t479 * t480;
	t564 = t480 * t482;
	t549 = t468 * t564;
	t483 = cos(qJ(1));
	t550 = t483 * t567;
	t559 = qJD(1) * t549 + qJD(2) * t550;
	t558 = qJD(1) * t480;
	t557 = qJD(1) * t483;
	t548 = qJD(1) * t550 + qJD(2) * t549 + t454 * t565;
	t542 = t468 * t482 - t566;
	t541 = t469 * t482 + t567;
	t538 = t459 * t482 + t543;
	t527 = -t603 * qJD(2) - t562 * t479 - t563 * t482;
	t1 = [t455 * t564 + (-qJD(2) * t565 + t482 * t557) * t469 + t548, t538 * t558 + ((qJD(2) * t459 - t562) * t479 + (-t561 * qJD(2) - t563) * t482) * t483 + t559, 0, 0; t541 * t558 + (-t542 * qJD(2) - t454 * t479 - t455 * t482) * t483, t527 * t480 - t557 * t604, 0, 0; 0, -t607, 0, 0; t542 * t557 + (-t541 * qJD(2) + t454 * t482 - t568) * t480, t607 * t483 + t603 * t558, 0, 0; -t558 * t566 + (t568 + (qJD(2) * t469 - t454) * t482) * t483 + t559, (t459 * t479 - t544) * t557 + (t538 * qJD(2) + t451 * t479 - t545) * t480 + t548, 0, 0; 0, t527, 0, 0; -t558, 0, 0, 0; t557, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiRD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:04
	% EndTime: 2020-04-13 14:18:06
	% DurationCPUTime: 1.21s
	% Computational Cost: add. (9315->92), mult. (15430->178), div. (352->5), fcn. (9578->10), ass. (0->102)
	t416 = cos(pkin(20));
	t419 = cos(qJ(3));
	t484 = sin(pkin(20));
	t488 = sin(qJ(3));
	t414 = -t419 * t416 + t488 * t484;
	t485 = pkin(6) * t414;
	t412 = t414 * qJD(3);
	t423 = pkin(6) ^ 2;
	t413 = t488 * t416 + t419 * t484;
	t486 = pkin(6) * t413;
	t493 = 2 * pkin(1);
	t464 = t486 * t493 + t423;
	t491 = (-pkin(2) - pkin(13));
	t402 = ((pkin(1) - t491) * (pkin(1) + t491)) + t464;
	t490 = (-pkin(2) + pkin(13));
	t403 = ((pkin(1) - t490) * (pkin(1) + t490)) + t464;
	t492 = pkin(1) * pkin(6);
	t455 = (t402 + t403) * t492;
	t397 = t412 * t455;
	t478 = t403 * t402;
	t426 = sqrt(-t478);
	t400 = 0.1e1 / t426;
	t503 = t397 * t400;
	t393 = t485 * t503;
	t409 = -pkin(1) - t486;
	t411 = t413 * qJD(3);
	t425 = pkin(1) ^ 2;
	t408 = t425 + t464;
	t404 = pkin(2) ^ 2 - pkin(13) ^ 2 + t408;
	t398 = t414 * t455;
	t502 = t400 * t398;
	t457 = t404 + t502;
	t477 = t411 * t426;
	t487 = pkin(1) * t423;
	t501 = t412 * t423;
	t459 = t414 * t501;
	t508 = 4 * t425;
	t504 = t459 * t508;
	t497 = -t400 * (t411 * t455 - t504) - 0.1e1 / t478 * t397 * t502;
	t387 = -t393 + t497 * t409 + (-0.4e1 * t411 * t414 - 0.2e1 * t412 * t413) * t487 + (-t457 * t412 - t477) * pkin(6);
	t456 = pkin(1) * t459;
	t461 = t409 * t493;
	t458 = -t404 + t461;
	t476 = t412 * t426;
	t388 = 0.4e1 * t456 + (-t413 * t503 + t476 + t497 * t414 + (t458 - t502) * t411) * pkin(6);
	t405 = 0.1e1 / t408;
	t417 = sin(qJ(2));
	t475 = t414 * t426;
	t479 = t400 * t409;
	t392 = -t398 * t479 - 0.2e1 * t414 ^ 2 * t487 + (t404 * t413 - t475) * pkin(6);
	t420 = cos(qJ(2));
	t467 = t420 * t392;
	t391 = (-t413 * t426 + (-t457 + t461) * t414) * pkin(6);
	t472 = t417 * t391;
	t443 = t472 / 0.2e1 + t467 / 0.2e1;
	t396 = t404 * t485 - t409 * t426;
	t480 = t396 * t420;
	t395 = -pkin(6) * t475 - t404 * t409;
	t481 = t395 * t417;
	t448 = t480 + t481;
	t466 = t420 * t395;
	t471 = t417 * t396;
	t449 = t466 - t471;
	t406 = 0.1e1 / t408 ^ 2;
	t460 = t406 * t492;
	t389 = -t393 + (t458 * t412 - t477) * pkin(6);
	t469 = t420 * t389;
	t390 = -t397 * t479 - 0.2e1 * t456 + (t411 * t404 - t476) * pkin(6);
	t473 = t417 * t390;
	t482 = t392 * t417;
	t483 = t391 * t420;
	t489 = -t420 / 0.2e1;
	t509 = ((t448 * qJD(2) - t469 + t473) * t414 - t449 * t411 - (-t482 + t483) * t412) * t460 + (t443 * qJD(2) + t417 * t387 / 0.2e1 + t388 * t489) * t405;
	t498 = t448 * t460;
	t434 = t412 * t498;
	t505 = t443 * t405 + t414 * t498;
	t447 = t482 / 0.2e1 - t483 / 0.2e1;
	t499 = t447 * t405;
	t442 = t471 / 0.2e1 - t466 / 0.2e1;
	t468 = t420 * t390;
	t474 = t417 * t389;
	t432 = t442 * qJD(2) - t474 / 0.2e1 - t468 / 0.2e1;
	t418 = sin(qJ(1));
	t463 = qJD(1) * t418;
	t421 = cos(qJ(1));
	t462 = qJD(1) * t421;
	t446 = t480 / 0.2e1 + t481 / 0.2e1;
	t407 = t405 * t406;
	t441 = t407 * t504;
	t440 = t449 * t414;
	t439 = qJD(1) * t446;
	t438 = t449 * t460;
	t435 = t412 * t438;
	t433 = t473 / 0.2e1 - t469 / 0.2e1 + t446 * qJD(2);
	t431 = -t449 * t441 + t509;
	t430 = -t448 * t441 + (t387 * t489 - t417 * t388 / 0.2e1 + t447 * qJD(2)) * t405 + (-(t467 + t472) * t412 - t448 * t411 + (-t449 * qJD(2) - t468 - t474) * t414) * t460;
	t424 = 0.1e1 / pkin(2);
	t386 = (-t418 * t435 + (t433 * t418 + t442 * t462) * t405) * t424;
	t385 = (t418 * t434 + (-t432 * t418 + t421 * t439) * t405) * t424;
	t384 = (-t421 * t435 + (t433 * t421 - t442 * t463) * t405) * t424;
	t383 = (-t421 * t434 + (t418 * t439 + t432 * t421) * t405) * t424;
	t1 = [t385, t384, (t430 * t421 + t505 * t463) * t424, 0; t383, t386, (t430 * t418 - t505 * t462) * t424, 0; 0, (t432 * t405 - t434) * t424, (t407 * t440 * t501 * t508 - t509) * t424, 0; -t386, -t383, ((t414 * t438 - t499) * t463 + t431 * t421) * t424, 0; t384, t385, ((-t440 * t460 + t499) * t462 + t431 * t418) * t424, 0; 0, (t433 * t405 - t435) * t424, t430 * t424, 0; -t463, 0, 0, 0; t462, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobiRD_rot_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:09
	% EndTime: 2020-04-13 14:18:13
	% DurationCPUTime: 3.20s
	% Computational Cost: add. (27949->165), mult. (45718->330), div. (1316->6), fcn. (28362->10), ass. (0->159)
	t675 = cos(pkin(20));
	t678 = cos(qJ(3));
	t770 = sin(pkin(20));
	t774 = sin(qJ(3));
	t673 = -t678 * t675 + t774 * t770;
	t671 = t673 * qJD(3);
	t787 = pkin(1) * pkin(6);
	t741 = t671 * t787;
	t672 = t774 * t675 + t678 * t770;
	t773 = pkin(6) * t672;
	t740 = pkin(1) * t773;
	t669 = 0.2e1 * t740;
	t684 = pkin(6) ^ 2;
	t747 = t669 + t684;
	t786 = -pkin(2) - pkin(13);
	t660 = (pkin(1) - t786) * (pkin(1) + t786) + t747;
	t785 = -pkin(2) + pkin(13);
	t661 = (pkin(1) - t785) * (pkin(1) + t785) + t747;
	t748 = t660 + t661;
	t655 = t748 * t741;
	t767 = t661 * t660;
	t688 = sqrt(-t767);
	t658 = 0.1e1 / t688;
	t769 = t655 * t658;
	t772 = pkin(6) * t673;
	t625 = t769 * t772;
	t670 = t672 * qJD(3);
	t731 = t748 * t787;
	t798 = t671 * t684;
	t739 = t673 * t798;
	t687 = pkin(1) ^ 2;
	t806 = 0.4e1 * t687;
	t800 = t739 * t806;
	t652 = t670 * t731 - t800;
	t668 = -pkin(1) - t773;
	t656 = t673 * t731;
	t799 = t658 * t656;
	t730 = 0.4e1 / t767 * t655 * t799;
	t724 = -t730 / 0.4e1;
	t685 = pkin(2) ^ 2;
	t746 = t684 + t687;
	t738 = -pkin(13) ^ 2 + t746;
	t663 = t669 + t685 + t738;
	t733 = t663 + t799;
	t765 = t670 * t688;
	t771 = t684 * pkin(1);
	t599 = -t625 + (-t658 * t652 + t724) * t668 + (-0.4e1 * t670 * t673 - 0.2e1 * t671 * t672) * t771 + (-t733 * t671 - t765) * pkin(6);
	t732 = pkin(1) * t739;
	t743 = 0.2e1 * t668 * pkin(1);
	t735 = -t663 + t743;
	t764 = t671 * t688;
	t788 = 0.2e1 * t658;
	t600 = 0.4e1 * t732 + (t764 + t673 * t724 + t735 * t670 + (-t672 * t655 / 0.2e1 - t670 * t656 / 0.2e1 - t673 * t652 / 0.2e1) * t788) * pkin(6);
	t667 = t669 + t746;
	t664 = 0.1e1 / t667;
	t763 = t673 * t688;
	t768 = t658 * t668;
	t618 = -t656 * t768 - 0.2e1 * t673 ^ 2 * t771 + (t672 * t663 - t763) * pkin(6);
	t679 = cos(qJ(2));
	t752 = t679 * t618;
	t617 = (-t672 * t688 + (-t733 + t743) * t673) * pkin(6);
	t676 = sin(qJ(2));
	t760 = t676 * t617;
	t711 = -t752 / 0.2e1 - t760 / 0.2e1;
	t654 = t663 * t772 - t668 * t688;
	t750 = t679 * t654;
	t653 = -pkin(6) * t763 - t668 * t663;
	t758 = t676 * t653;
	t719 = t750 + t758;
	t751 = t679 * t653;
	t757 = t676 * t654;
	t720 = t751 - t757;
	t665 = 0.1e1 / t667 ^ 2;
	t742 = t665 * t787;
	t753 = t679 * t617;
	t615 = -t625 + (t735 * t671 - t765) * pkin(6);
	t755 = t679 * t615;
	t759 = t676 * t618;
	t616 = -t655 * t768 - 0.2e1 * t732 + (t670 * t663 - t764) * pkin(6);
	t761 = t676 * t616;
	t777 = -t679 / 0.2e1;
	t805 = -t676 / 0.2e1;
	t807 = ((t719 * qJD(2) - t755 + t761) * t673 - t720 * t670 - (t753 - t759) * t671) * t742 - (t711 * qJD(2) + t599 * t805 - t600 * t777) * t664;
	t793 = t719 * t742;
	t804 = t671 * t793;
	t801 = -t711 * t664 + t673 * t793;
	t677 = sin(qJ(1));
	t680 = cos(qJ(1));
	t686 = 0.1e1 / pkin(2);
	t713 = t757 / 0.2e1 - t751 / 0.2e1;
	t754 = t679 * t616;
	t762 = t676 * t615;
	t700 = t713 * qJD(2) - t762 / 0.2e1 - t754 / 0.2e1;
	t710 = -t750 / 0.2e1 - t758 / 0.2e1;
	t707 = qJD(1) * t710;
	t595 = (t677 * t804 + (-t700 * t677 - t680 * t707) * t664) * t686;
	t734 = t665 * t741;
	t726 = t679 * t734;
	t717 = t686 * t726;
	t727 = t676 * t734;
	t744 = qJD(1) * t680;
	t792 = t710 * qJD(2) - t761 / 0.2e1 + t755 / 0.2e1;
	t596 = -t677 * t653 * t717 + (t677 * t654 * t727 + (-t677 * t792 + t713 * t744) * t664) * t686;
	t766 = t664 * t686;
	t624 = t710 * t766;
	t619 = t677 * t624;
	t623 = t713 * t766;
	t620 = t677 * t623;
	t737 = -t769 / 0.2e1;
	t749 = 0.1e1 / pkin(13) * t686;
	t776 = -t688 / 0.2e1;
	t662 = t685 - t738 - 0.2e1 * t740;
	t779 = -t662 / 0.2e1;
	t797 = (t595 * t776 + t596 * t779 - t619 * t737 - t620 * t741) * t749;
	t718 = t686 * t727;
	t593 = -t677 * t707 * t766 + (-t653 * t718 - t654 * t717 + t700 * t766) * t680;
	t706 = t720 * t742;
	t745 = qJD(1) * t677;
	t594 = (-t680 * t671 * t706 + (-t680 * t792 - t713 * t745) * t664) * t686;
	t621 = t680 * t624;
	t622 = t680 * t623;
	t736 = t769 / 0.2e1;
	t775 = t688 / 0.2e1;
	t778 = t662 / 0.2e1;
	t796 = (t593 * t778 + t594 * t775 + t621 * t741 + t622 * t736) * t749;
	t712 = t753 / 0.2e1 - t759 / 0.2e1;
	t794 = t712 * t664;
	t784 = -t652 / 0.4e1;
	t783 = -t655 / 0.4e1;
	t782 = t655 / 0.4e1;
	t781 = -t656 / 0.4e1;
	t780 = t656 / 0.4e1;
	t728 = t749 * t779;
	t723 = -t730 / 0.8e1;
	t666 = t664 * t665;
	t709 = t666 * t800;
	t708 = t720 * t673;
	t699 = t594 * t728 + (t593 * t775 + t621 * t736 - t622 * t741) * t749;
	t698 = t595 * t728 + (t596 * t775 + t619 * t741 + t620 * t736) * t749;
	t697 = -t708 * t742 - t794;
	t696 = t673 * t706 + t794;
	t694 = t697 * t686;
	t606 = t801 * t686;
	t693 = -t720 * t709 + t807;
	t692 = -t719 * t709 + (-t712 * qJD(2) + t599 * t777 + t600 * t805) * t664 + (-(t752 + t760) * t671 - t719 * t670 + (-t720 * qJD(2) - t754 - t762) * t673) * t742;
	t605 = t696 * t686;
	t604 = t680 * t694;
	t603 = t680 * t606;
	t602 = t677 * t694;
	t601 = t677 * t606;
	t598 = (t700 * t664 - t804) * t686;
	t597 = -t654 * t718 + (t653 * t726 + t792 * t664) * t686;
	t590 = t692 * t686;
	t589 = (t666 * t708 * t798 * t806 - t807) * t686;
	t588 = (t693 * t677 + t697 * t744) * t686;
	t587 = (t692 * t677 - t744 * t801) * t686;
	t586 = (t693 * t680 + t696 * t745) * t686;
	t585 = (t692 * t680 + t801 * t745) * t686;
	t1 = [t698, t699, (t585 * t779 + t586 * t776 + t622 * t723 + (-t593 * t673 + t603 * t671 - t621 * t670) * t787 + (t594 * t781 + t604 * t783 + t622 * t784) * t788) * t749, 0; -t796, t797, (t587 * t779 + t588 * t776 + t620 * t723 + (t595 * t673 + t601 * t671 - t619 * t670) * t787 + (t596 * t781 + t602 * t783 + t620 * t784) * t788) * t749, 0; 0, (t597 * t775 + t598 * t779 + t623 * t737 - t624 * t741) * t749, (t589 * t779 + t590 * t776 + t624 * t723 + (-t597 * t673 - t605 * t671 + t623 * t670) * t787 + (t598 * t781 - t606 * t783 + t624 * t784) * t788) * t749, 0; -t797, t796, (t585 * t775 + t621 * t730 / 0.8e1 + t586 * t779 + (-t594 * t673 - t604 * t671 - t622 * t670) * t787 + (-t603 * t782 + t593 * t780 + t621 * t652 / 0.4e1) * t788) * t749, 0; t699, t698, (t587 * t775 - t619 * t723 + t588 * t779 + (-t596 * t673 - t602 * t671 - t620 * t670) * t787 + (t595 * t781 - t601 * t782 - t619 * t784) * t788) * t749, 0; 0, (t597 * t778 + t598 * t775 - t623 * t741 + t624 * t736) * t749, (t589 * t775 + t623 * t723 + t590 * t779 + (-t598 * t673 + t606 * t671 - t624 * t670) * t787 + (t597 * t780 + t605 * t782 + t623 * t784) * t788) * t749, 0; -t745, 0, 0, 0; t744, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobiRD_rot_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:20:34
	% EndTime: 2020-04-13 14:22:14
	% DurationCPUTime: 102.38s
	% Computational Cost: add. (1618385->344), mult. (2566002->605), div. (84432->10), fcn. (1597770->18), ass. (0->313)
	t1272 = sin(qJ(3));
	t1275 = cos(qJ(3));
	t1273 = sin(qJ(2));
	t1276 = cos(qJ(2));
	t1522 = sin(pkin(19));
	t1523 = cos(pkin(19));
	t1269 = t1273 * t1522 + t1276 * t1523;
	t1457 = t1273 * t1523 - t1276 * t1522;
	t1445 = pkin(7) * t1457;
	t1438 = (-0.2e1 * t1445 + pkin(1)) * pkin(1);
	t1535 = pkin(7) ^ 2;
	t1266 = t1438 + t1535;
	t1281 = pkin(3) ^ 2;
	t1568 = -pkin(8) ^ 2 + t1281;
	t1433 = t1266 + t1568;
	t1439 = -t1445 + pkin(1);
	t1526 = pkin(7) + pkin(8);
	t1527 = pkin(7) - pkin(8);
	t1430 = (pkin(3) + t1526) * (-pkin(3) + t1527) + t1438;
	t1431 = (-pkin(3) + t1526) * (pkin(3) + t1527) + t1438;
	t1391 = t1431 * t1430;
	t1279 = sqrt(-t1391);
	t1516 = pkin(7) * t1279;
	t1538 = 0.1e1 / pkin(3);
	t1419 = t1538 * (-t1269 * t1516 + t1439 * t1433);
	t1531 = 0.1e1 / t1266;
	t1416 = t1531 * t1419;
	t1411 = -t1416 / 0.2e1;
	t1432 = pkin(7) * t1433;
	t1420 = t1538 * (t1269 * t1432 + t1439 * t1279);
	t1417 = t1531 * t1420;
	t1412 = t1417 / 0.2e1;
	t1377 = t1272 * t1412 + t1275 * t1411;
	t1490 = pkin(23) + pkin(22);
	t1474 = sin(t1490);
	t1375 = t1474 * t1377;
	t1413 = -t1417 / 0.2e1;
	t1378 = t1272 * t1411 + t1275 * t1413;
	t1475 = cos(t1490);
	t1371 = t1475 * t1378 + t1375;
	t1232 = pkin(5) * t1371;
	t1282 = pkin(9) ^ 2;
	t1536 = pkin(5) ^ 2;
	t1537 = pkin(4) ^ 2;
	t1366 = 0.2e1 * pkin(4) * t1232 + pkin(11) ^ 2 - t1282 - t1536 - t1537;
	t1529 = pkin(1) * pkin(7);
	t1414 = t1419 * t1529;
	t1264 = 0.1e1 / t1266 ^ 2;
	t1268 = t1269 * qJD(2);
	t1572 = t1264 * t1268;
	t1400 = t1414 * t1572;
	t1410 = t1416 / 0.2e1;
	t1436 = (-0.3e1 * pkin(1) + 0.4e1 * t1445) * t1529;
	t1428 = (t1526 * t1527 + t1438) * t1529;
	t1518 = pkin(7) * t1268;
	t1491 = pkin(1) * t1518;
	t1260 = 0.4e1 * t1268 * t1428 - 0.4e1 * t1281 * t1491;
	t1267 = t1457 * qJD(2);
	t1517 = pkin(7) * t1269;
	t1262 = 0.1e1 / t1279;
	t1521 = -t1262 / 0.2e1;
	t1470 = t1517 * t1521;
	t1459 = t1260 * t1470 + t1267 * t1516;
	t1476 = t1535 + t1568;
	t1425 = t1538 * (t1268 * t1436 - t1476 * t1518 + t1459);
	t1424 = t1531 * t1425;
	t1422 = t1424 / 0.2e1;
	t1429 = t1267 * t1432;
	t1435 = t1262 * t1439 / 0.2e1;
	t1492 = pkin(1) * t1517;
	t1451 = pkin(7) * (-t1279 - 0.2e1 * t1492);
	t1382 = t1538 * (t1260 * t1435 + t1268 * t1451 - t1429);
	t1381 = t1531 * t1382 / 0.2e1;
	t1415 = t1420 * t1529;
	t1557 = t1415 * t1572 + t1381;
	t1356 = (qJD(3) * t1410 + t1557) * t1275 + (qJD(3) * t1413 + t1400 + t1422) * t1272;
	t1423 = -t1424 / 0.2e1;
	t1494 = t1272 * t1410 + t1275 * t1412;
	t1357 = (-t1400 + t1423) * t1275 + t1557 * t1272 + t1494 * qJD(3);
	t1544 = t1475 * t1356 - t1474 * t1357;
	t1591 = pkin(5) * t1544;
	t1593 = t1366 * t1591;
	t1533 = -0.2e1 * pkin(4);
	t1367 = (t1371 * t1533 + pkin(5)) * pkin(5);
	t1525 = -pkin(9) - pkin(11);
	t1363 = (pkin(4) - t1525) * (pkin(4) + t1525) + t1367;
	t1524 = pkin(11) - pkin(9);
	t1364 = (pkin(4) - t1524) * (pkin(4) + t1524) + t1367;
	t1351 = t1364 * t1363;
	t1539 = sqrt(-t1351);
	t1592 = t1539 * t1591;
	t1511 = sin(pkin(23));
	t1512 = cos(pkin(23));
	t1406 = t1511 * t1419;
	t1409 = t1512 * t1420;
	t1588 = (t1406 + t1409) * t1529;
	t1556 = t1588 * t1264;
	t1221 = t1556 * t1268 + t1512 * t1381 + t1511 * t1422;
	t1515 = t1269 * t1535;
	t1489 = t1268 * t1515;
	t1477 = pkin(1) ^ 2 * t1489;
	t1520 = pkin(1) * t1267;
	t1493 = pkin(7) * t1520;
	t1259 = -0.8e1 * t1477 - 0.2e1 * (t1430 + t1431) * t1493;
	t1261 = 0.4e1 * t1269 * t1428 - 0.4e1 * t1281 * t1492;
	t1481 = t1261 * t1521;
	t1471 = pkin(7) * t1481;
	t1573 = t1262 * t1260;
	t1482 = t1261 / t1391 * t1573;
	t1224 = t1439 * t1482 / 0.4e1 + t1259 * t1435 + 0.4e1 * t1515 * t1520 + t1459 + (0.2e1 * t1535 * t1457 * pkin(1) - t1432 + t1471) * t1268;
	t1225 = t1268 * t1516 + t1573 * t1445 / 0.2e1 - t1267 * t1471 - t1482 * t1517 / 0.4e1 + t1259 * t1470 + t1429 + 0.4e1 * pkin(1) * t1489 + 0.2e1 * t1439 * t1493;
	t1244 = (t1457 * t1279 + (t1481 - t1476) * t1269) * pkin(7) + t1269 * t1436;
	t1245 = t1261 * t1435 + t1269 * t1451 - t1457 * t1432;
	t1570 = t1531 * t1264 * t1477;
	t1389 = t1419 * t1570;
	t1383 = -0.4e1 * t1389;
	t1421 = t1425 * t1492;
	t1418 = t1264 * t1421;
	t1485 = t1538 * t1491;
	t1465 = t1264 * t1485;
	t1443 = t1511 * t1465;
	t1444 = t1512 * t1465;
	t1519 = t1538 * t1531;
	t1487 = t1519 / 0.2e1;
	t1452 = t1511 * t1487;
	t1466 = t1512 * t1519;
	t1454 = -t1466 / 0.2e1;
	t1407 = t1512 * t1419;
	t1408 = t1511 * t1420;
	t1587 = (-t1407 + t1408) * t1529;
	t1555 = t1587 * t1264;
	t1380 = t1382 * t1492;
	t1390 = t1420 * t1570;
	t1384 = 0.4e1 * t1390;
	t1559 = t1264 * t1380 + t1384;
	t1498 = t1224 * t1452 + t1225 * t1454 - t1244 * t1444 + t1245 * t1443 + (t1383 - t1418) * t1512 + t1559 * t1511 - t1555 * t1267 - t1221;
	t1220 = t1555 * t1268 + t1511 * t1381 + t1512 * t1423;
	t1453 = t1466 / 0.2e1;
	t1499 = t1224 * t1453 + t1225 * t1452 + t1244 * t1443 + t1245 * t1444 + t1559 * t1512 + (0.4e1 * t1389 + t1418) * t1511 - t1556 * t1267 + t1220;
	t1251 = (t1409 / 0.2e1 + t1406 / 0.2e1) * t1531;
	t1571 = t1264 * t1269;
	t1497 = t1244 * t1454 + t1245 * t1452 + t1587 * t1571 - t1251;
	t1473 = t1497 * t1273;
	t1227 = t1244 * t1452 + t1245 * t1453 + t1588 * t1571;
	t1250 = (-t1407 / 0.2e1 + t1408 / 0.2e1) * t1531;
	t1496 = t1227 + t1250;
	t1582 = t1496 * t1276 + t1473;
	t1426 = t1582 * qJD(2) + t1499 * t1273 - t1498 * t1276;
	t1278 = 0.1e1 / pkin(9);
	t1339 = pkin(4) * t1591;
	t1350 = 0.1e1 / t1539;
	t1589 = t1363 + t1364;
	t1303 = -0.2e1 * t1350 * t1589 * t1339;
	t1340 = t1536 * t1544;
	t1338 = pkin(4) * t1340;
	t1335 = 0.2e1 * t1338;
	t1543 = t1474 * t1356 + t1475 * t1357;
	t1343 = pkin(5) * t1543;
	t1376 = t1475 * t1377;
	t1370 = -t1474 * t1378 + t1376;
	t1514 = t1232 - pkin(4);
	t1576 = -t1514 / 0.2e1;
	t1296 = t1278 * (t1303 * t1576 + t1370 * t1335 - t1366 * t1343 + t1592);
	t1365 = pkin(5) * t1366;
	t1324 = -t1370 * t1365 - t1514 * t1539;
	t1323 = t1278 * t1324;
	t1315 = t1544 * t1323;
	t1231 = t1536 + (-0.2e1 * t1232 + pkin(4)) * pkin(4);
	t1230 = 0.1e1 / t1231 ^ 2;
	t1532 = 0.1e1 / t1231;
	t1530 = t1532 * t1230;
	t1528 = pkin(4) * pkin(5);
	t1574 = t1230 * t1528;
	t1590 = 0.4e1 * t1537 * t1536 * t1530 * t1315 - t1296 * t1574;
	t1586 = t1272 * t1415 - t1275 * t1414;
	t1585 = -t1272 * t1414 - t1275 * t1415;
	t1584 = 0.1e1 / t1351 * t1303;
	t1581 = 0.2e1 * t1514;
	t1271 = sin(pkin(22));
	t1580 = t1271 / 0.2e1;
	t1346 = 0.4e1 * t1350;
	t1579 = -t1346 / 0.2e1;
	t1369 = pkin(5) * t1370;
	t1578 = -t1369 / 0.2e1;
	t1513 = cos(pkin(22));
	t1577 = -t1513 / 0.2e1;
	t1575 = t1230 * t1339;
	t1552 = -t1244 * t1485 - t1421;
	t1553 = t1585 * t1269;
	t1558 = t1245 * t1485 + t1380;
	t1352 = -t1553 * qJD(3) - t1586 * t1267 + t1558 * t1272 + t1552 * t1275;
	t1554 = t1586 * t1269;
	t1353 = t1554 * qJD(3) - t1585 * t1267 + t1552 * t1272 - t1558 * t1275;
	t1488 = -t1519 / 0.2e1;
	t1467 = t1275 * t1488;
	t1469 = t1272 * t1488;
	t1468 = t1272 * t1487;
	t1549 = t1244 * t1467 + t1245 * t1468;
	t1372 = qJD(3) * t1549 + t1224 * t1467 + t1225 * t1469 + t1272 * t1383 - 0.4e1 * t1275 * t1390;
	t1373 = t1224 * t1468 + t1225 * t1467 + t1272 * t1384 + t1275 * t1383 + (t1245 * t1275 * t1487 + t1244 * t1468) * qJD(3);
	t1187 = t1475 * t1372 + t1474 * t1373 + (t1474 * t1352 + t1475 * t1353) * t1264;
	t1228 = t1244 * t1469 + t1245 * t1467 + t1264 * t1553;
	t1229 = t1554 * t1264 + t1549;
	t1219 = t1475 * t1228 + t1474 * t1229;
	t1561 = ((pkin(4) + pkin(11)) * (pkin(4) - pkin(11)) + t1367 - t1282) * t1528;
	t1359 = t1561 * t1219;
	t1326 = t1359 * t1346;
	t1434 = -t1474 * t1228 + t1475 * t1229;
	t1348 = pkin(5) * t1539;
	t1510 = t1536 * t1533;
	t1563 = t1370 * t1510 - t1348;
	t1308 = t1278 * (t1563 * t1219 + t1326 * t1576 - t1434 * t1365);
	t1316 = t1591 * t1579;
	t1318 = pkin(5) * (t1475 * t1373 - t1474 * t1372 + (t1475 * t1352 - t1474 * t1353) * t1264);
	t1500 = -t1532 / 0.2e1;
	t1479 = t1278 * t1500;
	t1337 = t1537 * t1340;
	t1333 = 0.4e1 * t1337;
	t1562 = t1589 * t1528;
	t1547 = -t1359 * t1584 - (t1562 * t1187 + t1219 * t1333) * t1350;
	t1301 = -pkin(5) * t1303 / 0.2e1;
	t1564 = t1510 * t1543 + t1301;
	t1567 = (t1563 * t1187 + t1564 * t1219 - t1359 * t1316 - t1366 * t1318 + t1434 * t1335 + t1547 * t1514) * t1479 + t1308 * t1575;
	t1237 = t1474 * t1494 + t1376;
	t1358 = t1561 * t1237;
	t1325 = t1358 * t1346;
	t1374 = t1475 * t1494 - t1375;
	t1306 = t1278 * (t1563 * t1237 + t1325 * t1576 - t1374 * t1365);
	t1548 = -t1358 * t1584 - (t1237 * t1333 + t1543 * t1562) * t1350;
	t1566 = (t1564 * t1237 - t1358 * t1316 + t1374 * t1335 + t1548 * t1514 + t1543 * t1563 - t1593) * t1479 + t1306 * t1575;
	t1565 = t1296 * t1500 + t1315 * t1574;
	t1560 = t1528 * t1581 + t1365;
	t1209 = -t1370 * t1348 + t1514 * t1366;
	t1321 = t1323 * t1574;
	t1320 = t1271 * t1321;
	t1478 = t1278 * t1574;
	t1446 = t1513 * t1478;
	t1551 = -t1209 * t1446 - t1320;
	t1458 = t1271 * t1478;
	t1550 = t1209 * t1458 - t1513 * t1321;
	t1330 = t1209 * t1278 * t1530 * t1337;
	t1546 = t1590 * t1271 + 0.4e1 * t1513 * t1330;
	t1505 = t1221 * t1273;
	t1545 = (qJD(2) * t1251 - t1220) * t1276 + t1505;
	t1174 = t1370 * t1301 - t1339 * t1581 - t1343 * t1539 - t1593;
	t1542 = t1174 * t1458 - 0.4e1 * t1271 * t1330 + t1590 * t1513;
	t1437 = t1496 * t1273 - t1497 * t1276;
	t1274 = sin(qJ(1));
	t1508 = qJD(1) * t1274;
	t1277 = cos(qJ(1));
	t1507 = qJD(1) * t1277;
	t1506 = t1220 * t1273;
	t1504 = t1250 * t1273;
	t1503 = t1250 * t1276;
	t1502 = t1251 * t1273;
	t1501 = t1278 * t1532;
	t1484 = qJD(2) * t1504;
	t1495 = t1277 * t1484 + t1503 * t1508;
	t1483 = t1274 * t1502;
	t1480 = t1532 * t1580;
	t1461 = t1278 * t1480;
	t1460 = t1513 * t1500;
	t1238 = -t1502 + t1503;
	t1450 = t1251 * t1276 + t1504;
	t1449 = t1278 * t1460;
	t1441 = t1219 * t1446;
	t1440 = t1237 * t1446;
	t1233 = t1450 * t1274;
	t1216 = t1437 * t1277;
	t1215 = t1582 * t1277;
	t1211 = -t1238 * qJD(2) - t1221 * t1276 - t1506;
	t1427 = (qJD(2) * t1227 - t1498) * t1273 + (-t1497 * qJD(2) - t1499) * t1276;
	t1334 = -0.4e1 * t1338;
	t1332 = t1278 * t1575;
	t1331 = t1271 * t1332;
	t1329 = t1513 * t1332;
	t1322 = t1324 * t1500;
	t1317 = t1343 * t1579;
	t1307 = t1308 * t1500;
	t1305 = t1306 * t1500;
	t1291 = (t1237 * t1334 + t1374 * t1301 + t1358 * t1317 + t1548 * t1369 + t1543 * t1560 - t1592) * t1501;
	t1290 = (t1560 * t1187 + t1219 * t1334 + t1434 * t1301 + t1359 * t1317 - t1539 * t1318 + t1547 * t1369) * t1501;
	t1246 = t1274 * t1484;
	t1236 = t1238 * t1277;
	t1235 = t1450 * t1277;
	t1234 = t1238 * t1274;
	t1214 = t1437 * t1274;
	t1213 = t1582 * t1274;
	t1210 = -t1450 * qJD(2) + t1220 * t1276 - t1505;
	t1208 = t1238 * t1507 - t1274 * t1545 - t1246;
	t1207 = -qJD(2) * t1483 + t1450 * t1507 + (t1506 + (qJD(2) * t1250 + t1221) * t1276) * t1274;
	t1206 = -qJD(1) * t1483 + t1277 * t1545 + t1495;
	t1205 = qJD(1) * t1233 + t1211 * t1277;
	t1194 = (t1209 * t1460 + t1271 * t1322) * t1278;
	t1193 = (t1209 * t1480 + t1513 * t1322) * t1278;
	t1190 = t1560 * t1237 + t1325 * t1578 - t1374 * t1348;
	t1185 = t1437 * qJD(2) - t1498 * t1273 - t1499 * t1276;
	t1182 = t1560 * t1219 + t1326 * t1578 - t1434 * t1348;
	t1181 = qJD(1) * t1216 + t1426 * t1274;
	t1180 = -qJD(1) * t1215 + t1427 * t1274 + t1246;
	t1179 = t1426 * t1277 - t1437 * t1508;
	t1178 = (t1227 * t1276 + t1473) * t1508 + t1427 * t1277 + t1495;
	t1169 = t1190 * t1449 - t1209 * t1440 - t1237 * t1320 + t1271 * t1305;
	t1168 = t1190 * t1461 + t1237 * t1550 + t1513 * t1305;
	t1167 = t1182 * t1449 - t1209 * t1441 - t1219 * t1320 + t1271 * t1307;
	t1166 = t1182 * t1461 + t1219 * t1550 + t1513 * t1307;
	t1164 = t1174 * t1449 + t1209 * t1329 + t1565 * t1271;
	t1163 = t1174 * t1461 - t1209 * t1331 + t1565 * t1513;
	t1159 = -t1174 * t1440 + t1190 * t1329 + t1546 * t1237 + t1566 * t1271 + t1291 * t1577 + t1543 * t1551;
	t1158 = -t1190 * t1331 + t1542 * t1237 + t1291 * t1580 + t1566 * t1513 + t1543 * t1550;
	t1157 = -t1174 * t1441 + t1182 * t1329 + t1551 * t1187 + t1546 * t1219 + t1567 * t1271 + t1290 * t1577;
	t1156 = -t1182 * t1331 + t1550 * t1187 + t1542 * t1219 + t1290 * t1580 + t1567 * t1513;
	t1 = [t1163 * t1234 + t1164 * t1233 + t1193 * t1208 + t1194 * t1207, -t1156 * t1236 - t1157 * t1235 + t1163 * t1216 - t1164 * t1215 + t1166 * t1206 + t1167 * t1205 + t1178 * t1194 + t1179 * t1193, -t1158 * t1236 - t1159 * t1235 + t1168 * t1206 + t1169 * t1205, 0; -t1163 * t1236 - t1164 * t1235 + t1193 * t1206 + t1194 * t1205, -t1156 * t1234 - t1157 * t1233 + t1163 * t1214 - t1164 * t1213 - t1166 * t1208 - t1167 * t1207 + t1180 * t1194 + t1181 * t1193, -t1158 * t1234 - t1159 * t1233 - t1168 * t1208 - t1169 * t1207, 0; 0, -t1156 * t1450 + t1157 * t1238 - t1163 * t1582 - t1164 * t1437 + t1166 * t1211 + t1167 * t1210 + t1185 * t1193 - t1194 * t1426, -t1158 * t1450 + t1159 * t1238 + t1168 * t1211 + t1169 * t1210, 0; -t1163 * t1233 + t1164 * t1234 - t1193 * t1207 + t1194 * t1208, t1156 * t1235 - t1157 * t1236 + t1163 * t1215 + t1164 * t1216 - t1166 * t1205 + t1167 * t1206 - t1178 * t1193 + t1179 * t1194, t1158 * t1235 - t1159 * t1236 - t1168 * t1205 + t1169 * t1206, 0; t1163 * t1235 - t1164 * t1236 - t1193 * t1205 + t1194 * t1206, t1156 * t1233 - t1157 * t1234 + t1163 * t1213 + t1164 * t1214 + t1166 * t1207 - t1167 * t1208 - t1180 * t1193 + t1181 * t1194, t1158 * t1233 - t1159 * t1234 + t1168 * t1207 - t1169 * t1208, 0; 0, -t1156 * t1238 - t1157 * t1450 + t1163 * t1437 - t1164 * t1582 - t1166 * t1210 + t1167 * t1211 + t1185 * t1194 + t1193 * t1426, -t1158 * t1238 - t1159 * t1450 - t1168 * t1210 + t1169 * t1211, 0; -t1508, 0, 0, 0; t1507, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
end