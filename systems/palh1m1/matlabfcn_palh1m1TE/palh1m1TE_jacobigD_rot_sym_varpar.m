% Zeitableitung der rotatorischen Teilmatrix der geometrischen Jacobi-Matrix für beliebiges Segment von
% palh1m1TE
% Use Code from Maple symbolic Code Generation
%
% Geometrische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorgeschwindigkeit und Geschw. der verallgemeinerten Koordinaten.
% 
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JgD_rot [3x4]
%   Zeitableitung der rotatorischen Teilmatrix der geometrischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-13 14:34
% Revision: 394980f89398455cc479283a21eae791ed9f69cb (2020-04-12)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JgD_rot = palh1m1TE_jacobigD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1TE_jacobigD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1TE_jacobigD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1TE_jacobigD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1TE_jacobigD_rot_sym_varpar: pkin has to be [23x1] (double)');
JgD_rot=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobigD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobigD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobigD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (2->2), div. (0->0), fcn. (2->2), ass. (0->1)
	t1 = [0, qJD(1) * cos(qJ(1)), 0, 0; 0, qJD(1) * sin(qJ(1)), 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobigD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t46 = qJD(1) * cos(qJ(1));
	t45 = qJD(1) * sin(qJ(1));
	t1 = [0, t46, t46, 0; 0, t45, t45, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobigD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:25
	% EndTime: 2020-04-13 14:19:09
	% DurationCPUTime: 44.83s
	% Computational Cost: add. (1067500->212), mult. (1666316->434), div. (62252->14), fcn. (1041364->16), ass. (0->214)
	t580 = pkin(7) ^ 2;
	t584 = pkin(1) ^ 2;
	t574 = sin(qJ(2));
	t578 = cos(pkin(19));
	t684 = sin(pkin(19));
	t685 = cos(qJ(2));
	t603 = -t574 * t578 + t685 * t684;
	t680 = pkin(7) * t603;
	t703 = -2 * pkin(1);
	t648 = -t680 * t703 + t584;
	t558 = t580 + t648;
	t555 = 0.1e1 / t558;
	t564 = t574 * t684 + t685 * t578;
	t562 = t564 * qJD(2);
	t583 = 0.1e1 / pkin(3);
	t554 = pkin(3) ^ 2 - pkin(8) ^ 2 + t558;
	t559 = pkin(1) + t680;
	t700 = -pkin(8) - pkin(3);
	t552 = (pkin(7) - t700) * (pkin(7) + t700) + t648;
	t699 = -pkin(8) + pkin(3);
	t553 = (pkin(7) - t699) * (pkin(7) + t699) + t648;
	t666 = t553 * t552;
	t586 = sqrt(-t666);
	t662 = t564 * t586;
	t545 = -pkin(7) * t662 + t554 * t559;
	t576 = cos(qJ(3));
	t651 = t576 * t545;
	t679 = pkin(7) * t564;
	t546 = t554 * t679 + t559 * t586;
	t573 = sin(qJ(3));
	t656 = t573 * t546;
	t618 = -t651 + t656;
	t556 = 0.1e1 / t558 ^ 2;
	t701 = pkin(1) * pkin(7);
	t645 = t556 * t701;
	t598 = t618 * t645;
	t650 = t576 * t546;
	t657 = t573 * t545;
	t612 = t657 / 0.2e1 + t650 / 0.2e1;
	t616 = 0.2e1 * (t552 + t553) * t701;
	t547 = t562 * t616;
	t550 = 0.1e1 / t586;
	t691 = -t550 / 0.2e1;
	t539 = t547 * t679 * t691;
	t646 = t559 * t703;
	t630 = -t554 + t646;
	t561 = t603 * qJD(2);
	t664 = t561 * t586;
	t532 = t539 + (t630 * t562 - t664) * pkin(7);
	t655 = t576 * t532;
	t705 = t562 * t580;
	t641 = t564 * t705;
	t624 = pkin(1) * t641;
	t690 = t550 / 0.2e1;
	t634 = t559 * t690;
	t663 = t562 * t586;
	t533 = t547 * t634 - 0.2e1 * t624 + (t561 * t554 - t663) * pkin(7);
	t660 = t573 * t533;
	t508 = (t562 * t598 + (-t655 / 0.2e1 + t660 / 0.2e1 + t612 * qJD(3)) * t555) * t583;
	t610 = t651 / 0.2e1 - t656 / 0.2e1;
	t617 = t650 + t657;
	t654 = t576 * t533;
	t661 = t573 * t532;
	t509 = (t617 * t562 * t645 + (t661 / 0.2e1 + t654 / 0.2e1 + t610 * qJD(3)) * t555) * t583;
	t570 = pkin(23) + pkin(22);
	t566 = sin(t570);
	t567 = cos(t570);
	t503 = t508 * t566 - t509 * t567;
	t581 = pkin(5) ^ 2;
	t665 = t555 * t583;
	t537 = t612 * t665;
	t538 = t610 * t665;
	t526 = t537 * t567 + t538 * t566;
	t682 = pkin(4) * t526;
	t702 = -2 * pkin(5);
	t649 = -t682 * t702 + t581;
	t698 = -pkin(9) - pkin(11);
	t517 = (pkin(4) - t698) * (pkin(4) + t698) + t649;
	t697 = -pkin(9) + pkin(11);
	t518 = (pkin(4) - t697) * (pkin(4) + t697) + t649;
	t669 = t518 * t517;
	t585 = sqrt(-t669);
	t707 = t503 * t585;
	t647 = 2 * pkin(5);
	t615 = pkin(4) * (t517 + t518) * t647;
	t494 = t503 * t615;
	t582 = pkin(4) ^ 2;
	t523 = t582 + t649;
	t519 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t523;
	t524 = pkin(5) + t682;
	t629 = t524 * t702 - t519;
	t511 = 0.1e1 / t585;
	t625 = t537 * t566 - t567 * t538;
	t692 = -t625 / 0.2e1;
	t638 = t511 * t692;
	t626 = t567 * t508 + t509 * t566;
	t704 = t626 * t585;
	t476 = (t494 * t638 + t629 * t503 - t704) * pkin(4);
	t631 = t625 * t582 * t702;
	t693 = t511 / 0.2e1;
	t639 = t524 * t693;
	t477 = t494 * t639 + t503 * t631 + (t519 * t626 - t707) * pkin(4);
	t520 = 0.1e1 / t523;
	t579 = 0.1e1 / pkin(11);
	t667 = t520 * t579;
	t681 = pkin(4) * t625;
	t499 = t519 * t681 + t524 * t585;
	t571 = sin(pkin(21));
	t672 = t499 * t571;
	t498 = t519 * t524 - t585 * t681;
	t572 = cos(pkin(21));
	t673 = t498 * t572;
	t493 = (-t673 / 0.2e1 + t672 / 0.2e1) * t667;
	t490 = 0.1e1 / t493 ^ 2;
	t521 = 0.1e1 / t523 ^ 2;
	t644 = pkin(4) * pkin(5) * t521;
	t597 = (t672 - t673) * t644;
	t688 = -t572 / 0.2e1;
	t689 = t571 / 0.2e1;
	t706 = ((t476 * t688 + t477 * t689) * t520 + t503 * t597) * t579 * t490;
	t489 = 0.1e1 / t493;
	t696 = -t494 / 0.2e1;
	t605 = t617 * t564;
	t548 = t564 * t616;
	t683 = pkin(1) * t580;
	t535 = t548 * t634 - 0.2e1 * t564 ^ 2 * t683 + (t554 * t603 - t662) * pkin(7);
	t652 = t576 * t535;
	t620 = t548 * t691 - t554;
	t534 = (-t603 * t586 + (t620 + t646) * t564) * pkin(7);
	t659 = t573 * t534;
	t613 = t659 / 0.2e1 + t652 / 0.2e1;
	t515 = (-t613 * t555 - t605 * t645) * t583;
	t653 = t576 * t534;
	t658 = t573 * t535;
	t611 = -t653 / 0.2e1 + t658 / 0.2e1;
	t516 = (t611 * t555 + t564 * t598) * t583;
	t505 = t515 * t567 + t516 * t566;
	t495 = t505 * t615;
	t695 = -t495 / 0.2e1;
	t504 = t625 * t615;
	t694 = -t504 / 0.2e1;
	t687 = t572 / 0.2e1;
	t686 = -t576 / 0.2e1;
	t671 = t499 * t572;
	t674 = t498 * t571;
	t596 = (t671 + t674) * t644;
	t468 = ((t476 * t689 + t477 * t687) * t520 + t503 * t596) * t579;
	t492 = (t674 / 0.2e1 + t671 / 0.2e1) * t667;
	t488 = t492 ^ 2;
	t482 = t488 * t490 + 0.1e1;
	t676 = t490 * t492;
	t677 = t489 * t706;
	t678 = 0.2e1 * (t468 * t676 - t488 * t677) / t482 ^ 2;
	t675 = t494 * t511 / t669;
	t670 = t503 * t582;
	t668 = t520 * t572;
	t575 = sin(qJ(1));
	t568 = qJD(1) * t575;
	t577 = cos(qJ(1));
	t569 = qJD(1) * t577;
	t643 = t581 * t670;
	t642 = t550 / t666 * t548 * t547;
	t640 = t675 / 0.4e1;
	t637 = t520 * t689;
	t636 = -t668 / 0.2e1;
	t635 = t668 / 0.2e1;
	t633 = t582 * t647;
	t632 = 0.4e1 * pkin(5) * t670;
	t480 = 0.1e1 / t482;
	t628 = t480 * t644;
	t627 = -0.8e1 * t643;
	t623 = t520 * t521 * t643;
	t622 = t584 * t641;
	t621 = -t625 * t675 / 0.4e1;
	t619 = t572 * t623;
	t614 = 0.4e1 * t571 * t623;
	t609 = -0.4e1 * t498 * t619;
	t608 = 0.4e1 * t499 * t619;
	t607 = t505 * t614;
	t606 = t625 * t614;
	t604 = -t480 * t706 - t489 * t678;
	t506 = -t515 * t566 + t516 * t567;
	t478 = (t495 * t638 + t629 * t505 - t506 * t585) * pkin(4);
	t544 = t561 * t616 - 0.8e1 * t622;
	t513 = t539 + (t642 / 0.4e1 + t544 * t690) * t559 + (-0.4e1 * t561 * t564 - 0.2e1 * t562 * t603) * t683 + (t620 * t562 - t664) * pkin(7);
	t514 = 0.4e1 * t624 + (t663 - t564 * t642 / 0.4e1 + t630 * t561 + (-t603 * t547 / 0.2e1 - t561 * t548 / 0.2e1 - t564 * t544 / 0.2e1) * t550) * pkin(7);
	t557 = t555 * t556;
	t496 = (0.4e1 * t618 * t557 * t622 + (t514 * t686 + t573 * t513 / 0.2e1 + t613 * qJD(3)) * t555 + ((-t653 + t658) * t562 + t618 * t561 + (t617 * qJD(3) - t655 + t660) * t564) * t645) * t583;
	t497 = (-0.4e1 * t584 * t557 * t605 * t705 + (-t573 * t514 / 0.2e1 + t513 * t686 + t611 * qJD(3)) * t555 + ((-t652 - t659) * t562 - t617 * t561 + (t618 * qJD(3) - t654 - t661) * t564) * t645) * t583;
	t484 = t496 * t566 + t497 * t567;
	t602 = t476 * t505 + t478 * t503 + t484 * t498;
	t486 = (t504 * t638 - t526 * t585 + t625 * t629) * pkin(4);
	t601 = t476 * t625 + t486 * t503 + t498 * t626;
	t479 = t495 * t639 + t505 * t631 + (-t505 * t585 + t506 * t519) * pkin(4);
	t600 = t477 * t505 + t479 * t503 + t484 * t499;
	t487 = t504 * t639 + t625 * t631 + (t519 * t526 - t585 * t625) * pkin(4);
	t599 = t477 * t625 + t487 * t503 + t499 * t626;
	t595 = t676 * t678 + (-t468 * t490 + 0.2e1 * t492 * t677) * t480;
	t485 = t615 * t626 + t625 * t627;
	t483 = t496 * t567 - t497 * t566;
	t475 = ((t486 * t688 + t487 * t689) * t520 + t625 * t597) * t579;
	t474 = ((t486 * t689 + t487 * t687) * t520 + t625 * t596) * t579;
	t473 = t484 * t615 + t505 * t627;
	t472 = ((t478 * t688 + t479 * t689) * t520 + t505 * t597) * t579;
	t471 = ((t478 * t689 + t479 * t687) * t520 + t505 * t596) * t579;
	t470 = t625 * t632 + (t707 + t504 * t621 + t629 * t626 + (t485 * t692 + t526 * t696 + t626 * t694) * t511) * pkin(4);
	t467 = (t485 * t693 + t504 * t640) * t524 + (-t503 * t526 - 0.2e1 * t625 * t626) * t633 + (-t704 - t503 * t519 + (t503 * t694 + t625 * t696) * t511) * pkin(4);
	t466 = t505 * t632 + (-t483 * t585 + t495 * t621 + t629 * t484 + (t473 * t692 + t506 * t696 + t626 * t695) * t511) * pkin(4);
	t465 = (t473 * t693 + t495 * t640) * t524 + (-t484 * t625 - t503 * t506 - t505 * t626) * t633 + (t483 * t519 - t484 * t585 + (t503 * t695 + t505 * t696) * t511) * pkin(4);
	t464 = (t474 * t489 - t475 * t676) * t480;
	t462 = (t471 * t489 - t472 * t676) * t480;
	t461 = t604 * t474 + t595 * t475 + (((t467 * t635 + t470 * t637 + t498 * t606 + t608 * t625) * t489 - (t467 * t637 + t470 * t636 + t499 * t606 + t609 * t625) * t676) * t480 + ((t599 * t489 + t601 * t676) * t572 + (t601 * t489 - t599 * t676) * t571) * t628) * t579;
	t460 = t604 * t471 + t595 * t472 + (((t465 * t635 + t466 * t637 + t498 * t607 + t505 * t608) * t489 - (t465 * t637 + t466 * t636 + t499 * t607 + t505 * t609) * t676) * t480 + ((t600 * t489 + t602 * t676) * t572 + (t602 * t489 - t600 * t676) * t571) * t628) * t579;
	t1 = [0, t460 * t575 + t462 * t569 + t569, t461 * t575 + t464 * t569 + t569, 0; 0, -t460 * t577 + t462 * t568 + t568, -t461 * t577 + t464 * t568 + t568, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobigD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:19:35
	% EndTime: 2020-04-13 14:20:22
	% DurationCPUTime: 47.42s
	% Computational Cost: add. (1133697->223), mult. (1770932->452), div. (66164->14), fcn. (1106224->16), ass. (0->220)
	t787 = pkin(7) ^ 2;
	t791 = pkin(1) ^ 2;
	t780 = sin(qJ(2));
	t783 = cos(qJ(2));
	t785 = cos(pkin(19));
	t896 = sin(pkin(19));
	t819 = -t780 * t785 + t783 * t896;
	t892 = pkin(7) * t819;
	t914 = -2 * pkin(1);
	t860 = -t892 * t914 + t791;
	t764 = t787 + t860;
	t761 = 0.1e1 / t764;
	t770 = t780 * t896 + t783 * t785;
	t768 = t770 * qJD(2);
	t790 = 0.1e1 / pkin(3);
	t760 = pkin(3) ^ 2 - pkin(8) ^ 2 + t764;
	t765 = pkin(1) + t892;
	t911 = -pkin(8) - pkin(3);
	t758 = (pkin(7) - t911) * (pkin(7) + t911) + t860;
	t910 = -pkin(8) + pkin(3);
	t759 = (pkin(7) - t910) * (pkin(7) + t910) + t860;
	t878 = t759 * t758;
	t793 = sqrt(-t878);
	t874 = t770 * t793;
	t751 = -pkin(7) * t874 + t760 * t765;
	t782 = cos(qJ(3));
	t863 = t782 * t751;
	t891 = pkin(7) * t770;
	t752 = t760 * t891 + t765 * t793;
	t779 = sin(qJ(3));
	t868 = t779 * t752;
	t830 = -t863 + t868;
	t762 = 0.1e1 / t764 ^ 2;
	t912 = pkin(1) * pkin(7);
	t857 = t762 * t912;
	t808 = t830 * t857;
	t862 = t782 * t752;
	t869 = t779 * t751;
	t822 = t869 / 0.2e1 + t862 / 0.2e1;
	t826 = 0.2e1 * (t758 + t759) * t912;
	t753 = t768 * t826;
	t756 = 0.1e1 / t793;
	t902 = -t756 / 0.2e1;
	t745 = t753 * t891 * t902;
	t858 = t765 * t914;
	t842 = -t760 + t858;
	t767 = t819 * qJD(2);
	t876 = t767 * t793;
	t738 = t745 + (t768 * t842 - t876) * pkin(7);
	t867 = t782 * t738;
	t918 = t768 * t787;
	t853 = t770 * t918;
	t836 = pkin(1) * t853;
	t901 = t756 / 0.2e1;
	t846 = t765 * t901;
	t875 = t768 * t793;
	t739 = t753 * t846 - 0.2e1 * t836 + (t767 * t760 - t875) * pkin(7);
	t872 = t779 * t739;
	t714 = (t768 * t808 + (-t867 / 0.2e1 + t872 / 0.2e1 + t822 * qJD(3)) * t761) * t790;
	t820 = t863 / 0.2e1 - t868 / 0.2e1;
	t829 = t862 + t869;
	t866 = t782 * t739;
	t873 = t779 * t738;
	t715 = (t829 * t768 * t857 + (t873 / 0.2e1 + t866 / 0.2e1 + t820 * qJD(3)) * t761) * t790;
	t776 = pkin(23) + pkin(22);
	t772 = sin(t776);
	t773 = cos(t776);
	t709 = t714 * t772 - t715 * t773;
	t788 = pkin(5) ^ 2;
	t877 = t761 * t790;
	t743 = t822 * t877;
	t744 = t820 * t877;
	t732 = t743 * t773 + t744 * t772;
	t894 = pkin(4) * t732;
	t913 = -2 * pkin(5);
	t861 = -t894 * t913 + t788;
	t909 = -pkin(9) - pkin(11);
	t723 = (pkin(4) - t909) * (pkin(4) + t909) + t861;
	t908 = -pkin(9) + pkin(11);
	t724 = (pkin(4) - t908) * (pkin(4) + t908) + t861;
	t881 = t724 * t723;
	t792 = sqrt(-t881);
	t920 = t709 * t792;
	t859 = 2 * pkin(5);
	t825 = pkin(4) * (t723 + t724) * t859;
	t698 = t709 * t825;
	t789 = pkin(4) ^ 2;
	t729 = t789 + t861;
	t725 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t729;
	t730 = pkin(5) + t894;
	t841 = t730 * t913 - t725;
	t717 = 0.1e1 / t792;
	t837 = t743 * t772 - t744 * t773;
	t903 = -t837 / 0.2e1;
	t850 = t717 * t903;
	t838 = t714 * t773 + t715 * t772;
	t917 = t838 * t792;
	t680 = (t698 * t850 + t709 * t841 - t917) * pkin(4);
	t843 = t837 * t789 * t913;
	t904 = t717 / 0.2e1;
	t851 = t730 * t904;
	t681 = t698 * t851 + t709 * t843 + (t725 * t838 - t920) * pkin(4);
	t726 = 0.1e1 / t729;
	t786 = 0.1e1 / pkin(11);
	t727 = 0.1e1 / t729 ^ 2;
	t856 = pkin(4) * pkin(5) * t727;
	t893 = pkin(4) * t837;
	t705 = t725 * t893 + t730 * t792;
	t777 = sin(pkin(21));
	t884 = t705 * t777;
	t704 = t725 * t730 - t792 * t893;
	t778 = cos(pkin(21));
	t885 = t704 * t778;
	t807 = (t884 - t885) * t856;
	t899 = -t778 / 0.2e1;
	t900 = t777 / 0.2e1;
	t671 = ((t680 * t899 + t681 * t900) * t726 + t709 * t807) * t786;
	t879 = t726 * t786;
	t697 = (-t885 / 0.2e1 + t884 / 0.2e1) * t879;
	t694 = 0.1e1 / t697 ^ 2;
	t919 = t671 * t694;
	t916 = qJD(2) + qJD(3);
	t883 = t705 * t778;
	t886 = t704 * t777;
	t696 = (t886 / 0.2e1 + t883 / 0.2e1) * t879;
	t827 = t779 * t780 - t782 * t783;
	t828 = t779 * t783 + t780 * t782;
	t915 = t696 * t827 - t697 * t828;
	t693 = 0.1e1 / t697;
	t907 = -t698 / 0.2e1;
	t814 = t829 * t770;
	t754 = t770 * t826;
	t895 = pkin(1) * t787;
	t741 = t754 * t846 - 0.2e1 * t770 ^ 2 * t895 + (t760 * t819 - t874) * pkin(7);
	t864 = t782 * t741;
	t832 = t754 * t902 - t760;
	t740 = (-t819 * t793 + (t832 + t858) * t770) * pkin(7);
	t871 = t779 * t740;
	t823 = t871 / 0.2e1 + t864 / 0.2e1;
	t721 = (-t761 * t823 - t814 * t857) * t790;
	t865 = t782 * t740;
	t870 = t779 * t741;
	t821 = -t865 / 0.2e1 + t870 / 0.2e1;
	t722 = (t761 * t821 + t770 * t808) * t790;
	t711 = t721 * t773 + t722 * t772;
	t699 = t711 * t825;
	t906 = -t699 / 0.2e1;
	t710 = t837 * t825;
	t905 = -t710 / 0.2e1;
	t898 = t778 / 0.2e1;
	t897 = -t782 / 0.2e1;
	t806 = (t883 + t886) * t856;
	t670 = ((t680 * t900 + t681 * t898) * t726 + t709 * t806) * t786;
	t692 = t696 ^ 2;
	t686 = t692 * t694 + 0.1e1;
	t888 = t694 * t696;
	t889 = t693 * t919;
	t890 = 0.2e1 * (t670 * t888 - t692 * t889) / t686 ^ 2;
	t887 = t698 * t717 / t881;
	t882 = t709 * t789;
	t880 = t726 * t778;
	t781 = sin(qJ(1));
	t774 = qJD(1) * t781;
	t784 = cos(qJ(1));
	t775 = qJD(1) * t784;
	t855 = t788 * t882;
	t854 = t756 / t878 * t754 * t753;
	t852 = t887 / 0.4e1;
	t849 = t726 * t900;
	t848 = -t880 / 0.2e1;
	t847 = t880 / 0.2e1;
	t845 = t789 * t859;
	t844 = 0.4e1 * pkin(5) * t882;
	t684 = 0.1e1 / t686;
	t840 = t684 * t856;
	t839 = -0.8e1 * t855;
	t835 = t726 * t727 * t855;
	t834 = t791 * t853;
	t833 = -t837 * t887 / 0.4e1;
	t831 = t778 * t835;
	t824 = 0.4e1 * t777 * t835;
	t818 = -0.4e1 * t704 * t831;
	t817 = 0.4e1 * t705 * t831;
	t816 = t711 * t824;
	t815 = t837 * t824;
	t813 = -t684 * t919 - t693 * t890;
	t712 = -t721 * t772 + t722 * t773;
	t682 = (t699 * t850 + t711 * t841 - t712 * t792) * pkin(4);
	t750 = t767 * t826 - 0.8e1 * t834;
	t719 = t745 + (t854 / 0.4e1 + t750 * t901) * t765 + (-0.4e1 * t767 * t770 - 0.2e1 * t768 * t819) * t895 + (t768 * t832 - t876) * pkin(7);
	t720 = 0.4e1 * t836 + (t875 - t770 * t854 / 0.4e1 + t842 * t767 + (-t819 * t753 / 0.2e1 - t767 * t754 / 0.2e1 - t770 * t750 / 0.2e1) * t756) * pkin(7);
	t763 = t761 * t762;
	t700 = (0.4e1 * t830 * t763 * t834 + (t720 * t897 + t779 * t719 / 0.2e1 + t823 * qJD(3)) * t761 + ((-t865 + t870) * t768 + t830 * t767 + (qJD(3) * t829 - t867 + t872) * t770) * t857) * t790;
	t701 = (-0.4e1 * t791 * t763 * t814 * t918 + (-t779 * t720 / 0.2e1 + t719 * t897 + t821 * qJD(3)) * t761 + ((-t864 - t871) * t768 - t829 * t767 + (qJD(3) * t830 - t866 - t873) * t770) * t857) * t790;
	t688 = t700 * t772 + t701 * t773;
	t812 = t680 * t711 + t682 * t709 + t688 * t704;
	t690 = (t710 * t850 - t732 * t792 + t837 * t841) * pkin(4);
	t811 = t680 * t837 + t690 * t709 + t704 * t838;
	t683 = t699 * t851 + t711 * t843 + (-t711 * t792 + t712 * t725) * pkin(4);
	t810 = t681 * t711 + t683 * t709 + t688 * t705;
	t691 = t710 * t851 + t837 * t843 + (t725 * t732 - t792 * t837) * pkin(4);
	t809 = t681 * t837 + t691 * t709 + t705 * t838;
	t805 = t888 * t890 + (-t670 * t694 + 0.2e1 * t696 * t889) * t684;
	t802 = -t827 * t670 + t828 * t671 + t916 * (-t696 * t828 - t697 * t827);
	t689 = t825 * t838 + t837 * t839;
	t687 = t700 * t773 - t701 * t772;
	t677 = ((t690 * t899 + t691 * t900) * t726 + t837 * t807) * t786;
	t676 = ((t690 * t900 + t691 * t898) * t726 + t837 * t806) * t786;
	t675 = t688 * t825 + t711 * t839;
	t674 = ((t682 * t899 + t683 * t900) * t726 + t711 * t807) * t786;
	t673 = ((t682 * t900 + t683 * t898) * t726 + t711 * t806) * t786;
	t672 = t837 * t844 + (t920 + t710 * t833 + t841 * t838 + (t689 * t903 + t732 * t907 + t838 * t905) * t717) * pkin(4);
	t669 = (t689 * t904 + t710 * t852) * t730 + (-t709 * t732 - 0.2e1 * t837 * t838) * t845 + (-t917 - t709 * t725 + (t709 * t905 + t837 * t907) * t717) * pkin(4);
	t668 = t711 * t844 + (-t687 * t792 + t699 * t833 + t841 * t688 + (t675 * t903 + t712 * t907 + t838 * t906) * t717) * pkin(4);
	t667 = (t675 * t904 + t699 * t852) * t730 + (-t688 * t837 - t709 * t712 - t711 * t838) * t845 + (t687 * t725 - t688 * t792 + (t709 * t906 + t711 * t907) * t717) * pkin(4);
	t666 = (t676 * t693 - t677 * t888) * t684;
	t664 = (t673 * t693 - t674 * t888) * t684;
	t663 = t813 * t676 + t805 * t677 + (((t669 * t847 + t672 * t849 + t704 * t815 + t817 * t837) * t693 - (t669 * t849 + t672 * t848 + t705 * t815 + t818 * t837) * t888) * t684 + ((t693 * t809 + t811 * t888) * t778 + (t693 * t811 - t809 * t888) * t777) * t840) * t786;
	t662 = t813 * t673 + t805 * t674 + (((t667 * t847 + t668 * t849 + t704 * t816 + t711 * t817) * t693 - (t667 * t849 + t668 * t848 + t705 * t816 + t711 * t818) * t888) * t684 + ((t693 * t810 + t812 * t888) * t778 + (t693 * t812 - t810 * t888) * t777) * t840) * t786;
	t1 = [0, t662 * t781 + t664 * t775 + t775, t663 * t781 + t666 * t775 + t775, t774 * t915 + t802 * t784; 0, -t662 * t784 + t664 * t774 + t774, -t663 * t784 + t666 * t774 + t774, -t775 * t915 + t781 * t802; 0, 0, 0, t828 * t670 + t827 * t671 - t915 * t916;];
	JgD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobigD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:00
	% EndTime: 2020-04-13 14:18:02
	% DurationCPUTime: 1.16s
	% Computational Cost: add. (12594->80), mult. (20244->170), div. (678->9), fcn. (12648->10), ass. (0->93)
	t265 = 2 * pkin(7);
	t200 = sin(qJ(2));
	t204 = cos(pkin(19));
	t253 = sin(pkin(19));
	t254 = cos(qJ(2));
	t198 = t200 * t253 + t254 * t204;
	t251 = pkin(1) * t198;
	t196 = t198 * qJD(2);
	t209 = pkin(1) ^ 2;
	t220 = -t200 * t204 + t254 * t253;
	t252 = pkin(1) * t220;
	t235 = t252 * t265 + t209;
	t259 = (-pkin(8) - pkin(3));
	t186 = ((pkin(7) - t259) * (pkin(7) + t259)) + t235;
	t258 = (-pkin(8) + pkin(3));
	t187 = ((pkin(7) - t258) * (pkin(7) + t258)) + t235;
	t260 = pkin(1) * pkin(7);
	t226 = (t186 + t187) * t260;
	t181 = t196 * t226;
	t244 = t187 * t186;
	t210 = sqrt(-t244);
	t184 = 0.1e1 / t210;
	t263 = t181 * t184;
	t177 = t251 * t263;
	t208 = pkin(7) ^ 2;
	t192 = t208 + t235;
	t188 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t192;
	t193 = -pkin(7) - t252;
	t233 = t193 * t265;
	t229 = -t188 + t233;
	t195 = t220 * qJD(2);
	t242 = t195 * t210;
	t167 = -t177 + (t229 * t196 - t242) * pkin(1);
	t231 = t209 * t198 * t196;
	t227 = pkin(7) * t231;
	t241 = t196 * t210;
	t245 = t184 * t193;
	t168 = -t181 * t245 - 0.2e1 * t227 + (t195 * t188 - t241) * pkin(1);
	t240 = t198 * t210;
	t179 = -pkin(1) * t240 - t188 * t193;
	t205 = cos(pkin(18));
	t237 = t205 * t179;
	t180 = t188 * t251 - t193 * t210;
	t202 = sin(pkin(18));
	t239 = t202 * t180;
	t189 = 0.1e1 / t192;
	t207 = 0.1e1 / pkin(8);
	t243 = t189 * t207;
	t175 = (t237 / 0.2e1 - t239 / 0.2e1) * t243;
	t172 = 0.1e1 / t175 ^ 2;
	t190 = 0.1e1 / t192 ^ 2;
	t232 = t190 * t260;
	t217 = (t237 - t239) * t232;
	t255 = t205 / 0.2e1;
	t257 = -t202 / 0.2e1;
	t264 = ((t167 * t255 + t168 * t257) * t189 + t196 * t217) * t207 * t172;
	t182 = t198 * t226;
	t262 = t184 * t182;
	t225 = t208 * t231;
	t261 = -t184 * (t195 * t226 - 0.4e1 * t225) - 0.1e1 / t244 * t181 * t262;
	t171 = 0.1e1 / t175;
	t256 = t202 / 0.2e1;
	t250 = pkin(7) * t209;
	t236 = t205 * t180;
	t246 = t179 * t202;
	t216 = (t236 + t246) * t232;
	t159 = ((t167 * t256 + t168 * t255) * t189 + t196 * t216) * t207;
	t176 = (t236 / 0.2e1 + t246 / 0.2e1) * t243;
	t174 = t176 ^ 2;
	t166 = t172 * t174 + 0.1e1;
	t247 = t172 * t176;
	t248 = t171 * t264;
	t249 = (t159 * t247 - t174 * t248) / t166 ^ 2;
	t238 = t202 * t189;
	t228 = -t188 - t262;
	t169 = (-t220 * t210 + (t228 + t233) * t198) * pkin(1);
	t170 = -t182 * t245 - 0.2e1 * t198 ^ 2 * t250 + (t188 * t220 - t240) * pkin(1);
	t162 = ((t169 * t255 + t170 * t257) * t189 + t198 * t217) * t207;
	t163 = ((t169 * t256 + t170 * t255) * t189 + t198 * t216) * t207;
	t164 = 0.1e1 / t166;
	t234 = qJD(1) * (-t162 * t247 + t163 * t171) * t164;
	t230 = t189 * t255;
	t224 = t189 * t190 * t225;
	t222 = t202 * t224;
	t221 = 0.4e1 * t205 * t224;
	t219 = t167 * t198 + t169 * t196 + t179 * t195;
	t218 = t168 * t198 + t170 * t196 + t180 * t195;
	t203 = cos(qJ(1));
	t201 = sin(qJ(1));
	t161 = 0.4e1 * t227 + (-t220 * t263 + t241 + t261 * t198 + (t229 - t262) * t195) * pkin(1);
	t160 = -t177 + t261 * t193 + (-0.4e1 * t195 * t198 - 0.2e1 * t196 * t220) * t250 + (t228 * t196 - t242) * pkin(1);
	t155 = (-t164 * t264 - 0.2e1 * t171 * t249) * t163 + (0.2e1 * t247 * t249 + (-t159 * t172 + 0.2e1 * t176 * t248) * t164) * t162 + ((t160 * t230 + t180 * t221 + t161 * t238 / 0.2e1 + 0.4e1 * t179 * t222) * t171 - (t161 * t230 + t179 * t221 - t160 * t238 / 0.2e1 - 0.4e1 * t180 * t222) * t247 + ((t218 * t171 - t219 * t247) * t205 + (t219 * t171 + t218 * t247) * t202) * t232) * t164 * t207;
	t1 = [0, t155 * t201 + t203 * t234, 0, 0; 0, -t155 * t203 + t201 * t234, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobigD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:01
	% EndTime: 2020-04-13 14:18:03
	% DurationCPUTime: 1.12s
	% Computational Cost: add. (12596->81), mult. (20246->170), div. (678->9), fcn. (12650->10), ass. (0->93)
	t227 = sin(qJ(2));
	t230 = cos(pkin(19));
	t278 = sin(pkin(19));
	t279 = cos(qJ(2));
	t223 = t227 * t278 + t279 * t230;
	t276 = pkin(7) * t223;
	t221 = t223 * qJD(2);
	t234 = pkin(1) ^ 2;
	t245 = -t227 * t230 + t279 * t278;
	t277 = pkin(7) * t245;
	t286 = -2 * pkin(1);
	t260 = -t277 * t286 + t234;
	t284 = -pkin(8) - pkin(3);
	t211 = (pkin(7) - t284) * (pkin(7) + t284) + t260;
	t283 = -pkin(8) + pkin(3);
	t212 = (pkin(7) - t283) * (pkin(7) + t283) + t260;
	t285 = pkin(1) * pkin(7);
	t251 = (t211 + t212) * t285;
	t206 = t221 * t251;
	t269 = t212 * t211;
	t235 = sqrt(-t269);
	t209 = 0.1e1 / t235;
	t289 = t206 * t209;
	t202 = t276 * t289;
	t232 = pkin(7) ^ 2;
	t217 = t232 + t260;
	t213 = pkin(3) ^ 2 - pkin(8) ^ 2 + t217;
	t218 = pkin(1) + t277;
	t259 = t218 * t286;
	t254 = -t213 + t259;
	t220 = t245 * qJD(2);
	t267 = t220 * t235;
	t192 = -t202 + (t254 * t221 - t267) * pkin(7);
	t257 = t232 * t223 * t221;
	t252 = pkin(1) * t257;
	t266 = t221 * t235;
	t270 = t209 * t218;
	t193 = t206 * t270 - 0.2e1 * t252 + (t220 * t213 - t266) * pkin(7);
	t265 = t223 * t235;
	t204 = -pkin(7) * t265 + t218 * t213;
	t226 = cos(pkin(23));
	t263 = t226 * t204;
	t205 = t213 * t276 + t218 * t235;
	t225 = sin(pkin(23));
	t264 = t225 * t205;
	t214 = 0.1e1 / t217;
	t233 = 0.1e1 / pkin(3);
	t268 = t214 * t233;
	t200 = (-t263 / 0.2e1 + t264 / 0.2e1) * t268;
	t197 = 0.1e1 / t200 ^ 2;
	t215 = 0.1e1 / t217 ^ 2;
	t258 = t215 * t285;
	t242 = (-t263 + t264) * t258;
	t281 = -t226 / 0.2e1;
	t282 = t225 / 0.2e1;
	t290 = ((t192 * t281 + t193 * t282) * t214 + t221 * t242) * t233 * t197;
	t207 = t223 * t251;
	t288 = t209 * t207;
	t249 = t234 * t257;
	t287 = 0.1e1 / t269 * t206 * t288 + t209 * (t220 * t251 - 0.4e1 * t249);
	t196 = 0.1e1 / t200;
	t280 = t226 / 0.2e1;
	t275 = t232 * pkin(1);
	t262 = t226 * t205;
	t271 = t204 * t225;
	t241 = (t262 + t271) * t258;
	t184 = ((t192 * t282 + t193 * t280) * t214 + t221 * t241) * t233;
	t201 = (t262 / 0.2e1 + t271 / 0.2e1) * t268;
	t199 = t201 ^ 2;
	t191 = t199 * t197 + 0.1e1;
	t272 = t197 * t201;
	t273 = t196 * t290;
	t274 = (t184 * t272 - t199 * t273) / t191 ^ 2;
	t261 = t226 * t214;
	t256 = t214 * t282;
	t253 = -t213 - t288;
	t194 = (-t245 * t235 + (t253 + t259) * t223) * pkin(7);
	t195 = t207 * t270 - 0.2e1 * t223 ^ 2 * t275 + (t213 * t245 - t265) * pkin(7);
	t187 = ((t194 * t281 + t195 * t282) * t214 + t223 * t242) * t233;
	t188 = ((t194 * t282 + t195 * t280) * t214 + t223 * t241) * t233;
	t189 = 0.1e1 / t191;
	t255 = qJD(1) * ((-t187 * t272 + t188 * t196) * t189 + 0.1e1);
	t248 = t214 * t215 * t249;
	t247 = t226 * t248;
	t246 = 0.4e1 * t225 * t248;
	t244 = t192 * t223 + t194 * t221 + t204 * t220;
	t243 = t193 * t223 + t195 * t221 + t205 * t220;
	t229 = cos(qJ(1));
	t228 = sin(qJ(1));
	t186 = 0.4e1 * t252 + (-t245 * t289 + t266 - t287 * t223 + (t254 - t288) * t220) * pkin(7);
	t185 = -t202 + t287 * t218 + (-0.4e1 * t220 * t223 - 0.2e1 * t221 * t245) * t275 + (t253 * t221 - t267) * pkin(7);
	t180 = (-t189 * t290 - 0.2e1 * t196 * t274) * t188 + (0.2e1 * t272 * t274 + (-t184 * t197 + 0.2e1 * t201 * t273) * t189) * t187 + ((t185 * t261 / 0.2e1 + 0.4e1 * t205 * t247 + t186 * t256 + t204 * t246) * t196 - (-t186 * t261 / 0.2e1 - 0.4e1 * t204 * t247 + t185 * t256 + t205 * t246) * t272 + ((t243 * t196 + t244 * t272) * t226 + (t244 * t196 - t243 * t272) * t225) * t258) * t189 * t233;
	t1 = [0, t180 * t228 + t229 * t255, 0, 0; 0, -t180 * t229 + t228 * t255, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobigD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:00
	% EndTime: 2020-04-13 14:18:01
	% DurationCPUTime: 0.92s
	% Computational Cost: add. (6352->66), mult. (9880->147), div. (186->9), fcn. (6154->8), ass. (0->79)
	t201 = (pkin(1) ^ 2);
	t253 = -4 * t201;
	t199 = pkin(6) ^ 2;
	t194 = cos(pkin(20));
	t196 = cos(qJ(3));
	t236 = sin(pkin(20));
	t243 = sin(qJ(3));
	t191 = t243 * t194 + t196 * t236;
	t239 = pkin(6) * t191;
	t248 = 2 * pkin(1);
	t225 = t239 * t248 + t199;
	t186 = t201 + t225;
	t184 = 0.1e1 / t186 ^ 2;
	t241 = pkin(1) * t184;
	t192 = -t196 * t194 + t243 * t236;
	t190 = t192 * qJD(3);
	t247 = pkin(1) * pkin(6);
	t222 = t190 * t247;
	t246 = (-pkin(2) - pkin(13));
	t180 = ((pkin(1) - t246) * (pkin(1) + t246)) + t225;
	t245 = (-pkin(2) + pkin(13));
	t181 = ((pkin(1) - t245) * (pkin(1) + t245)) + t225;
	t226 = t180 + t181;
	t175 = t226 * t222;
	t231 = t181 * t180;
	t202 = sqrt(-t231);
	t178 = 0.1e1 / t202;
	t252 = t175 * t178;
	t213 = t226 * t247;
	t176 = t192 * t213;
	t250 = t178 * t176;
	t189 = t191 * qJD(3);
	t229 = t192 * t199;
	t217 = t190 * t229;
	t249 = -t178 * (t189 * t213 + t217 * t253) - 0.1e1 / t231 * t175 * t250;
	t182 = pkin(2) ^ 2 - pkin(13) ^ 2 + t186;
	t187 = -pkin(1) - t239;
	t228 = t192 * t202;
	t173 = -pkin(6) * t228 - t182 * t187;
	t169 = 0.1e1 / t173;
	t183 = 0.1e1 / t186;
	t170 = 0.1e1 / t173 ^ 2;
	t244 = t183 / 0.2e1;
	t242 = pkin(1) * t183;
	t240 = pkin(2) * t186;
	t238 = pkin(6) * t192;
	t237 = t187 * pkin(1);
	t232 = t178 * t187;
	t163 = -t176 * t232 - 0.2e1 * t199 * t192 ^ 2 * pkin(1) + (t182 * t191 - t228) * pkin(6);
	t174 = t182 * t238 - t187 * t202;
	t200 = 0.1e1 / pkin(2);
	t216 = t238 * t241;
	t159 = (t163 * t244 + t174 * t216) * t200;
	t235 = t159 * t169;
	t167 = t238 * t252;
	t230 = t189 * t202;
	t160 = -t167 + (-t230 - (t182 - 0.2e1 * t237) * t190) * pkin(6);
	t234 = t160 * t169 * t170;
	t233 = t170 * t174;
	t195 = sin(qJ(1));
	t224 = qJD(1) * t195;
	t197 = cos(qJ(1));
	t223 = qJD(1) * t197;
	t221 = t183 * t184 * t253;
	t172 = t174 ^ 2;
	t166 = t170 * t172 + 0.1e1;
	t164 = 0.1e1 / t166;
	t220 = t164 * t240;
	t219 = t169 * t240;
	t215 = t182 + t250;
	t162 = (-t191 * t202 + (-t215 + 0.2e1 * t237) * t192) * pkin(6);
	t158 = (t162 * t244 + t173 * t216) * t200;
	t218 = t158 * t233;
	t211 = 0.2e1 * t158 * t174 * t240;
	t208 = t189 * t182 - t190 * t202;
	t161 = t208 * pkin(6) - t175 * t232 - t217 * t248;
	t156 = 0.2e1 * (-t218 + t235) * t220;
	t155 = 0.2e1 * (-0.2e1 * t159 * t219 + t170 * t211) * (t161 * t233 - t172 * t234) / t166 ^ 2 + 0.2e1 * (-t159 * t160 - (-(t173 * t221 - 0.2e1 * t242) * t217 + ((-t191 * t252 + t249 * t192 - t208) * t244 + (t160 * t192 + t162 * t190) * t241 + (-t244 * t250 + (t173 * t184 + t183 * t187) * pkin(1)) * t189) * pkin(6)) * t200 * t174 - t158 * t161) * t170 * t220 + 0.2e1 * (-(0.2e1 * t235 - 0.2e1 * t218) * pkin(2) * t222 + ((-0.4e1 * pkin(1) * t189 * t229 + t249 * t187 - t167) * t244 - (t174 * t192 * t221 + t191 * t242) * t199 * t190 + ((-t215 * t190 - t230) * t244 + (t161 * t192 + t163 * t190 + t189 * t174) * t241) * pkin(6)) * t200 * t219 + t211 * t234) * t164;
	t1 = [0, t223, t155 * t195 + t156 * t223, 0; 0, t224, -t155 * t197 + t156 * t224, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobigD_rot_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:01
	% EndTime: 2020-04-13 14:18:03
	% DurationCPUTime: 1.17s
	% Computational Cost: add. (7622->82), mult. (11768->185), div. (258->13), fcn. (7134->8), ass. (0->95)
	t362 = -2 * pkin(1);
	t287 = cos(pkin(20));
	t289 = cos(qJ(3));
	t345 = sin(pkin(20));
	t352 = sin(qJ(3));
	t284 = t287 * t352 + t289 * t345;
	t285 = -t289 * t287 + t352 * t345;
	t348 = pkin(6) * t284;
	t326 = pkin(1) * t348;
	t281 = 0.2e1 * t326;
	t293 = pkin(6) ^ 2;
	t330 = t281 + t293;
	t355 = (-pkin(2) - pkin(13));
	t269 = ((pkin(1) - t355) * (pkin(1) + t355)) + t330;
	t354 = (-pkin(2) + pkin(13));
	t270 = ((pkin(1) - t354) * (pkin(1) + t354)) + t330;
	t338 = t270 * t269;
	t297 = sqrt(-t338);
	t294 = pkin(2) ^ 2;
	t296 = pkin(1) ^ 2;
	t329 = t293 + t296;
	t318 = -pkin(13) ^ 2 + t329;
	t275 = t281 + t294 + t318;
	t331 = t269 + t270;
	t356 = pkin(1) * pkin(6);
	t313 = t331 * t356;
	t262 = t285 * t313;
	t267 = 0.1e1 / t297;
	t340 = t267 * t262;
	t316 = t275 + t340;
	t280 = -pkin(1) - t348;
	t346 = t280 * pkin(1);
	t247 = (-t284 * t297 + (-t316 + 0.2e1 * t346) * t285) * pkin(6);
	t334 = t285 * t297;
	t322 = pkin(6) * t334;
	t259 = -t280 * t275 - t322;
	t295 = 0.1e1 / pkin(2);
	t347 = pkin(6) * t285;
	t279 = t281 + t329;
	t277 = 0.1e1 / t279 ^ 2;
	t350 = pkin(1) * t277;
	t317 = t347 * t350;
	t276 = 0.1e1 / t279;
	t353 = t276 / 0.2e1;
	t242 = (t247 * t353 + t259 * t317) * t295;
	t339 = t267 * t280;
	t248 = -t262 * t339 + t293 * t285 ^ 2 * t362 + (t284 * t275 - t334) * pkin(6);
	t260 = t275 * t347 - t280 * t297;
	t243 = (t248 * t353 + t260 * t317) * t295;
	t255 = 0.1e1 / t259;
	t256 = 0.1e1 / t259 ^ 2;
	t342 = t256 * t260;
	t361 = -t242 * t342 + t243 * t255;
	t349 = pkin(2) * t279;
	t360 = 0.4e1 * t242 * t260 * t349;
	t274 = t294 - t318 - 0.2e1 * t326;
	t271 = 0.1e1 / t274;
	t272 = 0.1e1 / t274 ^ 2;
	t357 = 0.2e1 * t267;
	t351 = pkin(1) * t276;
	t283 = t285 * qJD(3);
	t327 = t283 * t356;
	t261 = t331 * t327;
	t341 = t261 * t285;
	t253 = t267 * pkin(6) * t341;
	t282 = t284 * qJD(3);
	t336 = t282 * t297;
	t245 = -t253 + (-t336 - (t275 - 0.2e1 * t346) * t283) * pkin(6);
	t343 = t245 * t255 * t256;
	t337 = t270 * t272;
	t335 = t285 * t293;
	t305 = t282 * t275 - t283 * t297;
	t319 = t283 * t335;
	t246 = pkin(6) * t305 - t261 * t339 + t319 * t362;
	t258 = t260 ^ 2;
	t252 = t258 * t256 + 0.1e1;
	t250 = 0.1e1 / t252;
	t311 = t296 * t319;
	t254 = t282 * t313 - 0.4e1 * t311;
	t265 = -t269 * t337 + 0.1e1;
	t263 = 0.1e1 / t265;
	t273 = t271 * t272;
	t312 = 0.4e1 / t338 * t261 * t340;
	t306 = -t312 / 0.4e1;
	t308 = pkin(1) * t272 * t322;
	t320 = t271 * t340;
	t323 = t255 * t349;
	t324 = t250 * t349;
	t325 = -0.4e1 * t276 * t277 * t296;
	t328 = t272 * t356;
	t332 = -(-0.2e1 * t320 + 0.4e1 * t308) / t265 ^ 2 * (-t337 + (-0.2e1 * t270 * t273 - t272) * t269) * t327 + (t271 * t312 / 0.4e1 + (0.8e1 * t273 * t311 - 0.2e1 * t282 * t328) * t297 + (t254 * t271 / 0.2e1 + (-t262 * t283 - t341) * t328) * t357) * t263 + (-0.4e1 * t243 * t323 + t256 * t360) * (t246 * t342 - t258 * t343) / t252 ^ 2 - 0.2e1 * (t243 * t245 + (-(t259 * t325 - 0.2e1 * t351) * t319 + ((t285 * t306 + (-t284 * t261 / 0.2e1 - t282 * t262 / 0.2e1 - t285 * t254 / 0.2e1) * t357 - t305) * t353 + (t280 * t282 * t276 + (t245 * t285 + t247 * t283 + t259 * t282) * t277) * pkin(1)) * pkin(6)) * t295 * t260 + t242 * t246) * t256 * t324 + (-0.4e1 * t361 * pkin(2) * t327 + 0.2e1 * ((-0.4e1 * pkin(1) * t282 * t335 - t253 + (-t267 * t254 + t306) * t280) * t353 - (t260 * t285 * t325 + t284 * t351) * t293 * t283 + ((-t283 * t316 - t336) * t353 + (t246 * t285 + t248 * t283 + t260 * t282) * t350) * pkin(6)) * t295 * t323 + t343 * t360) * t250;
	t315 = qJD(1) * (0.2e1 * t361 * t324 + (-0.2e1 * t308 + t320) * t263);
	t290 = cos(qJ(1));
	t288 = sin(qJ(1));
	t1 = [0, qJD(1) * t290, t288 * t332 + t290 * t315, 0; 0, qJD(1) * t288, t288 * t315 - t290 * t332, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobigD_rot_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:31
	% EndTime: 2020-04-13 14:18:54
	% DurationCPUTime: 23.98s
	% Computational Cost: add. (542986->224), mult. (846766->491), div. (31210->18), fcn. (529626->16), ass. (0->228)
	t561 = pkin(7) ^ 2;
	t565 = pkin(1) ^ 2;
	t555 = sin(qJ(2));
	t559 = cos(pkin(19));
	t683 = sin(pkin(19));
	t684 = cos(qJ(2));
	t584 = -t555 * t559 + t684 * t683;
	t676 = pkin(7) * t584;
	t705 = -2 * pkin(1);
	t641 = -t676 * t705 + t565;
	t541 = t561 + t641;
	t538 = 0.1e1 / t541;
	t547 = t555 * t683 + t684 * t559;
	t545 = t547 * qJD(2);
	t564 = 0.1e1 / pkin(3);
	t537 = pkin(3) ^ 2 - pkin(8) ^ 2 + t541;
	t542 = pkin(1) + t676;
	t702 = -pkin(8) - pkin(3);
	t535 = (pkin(7) - t702) * (pkin(7) + t702) + t641;
	t701 = -pkin(8) + pkin(3);
	t536 = (pkin(7) - t701) * (pkin(7) + t701) + t641;
	t664 = t536 * t535;
	t567 = sqrt(-t664);
	t659 = t547 * t567;
	t528 = -pkin(7) * t659 + t537 * t542;
	t557 = cos(qJ(3));
	t645 = t557 * t528;
	t675 = pkin(7) * t547;
	t529 = t537 * t675 + t542 * t567;
	t554 = sin(qJ(3));
	t650 = t554 * t529;
	t599 = -t645 + t650;
	t539 = 0.1e1 / t541 ^ 2;
	t703 = pkin(1) * pkin(7);
	t637 = t539 * t703;
	t579 = t599 * t637;
	t644 = t557 * t529;
	t651 = t554 * t528;
	t590 = t651 / 0.2e1 + t644 / 0.2e1;
	t597 = 0.2e1 * (t535 + t536) * t703;
	t530 = t545 * t597;
	t533 = 0.1e1 / t567;
	t690 = -t533 / 0.2e1;
	t522 = t530 * t675 * t690;
	t638 = t542 * t705;
	t622 = -t537 + t638;
	t544 = t584 * qJD(2);
	t661 = t544 * t567;
	t509 = t522 + (t622 * t545 - t661) * pkin(7);
	t649 = t557 * t509;
	t710 = t545 * t561;
	t630 = t547 * t710;
	t612 = pkin(1) * t630;
	t689 = t533 / 0.2e1;
	t626 = t542 * t689;
	t660 = t545 * t567;
	t510 = t530 * t626 - 0.2e1 * t612 + (t544 * t537 - t660) * pkin(7);
	t654 = t554 * t510;
	t478 = (t545 * t579 + (-t649 / 0.2e1 + t654 / 0.2e1 + t590 * qJD(3)) * t538) * t564;
	t588 = t645 / 0.2e1 - t650 / 0.2e1;
	t598 = t644 + t651;
	t648 = t557 * t510;
	t655 = t554 * t509;
	t479 = (t598 * t545 * t637 + (t655 / 0.2e1 + t648 / 0.2e1 + t588 * qJD(3)) * t538) * t564;
	t551 = pkin(23) + pkin(22);
	t549 = sin(t551);
	t550 = cos(t551);
	t473 = t478 * t549 - t479 * t550;
	t563 = pkin(4) ^ 2;
	t562 = pkin(5) ^ 2;
	t662 = t538 * t564;
	t520 = t590 * t662;
	t521 = t588 * t662;
	t500 = t520 * t550 + t521 * t549;
	t679 = pkin(5) * t500;
	t704 = -2 * pkin(4);
	t642 = -t679 * t704 + t562;
	t497 = t563 + t642;
	t493 = pkin(9) ^ 2 - pkin(11) ^ 2 + t497;
	t700 = -pkin(9) - pkin(11);
	t491 = (pkin(4) - t700) * (pkin(4) + t700) + t642;
	t699 = -pkin(9) + pkin(11);
	t492 = (pkin(4) - t699) * (pkin(4) + t699) + t642;
	t668 = t492 * t491;
	t566 = sqrt(-t668);
	t616 = t550 * t478 + t479 * t549;
	t714 = -t473 * t566 + t616 * t493;
	t639 = 2 * pkin(4);
	t540 = t538 * t539;
	t611 = t565 * t630;
	t600 = t540 * t611;
	t713 = 0.4e1 * t600;
	t596 = pkin(5) * (t491 + t492) * t639;
	t455 = t473 * t596;
	t615 = t520 * t549 - t550 * t521;
	t623 = t615 * t562 * t704;
	t498 = -pkin(4) - t679;
	t481 = 0.1e1 / t566;
	t695 = -t481 / 0.2e1;
	t628 = t498 * t695;
	t445 = t714 * pkin(5) + t455 * t628 + t473 * t623;
	t678 = pkin(5) * t615;
	t468 = -t493 * t498 - t566 * t678;
	t465 = 0.1e1 / t468 ^ 2;
	t469 = t493 * t678 - t498 * t566;
	t467 = t469 ^ 2;
	t458 = t465 * t467 + 0.1e1;
	t671 = t465 * t469;
	t621 = t498 * t639 - t493;
	t691 = -t615 / 0.2e1;
	t627 = t481 * t691;
	t708 = t616 * t566;
	t444 = (t455 * t627 + t621 * t473 - t708) * pkin(5);
	t464 = 0.1e1 / t468;
	t673 = t444 * t464 * t465;
	t712 = 0.2e1 * (t445 * t671 - t467 * t673) / t458 ^ 2;
	t553 = cos(pkin(23));
	t657 = t553 * t528;
	t552 = sin(pkin(23));
	t658 = t552 * t529;
	t518 = (-t657 / 0.2e1 + t658 / 0.2e1) * t662;
	t515 = 0.1e1 / t518 ^ 2;
	t581 = (-t657 + t658) * t637;
	t687 = -t553 / 0.2e1;
	t688 = t552 / 0.2e1;
	t711 = ((t509 * t687 + t510 * t688) * t538 + t545 * t581) * t564 * t515;
	t456 = 0.1e1 / t458;
	t610 = pkin(4) * pkin(5) * pkin(9) * t456 * t473;
	t674 = pkin(9) * t497;
	t634 = t456 * t674;
	t614 = t465 * t634;
	t633 = t464 * t674;
	t707 = -t444 * t614 - 0.2e1 * t464 * t610 - t633 * t712;
	t632 = t469 * t674;
	t613 = t465 * t632;
	t706 = 0.2e1 * t456 * t632 * t673 - t445 * t614 + 0.2e1 * t610 * t671 + t613 * t712;
	t494 = 0.1e1 / t497;
	t514 = 0.1e1 / t518;
	t495 = 0.1e1 / t497 ^ 2;
	t698 = -t455 / 0.2e1;
	t586 = t547 * t598;
	t531 = t547 * t597;
	t682 = pkin(1) * t561;
	t512 = t531 * t626 - 0.2e1 * t547 ^ 2 * t682 + (t537 * t584 - t659) * pkin(7);
	t646 = t557 * t512;
	t608 = t531 * t690 - t537;
	t511 = (-t584 * t567 + (t608 + t638) * t547) * pkin(7);
	t653 = t554 * t511;
	t591 = t653 / 0.2e1 + t646 / 0.2e1;
	t489 = (-t591 * t538 - t586 * t637) * t564;
	t647 = t557 * t511;
	t652 = t554 * t512;
	t589 = -t647 / 0.2e1 + t652 / 0.2e1;
	t490 = (t589 * t538 + t547 * t579) * t564;
	t475 = t489 * t550 + t490 * t549;
	t459 = t475 * t596;
	t697 = -t459 / 0.2e1;
	t474 = t615 * t596;
	t696 = -t474 / 0.2e1;
	t527 = t544 * t597 - 0.8e1 * t611;
	t631 = t533 / t664 * t531 * t530;
	t485 = t522 + (t631 / 0.4e1 + t527 * t689) * t542 + (-0.4e1 * t544 * t547 - 0.2e1 * t545 * t584) * t682 + (t608 * t545 - t661) * pkin(7);
	t694 = t485 / 0.2e1;
	t486 = 0.4e1 * t612 + (t660 - t547 * t631 / 0.4e1 + t622 * t544 + (-t584 * t530 / 0.2e1 - t544 * t531 / 0.2e1 - t547 * t527 / 0.2e1) * t533) * pkin(7);
	t693 = -t486 / 0.2e1;
	t692 = t494 / 0.2e1;
	t686 = t553 / 0.2e1;
	t685 = -t557 / 0.2e1;
	t681 = pkin(4) * t494;
	t680 = pkin(4) * t495;
	t560 = 0.1e1 / pkin(9);
	t677 = pkin(5) * t560;
	t656 = t553 * t529;
	t665 = t528 * t552;
	t580 = (t656 + t665) * t637;
	t484 = ((t509 * t688 + t510 * t686) * t538 + t545 * t580) * t564;
	t519 = (t656 / 0.2e1 + t665 / 0.2e1) * t662;
	t517 = t519 ^ 2;
	t506 = t515 * t517 + 0.1e1;
	t666 = t515 * t519;
	t669 = t514 * t711;
	t672 = 0.2e1 * (t484 * t666 - t517 * t669) / t506 ^ 2;
	t670 = t473 * t562;
	t667 = t494 * t498;
	t663 = t538 * t553;
	t460 = (t599 * t713 + (t591 * qJD(3) + t486 * t685 + t554 * t694) * t538 + ((-t647 + t652) * t545 + t599 * t544 + (t598 * qJD(3) - t649 + t654) * t547) * t637) * t564;
	t461 = (-0.4e1 * t565 * t540 * t586 * t710 + (t589 * qJD(3) + t485 * t685 + t554 * t693) * t538 + ((-t646 - t653) * t545 - t598 * t544 + (t599 * qJD(3) - t648 - t655) * t547) * t637) * t564;
	t451 = t460 * t549 + t461 * t550;
	t617 = -0.8e1 * t563 * t670;
	t441 = t451 * t596 + t475 * t617;
	t476 = -t489 * t549 + t490 * t550;
	t446 = (t459 * t627 + t621 * t475 - t476 * t566) * pkin(5);
	t636 = pkin(5) * t680;
	t620 = t475 * t636;
	t442 = (t446 * t692 + t468 * t620) * t560;
	t447 = t459 * t628 + t475 * t623 + (-t475 * t566 + t476 * t493) * pkin(5);
	t443 = (t447 * t692 + t469 * t620) * t560;
	t450 = t460 * t550 - t461 * t549;
	t487 = ((t511 * t687 + t512 * t688) * t538 + t547 * t581) * t564;
	t488 = ((t511 * t688 + t512 * t686) * t538 + t547 * t580) * t564;
	t504 = 0.1e1 / t506;
	t635 = 0.4e1 * t494 * t495 * t563;
	t578 = t560 * (t468 * t635 + 0.2e1 * t681) * t670;
	t582 = t510 * t547 + t512 * t545 + t529 * t544;
	t583 = t509 * t547 + t511 * t545 + t528 * t544;
	t587 = t552 * t713;
	t593 = t553 * t600;
	t601 = t456 * t613;
	t602 = t456 * t560 * t633;
	t629 = -t455 * t481 / t668 / 0.4e1;
	t609 = t615 * t629;
	t618 = t469 * t635;
	t624 = t562 * t639;
	t625 = t538 * t688;
	t643 = 0.2e1 * (((t441 * t695 + t459 * t629) * t498 + (-t451 * t615 - t475 * t616) * t624) * t692 + (t475 * t618 - t476 * t681) * t670 + ((t450 * t493 - t451 * t566 + (t473 * t697 + t475 * t698) * t481) * t692 + (t445 * t475 + t447 * t473 + t451 * t469) * t680) * pkin(5)) * t602 - 0.2e1 * (t475 * t578 + ((-t450 * t566 + t459 * t609 - t451 * t493 + (t441 * t691 + t476 * t698 + t616 * t697) * t481) * t692 + (t451 * t667 + (t444 * t475 + t446 * t473 + t451 * t468) * t495) * pkin(4)) * t677) * t601 + 0.2e1 * t707 * t443 + 0.2e1 * t706 * t442 + (-t504 * t711 - t514 * t672) * t488 + (t666 * t672 + (-t484 * t515 + 0.2e1 * t519 * t669) * t504) * t487 + ((t486 * t625 + t528 * t587 + 0.4e1 * t529 * t593 + t663 * t694) * t514 - (t485 * t625 - 0.4e1 * t528 * t593 + t529 * t587 + t663 * t693) * t666 + ((t582 * t514 + t583 * t666) * t553 + (t583 * t514 - t582 * t666) * t552) * t637) * t504 * t564;
	t453 = (t474 * t627 - t500 * t566 + t615 * t621) * pkin(5);
	t619 = t615 * t636;
	t448 = (t453 * t692 + t468 * t619) * t560;
	t454 = t474 * t628 + t615 * t623 + (t493 * t500 - t566 * t615) * pkin(5);
	t449 = (t454 * t692 + t469 * t619) * t560;
	t606 = 0.2e1 * t634;
	t640 = qJD(1) * (-t448 * t671 + t449 * t464) * t606;
	t607 = qJD(1) * ((-t442 * t671 + t443 * t464) * t606 + (-t487 * t666 + t488 * t514) * t504 + 0.1e1);
	t558 = cos(qJ(1));
	t556 = sin(qJ(1));
	t452 = t596 * t616 + t615 * t617;
	t436 = 0.2e1 * (((t452 * t695 + t474 * t629) * t498 - 0.2e1 * t615 * t616 * t624) * t692 + (-t500 * t681 + t615 * t618) * t670 + ((-t708 - t473 * t493 + (t473 * t696 + t615 * t698) * t481) * t692 + (t445 * t615 + t454 * t473 + t469 * t616) * t680) * pkin(5)) * t602 - 0.2e1 * (t615 * t578 + ((t474 * t609 + (t452 * t691 + t500 * t698 + t616 * t696) * t481 - t714) * t692 + (t616 * t667 + (t444 * t615 + t453 * t473 + t468 * t616) * t495) * pkin(4)) * t677) * t601 + 0.2e1 * t707 * t449 + 0.2e1 * t706 * t448;
	t1 = [0, t643 * t556 + t558 * t607, t436 * t556 + t558 * t640, 0; 0, t556 * t607 - t643 * t558, -t436 * t558 + t556 * t640, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
end