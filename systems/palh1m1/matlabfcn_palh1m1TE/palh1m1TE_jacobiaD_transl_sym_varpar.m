% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% palh1m1TE
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JaD_transl [3x4]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-13 14:34
% Revision: 394980f89398455cc479283a21eae791ed9f69cb (2020-04-12)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = palh1m1TE_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(3,1),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1TE_jacobiaD_transl_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1TE_jacobiaD_transl_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'palh1m1TE_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1TE_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1TE_jacobiaD_transl_sym_varpar: pkin has to be [23x1] (double)');
JaD_transl=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:58
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (17->14), mult. (60->29), div. (0->0), fcn. (38->4), ass. (0->12)
	t17 = sin(qJ(1));
	t26 = qJD(1) * t17;
	t19 = cos(qJ(1));
	t25 = qJD(1) * t19;
	t24 = qJD(2) * t17;
	t23 = qJD(2) * t19;
	t16 = sin(qJ(2));
	t18 = cos(qJ(2));
	t22 = r_i_i_C(1) * t18 - r_i_i_C(2) * t16;
	t21 = r_i_i_C(1) * t16 + r_i_i_C(2) * t18 - pkin(16);
	t20 = t22 * qJD(2);
	t1 = [t22 * t24 + (-r_i_i_C(3) * t17 + t21 * t19) * qJD(1), (-t16 * t26 + t18 * t23) * r_i_i_C(2) + (t16 * t23 + t18 * t26) * r_i_i_C(1), 0, 0; -t19 * t20 + (r_i_i_C(3) * t19 + t21 * t17) * qJD(1), (t16 * t25 + t18 * t24) * r_i_i_C(2) + (t16 * t24 - t18 * t25) * r_i_i_C(1), 0, 0; 0, -t20, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:17:59
	% EndTime: 2020-04-13 14:17:59
	% DurationCPUTime: 0.08s
	% Computational Cost: add. (93->24), mult. (298->44), div. (0->0), fcn. (269->6), ass. (0->25)
	t57 = sin(qJ(3));
	t58 = sin(qJ(2));
	t60 = cos(qJ(3));
	t61 = cos(qJ(2));
	t67 = t57 * t58 - t60 * t61;
	t76 = qJD(2) + qJD(3);
	t63 = t76 * t67;
	t68 = t57 * t61 + t58 * t60;
	t64 = t76 * t68;
	t59 = sin(qJ(1));
	t62 = cos(qJ(1));
	t65 = qJD(1) * t67;
	t51 = t59 * t65 - t64 * t62;
	t66 = qJD(1) * t68;
	t52 = t59 * t66 + t63 * t62;
	t75 = t52 * r_i_i_C(1) - t51 * r_i_i_C(2);
	t53 = t59 * t64 + t62 * t65;
	t54 = -t59 * t63 + t62 * t66;
	t74 = -t54 * r_i_i_C(1) + t53 * r_i_i_C(2);
	t73 = -t64 * r_i_i_C(1) + t63 * r_i_i_C(2);
	t72 = qJD(1) * t61;
	t71 = qJD(2) * t58;
	t70 = qJD(2) * t61 * pkin(1);
	t69 = pkin(1) * t58 - pkin(16);
	t1 = [t59 * t70 + t53 * r_i_i_C(1) + t54 * r_i_i_C(2) + (-r_i_i_C(3) * t59 + t69 * t62) * qJD(1), (t59 * t72 + t62 * t71) * pkin(1) + t75, t75, 0; -t62 * t70 + t51 * r_i_i_C(1) + t52 * r_i_i_C(2) + (r_i_i_C(3) * t62 + t69 * t59) * qJD(1), (t59 * t71 - t62 * t72) * pkin(1) + t74, t74, 0; 0, -t70 + t73, t73, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:19:09
	% EndTime: 2020-04-13 14:20:11
	% DurationCPUTime: 63.89s
	% Computational Cost: add. (1690937->315), mult. (2678206->559), div. (89600->10), fcn. (1667249->16), ass. (0->253)
	t870 = cos(qJ(3));
	t871 = cos(qJ(2));
	t1001 = t870 * t871;
	t867 = sin(qJ(3));
	t868 = sin(qJ(2));
	t1005 = t867 * t868;
	t1054 = t1001 - t1005;
	t872 = cos(qJ(1));
	t837 = t1054 * t872;
	t877 = pkin(4) ^ 2;
	t875 = pkin(7) ^ 2;
	t1035 = sin(pkin(19));
	t873 = cos(pkin(19));
	t906 = t1035 * t871 - t868 * t873;
	t1028 = pkin(7) * t906;
	t1048 = -2 * pkin(1);
	t879 = pkin(1) ^ 2;
	t994 = -t1028 * t1048 + t879;
	t834 = t875 + t994;
	t831 = 0.1e1 / t834;
	t878 = 0.1e1 / pkin(3);
	t1011 = t831 * t878;
	t846 = t1035 * t868 + t871 * t873;
	t1027 = pkin(7) * t846;
	t830 = pkin(3) ^ 2 - pkin(8) ^ 2 + t834;
	t839 = pkin(1) + t1028;
	t1044 = pkin(7) + pkin(8);
	t1045 = pkin(7) - pkin(8);
	t828 = (pkin(3) + t1044) * (-pkin(3) + t1045) + t994;
	t829 = (-pkin(3) + t1044) * (pkin(3) + t1045) + t994;
	t1012 = t829 * t828;
	t881 = sqrt(-t1012);
	t813 = t1027 * t830 + t839 * t881;
	t1013 = t813 * t870;
	t1008 = t846 * t881;
	t812 = -pkin(7) * t1008 + t830 * t839;
	t1016 = t812 * t867;
	t912 = t1016 / 0.2e1 + t1013 / 0.2e1;
	t804 = t912 * t1011;
	t1014 = t813 * t867;
	t1015 = t812 * t870;
	t911 = t1015 / 0.2e1 - t1014 / 0.2e1;
	t805 = t911 * t1011;
	t864 = pkin(23) + pkin(22);
	t862 = sin(t864);
	t863 = cos(t864);
	t793 = t804 * t863 + t805 * t862;
	t1032 = pkin(4) * t793;
	t876 = pkin(5) ^ 2;
	t988 = 2 * pkin(5);
	t995 = t1032 * t988 + t876;
	t790 = t877 + t995;
	t1047 = 0.1e1 / t790;
	t874 = 0.1e1 / pkin(11);
	t999 = t874 * t1047;
	t1043 = -pkin(9) - pkin(11);
	t786 = (pkin(4) - t1043) * (pkin(4) + t1043) + t995;
	t1042 = pkin(11) - pkin(9);
	t787 = (pkin(4) - t1042) * (pkin(4) + t1042) + t995;
	t1021 = t787 * t786;
	t880 = sqrt(-t1021);
	t781 = 0.1e1 / t880;
	t1065 = 0.1e1 / t790 ^ 2;
	t842 = t846 * qJD(2);
	t1009 = t842 * t881;
	t1046 = pkin(1) * pkin(7);
	t915 = 0.2e1 * (t828 + t829) * t1046;
	t814 = t842 * t915;
	t841 = t906 * qJD(2);
	t977 = t842 * t846 * t875;
	t953 = pkin(1) * t977;
	t823 = 0.1e1 / t881;
	t1037 = t823 / 0.2e1;
	t966 = t839 * t1037;
	t800 = t814 * t966 - 0.2e1 * t953 + (t841 * t830 - t1009) * pkin(7);
	t1018 = t800 * t867;
	t1010 = t841 * t881;
	t1038 = -t823 / 0.2e1;
	t806 = t814 * t1027 * t1038;
	t985 = t839 * t1048;
	t959 = -t830 + t985;
	t799 = t806 + (t842 * t959 - t1010) * pkin(7);
	t1019 = t799 * t870;
	t930 = t1014 - t1015;
	t832 = 0.1e1 / t834 ^ 2;
	t984 = t832 * t1046;
	t896 = t930 * t984;
	t778 = (t842 * t896 + (-t1019 / 0.2e1 + t1018 / 0.2e1 + t912 * qJD(3)) * t831) * t878;
	t1017 = t800 * t870;
	t1020 = t799 * t867;
	t929 = t1013 + t1016;
	t1059 = t929 * t984;
	t779 = (t842 * t1059 + (t1020 / 0.2e1 + t1017 / 0.2e1 + t911 * qJD(3)) * t831) * t878;
	t955 = t778 * t863 + t779 * t862;
	t1064 = -0.2e1 * t955;
	t865 = sin(pkin(21));
	t1063 = t865 / 0.2e1;
	t866 = cos(pkin(21));
	t1062 = -t866 / 0.2e1;
	t954 = t804 * t862 - t805 * t863;
	t1031 = pkin(4) * t954;
	t1061 = -t1031 / 0.2e1;
	t1060 = t876 * t954;
	t869 = sin(qJ(1));
	t928 = t871 * t867 + t868 * t870;
	t836 = t928 * t869;
	t838 = t928 * t872;
	t791 = pkin(5) + t1032;
	t1026 = t791 * pkin(5);
	t788 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t790;
	t958 = -t788 - 0.2e1 * t1026;
	t1030 = pkin(4) * t880;
	t1034 = pkin(1) * t875;
	t815 = t846 * t915;
	t802 = t815 * t966 - 0.2e1 * t846 ^ 2 * t1034 + (t830 * t906 - t1008) * pkin(7);
	t1002 = t870 * t802;
	t940 = t1038 * t815 - t830;
	t801 = (-t906 * t881 + (t940 + t985) * t846) * pkin(7);
	t1007 = t867 * t801;
	t909 = t1007 / 0.2e1 + t1002 / 0.2e1;
	t784 = (-t1059 * t846 - t831 * t909) * t878;
	t1003 = t870 * t801;
	t1006 = t867 * t802;
	t907 = -t1003 / 0.2e1 + t1006 / 0.2e1;
	t785 = (t831 * t907 + t846 * t896) * t878;
	t775 = t784 * t863 + t785 * t862;
	t996 = t786 + t787;
	t914 = pkin(4) * t996 * t988;
	t766 = t775 * t914;
	t776 = -t784 * t862 + t785 * t863;
	t1029 = pkin(5) * t877;
	t987 = -0.2e1 * t1029;
	t960 = t954 * t987;
	t1022 = t781 * t791;
	t968 = t1022 / 0.2e1;
	t741 = t766 * t968 + t775 * t960 + (-t775 * t880 + t776 * t788) * pkin(4);
	t1050 = -t862 * t930 + t863 * t929;
	t1051 = t862 * t929 + t863 * t930;
	t901 = 0.4e1 * t929;
	t902 = 0.4e1 * t930;
	t1036 = -t870 / 0.2e1;
	t949 = t879 * t977;
	t811 = t841 * t915 - 0.8e1 * t949;
	t978 = t823 / t1012 * t815 * t814;
	t782 = t806 + (t978 / 0.4e1 + t811 * t1037) * t839 + (-0.4e1 * t841 * t846 - 0.2e1 * t842 * t906) * t1034 + (t842 * t940 - t1010) * pkin(7);
	t783 = 0.4e1 * t953 + (t1009 - t846 * t978 / 0.4e1 + t959 * t841 + (-t906 * t814 / 0.2e1 - t841 * t815 / 0.2e1 - t846 * t811 / 0.2e1) * t823) * pkin(7);
	t908 = t783 * t1036 + t867 * t782 / 0.2e1;
	t910 = -t867 * t783 / 0.2e1 + t782 * t1036;
	t931 = -t1002 - t1007;
	t932 = -t1003 + t1006;
	t933 = -t1017 - t1020;
	t934 = t1018 - t1019;
	t936 = t831 * t832 * t949;
	t742 = ((t862 * t902 - t863 * t901) * t936 + (t863 * t910 + t862 * t908 + (t862 * t909 + t863 * t907) * qJD(3)) * t831 + ((t862 * t932 + t863 * t931) * t842 - t1050 * t841 + (qJD(3) * t1051 + t862 * t934 + t863 * t933) * t846) * t984) * t878;
	t773 = t778 * t862 - t779 * t863;
	t890 = pkin(4) * t878 * ((t862 * t901 + t863 * t902) * t936 + (t863 * t908 - t862 * t910 + (-t862 * t907 + t863 * t909) * qJD(3)) * t831 + ((-t862 * t931 + t863 * t932) * t842 + t1051 * t841 + (qJD(3) * t1050 - t862 * t933 + t863 * t934) * t846) * t984);
	t1024 = t773 * t877;
	t979 = t876 * t1024;
	t893 = t781 * (t742 * t914 - 0.8e1 * t775 * t979);
	t765 = t773 * t914;
	t1025 = t765 * t781 / t1021;
	t942 = t791 * t1025 / 0.4e1;
	t1039 = -t781 / 0.2e1;
	t980 = pkin(4) * t1039;
	t950 = t765 * t980;
	t951 = t766 * t980;
	t983 = pkin(4) * pkin(5) * t1065;
	t957 = t874 * t983;
	t989 = t1047 / 0.2e1;
	t962 = t874 * t989;
	t982 = t775 * t1029;
	t1058 = (t775 * t950 + t766 * t942 + t791 * t893 / 0.2e1 + t788 * t890 + t982 * t1064 + (t776 * t987 + t951) * t773 + (-t1030 + t960) * t742) * t962 + t741 * t773 * t957;
	t991 = qJD(2) * t872;
	t1057 = qJD(1) * t869 * t871 + t868 * t991;
	t993 = qJD(1) * t872;
	t973 = t871 * t993;
	t992 = qJD(2) * t868;
	t1056 = -t869 * t992 + t973;
	t1055 = qJD(2) + qJD(3);
	t967 = t954 * t1039;
	t736 = (t765 * t967 + t773 * t958 - t880 * t955) * pkin(4);
	t1023 = t773 * t880;
	t737 = t765 * t968 + t773 * t960 + (t788 * t955 - t1023) * pkin(4);
	t769 = -t1030 * t954 + t788 * t791;
	t770 = t1031 * t788 + t791 * t880;
	t894 = (t769 * t865 + t770 * t866) * t983;
	t963 = t866 * t989;
	t965 = t865 * t989;
	t727 = (t736 * t965 + t737 * t963 + t773 * t894) * t874;
	t895 = (-t769 * t866 + t770 * t865) * t983;
	t964 = t1047 * t1062;
	t728 = (t736 * t964 + t737 * t965 + t773 * t895) * t874;
	t761 = (t769 * t965 + t770 * t963) * t874;
	t762 = (t769 * t964 + t770 * t965) * t874;
	t975 = t868 * t993;
	t820 = t1055 * t836 + t867 * t975 - t870 * t973;
	t952 = t1055 * t871;
	t969 = qJD(3) * t1005;
	t821 = -t869 * t969 + (t869 * t952 + t975) * t870 + t1056 * t867;
	t976 = t869 * t1005;
	t835 = -t1001 * t869 + t976;
	t947 = t727 * t836 + t728 * t835 + t761 * t821 + t762 * t820;
	t970 = t871 * t991;
	t818 = qJD(1) * t976 - qJD(3) * t838 - t1057 * t870 - t867 * t970;
	t819 = qJD(1) * t836 - t1055 * t837;
	t945 = -t727 * t837 - t728 * t838 - t761 * t818 + t762 * t819;
	t937 = t1065 * t979 * t999;
	t913 = t866 * t937;
	t938 = t866 * t957;
	t939 = t865 * t957;
	t1053 = -t736 * t938 + t737 * t939 - 0.4e1 * t769 * t913;
	t1052 = t736 * t939 + t737 * t938 + 0.4e1 * t770 * t913;
	t948 = t727 * t835 - t728 * t836 + t761 * t820 - t762 * t821;
	t1049 = -t727 * t838 + t728 * t837 + t761 * t819 + t762 * t818;
	t1041 = -t765 / 0.2e1;
	t774 = t954 * t914;
	t1040 = -t774 / 0.2e1;
	t981 = qJD(2) * t871 * pkin(1);
	t961 = pkin(1) * t868 - pkin(16);
	t956 = 0.4e1 * t954 * t1024;
	t826 = -t867 * t992 + t870 * t952 - t969;
	t827 = t1055 * t928;
	t944 = t1054 * t728 - t727 * t928 - t761 * t826 - t762 * t827;
	t943 = -t1054 * t727 - t728 * t928 + t761 * t827 - t762 * t826;
	t941 = -t954 * t1025 / 0.4e1;
	t935 = 0.2e1 * t781 * t996;
	t924 = t742 * t938;
	t923 = t769 * t939;
	t922 = t773 * t939;
	t921 = t773 * t938;
	t917 = t770 * t939;
	t916 = t955 * t938;
	t905 = 0.4e1 * t865 * t937;
	t898 = t775 * t905;
	t897 = t954 * t905;
	t892 = (pkin(5) * t956 + (t1023 + t774 * t941 + (t1040 * t955 + t1041 * t793 + t1060 * t956) * t781 + (-t788 + (t1061 * t935 - 0.2e1 * t791) * pkin(5)) * t955) * pkin(4)) * t999;
	t891 = (t774 * t942 + (-0.4e1 * t773 * t1022 * t1060 + (t1064 * t954 - t773 * t793) * t988) * t877 + (-t773 * t788 + (t1040 * t773 + t1041 * t954) * t781 + (-t880 + t935 * t1026 / 0.2e1) * t955) * pkin(4)) * t962;
	t889 = (t893 * t1061 + 0.4e1 * t773 * t982 + t776 * t950 - t880 * t890 + t955 * t951 + (t742 * t958 + t766 * t941) * pkin(4)) * t999;
	t825 = t827 * pkin(5);
	t817 = t821 * pkin(5);
	t816 = t819 * pkin(5);
	t746 = t774 * t968 + t954 * t960 + (t788 * t793 - t880 * t954) * pkin(4);
	t745 = (t774 * t967 - t793 * t880 + t954 * t958) * pkin(4);
	t740 = (t766 * t967 + t775 * t958 - t776 * t880) * pkin(4);
	t733 = (t745 * t964 + t746 * t965 + t895 * t954) * t874;
	t732 = (t745 * t965 + t746 * t963 + t894 * t954) * t874;
	t731 = (t740 * t964 + t741 * t965 + t775 * t895) * t874;
	t730 = (t740 * t965 + t741 * t963 + t775 * t894) * t874;
	t711 = t1053 * t954 + t1062 * t892 - t745 * t921 + t746 * t922 - t769 * t916 + t770 * t897 + t865 * t891 + t917 * t955;
	t710 = t1052 * t954 + t1063 * t892 + t745 * t922 + t746 * t921 + t769 * t897 + t770 * t916 + t866 * t891 + t923 * t955;
	t709 = t1053 * t775 + t1058 * t865 + t1062 * t889 - t740 * t921 + t742 * t917 - t769 * t924 + t770 * t898;
	t708 = t1052 * t775 + t1058 * t866 + t1063 * t889 + t740 * t922 + t742 * t923 + t769 * t898 + t770 * t924;
	t1 = [t947 * r_i_i_C(1) - t948 * r_i_i_C(2) + t820 * pkin(5) + t869 * t981 + (-r_i_i_C(3) * t869 + t872 * t961) * qJD(1), (-t708 * t838 + t709 * t837 + t730 * t819 + t731 * t818 + t945) * r_i_i_C(1) + (-t708 * t837 - t709 * t838 - t730 * t818 + t731 * t819 - t1049) * r_i_i_C(2) + t816 + t1057 * pkin(1), (-t710 * t838 + t711 * t837 + t732 * t819 + t733 * t818 + t945) * r_i_i_C(1) + (-t710 * t837 - t711 * t838 - t732 * t818 + t733 * t819 - t1049) * r_i_i_C(2) + t816, 0; t1049 * r_i_i_C(1) + t945 * r_i_i_C(2) + t818 * pkin(5) - pkin(1) * t970 + (r_i_i_C(3) * t872 + t869 * t961) * qJD(1), (-t708 * t836 - t709 * t835 - t730 * t821 - t731 * t820 + t948) * r_i_i_C(1) + (t708 * t835 - t709 * t836 + t730 * t820 - t731 * t821 + t947) * r_i_i_C(2) - t817 - t1056 * pkin(1), (-t710 * t836 - t711 * t835 - t732 * t821 - t733 * t820 + t948) * r_i_i_C(1) + (t710 * t835 - t711 * t836 + t732 * t820 - t733 * t821 + t947) * r_i_i_C(2) - t817, 0; 0, (t1054 * t708 + t709 * t928 - t730 * t827 + t731 * t826 + t944) * r_i_i_C(1) + (t1054 * t709 - t708 * t928 - t730 * t826 - t731 * t827 + t943) * r_i_i_C(2) - t825 - t981, (t1054 * t710 + t711 * t928 - t732 * t827 + t733 * t826 + t944) * r_i_i_C(1) + (t1054 * t711 - t710 * t928 - t732 * t826 - t733 * t827 + t943) * r_i_i_C(2) - t825, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:29:27
	% EndTime: 2020-04-13 14:32:21
	% DurationCPUTime: 180.43s
	% Computational Cost: add. (4581860->367), mult. (7241056->626), div. (246016->10), fcn. (4511547->18), ass. (0->286)
	t1619 = pkin(5) ^ 2;
	t1618 = pkin(7) ^ 2;
	t1622 = pkin(1) ^ 2;
	t1614 = cos(qJ(2));
	t1616 = cos(pkin(19));
	t1814 = sin(qJ(2));
	t1815 = sin(pkin(19));
	t1585 = -t1614 * t1815 + t1814 * t1616;
	t1803 = pkin(7) * t1585;
	t1825 = -2 * pkin(1);
	t1759 = t1803 * t1825 + t1622;
	t1575 = t1618 + t1759;
	t1571 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1575;
	t1580 = pkin(1) - t1803;
	t1820 = -pkin(8) - pkin(3);
	t1569 = (pkin(7) - t1820) * (pkin(7) + t1820) + t1759;
	t1819 = -pkin(8) + pkin(3);
	t1570 = (pkin(7) - t1819) * (pkin(7) + t1819) + t1759;
	t1791 = t1570 * t1569;
	t1624 = sqrt(-t1791);
	t1587 = t1614 * t1616 + t1814 * t1815;
	t1802 = pkin(7) * t1587;
	t1554 = t1571 * t1802 + t1580 * t1624;
	t1613 = cos(qJ(3));
	t1792 = t1554 * t1613;
	t1787 = t1587 * t1624;
	t1553 = -pkin(7) * t1787 + t1571 * t1580;
	t1610 = sin(qJ(3));
	t1795 = t1553 * t1610;
	t1684 = t1795 / 0.2e1 + t1792 / 0.2e1;
	t1572 = 0.1e1 / t1575;
	t1621 = 0.1e1 / pkin(3);
	t1790 = t1572 * t1621;
	t1547 = t1684 * t1790;
	t1793 = t1554 * t1610;
	t1794 = t1553 * t1613;
	t1683 = t1794 / 0.2e1 - t1793 / 0.2e1;
	t1548 = t1683 * t1790;
	t1606 = pkin(23) + pkin(22);
	t1604 = sin(t1606);
	t1605 = cos(t1606);
	t1538 = t1547 * t1605 + t1548 * t1604;
	t1807 = pkin(4) * t1538;
	t1824 = -2 * pkin(5);
	t1760 = -t1807 * t1824 + t1619;
	t1818 = -pkin(9) - pkin(11);
	t1531 = (pkin(4) - t1818) * (pkin(4) + t1818) + t1760;
	t1817 = -pkin(9) + pkin(11);
	t1532 = (pkin(4) - t1817) * (pkin(4) + t1817) + t1760;
	t1796 = t1532 * t1531;
	t1623 = sqrt(-t1796);
	t1526 = 0.1e1 / t1623;
	t1813 = -t1526 / 0.2e1;
	t1620 = pkin(4) ^ 2;
	t1535 = t1620 + t1760;
	t1533 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1535;
	t1536 = pkin(5) + t1807;
	t1724 = t1547 * t1604 - t1605 * t1548;
	t1804 = pkin(4) * t1623;
	t1518 = t1533 * t1536 - t1724 * t1804;
	t1806 = pkin(4) * t1724;
	t1519 = t1533 * t1806 + t1536 * t1623;
	t1617 = 0.1e1 / pkin(11);
	t1608 = cos(pkin(21));
	t1823 = 0.1e1 / t1535;
	t1773 = t1823 / 0.2e1;
	t1736 = t1608 * t1773;
	t1607 = sin(pkin(21));
	t1738 = t1607 * t1773;
	t1511 = (t1518 * t1738 + t1519 * t1736) * t1617;
	t1841 = -t1608 / 0.2e1;
	t1737 = t1823 * t1841;
	t1512 = (t1518 * t1737 + t1519 * t1738) * t1617;
	t1611 = sin(qJ(1));
	t1776 = t1614 * t1613;
	t1744 = t1611 * t1776;
	t1749 = t1814 * t1610;
	t1576 = t1611 * t1749 - t1744;
	t1748 = t1814 * t1613;
	t1686 = t1614 * t1610 + t1748;
	t1577 = t1686 * t1611;
	t1801 = qJD(1) * t1611;
	t1704 = qJD(4) * (t1511 * t1577 + t1512 * t1576) + t1801;
	t1850 = r_i_i_C(1) * t1704;
	t1849 = t1704 * r_i_i_C(2);
	t1730 = t1536 * t1824 - t1533;
	t1698 = t1792 + t1795;
	t1699 = t1793 - t1794;
	t1651 = -t1604 * t1699 + t1605 * t1698;
	t1583 = t1587 * qJD(2);
	t1821 = pkin(1) * pkin(7);
	t1697 = 0.2e1 * (t1569 + t1570) * t1821;
	t1555 = t1583 * t1697;
	t1564 = 0.1e1 / t1624;
	t1812 = -t1564 / 0.2e1;
	t1549 = t1555 * t1802 * t1812;
	t1756 = t1580 * t1825;
	t1731 = -t1571 + t1756;
	t1582 = t1585 * qJD(2);
	t1789 = t1582 * t1624;
	t1542 = t1549 + (t1731 * t1583 + t1789) * pkin(7);
	t1780 = t1613 * t1542;
	t1745 = t1583 * t1587 * t1618;
	t1723 = pkin(1) * t1745;
	t1811 = t1564 / 0.2e1;
	t1739 = t1580 * t1811;
	t1788 = t1583 * t1624;
	t1543 = t1555 * t1739 - 0.2e1 * t1723 + (-t1582 * t1571 - t1788) * pkin(7);
	t1785 = t1610 * t1543;
	t1678 = -t1780 / 0.2e1 + t1785 / 0.2e1;
	t1779 = t1613 * t1543;
	t1786 = t1610 * t1542;
	t1681 = t1786 / 0.2e1 + t1779 / 0.2e1;
	t1573 = 0.1e1 / t1575 ^ 2;
	t1755 = t1573 * t1821;
	t1729 = t1583 * t1755;
	t1848 = ((-t1604 * t1684 + t1605 * t1683) * qJD(3) - t1604 * t1678 + t1605 * t1681) * t1572 + t1651 * t1729;
	t1774 = t1617 * t1823;
	t1521 = t1848 * t1621;
	t1829 = t1604 * t1698 + t1605 * t1699;
	t1845 = (t1729 * t1829 + (t1605 * t1678 + t1604 * t1681 + (t1604 * t1683 + t1605 * t1684) * qJD(3)) * t1572) * t1621;
	t1649 = pkin(4) * t1845;
	t1709 = 0.2e1 * pkin(5) * (t1531 + t1532);
	t1689 = t1521 * t1709;
	t1670 = pkin(4) * t1536 * t1689;
	t1758 = t1620 * t1824;
	t1732 = t1724 * t1758;
	t1833 = -t1804 + t1732;
	t1644 = t1617 * (-t1833 * t1521 + t1533 * t1649 + t1670 * t1813);
	t1641 = t1644 * t1773;
	t1676 = t1620 * t1689;
	t1659 = t1676 * t1813;
	t1832 = t1730 * pkin(4);
	t1645 = t1617 * (-t1832 * t1521 - t1623 * t1649 - t1724 * t1659);
	t1643 = t1823 * t1645;
	t1844 = 0.1e1 / t1535 ^ 2;
	t1754 = pkin(4) * pkin(5) * t1844;
	t1727 = t1617 * t1754;
	t1710 = t1608 * t1727;
	t1711 = t1607 * t1727;
	t1836 = t1518 * t1711 + t1519 * t1710;
	t1842 = t1607 / 0.2e1;
	t1475 = -t1836 * t1521 + t1608 * t1641 + t1643 * t1842;
	t1692 = t1521 * t1710;
	t1693 = t1521 * t1711;
	t1476 = t1518 * t1692 - t1519 * t1693 + t1607 * t1641 + t1643 * t1841;
	t1615 = cos(qJ(1));
	t1750 = t1615 * t1814;
	t1720 = qJD(1) * t1750;
	t1775 = t1614 * t1615;
	t1743 = t1613 * t1775;
	t1839 = qJD(2) + qJD(3);
	t1561 = -qJD(1) * t1743 + t1839 * t1577 + t1610 * t1720;
	t1717 = qJD(3) * t1749;
	t1751 = t1611 * t1814;
	t1719 = qJD(2) * t1751;
	t1726 = t1839 * t1614;
	t1742 = t1610 * t1775;
	t1562 = qJD(1) * t1742 - t1611 * t1717 - t1610 * t1719 + (t1611 * t1726 + t1720) * t1613;
	t1457 = t1475 * t1577 + t1476 * t1576 + t1562 * t1511 + t1561 * t1512;
	t1847 = qJD(4) * t1615 + t1457;
	t1843 = t1536 / 0.2e1;
	t1840 = -t1806 / 0.2e1;
	t1822 = t1526 / t1796;
	t1838 = t1724 * t1822 * t1676 / 0.4e1 + t1649 * t1813;
	t1837 = t1758 * t1845 - t1659;
	t1835 = -t1518 * t1710 + t1519 * t1711;
	t1834 = -pkin(4) * t1521 * t1813 - t1822 * t1670 / 0.4e1;
	t1718 = qJD(2) * t1750;
	t1721 = qJD(1) * t1751;
	t1559 = -qJD(1) * t1744 - qJD(2) * t1742 + t1610 * t1721 - t1613 * t1718 + (-t1615 * t1748 - t1742) * qJD(3);
	t1687 = t1749 - t1776;
	t1560 = t1839 * t1615 * t1687 + qJD(1) * t1577;
	t1578 = -t1615 * t1749 + t1743;
	t1579 = t1686 * t1615;
	t1713 = -t1578 * t1475 - t1579 * t1476 - t1559 * t1511 + t1560 * t1512;
	t1640 = t1644 * t1754;
	t1642 = t1645 * t1754;
	t1797 = t1521 * t1620;
	t1747 = t1619 * t1797;
	t1707 = t1844 * t1747 * t1774;
	t1685 = t1608 * t1707;
	t1831 = 0.4e1 * t1518 * t1685 + t1607 * t1640 - t1608 * t1642;
	t1830 = -0.4e1 * t1519 * t1685 + t1607 * t1642 + t1608 * t1640;
	t1714 = t1576 * t1475 - t1577 * t1476 + t1561 * t1511 - t1562 * t1512;
	t1816 = -pkin(12) - r_i_i_C(3);
	t1810 = -t1613 / 0.2e1;
	t1809 = pkin(1) * t1618;
	t1805 = pkin(4) * t1621;
	t1800 = qJD(1) * t1615;
	t1799 = qJD(4) * (-t1511 * t1687 + t1512 * t1686);
	t1556 = t1587 * t1697;
	t1715 = t1556 * t1812 - t1571;
	t1544 = (t1585 * t1624 + (t1715 + t1756) * t1587) * pkin(7);
	t1784 = t1610 * t1544;
	t1545 = t1556 * t1739 - 0.2e1 * t1587 ^ 2 * t1809 + (-t1571 * t1585 - t1787) * pkin(7);
	t1783 = t1610 * t1545;
	t1782 = t1611 * t1614;
	t1612 = cos(qJ(4));
	t1781 = t1612 * t1615;
	t1778 = t1613 * t1544;
	t1777 = t1613 * t1545;
	t1680 = t1784 / 0.2e1 + t1777 / 0.2e1;
	t1728 = t1587 * t1755;
	t1529 = (-t1680 * t1572 - t1698 * t1728) * t1621;
	t1677 = -t1778 / 0.2e1 + t1783 / 0.2e1;
	t1530 = (t1677 * t1572 + t1699 * t1728) * t1621;
	t1523 = t1529 * t1605 + t1530 * t1604;
	t1696 = pkin(4) * t1709;
	t1515 = t1523 * t1696;
	t1524 = -t1529 * t1604 + t1530 * t1605;
	t1740 = t1724 * t1813;
	t1486 = (t1515 * t1740 + t1730 * t1523 - t1524 * t1623) * pkin(4);
	t1741 = t1526 * t1843;
	t1487 = t1515 * t1741 + t1523 * t1732 + (-t1523 * t1623 + t1524 * t1533) * pkin(4);
	t1671 = 0.4e1 * t1698;
	t1672 = 0.4e1 * t1699;
	t1716 = t1622 * t1745;
	t1552 = -t1582 * t1697 - 0.8e1 * t1716;
	t1746 = t1564 / t1791 * t1556 * t1555;
	t1527 = t1549 + (t1746 / 0.4e1 + t1552 * t1811) * t1580 + (0.4e1 * t1582 * t1587 + 0.2e1 * t1583 * t1585) * t1809 + (t1715 * t1583 + t1789) * pkin(7);
	t1528 = 0.4e1 * t1723 + (t1788 - t1587 * t1746 / 0.4e1 - t1731 * t1582 + (t1585 * t1555 / 0.2e1 + t1582 * t1556 / 0.2e1 - t1587 * t1552 / 0.2e1) * t1564) * pkin(7);
	t1679 = t1528 * t1810 + t1610 * t1527 / 0.2e1;
	t1682 = -t1610 * t1528 / 0.2e1 + t1527 * t1810;
	t1700 = -t1777 - t1784;
	t1701 = -t1778 + t1783;
	t1702 = -t1779 - t1786;
	t1703 = -t1780 + t1785;
	t1706 = t1572 * t1573 * t1716;
	t1492 = ((t1604 * t1672 - t1605 * t1671) * t1706 + (t1605 * t1682 + t1604 * t1679 + (t1604 * t1680 + t1605 * t1677) * qJD(3)) * t1572 + ((t1604 * t1701 + t1605 * t1700) * t1583 + t1651 * t1582 + (qJD(3) * t1829 + t1604 * t1703 + t1605 * t1702) * t1587) * t1755) * t1621;
	t1635 = ((t1604 * t1671 + t1605 * t1672) * t1706 + (t1605 * t1679 - t1604 * t1682 + (-t1604 * t1677 + t1605 * t1680) * qJD(3)) * t1572 + ((-t1604 * t1700 + t1605 * t1701) * t1583 - t1829 * t1582 + (t1651 * qJD(3) - t1604 * t1702 + t1605 * t1703) * t1587) * t1755) * t1805;
	t1725 = 0.8e1 * t1747;
	t1656 = t1526 * (t1492 * t1696 + t1523 * t1725);
	t1753 = pkin(5) * t1797;
	t1734 = 0.2e1 * t1753;
	t1735 = t1617 * t1773;
	t1631 = (t1833 * t1492 + t1834 * t1515 + t1837 * t1523 + t1524 * t1734 + t1533 * t1635 + t1656 * t1843) * t1735;
	t1733 = -0.4e1 * t1753;
	t1632 = (t1832 * t1492 + t1838 * t1515 + t1523 * t1733 - t1524 * t1659 - t1623 * t1635 + t1656 * t1840) * t1774;
	t1673 = -0.4e1 * t1607 * t1707;
	t1663 = t1523 * t1673;
	t1448 = -t1486 * t1693 - t1487 * t1692 + t1836 * t1492 + t1518 * t1663 + t1830 * t1523 + t1608 * t1631 + t1632 * t1842;
	t1772 = t1448 + t1476;
	t1449 = t1486 * t1692 - t1487 * t1693 + t1835 * t1492 + t1519 * t1663 + t1831 * t1523 + t1607 * t1631 + t1632 * t1841;
	t1771 = t1449 - t1475;
	t1522 = t1724 * t1696;
	t1495 = (t1522 * t1740 - t1538 * t1623 + t1724 * t1730) * pkin(4);
	t1496 = t1522 * t1741 + t1724 * t1732 + (t1533 * t1538 - t1623 * t1724) * pkin(4);
	t1648 = t1848 * t1805;
	t1655 = t1526 * (t1696 * t1845 + t1724 * t1725);
	t1633 = (t1834 * t1522 + t1533 * t1648 + t1538 * t1734 + t1655 * t1843 + t1837 * t1724 + t1833 * t1845) * t1735;
	t1634 = (t1838 * t1522 - t1538 * t1659 - t1623 * t1648 + t1655 * t1840 + t1724 * t1733 + t1832 * t1845) * t1774;
	t1662 = t1724 * t1673;
	t1450 = -t1495 * t1693 - t1496 * t1692 + t1518 * t1662 + t1608 * t1633 + t1634 * t1842 + t1830 * t1724 + t1836 * t1845;
	t1770 = t1450 + t1476;
	t1451 = t1495 * t1692 - t1496 * t1693 + t1519 * t1662 + t1607 * t1633 + t1634 * t1841 + t1831 * t1724 + t1835 * t1845;
	t1769 = t1451 - t1475;
	t1660 = (t1518 * t1607 + t1519 * t1608) * t1754;
	t1478 = (t1486 * t1738 + t1487 * t1736 + t1523 * t1660) * t1617;
	t1767 = t1478 + t1512;
	t1661 = (-t1518 * t1608 + t1519 * t1607) * t1754;
	t1479 = (t1486 * t1737 + t1487 * t1738 + t1523 * t1661) * t1617;
	t1766 = t1479 - t1511;
	t1480 = (t1495 * t1738 + t1496 * t1736 + t1660 * t1724) * t1617;
	t1765 = t1480 + t1512;
	t1481 = (t1495 * t1737 + t1496 * t1738 + t1661 * t1724) * t1617;
	t1764 = t1481 - t1511;
	t1763 = t1576 * t1511 - t1577 * t1512;
	t1762 = -t1578 * t1511 - t1579 * t1512;
	t1761 = -t1511 * t1686 - t1512 * t1687;
	t1567 = -qJD(2) * t1749 + t1613 * t1726 - t1717;
	t1568 = t1839 * t1686;
	t1712 = -t1475 * t1686 - t1476 * t1687 - t1567 * t1511 - t1568 * t1512;
	t1609 = sin(qJ(4));
	t1708 = r_i_i_C(1) * t1612 - r_i_i_C(2) * t1609 + pkin(10);
	t1688 = qJD(4) * (-r_i_i_C(1) * t1609 - r_i_i_C(2) * t1612);
	t1599 = qJD(4) * t1781;
	t1566 = t1568 * pkin(5);
	t1558 = t1562 * pkin(5);
	t1557 = t1560 * pkin(5);
	t1490 = -t1511 * t1579 + t1512 * t1578;
	t1459 = -t1475 * t1687 + t1476 * t1686 - t1568 * t1511 + t1567 * t1512;
	t1455 = -t1475 * t1579 + t1476 * t1578 + t1560 * t1511 + t1559 * t1512;
	t1453 = t1609 * t1800 + t1455 * t1612 + (-t1490 * t1609 + t1611 * t1612) * qJD(4);
	t1452 = qJD(1) * t1781 - t1455 * t1609 + (-t1490 * t1612 - t1609 * t1611) * qJD(4);
	t1 = [-pkin(16) * t1800 + t1561 * pkin(5) + t1457 * pkin(10) + t1599 * r_i_i_C(1) + (t1457 * r_i_i_C(1) - t1849) * t1612 + (-t1847 * r_i_i_C(2) - t1850) * t1609 - t1816 * t1714 + (qJD(2) * t1782 + t1720) * pkin(1), t1557 + t1816 * (-t1767 * t1559 + t1766 * t1560 - t1772 * t1578 - t1771 * t1579) + (-t1478 * t1579 + t1479 * t1578 + t1762) * t1688 + (qJD(1) * t1782 + t1718) * pkin(1) + t1708 * (-t1448 * t1579 + t1449 * t1578 + t1560 * t1478 + t1559 * t1479 + t1713), t1557 + t1816 * (-t1765 * t1559 + t1764 * t1560 - t1770 * t1578 - t1769 * t1579) + (-t1480 * t1579 + t1481 * t1578 + t1762) * t1688 + t1708 * (-t1450 * t1579 + t1451 * t1578 + t1560 * t1480 + t1559 * t1481 + t1713), r_i_i_C(1) * t1452 - r_i_i_C(2) * t1453; -pkin(16) * t1801 + t1559 * pkin(5) + t1455 * pkin(10) + t1453 * r_i_i_C(1) + t1452 * r_i_i_C(2) + t1816 * t1713 + (-qJD(2) * t1775 + t1721) * pkin(1), -t1558 + t1816 * (t1767 * t1561 - t1766 * t1562 + t1772 * t1576 - t1771 * t1577) + (-t1478 * t1577 - t1479 * t1576 + t1763) * t1688 + (-qJD(1) * t1775 + t1719) * pkin(1) + t1708 * (-t1448 * t1577 - t1449 * t1576 - t1562 * t1478 - t1561 * t1479 + t1714), -t1558 + t1816 * (t1765 * t1561 - t1764 * t1562 + t1770 * t1576 - t1769 * t1577) + (-t1480 * t1577 - t1481 * t1576 + t1763) * t1688 + t1708 * (-t1450 * t1577 - t1451 * t1576 - t1562 * t1480 - t1561 * t1481 + t1714), t1599 * r_i_i_C(2) + (r_i_i_C(2) * t1457 + t1850) * t1612 + (t1847 * r_i_i_C(1) - t1849) * t1609; 0, -pkin(1) * qJD(2) * t1614 - t1566 + t1816 * (-t1767 * t1567 - t1766 * t1568 - t1686 * t1772 - t1687 * t1771) + (-t1478 * t1687 + t1479 * t1686 + t1761) * t1688 + t1708 * (-t1448 * t1687 + t1449 * t1686 - t1568 * t1478 + t1567 * t1479 + t1712), -t1566 + t1816 * (-t1765 * t1567 - t1764 * t1568 - t1686 * t1770 - t1687 * t1769) + (-t1480 * t1687 + t1481 * t1686 + t1761) * t1688 + t1708 * (-t1450 * t1687 + t1451 * t1686 - t1568 * t1480 + t1567 * t1481 + t1712), (-t1459 * t1612 + t1609 * t1799) * r_i_i_C(2) + (-t1459 * t1609 - t1612 * t1799) * r_i_i_C(1);];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:02
	% EndTime: 2020-04-13 14:18:04
	% DurationCPUTime: 0.89s
	% Computational Cost: add. (6295->81), mult. (10454->160), div. (200->5), fcn. (6424->10), ass. (0->85)
	t313 = pkin(7) ^ 2;
	t314 = pkin(1) ^ 2;
	t305 = sin(qJ(2));
	t309 = cos(pkin(19));
	t364 = sin(pkin(19));
	t365 = cos(qJ(2));
	t324 = -t305 * t309 + t365 * t364;
	t363 = pkin(1) * t324;
	t379 = 2 * pkin(7);
	t350 = t363 * t379 + t314;
	t297 = t313 + t350;
	t295 = 0.1e1 / t297 ^ 2;
	t300 = t324 * qJD(2);
	t303 = t305 * t364 + t365 * t309;
	t301 = t303 * qJD(2);
	t345 = t314 * t303 * t301;
	t339 = t313 * t345;
	t312 = 0.1e1 / pkin(8);
	t371 = pkin(1) * pkin(7);
	t346 = t295 * t371;
	t343 = t312 * t346;
	t294 = 0.1e1 / t297;
	t357 = t294 * t312;
	t381 = 0.4e1 * t295 * t339 * t357 + t300 * t343;
	t370 = (-pkin(8) - pkin(3));
	t291 = ((pkin(7) - t370) * (pkin(7) + t370)) + t350;
	t369 = (-pkin(8) + pkin(3));
	t292 = ((pkin(7) - t369) * (pkin(7) + t369)) + t350;
	t340 = (t291 + t292) * t371;
	t286 = t301 * t340;
	t358 = t292 * t291;
	t315 = sqrt(-t358);
	t289 = 0.1e1 / t315;
	t378 = t286 * t289;
	t287 = t303 * t340;
	t377 = t289 * t287;
	t310 = cos(pkin(18));
	t376 = t381 * t310;
	t307 = sin(pkin(18));
	t375 = t381 * t307;
	t293 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t297;
	t341 = pkin(7) * t345;
	t355 = t301 * t315;
	t298 = -pkin(7) - t363;
	t359 = t289 * t298;
	t275 = -t286 * t359 - 0.2e1 * t341 + (t300 * t293 - t355) * pkin(1);
	t354 = t303 * t315;
	t361 = t314 * pkin(7);
	t277 = -t287 * t359 - 0.2e1 * t303 ^ 2 * t361 + (t293 * t324 - t354) * pkin(1);
	t336 = t303 * t343;
	t337 = t301 * t343;
	t374 = t275 * t336 + t277 * t337;
	t362 = pkin(1) * t303;
	t282 = t362 * t378;
	t347 = t298 * t379;
	t344 = -t293 + t347;
	t356 = t300 * t315;
	t274 = -t282 + (t344 * t301 - t356) * pkin(1);
	t342 = -t293 - t377;
	t276 = (-t324 * t315 + (t342 + t347) * t303) * pkin(1);
	t372 = -t289 * (t300 * t340 - 0.4e1 * t339) - 0.1e1 / t358 * t286 * t377;
	t373 = (0.4e1 * t341 + (-t324 * t378 + t355 + t372 * t303 + (t344 - t377) * t300) * pkin(1)) * t357 / 0.2e1 + t276 * t337 + t274 * t336;
	t368 = -t307 / 0.2e1;
	t367 = -t310 / 0.2e1;
	t366 = t310 / 0.2e1;
	t284 = -pkin(1) * t354 - t298 * t293;
	t360 = t284 * t307;
	t285 = t293 * t362 - t298 * t315;
	t353 = t307 * t285;
	t352 = t310 * t284;
	t351 = t310 * t285;
	t306 = sin(qJ(1));
	t349 = qJD(1) * t306;
	t308 = cos(qJ(1));
	t348 = qJD(1) * t308;
	t321 = (-t351 - t360) * t346;
	t322 = (t352 - t353) * t346;
	t335 = (r_i_i_C(1) * ((t274 * t366 + t275 * t368) * t294 + t301 * t322) + r_i_i_C(2) * ((t274 * t368 + t275 * t367) * t294 + t301 * t321)) * t312;
	t327 = pkin(15) + (-r_i_i_C(1) * (t352 / 0.2e1 - t353 / 0.2e1) - r_i_i_C(2) * (-t351 / 0.2e1 - t360 / 0.2e1)) * t357;
	t320 = (-t282 + t372 * t298 + (-0.4e1 * t300 * t303 - 0.2e1 * t301 * t324) * t361 + (t342 * t301 - t356) * pkin(1)) * t357;
	t273 = ((t276 * t368 + t277 * t367) * t294 + t303 * t321) * t312;
	t272 = ((t276 * t366 + t277 * t368) * t294 + t303 * t322) * t312;
	t267 = t376 * t284 - t375 * t285 - t374 * t307 + t373 * t310 + t320 * t368;
	t266 = t375 * t284 + t376 * t285 + t373 * t307 + t374 * t310 + t320 * t366;
	t1 = [-t335 * t306 + (-r_i_i_C(3) * t306 + t327 * t308) * qJD(1), (-t266 * t308 - t273 * t349) * r_i_i_C(2) + (t267 * t308 - t272 * t349) * r_i_i_C(1), 0, 0; t335 * t308 + (r_i_i_C(3) * t308 + t327 * t306) * qJD(1), (-t266 * t306 + t273 * t348) * r_i_i_C(2) + (t267 * t306 + t272 * t348) * r_i_i_C(1), 0, 0; 0, t266 * r_i_i_C(1) + r_i_i_C(2) * t267, 0, 0;];
	JaD_transl = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_transl_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:03
	% EndTime: 2020-04-13 14:18:07
	% DurationCPUTime: 2.49s
	% Computational Cost: add. (18668->123), mult. (30692->214), div. (704->5), fcn. (19061->10), ass. (0->118)
	t319 = sin(qJ(2));
	t321 = sin(pkin(19));
	t322 = cos(qJ(2));
	t324 = cos(pkin(19));
	t383 = t319 * t324 - t322 * t321;
	t381 = pkin(7) * t383;
	t376 = (-0.2e1 * t381 + pkin(1)) * pkin(1);
	t422 = -pkin(8) - pkin(3);
	t368 = (pkin(7) - t422) * (pkin(7) + t422) + t376;
	t421 = -pkin(8) + pkin(3);
	t369 = (pkin(7) - t421) * (pkin(7) + t421) + t376;
	t347 = t369 * t368;
	t325 = sqrt(-t347);
	t318 = t319 * t321 + t322 * t324;
	t427 = pkin(7) ^ 2;
	t315 = t376 + t427;
	t326 = pkin(3) ^ 2;
	t372 = -pkin(8) ^ 2 + t315 + t326;
	t371 = pkin(7) * t372;
	t370 = t318 * t371;
	t379 = -t381 + pkin(1);
	t428 = 0.1e1 / pkin(3);
	t359 = t428 * (t379 * t325 + t370);
	t426 = 0.1e1 / t315;
	t442 = t426 / 0.2e1;
	t356 = t359 * t442;
	t418 = pkin(7) * t325;
	t395 = t318 * t418;
	t358 = t428 * (t379 * t372 - t395);
	t357 = t426 * t358;
	t412 = cos(pkin(23));
	t411 = sin(pkin(23));
	t444 = t411 / 0.2e1;
	t309 = t412 * t356 + t357 * t444;
	t423 = pkin(1) * pkin(7);
	t367 = ((pkin(7) + pkin(8)) * (pkin(7) - pkin(8)) + t376) * t423;
	t414 = t318 * pkin(1);
	t399 = pkin(7) * t414;
	t365 = t318 * t367 - t326 * t399;
	t425 = 0.1e1 / t325;
	t396 = 0.2e1 * t425;
	t363 = t365 * t396;
	t361 = pkin(7) * t363;
	t373 = -0.2e1 * t379 * t423;
	t431 = -t361 + t373;
	t336 = t428 * (t431 * t318 + t383 * t418 - t370);
	t334 = t426 * t336;
	t338 = t428 * (-0.2e1 * t427 * t318 ^ 2 * pkin(1) + t379 * t363 - t383 * t371 - t395);
	t335 = t338 * t442;
	t314 = 0.1e1 / t315 ^ 2;
	t436 = t314 * t423;
	t354 = t358 * t436;
	t355 = t359 * t436;
	t433 = -t412 * t354 + t411 * t355;
	t443 = -t412 / 0.2e1;
	t404 = t433 * t318 + t334 * t443 + t411 * t335 - t309;
	t389 = t404 * r_i_i_C(1);
	t432 = t411 * t354 + t412 * t355;
	t299 = t432 * t318 + t334 * t444 + t412 * t335;
	t308 = t411 * t356 + t357 * t443;
	t403 = t299 + t308;
	t446 = -t403 * r_i_i_C(2) + t389;
	t450 = t446 * t319;
	t317 = t318 * qJD(2);
	t415 = t317 * t427;
	t394 = t318 * t415;
	t387 = pkin(1) ^ 2 * t394;
	t449 = 0.4e1 * t387 * t426 * t314;
	t448 = t428 * t442;
	t384 = t404 * r_i_i_C(2) + pkin(1);
	t447 = t403 * r_i_i_C(1) + t384;
	t416 = t317 * pkin(7);
	t397 = pkin(1) * t416;
	t364 = t317 * t367 - t326 * t397;
	t362 = t364 * t396;
	t316 = t383 * qJD(2);
	t366 = -t316 * t371 - t325 * t416;
	t388 = pkin(1) * t394;
	t343 = t428 * (t379 * t362 + t366 - 0.2e1 * t388);
	t340 = t343 * t442;
	t360 = pkin(7) * t362;
	t417 = t316 * pkin(7);
	t345 = -t317 * t371 - t318 * t360 + t325 * t417;
	t342 = t428 * (t317 * t373 + t345);
	t341 = t426 * t342;
	t295 = t432 * t317 + t412 * t340 + t341 * t444;
	t434 = (0.4e1 / t347 * t365 * t364 - 0.4e1 * t387 - (t368 + t369) * pkin(1) * t417) * t425;
	t437 = t314 * t399;
	t438 = t314 * t397;
	t429 = (-t434 * pkin(7) * t318 - t431 * t316 + t383 * t360 - t366 + 0.4e1 * t388) * t448 + t336 * t438 + t342 * t437 + t358 * t449;
	t430 = (0.2e1 * t383 * pkin(1) * t415 + 0.4e1 * t427 * t316 * t414 - t317 * t361 + t434 * t379 + t345) * t448 + t338 * t438 + t343 * t437 + t359 * t449;
	t405 = -t433 * t316 + t430 * t411 - t429 * t412 - t295;
	t390 = t405 * r_i_i_C(1);
	t291 = -t432 * t316 + t429 * t411 + t430 * t412;
	t294 = t433 * t317 + t411 * t340 + t341 * t443;
	t406 = t291 + t294;
	t445 = -t406 * r_i_i_C(2) + t390;
	t413 = qJD(1) * r_i_i_C(3);
	t410 = t308 * t319;
	t409 = t308 * t322;
	t408 = t309 * t319;
	t407 = t309 * t322;
	t320 = sin(qJ(1));
	t392 = t320 * t409;
	t323 = cos(qJ(1));
	t393 = t323 * t410;
	t402 = qJD(1) * t392 + qJD(2) * t393;
	t401 = qJD(1) * t320;
	t400 = qJD(1) * t323;
	t391 = t320 * t319 * t294 + qJD(1) * t393 + qJD(2) * t392;
	t386 = qJD(2) * t309 - t294;
	t385 = r_i_i_C(1) * t407 - pkin(16);
	t382 = t299 * r_i_i_C(2) - t389;
	t380 = t299 * r_i_i_C(1) + t384;
	t378 = -t406 * r_i_i_C(1) - t405 * r_i_i_C(2);
	t375 = t378 * t322;
	t374 = t447 * t322;
	t1 = [t391 * r_i_i_C(1) + ((-t408 + t409) * r_i_i_C(2) + t319 * pkin(1) + t385) * t400 + (t322 * t295 * r_i_i_C(1) + (t294 * t322 - t295 * t319) * r_i_i_C(2) - t413 + (-r_i_i_C(1) * t408 + (-t407 - t410) * r_i_i_C(2) + t322 * pkin(1)) * qJD(2)) * t320, t402 * r_i_i_C(1) + (t380 * t322 + t450) * t401 + (t375 - t445 * t319 + (t380 * t319 - t322 * t446) * qJD(2)) * t323, 0, 0; t402 * r_i_i_C(2) + ((r_i_i_C(1) * t308 - r_i_i_C(2) * t309 + pkin(1)) * t319 + t385) * t401 + (t413 + (t386 * r_i_i_C(1) + t295 * r_i_i_C(2)) * t319 + ((-qJD(2) * t308 - t295) * r_i_i_C(1) + t386 * r_i_i_C(2) - qJD(2) * pkin(1)) * t322) * t323, t391 * r_i_i_C(2) + (t382 * t319 - t374) * t400 + ((t291 * r_i_i_C(2) - t390) * t319 + t375 + (t447 * t319 + t382 * t322) * qJD(2)) * t320, 0, 0; 0, t445 * t322 + t378 * t319 + (-t374 - t450) * qJD(2), 0, 0;];
	JaD_transl = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_transl_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:01
	% EndTime: 2020-04-13 14:18:04
	% DurationCPUTime: 1.69s
	% Computational Cost: add. (9326->106), mult. (15452->206), div. (352->5), fcn. (9580->10), ass. (0->111)
	t296 = pkin(1) ^ 2;
	t294 = pkin(6) ^ 2;
	t287 = cos(pkin(20));
	t290 = cos(qJ(3));
	t360 = sin(pkin(20));
	t364 = sin(qJ(3));
	t284 = t364 * t287 + t290 * t360;
	t362 = pkin(6) * t284;
	t369 = 2 * pkin(1);
	t340 = t362 * t369 + t294;
	t279 = t296 + t340;
	t276 = 0.1e1 / t279;
	t285 = -t290 * t287 + t364 * t360;
	t277 = 0.1e1 / t279 ^ 2;
	t368 = pkin(1) * pkin(6);
	t336 = t277 * t368;
	t275 = pkin(2) ^ 2 - pkin(13) ^ 2 + t279;
	t280 = -pkin(1) - t362;
	t367 = -pkin(2) - pkin(13);
	t273 = (pkin(1) - t367) * (pkin(1) + t367) + t340;
	t366 = -pkin(2) + pkin(13);
	t274 = (pkin(1) - t366) * (pkin(1) + t366) + t340;
	t354 = t274 * t273;
	t297 = sqrt(-t354);
	t361 = pkin(6) * t285;
	t267 = t275 * t361 - t280 * t297;
	t288 = sin(qJ(2));
	t357 = t267 * t288;
	t351 = t285 * t297;
	t266 = -pkin(6) * t351 - t275 * t280;
	t291 = cos(qJ(2));
	t358 = t266 * t291;
	t320 = -t357 + t358;
	t309 = t320 * r_i_i_C(2);
	t356 = t267 * t291;
	t359 = t266 * t288;
	t319 = t356 + t359;
	t379 = t319 * r_i_i_C(1) + t309;
	t302 = t379 * t336;
	t341 = t273 + t274;
	t329 = t341 * t368;
	t269 = t285 * t329;
	t271 = 0.1e1 / t297;
	t374 = t271 * t269;
	t331 = t275 + t374;
	t337 = t280 * t369;
	t262 = (-t284 * t297 + (-t331 + t337) * t285) * pkin(6);
	t343 = t291 * t262;
	t355 = t271 * t280;
	t363 = pkin(1) * t294;
	t263 = -t269 * t355 - 0.2e1 * t285 ^ 2 * t363 + (t284 * t275 - t351) * pkin(6);
	t347 = t288 * t263;
	t314 = t347 / 0.2e1 - t343 / 0.2e1;
	t342 = t291 * t263;
	t348 = t288 * t262;
	t315 = t348 / 0.2e1 + t342 / 0.2e1;
	t370 = t315 * r_i_i_C(1) - t314 * r_i_i_C(2);
	t382 = t370 * t276 + t285 * t302;
	t310 = t320 * r_i_i_C(1);
	t378 = -t319 * r_i_i_C(2) + t310;
	t283 = t285 * qJD(3);
	t335 = t283 * t368;
	t268 = t341 * t335;
	t375 = t268 * t271;
	t332 = t277 * t335;
	t373 = t319 * t332;
	t282 = t284 * qJD(3);
	t334 = t283 * t285 * t294;
	t328 = t296 * t334;
	t372 = -t271 * (t282 * t329 - 0.4e1 * t328) - 0.1e1 / t354 * t268 * t374;
	t330 = pkin(1) * t334;
	t352 = t283 * t297;
	t261 = -t268 * t355 - 0.2e1 * t330 + (t282 * t275 - t352) * pkin(6);
	t344 = t291 * t261;
	t264 = t361 * t375;
	t333 = -t275 + t337;
	t353 = t282 * t297;
	t260 = -t264 + (t333 * t283 - t353) * pkin(6);
	t350 = t288 * t260;
	t311 = -t344 / 0.2e1 - t350 / 0.2e1;
	t318 = t357 / 0.2e1 - t358 / 0.2e1;
	t371 = t318 * qJD(2) + t311;
	t365 = -t288 / 0.2e1;
	t349 = t288 * t261;
	t345 = t291 * t260;
	t289 = sin(qJ(1));
	t339 = qJD(1) * t289;
	t292 = cos(qJ(1));
	t338 = qJD(1) * t292;
	t326 = t276 * t277 * t328;
	t324 = t345 - t349;
	t323 = -t344 - t350;
	t322 = t343 - t347;
	t321 = t342 + t348;
	t317 = t356 / 0.2e1 + t359 / 0.2e1;
	t316 = t349 / 0.2e1 - t345 / 0.2e1;
	t258 = -t264 + t372 * t280 + (-0.4e1 * t282 * t285 - 0.2e1 * t283 * t284) * t363 + (-t331 * t283 - t353) * pkin(6);
	t259 = 0.4e1 * t330 + (-t284 * t375 + t352 + t372 * t285 + (t333 - t374) * t282) * pkin(6);
	t313 = -t291 * t258 / 0.2e1 + t259 * t365;
	t312 = t291 * t259 / 0.2e1 + t258 * t365;
	t308 = 0.4e1 * t319;
	t307 = qJD(1) * t317;
	t306 = t320 * t332;
	t304 = t317 * qJD(2) + t316;
	t301 = -(r_i_i_C(1) * t308 + 0.4e1 * t309) * t326 + (t313 * r_i_i_C(1) - t312 * r_i_i_C(2) + (t314 * r_i_i_C(1) + t315 * r_i_i_C(2)) * qJD(2)) * t276 + (-(t321 * r_i_i_C(1) + t322 * r_i_i_C(2)) * t283 - t379 * t282 + (t323 * r_i_i_C(1) - t324 * r_i_i_C(2) - t378 * qJD(2)) * t285) * t336;
	t295 = 0.1e1 / pkin(2);
	t257 = (-t289 * t306 + (t304 * t289 + t318 * t338) * t276) * t295;
	t256 = (t289 * t373 + (-t371 * t289 + t292 * t307) * t276) * t295;
	t255 = (-t292 * t306 + (t304 * t292 - t318 * t339) * t276) * t295;
	t254 = (-t292 * t373 + (t289 * t307 + t371 * t292) * t276) * t295;
	t1 = [r_i_i_C(1) * t256 - r_i_i_C(2) * t257 + (-pkin(16) * t292 - r_i_i_C(3) * t289) * qJD(1), r_i_i_C(1) * t255 - r_i_i_C(2) * t254, (t301 * t292 + t382 * t339) * t295, 0; r_i_i_C(1) * t254 + r_i_i_C(2) * t255 + (-pkin(16) * t289 + r_i_i_C(3) * t292) * qJD(1), r_i_i_C(1) * t257 + r_i_i_C(2) * t256, (t301 * t289 - t382 * t338) * t295, 0; 0, (-t283 * t302 + (t311 * r_i_i_C(1) + t316 * r_i_i_C(2) + (t318 * r_i_i_C(1) + t317 * r_i_i_C(2)) * qJD(2)) * t276) * t295, (-(r_i_i_C(2) * t308 - 0.4e1 * t310) * t326 + (t312 * r_i_i_C(1) + t313 * r_i_i_C(2) - qJD(2) * t370) * t276 + (-(-t322 * r_i_i_C(1) + t321 * r_i_i_C(2)) * t283 + t378 * t282 + (t324 * r_i_i_C(1) + t323 * r_i_i_C(2) - qJD(2) * t379) * t285) * t336) * t295, 0;];
	JaD_transl = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobiaD_transl_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:03
	% EndTime: 2020-04-13 14:18:09
	% DurationCPUTime: 3.80s
	% Computational Cost: add. (32625->184), mult. (53462->365), div. (1492->6), fcn. (33152->10), ass. (0->162)
	t453 = cos(pkin(20));
	t456 = cos(qJ(3));
	t549 = sin(pkin(20));
	t553 = sin(qJ(3));
	t451 = -t456 * t453 + t553 * t549;
	t449 = t451 * qJD(3);
	t566 = pkin(1) * pkin(6);
	t519 = t449 * t566;
	t450 = t553 * t453 + t456 * t549;
	t551 = pkin(6) * t450;
	t518 = pkin(1) * t551;
	t447 = 0.2e1 * t518;
	t462 = pkin(6) ^ 2;
	t525 = t447 + t462;
	t565 = -pkin(2) - pkin(13);
	t438 = (pkin(1) - t565) * (pkin(1) + t565) + t525;
	t564 = -pkin(2) + pkin(13);
	t439 = (pkin(1) - t564) * (pkin(1) + t564) + t525;
	t526 = t438 + t439;
	t433 = t526 * t519;
	t546 = t439 * t438;
	t466 = sqrt(-t546);
	t436 = 0.1e1 / t466;
	t548 = t433 * t436;
	t550 = pkin(6) * t451;
	t403 = t548 * t550;
	t448 = t450 * qJD(3);
	t509 = t526 * t566;
	t575 = t449 * t462;
	t517 = t451 * t575;
	t465 = pkin(1) ^ 2;
	t583 = 0.4e1 * t465;
	t577 = t517 * t583;
	t430 = t448 * t509 - t577;
	t446 = -pkin(1) - t551;
	t434 = t451 * t509;
	t576 = t436 * t434;
	t508 = 0.4e1 / t546 * t433 * t576;
	t502 = -t508 / 0.4e1;
	t463 = pkin(2) ^ 2;
	t524 = t462 + t465;
	t516 = -pkin(13) ^ 2 + t524;
	t441 = t447 + t463 + t516;
	t511 = t441 + t576;
	t544 = t448 * t466;
	t552 = pkin(1) * t462;
	t377 = -t403 + (-t436 * t430 + t502) * t446 + (-0.4e1 * t448 * t451 - 0.2e1 * t449 * t450) * t552 + (-t511 * t449 - t544) * pkin(6);
	t510 = pkin(1) * t517;
	t521 = 0.2e1 * t446 * pkin(1);
	t513 = -t441 + t521;
	t543 = t449 * t466;
	t567 = 0.2e1 * t436;
	t378 = 0.4e1 * t510 + (t543 + t451 * t502 + t513 * t448 + (-t450 * t433 / 0.2e1 - t448 * t434 / 0.2e1 - t451 * t430 / 0.2e1) * t567) * pkin(6);
	t445 = t447 + t524;
	t442 = 0.1e1 / t445;
	t542 = t451 * t466;
	t547 = t436 * t446;
	t396 = -t434 * t547 - 0.2e1 * t451 ^ 2 * t552 + (t441 * t450 - t542) * pkin(6);
	t457 = cos(qJ(2));
	t530 = t457 * t396;
	t395 = (-t450 * t466 + (-t511 + t521) * t451) * pkin(6);
	t454 = sin(qJ(2));
	t539 = t454 * t395;
	t489 = -t530 / 0.2e1 - t539 / 0.2e1;
	t432 = t441 * t550 - t446 * t466;
	t528 = t457 * t432;
	t431 = -pkin(6) * t542 - t441 * t446;
	t537 = t454 * t431;
	t497 = t528 + t537;
	t529 = t457 * t431;
	t536 = t454 * t432;
	t498 = t529 - t536;
	t443 = 0.1e1 / t445 ^ 2;
	t520 = t443 * t566;
	t531 = t457 * t395;
	t393 = -t403 + (t513 * t449 - t544) * pkin(6);
	t533 = t457 * t393;
	t538 = t454 * t396;
	t394 = -t433 * t547 - 0.2e1 * t510 + (t448 * t441 - t543) * pkin(6);
	t540 = t454 * t394;
	t556 = -t457 / 0.2e1;
	t582 = -t454 / 0.2e1;
	t584 = ((t497 * qJD(2) - t533 + t540) * t451 - t498 * t448 - (t531 - t538) * t449) * t520 - (t489 * qJD(2) + t377 * t582 - t378 * t556) * t442;
	t572 = t497 * t520;
	t581 = t449 * t572;
	t578 = -t489 * t442 + t451 * t572;
	t490 = t531 / 0.2e1 - t538 / 0.2e1;
	t573 = t490 * t442;
	t488 = -t528 / 0.2e1 - t537 / 0.2e1;
	t571 = t488 * qJD(2) - t540 / 0.2e1 + t533 / 0.2e1;
	t491 = t536 / 0.2e1 - t529 / 0.2e1;
	t532 = t457 * t394;
	t541 = t454 * t393;
	t476 = t491 * qJD(2) - t541 / 0.2e1 - t532 / 0.2e1;
	t563 = -t430 / 0.4e1;
	t562 = -t433 / 0.4e1;
	t561 = t433 / 0.4e1;
	t560 = -t434 / 0.4e1;
	t559 = t434 / 0.4e1;
	t440 = t463 - t516 - 0.2e1 * t518;
	t558 = -t440 / 0.2e1;
	t557 = t440 / 0.2e1;
	t555 = -t466 / 0.2e1;
	t554 = t466 / 0.2e1;
	t464 = 0.1e1 / pkin(2);
	t545 = t442 * t464;
	t455 = sin(qJ(1));
	t535 = t455 * t464;
	t527 = 0.1e1 / pkin(13) * t464;
	t523 = qJD(1) * t455;
	t458 = cos(qJ(1));
	t522 = qJD(1) * t458;
	t515 = -t548 / 0.2e1;
	t514 = t548 / 0.2e1;
	t512 = t443 * t519;
	t506 = t527 * t558;
	t505 = t454 * t512;
	t504 = t457 * t512;
	t501 = -t508 / 0.8e1;
	t496 = t464 * t505;
	t495 = t464 * t504;
	t444 = t442 * t443;
	t487 = t444 * t577;
	t486 = t451 * t498;
	t485 = qJD(1) * t488;
	t484 = t498 * t520;
	t401 = t491 * t545;
	t402 = t488 * t545;
	t371 = -t455 * t485 * t545 + (-t431 * t496 - t432 * t495 + t476 * t545) * t458;
	t399 = t458 * t402;
	t400 = t458 * t401;
	t481 = t371 * t554 + t399 * t514 - t400 * t519;
	t374 = -t455 * t431 * t495 + (t455 * t432 * t505 + (-t455 * t571 + t491 * t522) * t442) * t464;
	t397 = t488 * t442 * t535;
	t398 = t455 * t401;
	t480 = t374 * t554 + t397 * t519 + t398 * t514;
	t372 = (-t458 * t449 * t484 + (-t458 * t571 - t491 * t523) * t442) * t464;
	t479 = t371 * t557 + t372 * t554 + t399 * t519 + t400 * t514;
	t373 = (t455 * t581 + (-t476 * t455 - t458 * t485) * t442) * t464;
	t478 = t373 * t555 + t374 * t558 - t397 * t515 - t398 * t519;
	t475 = -t486 * t520 - t573;
	t474 = t451 * t484 + t573;
	t472 = t475 * t458;
	t384 = t578 * t464;
	t471 = -t498 * t487 + t584;
	t470 = -t497 * t487 + (-t490 * qJD(2) + t377 * t556 + t378 * t582) * t442 + (-(t530 + t539) * t449 - t497 * t448 + (-t498 * qJD(2) - t532 - t541) * t451) * t520;
	t383 = t474 * t464;
	t382 = t464 * t472;
	t381 = t458 * t384;
	t380 = t475 * t535;
	t379 = t455 * t384;
	t376 = (t476 * t442 - t581) * t464;
	t375 = -t432 * t496 + (t431 * t504 + t571 * t442) * t464;
	t370 = t373 * t506;
	t369 = t372 * t506;
	t368 = t470 * t464;
	t367 = (t444 * t486 * t575 * t583 - t584) * t464;
	t366 = (qJD(1) * t472 + t471 * t455) * t464;
	t365 = (t470 * t455 - t522 * t578) * t464;
	t364 = (t471 * t458 + t474 * t523) * t464;
	t363 = (t470 * t458 + t578 * t523) * t464;
	t1 = [(t480 * t527 + t370) * r_i_i_C(1) - t478 * r_i_i_C(2) * t527 - r_i_i_C(3) * t523 + t373 * pkin(2) - pkin(16) * t522, t372 * pkin(2) + t369 * r_i_i_C(1) + (t481 * r_i_i_C(1) + t479 * r_i_i_C(2)) * t527, t363 * pkin(2) + ((t363 * t558 + t364 * t555 + t400 * t501) * r_i_i_C(1) + (t363 * t554 + t399 * t508 / 0.8e1 + t364 * t558) * r_i_i_C(2) + ((-t371 * t451 + t381 * t449 - t399 * t448) * r_i_i_C(1) + (-t372 * t451 - t382 * t449 - t400 * t448) * r_i_i_C(2)) * t566 + ((t372 * t560 + t382 * t562 + t400 * t563) * r_i_i_C(1) + (-t381 * t561 + t371 * t559 + t399 * t430 / 0.4e1) * r_i_i_C(2)) * t567) * t527, 0; -t479 * r_i_i_C(1) * t527 + (t481 * t527 + t369) * r_i_i_C(2) + r_i_i_C(3) * t522 + t371 * pkin(2) - pkin(16) * t523, t374 * pkin(2) + t370 * r_i_i_C(2) + (t478 * r_i_i_C(1) + t480 * r_i_i_C(2)) * t527, t365 * pkin(2) + ((t365 * t558 + t366 * t555 + t398 * t501) * r_i_i_C(1) + (t365 * t554 + t366 * t558 - t397 * t501) * r_i_i_C(2) + ((t373 * t451 + t379 * t449 - t397 * t448) * r_i_i_C(1) + (-t374 * t451 - t380 * t449 - t398 * t448) * r_i_i_C(2)) * t566 + ((t374 * t560 + t380 * t562 + t398 * t563) * r_i_i_C(1) + (t373 * t560 - t379 * t561 - t397 * t563) * r_i_i_C(2)) * t567) * t527, 0; 0, t376 * pkin(2) + ((t375 * t554 + t376 * t558 + t401 * t515 - t402 * t519) * r_i_i_C(1) + (t375 * t557 + t376 * t554 - t401 * t519 + t402 * t514) * r_i_i_C(2)) * t527, t367 * pkin(2) + ((t367 * t558 + t368 * t555 + t402 * t501) * r_i_i_C(1) + (t367 * t554 + t368 * t558 + t401 * t501) * r_i_i_C(2) + ((-t375 * t451 - t383 * t449 + t401 * t448) * r_i_i_C(1) + (-t376 * t451 + t384 * t449 - t402 * t448) * r_i_i_C(2)) * t566 + ((t376 * t560 - t384 * t562 + t402 * t563) * r_i_i_C(1) + (t375 * t559 + t383 * t561 + t401 * t563) * r_i_i_C(2)) * t567) * t527, 0;];
	JaD_transl = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobiaD_transl_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-13 14:18:54
	% EndTime: 2020-04-13 14:20:34
	% DurationCPUTime: 101.14s
	% Computational Cost: add. (1637065->376), mult. (2596718->659), div. (85136->10), fcn. (1616839->18), ass. (0->321)
	t1054 = pkin(23) + pkin(22);
	t1033 = sin(t1054);
	t1034 = cos(t1054);
	t1098 = pkin(7) ^ 2;
	t1084 = sin(pkin(19));
	t1085 = cos(pkin(19));
	t832 = sin(qJ(2));
	t835 = cos(qJ(2));
	t1017 = -t835 * t1084 + t832 * t1085;
	t1004 = pkin(7) * t1017;
	t995 = (-0.2e1 * t1004 + pkin(1)) * pkin(1);
	t825 = t995 + t1098;
	t823 = 0.1e1 / t825 ^ 2;
	t828 = t832 * t1084 + t835 * t1085;
	t827 = t828 * qJD(2);
	t1136 = t823 * t827;
	t1094 = 0.1e1 / t825;
	t1080 = pkin(7) * t828;
	t1055 = pkin(1) * t1080;
	t1089 = pkin(7) + pkin(8);
	t1090 = pkin(7) - pkin(8);
	t987 = (pkin(3) + t1089) * (-pkin(3) + t1090) + t995;
	t988 = (-pkin(3) + t1089) * (pkin(3) + t1090) + t995;
	t942 = t988 * t987;
	t838 = sqrt(-t942);
	t1013 = pkin(7) * (-t838 - 0.2e1 * t1055);
	t1101 = 0.1e1 / pkin(3);
	t1081 = pkin(7) * t827;
	t1056 = pkin(1) * t1081;
	t840 = pkin(3) ^ 2;
	t1092 = pkin(1) * pkin(7);
	t985 = (t1089 * t1090 + t995) * t1092;
	t819 = -0.4e1 * t840 * t1056 + 0.4e1 * t827 * t985;
	t826 = t1017 * qJD(2);
	t1116 = -pkin(8) ^ 2 + t840;
	t991 = t825 + t1116;
	t990 = pkin(7) * t991;
	t989 = t826 * t990;
	t821 = 0.1e1 / t838;
	t997 = -t1004 + pkin(1);
	t993 = t821 * t997 / 0.2e1;
	t941 = t1101 * (t827 * t1013 + t819 * t993 - t989);
	t940 = t1094 * t941 / 0.2e1;
	t1079 = pkin(7) * t838;
	t977 = t1101 * (-t828 * t1079 + t997 * t991);
	t974 = t1094 * t977;
	t968 = t974 / 0.2e1;
	t978 = t1101 * (t828 * t990 + t997 * t838);
	t973 = t978 * t1092;
	t1112 = qJD(3) * t968 + t973 * t1136 + t940;
	t831 = sin(qJ(3));
	t834 = cos(qJ(3));
	t972 = t977 * t1092;
	t957 = t972 * t1136;
	t975 = t1094 * t978;
	t971 = -t975 / 0.2e1;
	t1086 = -t821 / 0.2e1;
	t1031 = t1080 * t1086;
	t1020 = t819 * t1031 + t826 * t1079;
	t1036 = t1098 + t1116;
	t994 = (-0.3e1 * pkin(1) + 0.4e1 * t1004) * t1092;
	t983 = t1101 * (-t1036 * t1081 + t827 * t994 + t1020);
	t982 = t1094 * t983;
	t980 = t982 / 0.2e1;
	t915 = t1112 * t834 + (qJD(3) * t971 + t957 + t980) * t831;
	t970 = t975 / 0.2e1;
	t817 = t834 * t970;
	t981 = -t982 / 0.2e1;
	t916 = qJD(3) * t817 + (-t957 + t981) * t834 + t1112 * t831;
	t1106 = -t1033 * t916 + t1034 * t915;
	t1153 = pkin(5) * t1106;
	t1099 = pkin(5) ^ 2;
	t1100 = pkin(4) ^ 2;
	t969 = -t974 / 0.2e1;
	t936 = t831 * t970 + t834 * t969;
	t934 = t1033 * t936;
	t937 = t831 * t969 + t834 * t971;
	t930 = t1034 * t937 + t934;
	t791 = pkin(5) * t930;
	t841 = pkin(9) ^ 2;
	t925 = 0.2e1 * pkin(4) * t791 + pkin(11) ^ 2 - t1099 - t1100 - t841;
	t1155 = t1153 * t925;
	t1088 = -pkin(9) - pkin(11);
	t1096 = -0.2e1 * pkin(4);
	t926 = (t930 * t1096 + pkin(5)) * pkin(5);
	t922 = (pkin(4) - t1088) * (pkin(4) + t1088) + t926;
	t1087 = pkin(11) - pkin(9);
	t923 = (pkin(4) - t1087) * (pkin(4) + t1087) + t926;
	t910 = t923 * t922;
	t1102 = sqrt(-t910);
	t1154 = t1102 * t1153;
	t1044 = t1101 * t1056;
	t1025 = t823 * t1044;
	t1074 = sin(pkin(23));
	t1002 = t1074 * t1025;
	t1075 = cos(pkin(23));
	t1003 = t1075 * t1025;
	t1082 = t1101 * t1094;
	t1050 = t1082 / 0.2e1;
	t1010 = t1074 * t1050;
	t1026 = t1075 * t1082;
	t1012 = -t1026 / 0.2e1;
	t965 = t1075 * t977;
	t966 = t1074 * t978;
	t1149 = (-t965 + t966) * t1092;
	t1126 = t1149 * t823;
	t939 = t941 * t1055;
	t1078 = t828 * t1098;
	t1053 = t827 * t1078;
	t1038 = pkin(1) ^ 2 * t1053;
	t1122 = t1038 * t1094 * t823;
	t950 = t978 * t1122;
	t944 = 0.4e1 * t950;
	t1128 = t823 * t939 + t944;
	t964 = t1074 * t977;
	t967 = t1075 * t978;
	t1150 = (t964 + t967) * t1092;
	t1127 = t1150 * t823;
	t780 = t1074 * t980 + t1075 * t940 + t1127 * t827;
	t820 = -0.4e1 * t840 * t1055 + 0.4e1 * t828 * t985;
	t1043 = t820 * t1086;
	t1032 = pkin(7) * t1043;
	t1137 = t821 * t819;
	t1049 = t820 / t942 * t1137;
	t1083 = pkin(1) * t826;
	t1057 = pkin(7) * t1083;
	t818 = -0.8e1 * t1038 - 0.2e1 * (t987 + t988) * t1057;
	t783 = t997 * t1049 / 0.4e1 + t818 * t993 + 0.4e1 * t1078 * t1083 + t1020 + (0.2e1 * t1098 * t1017 * pkin(1) + t1032 - t990) * t827;
	t784 = t827 * t1079 + t1137 * t1004 / 0.2e1 - t826 * t1032 - t1049 * t1080 / 0.4e1 + t818 * t1031 + t989 + 0.4e1 * pkin(1) * t1053 + 0.2e1 * t997 * t1057;
	t803 = (t1017 * t838 + (t1043 - t1036) * t828) * pkin(7) + t828 * t994;
	t804 = t828 * t1013 - t1017 * t990 + t820 * t993;
	t949 = t977 * t1122;
	t943 = -0.4e1 * t949;
	t979 = t983 * t1055;
	t976 = t823 * t979;
	t1067 = t804 * t1002 - t803 * t1003 + t783 * t1010 + t784 * t1012 - t1126 * t826 + (t943 - t976) * t1075 + t1128 * t1074 - t780;
	t1011 = t1026 / 0.2e1;
	t779 = t1074 * t940 + t1075 * t981 + t1126 * t827;
	t1068 = t803 * t1002 + t804 * t1003 + t784 * t1010 + t783 * t1011 - t1127 * t826 + t1128 * t1075 + (0.4e1 * t949 + t976) * t1074 + t779;
	t1135 = t823 * t828;
	t810 = (t967 / 0.2e1 + t964 / 0.2e1) * t1094;
	t1066 = t804 * t1010 + t803 * t1012 + t1149 * t1135 - t810;
	t1037 = t1066 * t832;
	t786 = t803 * t1010 + t804 * t1011 + t1150 * t1135;
	t809 = (-t965 / 0.2e1 + t966 / 0.2e1) * t1094;
	t1065 = t786 + t809;
	t1146 = t1065 * t835 + t1037;
	t984 = t1146 * qJD(2) - t1067 * t835 + t1068 * t832;
	t790 = t1099 + (-0.2e1 * t791 + pkin(4)) * pkin(4);
	t1095 = 0.1e1 / t790;
	t789 = 0.1e1 / t790 ^ 2;
	t1093 = t1095 * t789;
	t1091 = pkin(4) * pkin(5);
	t1120 = t1091 * t789;
	t1077 = t791 - pkin(4);
	t1139 = -t1077 / 0.2e1;
	t837 = 0.1e1 / pkin(9);
	t1151 = t922 + t923;
	t898 = pkin(4) * t1153;
	t864 = -0.2e1 * t1151 * t898;
	t909 = 0.1e1 / t1102;
	t862 = t909 * t864;
	t899 = t1099 * t1106;
	t897 = pkin(4) * t899;
	t894 = 0.2e1 * t897;
	t1107 = t1033 * t915 + t1034 * t916;
	t902 = pkin(5) * t1107;
	t935 = t1034 * t936;
	t929 = -t1033 * t937 + t935;
	t855 = t837 * (t862 * t1139 + t929 * t894 - t925 * t902 + t1154);
	t924 = pkin(5) * t925;
	t883 = -t1077 * t1102 - t929 * t924;
	t882 = t837 * t883;
	t874 = t1106 * t882;
	t1152 = 0.4e1 * t1100 * t1099 * t1093 * t874 - t855 * t1120;
	t905 = 0.4e1 * t909;
	t1148 = -0.1e1 / t910 * t864 * t905 / 0.4e1;
	t1060 = qJD(2) * t832;
	t833 = sin(qJ(1));
	t1062 = qJD(1) * t833;
	t836 = cos(qJ(1));
	t1145 = t836 * t1060 + t835 * t1062;
	t1144 = 0.2e1 * t1077;
	t830 = sin(pkin(22));
	t1143 = t830 / 0.2e1;
	t1142 = -t905 / 0.2e1;
	t928 = pkin(5) * t929;
	t1141 = -t928 / 0.2e1;
	t1076 = cos(pkin(22));
	t1140 = -t1076 / 0.2e1;
	t1138 = t789 * t898;
	t1058 = -t1095 / 0.2e1;
	t1041 = t837 * t1058;
	t1129 = t1151 * t1091;
	t1123 = qJD(3) * t828;
	t1108 = -t803 * t1044 + t973 * t1123 - t979;
	t1109 = t804 * t1044 + t972 * t1123 + t939;
	t1125 = t831 * t973 - t834 * t972;
	t911 = t1108 * t834 + t1109 * t831 - t1125 * t826;
	t1124 = -t831 * t972 - t834 * t973;
	t912 = t1108 * t831 - t1109 * t834 - t1124 * t826;
	t1027 = qJD(3) * t1050;
	t1015 = t831 * t1027;
	t1051 = -t1082 / 0.2e1;
	t1028 = t834 * t1051;
	t1016 = t803 * t1028;
	t1030 = t831 * t1051;
	t931 = qJD(3) * t1016 + t804 * t1015 + t783 * t1028 + t784 * t1030 + t831 * t943 - 0.4e1 * t834 * t950;
	t1029 = t831 * t1050;
	t932 = t803 * t1015 + t784 * t1028 + t783 * t1029 + t831 * t944 + (t1027 * t804 + t943) * t834;
	t746 = t1034 * t931 + t1033 * t932 + (t1033 * t911 + t1034 * t912) * t823;
	t787 = t804 * t1028 + t803 * t1030 + t1124 * t1135;
	t788 = t804 * t1029 + t1125 * t1135 + t1016;
	t778 = t1033 * t788 + t1034 * t787;
	t896 = t1100 * t899;
	t892 = 0.4e1 * t896;
	t1117 = (-t841 + (pkin(4) + pkin(11)) * (pkin(4) - pkin(11)) + t926) * t1091;
	t918 = t1117 * t778;
	t1110 = t918 * t1148 - (t1129 * t746 + t778 * t892) * t909;
	t1069 = t1099 * t1096;
	t907 = pkin(5) * t1102;
	t1130 = t929 * t1069 - t907;
	t860 = -pkin(5) * t862 / 0.2e1;
	t1131 = t1069 * t1107 + t860;
	t885 = t918 * t905;
	t992 = -t1033 * t787 + t1034 * t788;
	t867 = t837 * (t1130 * t778 + t885 * t1139 - t992 * t924);
	t875 = t1153 * t1142;
	t877 = pkin(5) * (t1034 * t932 - t1033 * t931 + (-t1033 * t912 + t1034 * t911) * t823);
	t1134 = (t1110 * t1077 + t1130 * t746 + t1131 * t778 - t918 * t875 - t925 * t877 + t992 * t894) * t1041 + t867 * t1138;
	t1063 = t831 * t968 + t817;
	t796 = t1033 * t1063 + t935;
	t917 = t1117 * t796;
	t1111 = t917 * t1148 - (t1107 * t1129 + t796 * t892) * t909;
	t884 = t917 * t905;
	t933 = t1034 * t1063 - t934;
	t865 = t837 * (t1130 * t796 + t884 * t1139 - t933 * t924);
	t1133 = (t1111 * t1077 + t1107 * t1130 + t1131 * t796 - t917 * t875 + t933 * t894 - t1155) * t1041 + t865 * t1138;
	t1132 = t855 * t1058 + t874 * t1120;
	t1039 = t837 * t1120;
	t1005 = t1076 * t1039;
	t768 = t1077 * t925 - t929 * t907;
	t880 = t882 * t1120;
	t879 = t830 * t880;
	t1119 = -t768 * t1005 - t879;
	t1019 = t830 * t1039;
	t878 = t1076 * t880;
	t1118 = t768 * t1019 - t878;
	t1115 = t1091 * t1144 + t924;
	t889 = t768 * t837 * t1093 * t896;
	t1114 = 0.4e1 * t1076 * t889 + t1152 * t830;
	t1113 = t1152 * t1076 - 0.4e1 * t830 * t889;
	t1072 = t780 * t832;
	t1105 = (qJD(2) * t810 - t779) * t835 + t1072;
	t996 = t1065 * t832 - t1066 * t835;
	t1073 = t779 * t832;
	t1071 = t810 * t832;
	t1070 = t837 * t1095;
	t1064 = t1145 * t809;
	t1061 = qJD(1) * t836;
	t1052 = qJD(2) * t835 * pkin(1);
	t1046 = t833 * t1060;
	t1042 = t1095 * t1143;
	t1040 = pkin(1) * t832 - pkin(16);
	t1022 = t837 * t1042;
	t1018 = t1076 * t1058;
	t797 = t809 * t835 - t1071;
	t1014 = t809 * t832 + t810 * t835;
	t1008 = t778 * t1019;
	t1007 = t796 * t1019;
	t1006 = t837 * t1018;
	t1001 = qJD(1) * t1014;
	t999 = t778 * t1005;
	t998 = t796 * t1005;
	t775 = t996 * t836;
	t774 = t1146 * t836;
	t770 = -t797 * qJD(2) - t780 * t835 - t1073;
	t986 = (qJD(2) * t786 - t1067) * t832 + (-t1066 * qJD(2) - t1068) * t835;
	t893 = -0.4e1 * t897;
	t891 = t837 * t1138;
	t890 = t830 * t891;
	t888 = t1076 * t891;
	t881 = t883 * t1058;
	t876 = t902 * t1142;
	t866 = t867 * t1058;
	t863 = t865 * t1058;
	t850 = (t1107 * t1115 + t1111 * t928 + t796 * t893 + t933 * t860 + t917 * t876 - t1154) * t1070;
	t849 = (-t1102 * t877 + t1110 * t928 + t1115 * t746 + t778 * t893 + t992 * t860 + t918 * t876) * t1070;
	t805 = t809 * t1046;
	t795 = t797 * t836;
	t794 = t1014 * t836;
	t793 = t797 * t833;
	t792 = t1014 * t833;
	t773 = t996 * t833;
	t772 = t1146 * t833;
	t769 = -t1014 * qJD(2) + t779 * t835 - t1072;
	t767 = t797 * t1061 - t1105 * t833 - t805;
	t766 = -t810 * t1046 + t836 * t1001 + (t1073 + (qJD(2) * t809 + t780) * t835) * t833;
	t765 = -t1062 * t1071 + t1105 * t836 + t1064;
	t764 = t833 * t1001 + t770 * t836;
	t753 = (t768 * t1018 + t830 * t881) * t837;
	t752 = (t768 * t1042 + t1076 * t881) * t837;
	t749 = t1115 * t796 + t884 * t1141 - t933 * t907;
	t744 = t996 * qJD(2) - t1067 * t832 - t1068 * t835;
	t741 = t1115 * t778 + t885 * t1141 - t992 * t907;
	t740 = qJD(1) * t775 + t984 * t833;
	t739 = -qJD(1) * t774 + t986 * t833 + t805;
	t738 = -t1062 * t996 + t984 * t836;
	t737 = (t786 * t835 + t1037) * t1062 + t986 * t836 + t1064;
	t733 = -t1102 * t902 - t898 * t1144 + t929 * t860 - t1155;
	t728 = t749 * t1006 - t768 * t998 - t796 * t879 + t830 * t863;
	t727 = t768 * t1007 + t749 * t1022 + t1076 * t863 - t796 * t878;
	t726 = t741 * t1006 - t768 * t999 - t778 * t879 + t830 * t866;
	t725 = t768 * t1008 + t741 * t1022 + t1076 * t866 - t778 * t878;
	t723 = t733 * t1006 + t1132 * t830 + t768 * t888;
	t722 = t733 * t1022 + t1132 * t1076 - t768 * t890;
	t718 = t1107 * t1119 + t1114 * t796 + t1133 * t830 + t850 * t1140 - t733 * t998 + t749 * t888;
	t717 = t733 * t1007 + t1133 * t1076 + t1107 * t1118 + t1113 * t796 + t850 * t1143 - t749 * t890;
	t716 = t1114 * t778 + t1119 * t746 + t1134 * t830 + t849 * t1140 - t733 * t999 + t741 * t888;
	t715 = t733 * t1008 + t1134 * t1076 + t1113 * t778 + t1118 * t746 + t849 * t1143 - t741 * t890;
	t1 = [(t722 * t793 + t723 * t792 + t752 * t767 + t753 * t766) * r_i_i_C(1) + (-t722 * t792 + t723 * t793 - t752 * t766 + t753 * t767) * r_i_i_C(2) + t833 * t1052 + (t766 * t1076 - t767 * t830) * pkin(4) + (-t833 * r_i_i_C(3) + t1040 * t836) * qJD(1), (-t715 * t795 - t716 * t794 + t722 * t775 - t723 * t774 + t725 * t765 + t726 * t764 + t737 * t753 + t738 * t752) * r_i_i_C(1) + (t715 * t794 - t716 * t795 + t722 * t774 + t723 * t775 - t725 * t764 + t726 * t765 - t737 * t752 + t738 * t753) * r_i_i_C(2) + (t737 * t1076 - t738 * t830) * pkin(4) + t1145 * pkin(1), (-t717 * t795 - t718 * t794 + t727 * t765 + t728 * t764) * r_i_i_C(1) + (t717 * t794 - t718 * t795 - t727 * t764 + t728 * t765) * r_i_i_C(2), 0; (-t722 * t795 - t723 * t794 + t752 * t765 + t753 * t764) * r_i_i_C(1) + (t722 * t794 - t723 * t795 - t752 * t764 + t753 * t765) * r_i_i_C(2) - t836 * t1052 + (t764 * t1076 - t765 * t830) * pkin(4) + (t836 * r_i_i_C(3) + t1040 * t833) * qJD(1), (-t715 * t793 - t716 * t792 + t722 * t773 - t723 * t772 - t725 * t767 - t726 * t766 + t739 * t753 + t740 * t752) * r_i_i_C(1) + (t715 * t792 - t716 * t793 + t722 * t772 + t723 * t773 + t725 * t766 - t726 * t767 - t739 * t752 + t740 * t753) * r_i_i_C(2) + (t739 * t1076 - t740 * t830) * pkin(4) + (-t835 * t1061 + t1046) * pkin(1), (-t717 * t793 - t718 * t792 - t727 * t767 - t728 * t766) * r_i_i_C(1) + (t717 * t792 - t718 * t793 + t727 * t766 - t728 * t767) * r_i_i_C(2), 0; 0, (-t1014 * t715 - t1146 * t722 + t716 * t797 - t723 * t996 + t725 * t770 + t726 * t769 + t744 * t752 - t753 * t984) * r_i_i_C(1) + (-t1014 * t716 - t1146 * t723 - t715 * t797 + t722 * t996 - t725 * t769 + t726 * t770 + t744 * t753 + t752 * t984) * r_i_i_C(2) - t1052 + (-t1076 * t984 - t744 * t830) * pkin(4), (-t1014 * t717 + t718 * t797 + t727 * t770 + t728 * t769) * r_i_i_C(1) + (-t1014 * t718 - t717 * t797 - t727 * t769 + t728 * t770) * r_i_i_C(2), 0;];
	JaD_transl = t1;
end