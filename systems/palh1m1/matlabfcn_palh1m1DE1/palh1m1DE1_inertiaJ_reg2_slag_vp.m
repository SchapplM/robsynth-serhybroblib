% Calculate inertial parameters regressor of joint inertia matrix for
% palh1m1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% MM_reg [((4+1)*4/2)x(4*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-14 19:47
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = palh1m1DE1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1DE1_inertiaJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1DE1_inertiaJ_reg2_slag_vp: pkin has to be [23x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t375 = 2 * pkin(4);
t189 = sin(qJ(3));
t190 = sin(qJ(2));
t193 = cos(qJ(3));
t194 = cos(qJ(2));
t162 = -t194 * t189 - t190 * t193;
t165 = -t189 * t190 + t193 * t194;
t186 = cos(pkin(21));
t208 = pkin(5) ^ 2;
t206 = pkin(7) ^ 2;
t214 = pkin(1) ^ 2;
t195 = cos(pkin(19));
t328 = sin(pkin(19));
t163 = t190 * t195 - t194 * t328;
t325 = pkin(7) * t163;
t369 = -2 * pkin(1);
t284 = t325 * t369 + t214;
t153 = t206 + t284;
t280 = pkin(3) ^ 2 - pkin(8) ^ 2;
t146 = t153 + t280;
t156 = pkin(1) - t325;
t351 = -pkin(8) - pkin(3);
t142 = (pkin(7) - t351) * (pkin(7) + t351) + t284;
t350 = -pkin(8) + pkin(3);
t143 = (pkin(7) - t350) * (pkin(7) + t350) + t284;
t216 = sqrt(-t143 * t142);
t166 = t190 * t328 + t194 * t195;
t324 = pkin(7) * t166;
t127 = t146 * t324 + t156 * t216;
t286 = t193 * t127;
t294 = t166 * t216;
t126 = -pkin(7) * t294 + t146 * t156;
t289 = t189 * t126;
t151 = 0.1e1 / t153;
t211 = 0.1e1 / pkin(3);
t297 = t151 * t211;
t113 = (t289 / 0.2e1 + t286 / 0.2e1) * t297;
t287 = t193 * t126;
t288 = t189 * t127;
t114 = (-t287 / 0.2e1 + t288 / 0.2e1) * t297;
t177 = pkin(23) + pkin(22);
t173 = sin(t177);
t174 = cos(t177);
t88 = t113 * t174 - t114 * t173;
t340 = t88 * pkin(5);
t304 = t340 * t375 + t208;
t349 = (-pkin(9) - pkin(11));
t74 = ((pkin(4) - t349) * (pkin(4) + t349)) + t304;
t348 = (-pkin(9) + pkin(11));
t75 = ((pkin(4) - t348) * (pkin(4) + t348)) + t304;
t217 = sqrt(-t75 * t74);
t249 = t113 * t173 + t174 * t114;
t282 = pkin(9) ^ 2 - pkin(11) ^ 2;
t209 = pkin(4) ^ 2;
t84 = t209 + t304;
t78 = t84 - t282;
t372 = t249 * t78;
t86 = pkin(4) * t88 + pkin(5);
t52 = pkin(4) * t372 + t217 * t86;
t305 = t52 * t186;
t201 = 0.1e1 / pkin(11);
t82 = 0.1e1 / t84;
t311 = t201 * t82;
t182 = sin(pkin(21));
t333 = t182 / 0.2e1;
t371 = t217 * t249;
t50 = -pkin(4) * t371 + t78 * t86;
t37 = (t50 * t333 + t305 / 0.2e1) * t311;
t306 = t52 * t182;
t307 = t50 * t186;
t38 = (-t307 / 0.2e1 + t306 / 0.2e1) * t311;
t34 = atan2(t37, t38);
t31 = sin(t34);
t32 = cos(t34);
t24 = -t162 * t32 + t165 * t31;
t374 = -0.2e1 * t24;
t237 = -pkin(4) * t186 * t311 / 0.2e1;
t83 = 0.1e1 / t84 ^ 2;
t341 = pkin(5) * t83;
t370 = (-0.2e1 * t86 * pkin(5) - t78) * t237 + (t306 - t307) * pkin(4) * t201 * t341;
t22 = -t162 * t31 - t165 * t32;
t368 = t22 ^ 2;
t367 = -2 * pkin(16);
t181 = sin(pkin(22));
t185 = cos(pkin(22));
t203 = 0.1e1 / pkin(9);
t354 = t82 / 0.2e1;
t265 = t203 * t354;
t77 = t84 + t282;
t85 = -pkin(4) - t340;
t49 = -pkin(5) * t371 - t77 * t85;
t339 = pkin(5) * t249;
t51 = -t217 * t85 + t77 * t339;
t40 = atan2(t51 * t265, t49 * t265);
t347 = sin(t40);
t39 = cos(t40);
t29 = t181 * t39 - t185 * t347;
t30 = -t181 * t347 - t185 * t39;
t184 = cos(pkin(23));
t292 = t184 * t126;
t180 = sin(pkin(23));
t293 = t180 * t127;
t110 = (-t292 / 0.2e1 + t293 / 0.2e1) * t297;
t291 = t184 * t127;
t303 = t126 * t180;
t111 = (t291 / 0.2e1 + t303 / 0.2e1) * t297;
t97 = atan2(t111, t110);
t92 = sin(t97);
t93 = cos(t97);
t66 = t190 * t93 + t194 * t92;
t68 = -t190 * t92 + t194 * t93;
t20 = -t29 * t66 + t30 * t68;
t366 = 0.2e1 * t20;
t183 = sin(pkin(20));
t187 = cos(pkin(20));
t159 = t183 * t193 + t187 * t189;
t321 = t159 * pkin(6);
t277 = pkin(1) * t321;
t155 = 0.2e1 * t277;
t212 = pkin(2) ^ 2;
t207 = pkin(6) ^ 2;
t281 = t207 + t214;
t264 = -pkin(13) ^ 2 + t281;
t144 = t155 + t212 + t264;
t154 = -pkin(1) - t321;
t160 = t183 * t189 - t187 * t193;
t285 = t155 + t207;
t353 = -pkin(2) - pkin(13);
t140 = (pkin(1) - t353) * (pkin(1) + t353) + t285;
t352 = -pkin(2) + pkin(13);
t141 = (pkin(1) - t352) * (pkin(1) + t352) + t285;
t300 = t141 * t140;
t215 = sqrt(-t300);
t296 = t160 * t215;
t273 = pkin(6) * t296;
t123 = -t144 * t154 - t273;
t320 = t160 * pkin(6);
t124 = t144 * t320 - t154 * t215;
t150 = t155 + t281;
t147 = 0.1e1 / t150;
t213 = 0.1e1 / pkin(2);
t329 = t213 / 0.2e1;
t260 = t147 * t329;
t107 = atan2(t124 * t260, t123 * t260);
t104 = sin(t107);
t105 = cos(t107);
t79 = t104 * t194 + t105 * t190;
t76 = pkin(2) * t79 - pkin(16);
t365 = -0.2e1 * t76;
t81 = -t104 * t190 + t105 * t194;
t364 = -0.2e1 * t81;
t145 = t153 - t280;
t157 = pkin(1) * t163 - pkin(7);
t125 = -pkin(1) * t294 - t145 * t157;
t128 = pkin(1) * t166 * t145 - t157 * t216;
t191 = sin(pkin(18));
t205 = 0.1e1 / pkin(8);
t298 = t151 * t205;
t196 = cos(pkin(18));
t330 = t196 / 0.2e1;
t115 = (t125 * t330 - t191 * t128 / 0.2e1) * t298;
t116 = (t128 * t330 + t125 * t191 / 0.2e1) * t298;
t99 = atan2(t116, t115);
t95 = sin(t99);
t363 = 0.2e1 * t95;
t362 = 0.1e1 / t38 ^ 2;
t226 = t212 - t264 - 0.2e1 * t277;
t361 = 0.1e1 / t226 ^ 2;
t168 = t190 * pkin(1) - pkin(16);
t149 = -pkin(5) * t165 + t168;
t360 = 0.2e1 * t149;
t359 = -0.2e1 * t166 ^ 2;
t358 = -0.2e1 * t168;
t357 = 0.2e1 * t168;
t356 = -0.2e1 * t194;
t65 = 0.1e1 / t217;
t355 = -t65 / 0.2e1;
t346 = pkin(1) * t92;
t345 = pkin(1) * t93;
t279 = pkin(1) * t324;
t301 = 0.2e1 / t216 * (t142 + t143) * t279;
t261 = -t301 / 0.2e1;
t295 = t163 * t216;
t101 = (t295 + (t156 * t369 - t146 + t261) * t166) * pkin(7);
t103 = t156 * t301 / 0.2e1 + t206 * pkin(1) * t359 + (-t163 * t146 - t294) * pkin(7);
t109 = 0.1e1 / t110 ^ 2;
t253 = 0.1e1 / t153 ^ 2 * t279;
t334 = t180 / 0.2e1;
t336 = t103 / 0.2e1;
t337 = -t101 / 0.2e1;
t45 = 0.1e1 + (((t101 * t334 + t184 * t336) * t151 + (t291 + t303) * t253) / t110 - ((t103 * t334 + t184 * t337) * t151 + (-t292 + t293) * t253) * t111 * t109) * t211 / (t109 * t111 ^ 2 + 0.1e1);
t344 = pkin(4) * t45;
t343 = pkin(5) * t31;
t342 = pkin(5) * t32;
t222 = pkin(5) * (t83 * t305 + (t50 * t83 - t82 * t86) * t182);
t257 = -0.2e1 * t209 * t339;
t268 = t65 * t86 / 0.2e1;
t232 = pkin(5) * (t74 + t75) * t375;
t53 = t249 * t232;
t223 = t249 * t257 + t53 * t268;
t267 = t249 * t355;
t227 = -t88 * t217 + t53 * t267;
t235 = t88 * t78 - t371;
t246 = t311 * t333;
t332 = t186 / 0.2e1;
t266 = t82 * t332;
t33 = 0.1e1 / (t37 ^ 2 * t362 + 0.1e1);
t271 = t33 * t37 * t362;
t272 = t201 * t33 / t38;
t10 = 0.1e1 - (t227 * t237 + (t235 * pkin(4) + t223) * t246 + t370 * t249) * t271 + (t223 * t266 + (((t227 - t372) * t333 + t235 * t332) * t82 + t249 * t222) * pkin(4)) * t272;
t331 = -t193 / 0.2e1;
t71 = ((t103 * t331 + t189 * t337) * t151 + (-t286 - t289) * t253) * t211;
t72 = ((t101 * t331 + t189 * t336) * t151 + (-t287 + t288) * t253) * t211;
t57 = t173 * t72 + t174 * t71;
t42 = t57 * t232;
t224 = t57 * t257 + t42 * t268;
t58 = -t173 * t71 + t174 * t72;
t228 = -t58 * t217 + t42 * t267;
t310 = t217 * t57;
t236 = t58 * t78 - t310;
t5 = 0.1e1 - (t228 * t237 + (t236 * pkin(4) + t224) * t246 + t370 * t57) * t271 + (t224 * t266 + (((-t57 * t78 + t228) * t333 + t236 * t332) * t82 + t57 * t222) * pkin(4)) * t272;
t338 = t5 * t10;
t335 = t147 / 0.2e1;
t327 = pkin(1) * t160;
t326 = pkin(6) * t124;
t258 = 0.1e1 / pkin(13) * t329;
t133 = atan2(t215 * t258, t226 * t258);
t131 = sin(t133);
t323 = t131 * pkin(2);
t132 = cos(t133);
t322 = t132 * pkin(2);
t188 = sin(qJ(4));
t319 = t188 * t5;
t192 = cos(qJ(4));
t318 = t192 * t5;
t317 = t193 * pkin(1);
t148 = 0.1e1 / t150 ^ 2;
t122 = 0.1e1 / t123 ^ 2;
t248 = pkin(2) / (t122 * t124 ^ 2 + 0.1e1) * t150 * t213;
t302 = 0.2e1 / t215 * (t140 + t141) * pkin(1) * t320;
t262 = -t302 / 0.2e1;
t220 = ((t154 * t262 + (t159 * t144 - t296) * pkin(6)) * t335 + (-t147 * t160 * t207 + t148 * t326) * t327) / t123 * t248;
t221 = ((-t159 * t215 + (t262 - t144) * t160) * t335 + (t123 * t148 + t147 * t154) * t327) * t122 * t248 * t326;
t55 = 0.2e1 * t220 - 0.2e1 * t221 + (0.1e1 / t226 * t302 / 0.2e1 + t361 * t273 * t369) / (-t361 * t300 + 0.1e1);
t60 = 0.2e1 * t220 - 0.2e1 * t221;
t316 = t55 + t60;
t315 = t188 * t10;
t314 = t188 * t22;
t313 = t192 * t10;
t312 = t192 * t22;
t299 = t151 * t191;
t290 = t188 * t192;
t178 = t188 ^ 2;
t179 = t192 ^ 2;
t283 = t178 + t179;
t278 = pkin(2) * t55 * t60;
t276 = -0.2e1 * t314;
t275 = 0.2e1 * t312;
t274 = 0.2e1 * t290;
t270 = t24 * t290;
t269 = t85 * t355;
t259 = t151 * t330;
t7 = pkin(12) * t10 + t343;
t256 = t283 * t7;
t254 = (-t178 + t179) * t24;
t48 = 0.1e1 / t49 ^ 2;
t252 = pkin(9) * t203 / (t48 * t51 ^ 2 + 0.1e1) * t84;
t251 = (t131 ^ 2 + t132 ^ 2) * t212;
t250 = t5 * t270;
t247 = t10 * t270;
t175 = t189 * pkin(1);
t172 = t175 + pkin(5);
t26 = t31 * t172 - t32 * t317;
t245 = 0.2e1 * t283;
t25 = t172 * t32 + t31 * t317;
t2 = -pkin(10) * t5 - t25;
t8 = -pkin(10) * t10 - t342;
t244 = t10 * t2 + t5 * t8;
t243 = 0.1e1 / t49 * t252;
t3 = pkin(12) * t5 + t26;
t242 = t2 * t24 - t22 * t3;
t241 = -t22 * t7 + t24 * t8;
t240 = t191 * t253;
t239 = t196 * t253;
t231 = pkin(4) * (t49 * t83 + t82 * t85);
t230 = pkin(5) * t48 * t51 * t252;
t61 = t131 * t81 + t132 * t79;
t62 = -t131 * t79 + t132 * t81;
t229 = (-t131 * t61 - t132 * t62) * pkin(2);
t225 = pkin(4) * (-t208 * t249 * t82 + t51 * t341);
t197 = pkin(16) ^ 2;
t167 = t168 ^ 2;
t112 = 0.1e1 / t115 ^ 2;
t102 = t157 * t261 + t214 * pkin(7) * t359 + (-t163 * t145 - t294) * pkin(1);
t100 = (t295 + (0.2e1 * t157 * pkin(7) - t145 + t261) * t166) * pkin(1);
t96 = cos(t99);
t59 = t60 ^ 2;
t54 = (-t181 * t68 + t185 * t66) * pkin(4) + t168;
t46 = ((t102 * t259 + t128 * t239 + t100 * t299 / 0.2e1 + t125 * t240) / t115 - (t100 * t259 + t125 * t239 - t102 * t299 / 0.2e1 - t128 * t240) * t116 * t112) / (t112 * t116 ^ 2 + 0.1e1) * t205;
t44 = t185 * t344 + t345;
t43 = t181 * t344 + t346;
t21 = t24 ^ 2;
t19 = -t29 * t68 - t30 * t66;
t18 = t29 * t44 + t30 * t43;
t17 = -t29 * t43 + t30 * t44;
t16 = 0.2e1 * ((t53 * t269 + (t88 * t77 - t371) * pkin(5)) * t354 + t249 * t225) * t243 - 0.2e1 * ((-t249 * t77 + t227) * t354 + t249 * t231) * t230;
t14 = pkin(10) * t22 - pkin(12) * t24 + t149;
t12 = 0.2e1 * ((t42 * t269 + (t58 * t77 - t310) * pkin(5)) * t354 + t57 * t225) * t243 - 0.2e1 * ((-t57 * t77 + t228) * t354 + t57 * t231) * t230 + t45;
t9 = t10 ^ 2;
t4 = t5 ^ 2;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t194 ^ 2, t190 * t356, 0, t190 ^ 2, 0, 0, t190 * t367, pkin(16) * t356, 0, t197, t162 ^ 2, -0.2e1 * t162 * t165, 0, t165 ^ 2, 0, 0, t165 * t358, t162 * t358, 0, t167, t21, t22 * t374, 0, t368, 0, 0, t22 * t360, t24 * t360, 0, t149 ^ 2, t179 * t21, -0.2e1 * t21 * t290, t24 * t275, t178 * t21, t24 * t276, t368, t14 * t275, t14 * t276, t283 * t14 * t374, t283 * t14 ^ 2, t95 ^ 2, t96 * t363, 0, t96 ^ 2, 0, 0, -0.2e1 * pkin(15) * t96, pkin(15) * t363, 0, pkin(15) ^ 2, t68 ^ 2, -0.2e1 * t66 * t68, 0, t66 ^ 2, 0, 0, t66 * t357, t68 * t357, 0, t167, t81 ^ 2, t79 * t364, 0, t79 ^ 2, 0, 0, t79 * t367, pkin(16) * t364, 0, t197, t62 ^ 2, -0.2e1 * t61 * t62, 0, t61 ^ 2, 0, 0, t61 * t365, t62 * t365, 0, t76 ^ 2, t20 ^ 2, t19 * t366, 0, t19 ^ 2, 0, 0, -0.2e1 * t54 * t19, t54 * t366, 0, t54 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, 0, -t190, 0, 0, 0, 0, 0, 0, 0, -t162, 0, t165, 0, 0, 0, (t162 * t189 - t165 * t193) * pkin(1), 0, 0, 0, t5 * t24, 0, -t22 * t5, 0, 0, 0, -t22 * t26 - t24 * t25, 0, t250, t5 * t254, t5 * t314, -t250, t5 * t312, 0, t242 * t188, t242 * t192, 0, 0, 0, 0, t46 * t95, 0, t46 * t96, 0, 0, 0, 0, 0, 0, 0, t45 * t68, 0, -t45 * t66, 0, 0, 0, (-t66 * t92 - t68 * t93) * pkin(1), 0, 0, 0, t81, 0, -t79, 0, 0, 0, 0, 0, 0, 0, -t62, 0, t61, 0, 0, 0, t229, 0, 0, 0, t12 * t20, 0, t19 * t12, 0, 0, 0, -t17 * t20 + t18 * t19, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t175, 0.2e1 * t317, 0, (t189 ^ 2 + t193 ^ 2) * t214, 0, 0, 0, 0, 0, t4, 0.2e1 * t25 * t5, -0.2e1 * t26 * t5, 0, t25 ^ 2 + t26 ^ 2, t178 * t4, t4 * t274, 0, t179 * t4, 0, 0, -0.2e1 * t2 * t318, 0.2e1 * t2 * t319, t5 * t3 * t245, t283 * t3 ^ 2 + t2 ^ 2, 0, 0, 0, 0, 0, t46 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 ^ 2, 0.2e1 * t45 * t345, -0.2e1 * t45 * t346, 0, (t92 ^ 2 + t93 ^ 2) * t214, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.2e1 * t322, 0.2e1 * t323, 0, t251, 0, 0, 0, 0, 0, t12 ^ 2, 0.2e1 * t17 * t12, -0.2e1 * t18 * t12, 0, t17 ^ 2 + t18 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, 0, t165, 0, 0, 0, 0, 0, 0, 0, t10 * t24, 0, -t22 * t10, 0, 0, 0, (-t22 * t31 - t24 * t32) * pkin(5), 0, t247, t10 * t254, t10 * t314, -t247, t10 * t312, 0, t241 * t188, t241 * t192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81 * t60, 0, -t60 * t79, 0, 0, 0, 0, 0, 0, 0, -t55 * t62, 0, t55 * t61, 0, 0, 0, t60 * t229, 0, 0, 0, t16 * t20, 0, t19 * t16, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t175, t317, 0, 0, 0, 0, 0, 0, 0, t338, t10 * t25 + t5 * t342, -t10 * t26 - t5 * t343, 0, (t25 * t32 + t26 * t31) * pkin(5), t178 * t338, t274 * t338, 0, t179 * t338, 0, 0, -t244 * t192, t244 * t188, t10 * t283 * t3 + t256 * t5, t2 * t8 + t256 * t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t316 * t322, t316 * t323, 0, t60 * t251, 0, 0, 0, 0, 0, t12 * t16, t17 * t16, -t18 * t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0.2e1 * t10 * t342, -0.2e1 * t10 * t343, 0, (t31 ^ 2 + t32 ^ 2) * t208, t178 * t9, t9 * t274, 0, t179 * t9, 0, 0, -0.2e1 * t8 * t313, 0.2e1 * t8 * t315, t7 * t10 * t245, t283 * t7 ^ 2 + t8 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55 ^ 2, -0.2e1 * t132 * t278, 0.2e1 * t131 * t278, 0, t59 * t251, 0, 0, 0, 0, 0, t16 ^ 2, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192 * t24, 0, -t188 * t24, t22, t192 * t14, -t188 * t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t319, 0, t318, 0, -t188 * t3, -t192 * t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t315, 0, t313, 0, -t188 * t7, -t192 * t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MM_reg = t1;
