% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% palh1m1DE1
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JaD_transl [3x4]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-14 19:47
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = palh1m1DE1_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(3,1),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1DE1_jacobiaD_transl_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1DE1_jacobiaD_transl_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'palh1m1DE1_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1DE1_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1DE1_jacobiaD_transl_sym_varpar: pkin has to be [23x1] (double)');
JaD_transl=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:57
	% EndTime: 2020-04-14 18:42:57
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.07s
	% Computational Cost: add. (17->14), mult. (60->29), div. (0->0), fcn. (38->4), ass. (0->12)
	t17 = sin(qJ(1));
	t26 = qJD(1) * t17;
	t19 = cos(qJ(1));
	t25 = qJD(1) * t19;
	t24 = qJD(2) * t17;
	t23 = qJD(2) * t19;
	t16 = sin(qJ(2));
	t18 = cos(qJ(2));
	t22 = r_i_i_C(1) * t18 - r_i_i_C(2) * t16;
	t21 = r_i_i_C(1) * t16 + r_i_i_C(2) * t18 - pkin(16);
	t20 = t22 * qJD(2);
	t1 = [t22 * t24 + (-r_i_i_C(3) * t17 + t21 * t19) * qJD(1), (-t16 * t26 + t18 * t23) * r_i_i_C(2) + (t16 * t23 + t18 * t26) * r_i_i_C(1), 0, 0; -t19 * t20 + (r_i_i_C(3) * t19 + t21 * t17) * qJD(1), (t16 * t25 + t18 * t24) * r_i_i_C(2) + (t16 * t24 - t18 * t25) * r_i_i_C(1), 0, 0; 0, -t20, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:59
	% DurationCPUTime: 0.08s
	% Computational Cost: add. (93->24), mult. (298->44), div. (0->0), fcn. (269->6), ass. (0->25)
	t57 = sin(qJ(3));
	t58 = sin(qJ(2));
	t60 = cos(qJ(3));
	t61 = cos(qJ(2));
	t67 = t57 * t58 - t60 * t61;
	t76 = qJD(2) + qJD(3);
	t63 = t76 * t67;
	t68 = t57 * t61 + t58 * t60;
	t64 = t76 * t68;
	t59 = sin(qJ(1));
	t62 = cos(qJ(1));
	t65 = qJD(1) * t67;
	t51 = t59 * t65 - t64 * t62;
	t66 = qJD(1) * t68;
	t52 = t59 * t66 + t63 * t62;
	t75 = t52 * r_i_i_C(1) - t51 * r_i_i_C(2);
	t53 = t59 * t64 + t62 * t65;
	t54 = -t59 * t63 + t62 * t66;
	t74 = -t54 * r_i_i_C(1) + t53 * r_i_i_C(2);
	t73 = -t64 * r_i_i_C(1) + t63 * r_i_i_C(2);
	t72 = qJD(1) * t61;
	t71 = qJD(2) * t58;
	t70 = qJD(2) * t61 * pkin(1);
	t69 = pkin(1) * t58 - pkin(16);
	t1 = [t59 * t70 + t53 * r_i_i_C(1) + t54 * r_i_i_C(2) + (-r_i_i_C(3) * t59 + t69 * t62) * qJD(1), (t59 * t72 + t62 * t71) * pkin(1) + t75, t75, 0; -t62 * t70 + t51 * r_i_i_C(1) + t52 * r_i_i_C(2) + (r_i_i_C(3) * t62 + t69 * t59) * qJD(1), (t59 * t71 - t62 * t72) * pkin(1) + t74, t74, 0; 0, -t70 + t73, t73, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:46:16
	% EndTime: 2020-04-14 18:54:38
	% DurationCPUTime: 306.22s
	% Computational Cost: add. (8968873->333), mult. (13949926->617), div. (538600->14), fcn. (8723281->19), ass. (0->280)
	t864 = cos(pkin(21));
	t1023 = t864 / 0.2e1;
	t863 = sin(pkin(21));
	t1025 = t863 / 0.2e1;
	t1034 = -pkin(9) - pkin(11);
	t1021 = sin(pkin(19));
	t866 = sin(qJ(2));
	t868 = cos(qJ(2));
	t870 = cos(pkin(19));
	t844 = t866 * t1021 + t868 * t870;
	t1015 = pkin(7) * t844;
	t872 = pkin(7) ^ 2;
	t909 = t868 * t1021 - t866 * t870;
	t1016 = pkin(7) * t909;
	t1039 = -2 * pkin(1);
	t876 = pkin(1) ^ 2;
	t961 = -t1016 * t1039 + t876;
	t832 = t872 + t961;
	t828 = pkin(3) ^ 2 - pkin(8) ^ 2 + t832;
	t837 = pkin(1) + t1016;
	t1035 = -pkin(8) - pkin(3);
	t826 = (pkin(7) - t1035) * (pkin(7) + t1035) + t961;
	t1036 = pkin(3) - pkin(8);
	t827 = (pkin(7) - t1036) * (pkin(7) + t1036) + t961;
	t984 = t827 * t826;
	t878 = sqrt(-t984);
	t811 = t828 * t1015 + t837 * t878;
	t867 = cos(qJ(3));
	t966 = t867 * t811;
	t980 = t844 * t878;
	t810 = -pkin(7) * t980 + t828 * t837;
	t865 = sin(qJ(3));
	t975 = t865 * t810;
	t912 = t975 / 0.2e1 + t966 / 0.2e1;
	t829 = 0.1e1 / t832;
	t875 = 0.1e1 / pkin(3);
	t983 = t829 * t875;
	t802 = t912 * t983;
	t967 = t867 * t810;
	t974 = t865 * t811;
	t910 = t967 / 0.2e1 - t974 / 0.2e1;
	t803 = t910 * t983;
	t862 = pkin(23) + pkin(22);
	t860 = sin(t862);
	t861 = cos(t862);
	t791 = t802 * t861 + t803 * t860;
	t1018 = pkin(4) * t791;
	t1038 = -2 * pkin(5);
	t873 = pkin(5) ^ 2;
	t962 = -t1018 * t1038 + t873;
	t782 = (pkin(4) - t1034) * (pkin(4) + t1034) + t962;
	t1033 = pkin(11) - pkin(9);
	t783 = (pkin(4) - t1033) * (pkin(4) + t1033) + t962;
	t987 = t783 * t782;
	t877 = sqrt(-t987);
	t840 = t844 * qJD(2);
	t919 = -t967 + t974;
	t1037 = pkin(1) * pkin(7);
	t830 = 0.1e1 / t832 ^ 2;
	t955 = t830 * t1037;
	t897 = t919 * t955;
	t821 = 0.1e1 / t878;
	t1027 = -t821 / 0.2e1;
	t916 = 0.2e1 * (t826 + t827) * t1037;
	t812 = t840 * t916;
	t804 = t812 * t1015 * t1027;
	t956 = t837 * t1039;
	t934 = -t828 + t956;
	t839 = t909 * qJD(2);
	t982 = t839 * t878;
	t797 = t804 + (t934 * t840 - t982) * pkin(7);
	t971 = t867 * t797;
	t1051 = t840 * t872;
	t951 = t844 * t1051;
	t928 = pkin(1) * t951;
	t1026 = t821 / 0.2e1;
	t939 = t837 * t1026;
	t981 = t840 * t878;
	t798 = t812 * t939 - 0.2e1 * t928 + (t839 * t828 - t981) * pkin(7);
	t978 = t865 * t798;
	t773 = (t840 * t897 + (-t971 / 0.2e1 + t978 / 0.2e1 + t912 * qJD(3)) * t829) * t875;
	t918 = t966 + t975;
	t970 = t867 * t798;
	t979 = t865 * t797;
	t774 = (t918 * t840 * t955 + (t979 / 0.2e1 + t970 / 0.2e1 + t910 * qJD(3)) * t829) * t875;
	t930 = t861 * t773 + t774 * t860;
	t1050 = t930 * t877;
	t768 = t773 * t860 - t774 * t861;
	t957 = 2 * pkin(5);
	t915 = pkin(4) * (t782 + t783) * t957;
	t759 = t768 * t915;
	t874 = pkin(4) ^ 2;
	t788 = t874 + t962;
	t784 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t788;
	t789 = pkin(5) + t1018;
	t933 = t789 * t1038 - t784;
	t929 = t802 * t860 - t861 * t803;
	t1028 = -t929 / 0.2e1;
	t776 = 0.1e1 / t877;
	t943 = t776 * t1028;
	t729 = (t759 * t943 + t933 * t768 - t1050) * pkin(4);
	t1059 = t768 * t877;
	t935 = t929 * t874 * t1038;
	t1029 = t776 / 0.2e1;
	t944 = t789 * t1029;
	t730 = t759 * t944 + t768 * t935 + (t784 * t930 - t1059) * pkin(4);
	t785 = 0.1e1 / t788;
	t871 = 0.1e1 / pkin(11);
	t786 = 0.1e1 / t788 ^ 2;
	t954 = pkin(4) * pkin(5) * t786;
	t1017 = pkin(4) * t929;
	t764 = t784 * t1017 + t789 * t877;
	t989 = t764 * t864;
	t763 = -t877 * t1017 + t784 * t789;
	t992 = t763 * t863;
	t895 = (t989 + t992) * t954;
	t721 = ((t730 * t1023 + t729 * t1025) * t785 + t768 * t895) * t871;
	t1024 = -t864 / 0.2e1;
	t990 = t764 * t863;
	t991 = t763 * t864;
	t896 = (t990 - t991) * t954;
	t722 = ((t729 * t1024 + t730 * t1025) * t785 + t768 * t896) * t871;
	t985 = t785 * t871;
	t757 = (t992 / 0.2e1 + t989 / 0.2e1) * t985;
	t753 = t757 ^ 2;
	t758 = (-t991 / 0.2e1 + t990 / 0.2e1) * t985;
	t755 = 0.1e1 / t758 ^ 2;
	t746 = t753 * t755 + 0.1e1;
	t744 = 0.1e1 / t746;
	t754 = 0.1e1 / t758;
	t994 = t755 * t757;
	t714 = (t721 * t754 - t722 * t994) * t744;
	t1020 = sin(qJ(1));
	t938 = qJD(2) * t1020;
	t869 = cos(qJ(1));
	t960 = qJD(1) * t869;
	t948 = t868 * t960;
	t1047 = t866 * t938 - t948;
	t902 = qJD(3) * t1020 + t938;
	t887 = t866 * t960 + t902 * t868;
	t950 = t866 * t1020;
	t925 = t865 * t950;
	t819 = -qJD(3) * t925 - t1047 * t865 + t887 * t867;
	t949 = t868 * t1020;
	t833 = -t867 * t949 + t925;
	t1060 = t714 * t833 - t819;
	t1044 = qJD(2) + qJD(3);
	t1045 = -t865 * t866 + t867 * t868;
	t824 = t1045 * t1044;
	t972 = t866 * t867;
	t841 = -t868 * t865 - t972;
	t825 = t1044 * t841;
	t1058 = (t714 * t841 + t825) * r_i_i_C(1);
	t904 = t844 * t918;
	t1019 = pkin(1) * t872;
	t813 = t844 * t916;
	t800 = t813 * t939 - 0.2e1 * t844 ^ 2 * t1019 + (t828 * t909 - t980) * pkin(7);
	t968 = t867 * t800;
	t923 = t813 * t1027 - t828;
	t799 = (-t909 * t878 + (t923 + t956) * t844) * pkin(7);
	t977 = t865 * t799;
	t913 = t977 / 0.2e1 + t968 / 0.2e1;
	t780 = (-t913 * t829 - t904 * t955) * t875;
	t969 = t867 * t799;
	t976 = t865 * t800;
	t911 = -t969 / 0.2e1 + t976 / 0.2e1;
	t781 = (t911 * t829 + t844 * t897) * t875;
	t770 = t780 * t861 + t781 * t860;
	t760 = t770 * t915;
	t771 = -t780 * t860 + t781 * t861;
	t731 = (t760 * t943 + t933 * t770 - t771 * t877) * pkin(4);
	t732 = t760 * t944 + t770 * t935 + (-t770 * t877 + t771 * t784) * pkin(4);
	t724 = ((t732 * t1023 + t731 * t1025) * t785 + t770 * t895) * t871;
	t725 = ((t731 * t1024 + t732 * t1025) * t785 + t770 * t896) * t871;
	t715 = (t724 * t754 - t725 * t994) * t744;
	t1057 = t715 + 0.1e1;
	t769 = t929 * t915;
	t751 = (t769 * t943 - t791 * t877 + t929 * t933) * pkin(4);
	t752 = t769 * t944 + t929 * t935 + (t784 * t791 - t877 * t929) * pkin(4);
	t727 = ((t752 * t1023 + t751 * t1025) * t785 + t929 * t895) * t871;
	t728 = ((t751 * t1024 + t752 * t1025) * t785 + t929 * t896) * t871;
	t717 = (t727 * t754 - t728 * t994) * t744;
	t1056 = t717 + 0.1e1;
	t1055 = pkin(1) * t868;
	t834 = t865 * t949 + t867 * t950;
	t1054 = r_i_i_C(1) * t834;
	t835 = t1045 * t869;
	t1053 = t835 * r_i_i_C(2);
	t1052 = t722 * t755;
	t836 = t841 * t869;
	t747 = atan2(t757, t758);
	t742 = sin(t747);
	t743 = cos(t747);
	t959 = qJD(2) * t869;
	t1046 = qJD(1) * t949 + t866 * t959;
	t947 = t868 * t959;
	t816 = qJD(1) * t925 + qJD(3) * t836 - t1046 * t867 - t865 * t947;
	t817 = t834 * qJD(1) - t869 * t824;
	t1049 = -t816 * t742 + t817 * t743;
	t818 = t887 * t865 - t867 * t948 + t902 * t972;
	t1048 = t1060 * t743 + t818 * t742;
	t1043 = t1057 * r_i_i_C(1);
	t1042 = t1057 * r_i_i_C(2);
	t1041 = t1056 * r_i_i_C(1);
	t1040 = t1056 * r_i_i_C(2);
	t1032 = -t759 / 0.2e1;
	t1031 = -t760 / 0.2e1;
	t1030 = -t769 / 0.2e1;
	t1022 = -t867 / 0.2e1;
	t926 = t876 * t951;
	t809 = t839 * t916 - 0.8e1 * t926;
	t952 = t821 / t984 * t813 * t812;
	t778 = t804 + (t952 / 0.4e1 + t809 * t1026) * t837 + (-0.4e1 * t839 * t844 - 0.2e1 * t840 * t909) * t1019 + (t923 * t840 - t982) * pkin(7);
	t779 = 0.4e1 * t928 + (t981 - t844 * t952 / 0.4e1 + t934 * t839 + (-t909 * t812 / 0.2e1 - t839 * t813 / 0.2e1 - t844 * t809 / 0.2e1) * t821) * pkin(7);
	t831 = t829 * t830;
	t761 = (0.4e1 * t919 * t831 * t926 + (t779 * t1022 + t865 * t778 / 0.2e1 + t913 * qJD(3)) * t829 + ((-t969 + t976) * t840 + t919 * t839 + (t918 * qJD(3) - t971 + t978) * t844) * t955) * t875;
	t762 = (-0.4e1 * t876 * t831 * t904 * t1051 + (-t865 * t779 / 0.2e1 + t778 * t1022 + t911 * qJD(3)) * t829 + ((-t968 - t977) * t840 - t918 * t839 + (t919 * qJD(3) - t970 - t979) * t844) * t955) * t875;
	t749 = t761 * t860 + t762 * t861;
	t988 = t768 * t874;
	t953 = t873 * t988;
	t931 = -0.8e1 * t953;
	t726 = t749 * t915 + t770 * t931;
	t748 = t761 * t861 - t762 * t860;
	t937 = t874 * t957;
	t993 = t759 * t776 / t987;
	t945 = t993 / 0.4e1;
	t718 = (t726 * t1029 + t760 * t945) * t789 + (-t749 * t929 - t768 * t771 - t770 * t930) * t937 + (t748 * t784 - t749 * t877 + (t768 * t1031 + t770 * t1032) * t776) * pkin(4);
	t924 = -t929 * t993 / 0.4e1;
	t936 = 0.4e1 * pkin(5) * t988;
	t719 = t770 * t936 + (-t748 * t877 + t760 * t924 + t933 * t749 + (t726 * t1028 + t1031 * t930 + t771 * t1032) * t776) * pkin(4);
	t996 = t754 * t1052;
	t997 = 0.2e1 * (t721 * t994 - t753 * t996) / t746 ^ 2;
	t888 = t994 * t997 + (-t721 * t755 + 0.2e1 * t757 * t996) * t744;
	t899 = t730 * t770 + t732 * t768 + t749 * t764;
	t901 = t729 * t770 + t731 * t768 + t749 * t763;
	t903 = -t744 * t1052 - t754 * t997;
	t927 = t785 * t786 * t953;
	t914 = 0.4e1 * t863 * t927;
	t906 = t770 * t914;
	t920 = t864 * t927;
	t907 = 0.4e1 * t764 * t920;
	t908 = -0.4e1 * t763 * t920;
	t932 = t744 * t954;
	t986 = t785 * t864;
	t940 = t986 / 0.2e1;
	t941 = -t986 / 0.2e1;
	t942 = t785 * t1025;
	t709 = t903 * t724 + t888 * t725 + (((t718 * t940 + t719 * t942 + t763 * t906 + t770 * t907) * t754 - (t718 * t942 + t719 * t941 + t764 * t906 + t770 * t908) * t994) * t744 + ((t899 * t754 + t901 * t994) * t864 + (t901 * t754 - t899 * t994) * t863) * t932) * t871;
	t1014 = t709 * t833;
	t1013 = t709 * t834;
	t1012 = t709 * t835;
	t1011 = t709 * t836;
	t1010 = t709 * t841;
	t1009 = t709 * t1045;
	t750 = t915 * t930 + t929 * t931;
	t720 = (t750 * t1029 + t769 * t945) * t789 + (-t768 * t791 - 0.2e1 * t929 * t930) * t937 + (-t1050 - t768 * t784 + (t768 * t1030 + t1032 * t929) * t776) * pkin(4);
	t723 = t929 * t936 + (t1059 + t769 * t924 + t933 * t930 + (t750 * t1028 + t1030 * t930 + t791 * t1032) * t776) * pkin(4);
	t898 = t730 * t929 + t752 * t768 + t764 * t930;
	t900 = t729 * t929 + t751 * t768 + t763 * t930;
	t905 = t929 * t914;
	t710 = t903 * t727 + t888 * t728 + (((t720 * t940 + t723 * t942 + t763 * t905 + t907 * t929) * t754 - (t720 * t942 + t723 * t941 + t764 * t905 + t908 * t929) * t994) * t744 + ((t898 * t754 + t900 * t994) * t864 + (t900 * t754 - t898 * t994) * t863) * t932) * t871;
	t1008 = t710 * t833;
	t1007 = t710 * t834;
	t1006 = t710 * t835;
	t1005 = t710 * t836;
	t1004 = t710 * t841;
	t1003 = t710 * t1045;
	t1001 = t714 * t834;
	t1000 = t714 * t836;
	t998 = t714 * t1045;
	t995 = t743 * t835;
	t735 = t816 * t743;
	t894 = t817 * pkin(5) + (-t714 * t995 + t1049) * r_i_i_C(1) - t735 * r_i_i_C(2);
	t893 = -t824 * t742 * r_i_i_C(1) + t825 * pkin(5) + (-t824 * r_i_i_C(2) + t1058) * t743;
	t737 = t818 * t743;
	t892 = -t819 * pkin(5) + t1048 * r_i_i_C(1) + t737 * r_i_i_C(2);
	t891 = (-t714 * t835 + t817) * r_i_i_C(1) + (-t816 - t1000) * r_i_i_C(2);
	t890 = t1060 * r_i_i_C(1) + (t818 + t1001) * r_i_i_C(2);
	t889 = t1058 + (-t824 - t998) * r_i_i_C(2);
	t1 = [(t742 * t819 + t737 + (-t742 * t833 + t743 * t834) * t714) * r_i_i_C(1) + (-t742 * t1001 - t1048) * r_i_i_C(2) + t818 * pkin(5) + t938 * t1055 + (-t1020 * r_i_i_C(3) + (pkin(1) * t866 - pkin(16)) * t869) * qJD(1), t1046 * pkin(1) + (r_i_i_C(1) * t1011 + (-t1000 - t1012) * r_i_i_C(2) + t891 * t715) * t743 + ((-t715 * t816 - t1012) * r_i_i_C(1) + (-t715 * t817 - t1011 - t817) * r_i_i_C(2) + (-t836 * t1043 + t1057 * t1053) * t714) * t742 + t894, (r_i_i_C(1) * t1005 + (-t1000 - t1006) * r_i_i_C(2) + t891 * t717) * t743 + ((-t717 * t816 - t1006) * r_i_i_C(1) + (-t717 * t817 - t1005 - t817) * r_i_i_C(2) + (-t836 * t1041 + t1056 * t1053) * t714) * t742 + t894, 0; (t742 * t817 + t735) * r_i_i_C(1) + t1049 * r_i_i_C(2) + t816 * pkin(5) - pkin(1) * t947 + ((-t742 * t835 + t743 * t836) * r_i_i_C(1) + (-t742 * t836 - t995) * r_i_i_C(2)) * t714 + (pkin(1) * t950 - t1020 * pkin(16) + t869 * r_i_i_C(3)) * qJD(1), t1047 * pkin(1) + (-r_i_i_C(1) * t1013 + (t1001 + t1014) * r_i_i_C(2) + t890 * t715) * t743 + ((t715 * t818 + t1014) * r_i_i_C(1) + (t715 * t819 + t1013 + t819) * r_i_i_C(2) + (-t833 * t1042 + t1057 * t1054) * t714) * t742 + t892, (-r_i_i_C(1) * t1007 + (t1001 + t1008) * r_i_i_C(2) + t890 * t717) * t743 + ((t717 * t818 + t1008) * r_i_i_C(1) + (t717 * t819 + t1007 + t819) * r_i_i_C(2) + (-t833 * t1040 + t1056 * t1054) * t714) * t742 + t892, 0; 0, -qJD(2) * t1055 + (r_i_i_C(1) * t1009 + (-t998 + t1010) * r_i_i_C(2) + t889 * t715) * t743 + ((-t715 * t824 + t1010) * r_i_i_C(1) + (-t715 * t825 - t1009 - t825) * r_i_i_C(2) + (-t841 * t1042 - t1043 * t1045) * t714) * t742 + t893, (r_i_i_C(1) * t1003 + (-t998 + t1004) * r_i_i_C(2) + t889 * t717) * t743 + ((-t717 * t824 + t1004) * r_i_i_C(1) + (-t717 * t825 - t1003 - t825) * r_i_i_C(2) + (-t841 * t1040 - t1041 * t1045) * t714) * t742 + t893, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 19:22:40
	% EndTime: 2020-04-14 19:38:00
	% DurationCPUTime: 884.44s
	% Computational Cost: add. (23584440->357), mult. (36646144->642), div. (1423148->14), fcn. (22924395->21), ass. (0->281)
	t1636 = pkin(7) ^ 2;
	t1640 = pkin(1) ^ 2;
	t1634 = cos(pkin(19));
	t1803 = sin(qJ(2));
	t1805 = sin(pkin(19));
	t1806 = cos(qJ(2));
	t1605 = t1803 * t1634 - t1806 * t1805;
	t1786 = pkin(7) * t1605;
	t1814 = -2 * pkin(1);
	t1738 = t1786 * t1814 + t1640;
	t1595 = t1636 + t1738;
	t1592 = 0.1e1 / t1595;
	t1639 = 0.1e1 / pkin(3);
	t1607 = t1806 * t1634 + t1803 * t1805;
	t1591 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1595;
	t1600 = pkin(1) - t1786;
	t1811 = -pkin(8) - pkin(3);
	t1589 = (pkin(7) - t1811) * (pkin(7) + t1811) + t1738;
	t1810 = -pkin(8) + pkin(3);
	t1590 = (pkin(7) - t1810) * (pkin(7) + t1810) + t1738;
	t1767 = t1590 * t1589;
	t1642 = sqrt(-t1767);
	t1785 = pkin(7) * t1607;
	t1574 = t1591 * t1785 + t1600 * t1642;
	t1632 = cos(qJ(3));
	t1743 = t1632 * t1574;
	t1757 = t1607 * t1642;
	t1573 = -pkin(7) * t1757 + t1600 * t1591;
	t1630 = sin(qJ(3));
	t1751 = t1630 * t1573;
	t1682 = t1743 + t1751;
	t1671 = t1607 * t1682;
	t1812 = pkin(1) * pkin(7);
	t1681 = 0.2e1 * (t1589 + t1590) * t1812;
	t1576 = t1607 * t1681;
	t1584 = 0.1e1 / t1642;
	t1796 = t1584 / 0.2e1;
	t1712 = t1600 * t1796;
	t1789 = pkin(1) * t1636;
	t1563 = t1576 * t1712 - 0.2e1 * t1607 ^ 2 * t1789 + (-t1605 * t1591 - t1757) * pkin(7);
	t1745 = t1632 * t1563;
	t1797 = -t1584 / 0.2e1;
	t1693 = t1576 * t1797 - t1591;
	t1737 = t1600 * t1814;
	t1562 = (t1605 * t1642 + (t1693 + t1737) * t1607) * pkin(7);
	t1753 = t1630 * t1562;
	t1675 = t1753 / 0.2e1 + t1745 / 0.2e1;
	t1593 = 0.1e1 / t1595 ^ 2;
	t1736 = t1593 * t1812;
	t1543 = (-t1675 * t1592 - t1671 * t1736) * t1639;
	t1744 = t1632 * t1573;
	t1750 = t1630 * t1574;
	t1683 = -t1744 + t1750;
	t1658 = t1683 * t1736;
	t1746 = t1632 * t1562;
	t1752 = t1630 * t1563;
	t1673 = -t1746 / 0.2e1 + t1752 / 0.2e1;
	t1544 = (t1673 * t1592 + t1607 * t1658) * t1639;
	t1626 = pkin(23) + pkin(22);
	t1624 = sin(t1626);
	t1625 = cos(t1626);
	t1533 = t1625 * t1543 + t1624 * t1544;
	t1637 = pkin(5) ^ 2;
	t1674 = t1751 / 0.2e1 + t1743 / 0.2e1;
	t1766 = t1592 * t1639;
	t1565 = t1674 * t1766;
	t1672 = t1744 / 0.2e1 - t1750 / 0.2e1;
	t1566 = t1672 * t1766;
	t1554 = t1625 * t1565 + t1624 * t1566;
	t1788 = pkin(4) * t1554;
	t1813 = -2 * pkin(5);
	t1739 = -t1788 * t1813 + t1637;
	t1809 = -pkin(9) - pkin(11);
	t1545 = (pkin(4) - t1809) * (pkin(4) + t1809) + t1739;
	t1808 = -pkin(9) + pkin(11);
	t1546 = (pkin(4) - t1808) * (pkin(4) + t1808) + t1739;
	t1784 = 2 * pkin(5);
	t1680 = pkin(4) * (t1545 + t1546) * t1784;
	t1523 = t1533 * t1680;
	t1534 = -t1624 * t1543 + t1625 * t1544;
	t1771 = t1546 * t1545;
	t1641 = sqrt(-t1771);
	t1638 = pkin(4) ^ 2;
	t1551 = t1638 + t1739;
	t1547 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1551;
	t1552 = pkin(5) + t1788;
	t1708 = t1552 * t1813 - t1547;
	t1539 = 0.1e1 / t1641;
	t1704 = t1624 * t1565 - t1625 * t1566;
	t1798 = -t1704 / 0.2e1;
	t1716 = t1539 * t1798;
	t1488 = (t1523 * t1716 + t1708 * t1533 - t1534 * t1641) * pkin(4);
	t1710 = t1704 * t1638 * t1813;
	t1799 = t1539 / 0.2e1;
	t1717 = t1552 * t1799;
	t1489 = t1523 * t1717 + t1533 * t1710 + (-t1533 * t1641 + t1534 * t1547) * pkin(4);
	t1548 = 0.1e1 / t1551;
	t1635 = 0.1e1 / pkin(11);
	t1549 = 0.1e1 / t1551 ^ 2;
	t1735 = pkin(4) * pkin(5) * t1549;
	t1787 = pkin(4) * t1704;
	t1527 = t1547 * t1787 + t1552 * t1641;
	t1628 = cos(pkin(21));
	t1773 = t1527 * t1628;
	t1526 = t1552 * t1547 - t1641 * t1787;
	t1627 = sin(pkin(21));
	t1776 = t1526 * t1627;
	t1656 = (t1773 + t1776) * t1735;
	t1793 = t1628 / 0.2e1;
	t1795 = t1627 / 0.2e1;
	t1477 = ((t1488 * t1795 + t1489 * t1793) * t1548 + t1533 * t1656) * t1635;
	t1774 = t1527 * t1627;
	t1775 = t1526 * t1628;
	t1657 = (t1774 - t1775) * t1735;
	t1794 = -t1628 / 0.2e1;
	t1478 = ((t1488 * t1794 + t1489 * t1795) * t1548 + t1533 * t1657) * t1635;
	t1769 = t1548 * t1635;
	t1520 = (t1776 / 0.2e1 + t1773 / 0.2e1) * t1769;
	t1516 = t1520 ^ 2;
	t1521 = (-t1775 / 0.2e1 + t1774 / 0.2e1) * t1769;
	t1518 = 0.1e1 / t1521 ^ 2;
	t1509 = t1516 * t1518 + 0.1e1;
	t1507 = 0.1e1 / t1509;
	t1517 = 0.1e1 / t1521;
	t1778 = t1518 * t1520;
	t1468 = (t1477 * t1517 - t1478 * t1778) * t1507;
	t1839 = t1468 + 0.1e1;
	t1532 = t1704 * t1680;
	t1514 = (t1532 * t1716 - t1554 * t1641 + t1704 * t1708) * pkin(4);
	t1515 = t1532 * t1717 + t1704 * t1710 + (t1554 * t1547 - t1641 * t1704) * pkin(4);
	t1484 = ((t1514 * t1795 + t1515 * t1793) * t1548 + t1704 * t1656) * t1635;
	t1485 = ((t1514 * t1794 + t1515 * t1795) * t1548 + t1704 * t1657) * t1635;
	t1470 = (t1484 * t1517 - t1485 * t1778) * t1507;
	t1838 = t1470 + 0.1e1;
	t1603 = t1607 * qJD(2);
	t1575 = t1603 * t1681;
	t1567 = t1575 * t1785 * t1797;
	t1709 = -t1591 + t1737;
	t1602 = t1605 * qJD(2);
	t1761 = t1602 * t1642;
	t1560 = t1567 + (t1709 * t1603 + t1761) * pkin(7);
	t1748 = t1632 * t1560;
	t1825 = t1603 * t1636;
	t1719 = t1607 * t1825;
	t1703 = pkin(1) * t1719;
	t1760 = t1603 * t1642;
	t1561 = t1575 * t1712 - 0.2e1 * t1703 + (-t1602 * t1591 - t1760) * pkin(7);
	t1754 = t1630 * t1561;
	t1536 = (t1603 * t1658 + (-t1748 / 0.2e1 + t1754 / 0.2e1 + t1674 * qJD(3)) * t1592) * t1639;
	t1747 = t1632 * t1561;
	t1755 = t1630 * t1560;
	t1537 = (t1682 * t1603 * t1736 + (t1755 / 0.2e1 + t1747 / 0.2e1 + t1672 * qJD(3)) * t1592) * t1639;
	t1531 = t1624 * t1536 - t1625 * t1537;
	t1522 = t1531 * t1680;
	t1705 = t1625 * t1536 + t1624 * t1537;
	t1824 = t1705 * t1641;
	t1486 = (t1522 * t1716 + t1708 * t1531 - t1824) * pkin(4);
	t1830 = t1531 * t1641;
	t1487 = t1522 * t1717 + t1531 * t1710 + (t1547 * t1705 - t1830) * pkin(4);
	t1474 = ((t1486 * t1795 + t1487 * t1793) * t1548 + t1531 * t1656) * t1635;
	t1475 = ((t1486 * t1794 + t1487 * t1795) * t1548 + t1531 * t1657) * t1635;
	t1467 = (t1474 * t1517 - t1475 * t1778) * t1507;
	t1510 = atan2(t1520, t1521);
	t1505 = sin(t1510);
	t1506 = cos(t1510);
	t1604 = -t1806 * t1630 - t1803 * t1632;
	t1728 = t1803 * t1630;
	t1606 = t1806 * t1632 - t1728;
	t1482 = t1606 * t1505 - t1604 * t1506;
	t1732 = t1806 * qJD(2);
	t1823 = qJD(2) + qJD(3);
	t1587 = (t1806 * qJD(3) + t1732) * t1632 - t1823 * t1728;
	t1588 = t1823 * t1604;
	t1837 = -t1482 * t1467 - t1587 * t1505 + t1588 * t1506;
	t1633 = cos(qJ(1));
	t1598 = t1606 * t1633;
	t1599 = t1604 * t1633;
	t1481 = t1599 * t1505 + t1598 * t1506;
	t1804 = sin(qJ(1));
	t1701 = t1804 * t1803;
	t1689 = t1630 * t1701;
	t1702 = t1806 * t1804;
	t1596 = -t1632 * t1702 + t1689;
	t1733 = t1633 * t1803;
	t1697 = qJD(2) * t1733;
	t1699 = t1633 * t1732;
	t1579 = t1596 * qJD(1) + qJD(3) * t1599 - t1630 * t1699 - t1632 * t1697;
	t1597 = t1630 * t1702 + t1632 * t1701;
	t1580 = t1597 * qJD(1) - t1823 * t1598;
	t1815 = t1481 * t1467 + t1579 * t1505 - t1580 * t1506;
	t1479 = t1597 * t1505 + t1596 * t1506;
	t1817 = qJD(1) * t1733 + qJD(2) * t1702;
	t1651 = qJD(3) * t1702 + t1817;
	t1783 = qJD(1) * t1633;
	t1700 = t1806 * t1783;
	t1816 = qJD(2) * t1701 - t1700;
	t1581 = t1651 * t1630 + (qJD(3) * t1701 + t1816) * t1632;
	t1582 = t1630 * t1700 + t1651 * t1632 - t1823 * t1689;
	t1836 = t1479 * t1467 + t1581 * t1505 - t1582 * t1506;
	t1629 = sin(qJ(4));
	t1631 = cos(qJ(4));
	t1677 = qJD(4) * (-t1629 * r_i_i_C(1) - t1631 * r_i_i_C(2));
	t1835 = t1839 * t1677;
	t1834 = t1838 * t1677;
	t1807 = pkin(12) + r_i_i_C(3);
	t1828 = t1467 * t1838;
	t1827 = t1467 * t1839;
	t1826 = t1475 * t1518;
	t1820 = t1596 * t1505 - t1597 * t1506;
	t1819 = -t1598 * t1505 + t1599 * t1506;
	t1818 = t1604 * t1505 + t1606 * t1506;
	t1734 = qJD(1) * t1804;
	t1676 = qJD(4) * t1479 + t1734;
	t1494 = t1581 * t1506;
	t1456 = t1467 * t1820 - t1582 * t1505 - t1494;
	t1802 = -t1522 / 0.2e1;
	t1801 = -t1523 / 0.2e1;
	t1800 = -t1532 / 0.2e1;
	t1792 = -t1632 / 0.2e1;
	t1781 = qJD(4) * t1482;
	t1779 = t1517 * t1826;
	t1780 = 0.2e1 * (t1474 * t1778 - t1516 * t1779) / t1509 ^ 2;
	t1777 = t1522 * t1539 / t1771;
	t1772 = t1531 * t1638;
	t1770 = t1548 * t1628;
	t1492 = t1579 * t1506;
	t1498 = t1587 * t1506;
	t1756 = t1629 * t1633;
	t1749 = t1631 * t1633;
	t1729 = t1804 * t1631;
	t1722 = t1638 * t1784;
	t1721 = t1637 * t1772;
	t1720 = t1584 / t1767 * t1576 * t1575;
	t1718 = t1777 / 0.4e1;
	t1715 = t1548 * t1795;
	t1714 = -t1770 / 0.2e1;
	t1713 = t1770 / 0.2e1;
	t1711 = 0.4e1 * pkin(5) * t1772;
	t1707 = t1507 * t1735;
	t1706 = -0.8e1 * t1721;
	t1696 = t1548 * t1549 * t1721;
	t1695 = t1640 * t1719;
	t1694 = -t1704 * t1777 / 0.4e1;
	t1688 = t1631 * r_i_i_C(1) - t1629 * r_i_i_C(2) + pkin(10);
	t1687 = t1628 * t1696;
	t1679 = 0.4e1 * t1627 * t1696;
	t1670 = -0.4e1 * t1526 * t1687;
	t1669 = 0.4e1 * t1527 * t1687;
	t1668 = t1533 * t1679;
	t1667 = t1704 * t1679;
	t1663 = -t1507 * t1826 - t1517 * t1780;
	t1572 = -t1602 * t1681 - 0.8e1 * t1695;
	t1541 = t1567 + (t1720 / 0.4e1 + t1572 * t1796) * t1600 + (0.4e1 * t1602 * t1607 + 0.2e1 * t1603 * t1605) * t1789 + (t1693 * t1603 + t1761) * pkin(7);
	t1542 = 0.4e1 * t1703 + (t1760 - t1607 * t1720 / 0.4e1 - t1709 * t1602 + (t1605 * t1575 / 0.2e1 + t1602 * t1576 / 0.2e1 - t1607 * t1572 / 0.2e1) * t1584) * pkin(7);
	t1594 = t1592 * t1593;
	t1524 = (0.4e1 * t1683 * t1594 * t1695 + (t1542 * t1792 + t1630 * t1541 / 0.2e1 + t1675 * qJD(3)) * t1592 + ((-t1746 + t1752) * t1603 - t1683 * t1602 + (t1682 * qJD(3) - t1748 + t1754) * t1607) * t1736) * t1639;
	t1525 = (-0.4e1 * t1640 * t1594 * t1671 * t1825 + (-t1630 * t1542 / 0.2e1 + t1541 * t1792 + t1673 * qJD(3)) * t1592 + ((-t1745 - t1753) * t1603 + t1682 * t1602 + (t1683 * qJD(3) - t1747 - t1755) * t1607) * t1736) * t1639;
	t1512 = t1624 * t1524 + t1625 * t1525;
	t1662 = t1486 * t1533 + t1488 * t1531 + t1512 * t1526;
	t1661 = t1486 * t1704 + t1514 * t1531 + t1526 * t1705;
	t1660 = t1487 * t1533 + t1489 * t1531 + t1512 * t1527;
	t1659 = t1487 * t1704 + t1515 * t1531 + t1527 * t1705;
	t1652 = t1778 * t1780 + (-t1474 * t1518 + 0.2e1 * t1520 * t1779) * t1507;
	t1619 = qJD(4) * t1749;
	t1586 = t1588 * pkin(5);
	t1578 = t1582 * pkin(5);
	t1577 = t1580 * pkin(5);
	t1513 = t1680 * t1705 + t1704 * t1706;
	t1511 = t1625 * t1524 - t1624 * t1525;
	t1483 = t1512 * t1680 + t1533 * t1706;
	t1476 = t1704 * t1711 + (t1830 + t1532 * t1694 + t1708 * t1705 + (t1513 * t1798 + t1554 * t1802 + t1705 * t1800) * t1539) * pkin(4);
	t1473 = (t1513 * t1799 + t1532 * t1718) * t1552 + (-t1531 * t1554 - 0.2e1 * t1704 * t1705) * t1722 + (-t1824 - t1531 * t1547 + (t1531 * t1800 + t1704 * t1802) * t1539) * pkin(4);
	t1472 = t1533 * t1711 + (-t1511 * t1641 + t1523 * t1694 + t1708 * t1512 + (t1483 * t1798 + t1534 * t1802 + t1705 * t1801) * t1539) * pkin(4);
	t1471 = (t1483 * t1799 + t1523 * t1718) * t1552 + (-t1512 * t1704 - t1531 * t1534 - t1533 * t1705) * t1722 + (t1511 * t1547 - t1512 * t1641 + (t1531 * t1801 + t1533 * t1802) * t1539) * pkin(4);
	t1457 = t1467 * t1818 + t1588 * t1505 + t1498;
	t1453 = t1467 * t1819 + t1580 * t1505 + t1492;
	t1451 = qJD(1) * t1756 + t1453 * t1631 + (-t1481 * t1629 + t1729) * qJD(4);
	t1450 = qJD(1) * t1749 - t1453 * t1629 + (-t1481 * t1631 - t1804 * t1629) * qJD(4);
	t1449 = t1663 * t1484 + t1652 * t1485 + (((t1473 * t1713 + t1476 * t1715 + t1526 * t1667 + t1669 * t1704) * t1517 - (t1473 * t1715 + t1476 * t1714 + t1527 * t1667 + t1670 * t1704) * t1778) * t1507 + ((t1659 * t1517 + t1661 * t1778) * t1628 + (t1661 * t1517 - t1659 * t1778) * t1627) * t1707) * t1635;
	t1448 = t1663 * t1477 + t1652 * t1478 + (((t1471 * t1713 + t1472 * t1715 + t1526 * t1668 + t1533 * t1669) * t1517 - (t1471 * t1715 + t1472 * t1714 + t1527 * t1668 + t1533 * t1670) * t1778) * t1507 + ((t1660 * t1517 + t1662 * t1778) * t1628 + (t1662 * t1517 - t1660 * t1778) * t1627) * t1707) * t1635;
	t1 = [(-t1456 * t1631 - t1676 * t1629 + t1619) * r_i_i_C(1) + (-qJD(1) * t1729 + t1456 * t1629 + (-t1479 * t1631 - t1756) * qJD(4)) * r_i_i_C(2) - t1456 * pkin(10) + t1581 * pkin(5) - pkin(16) * t1783 + t1807 * t1836 + t1817 * pkin(1), t1577 + t1807 * (t1492 + (t1448 * t1598 + t1468 * t1579 + t1599 * t1827) * t1506 + (t1448 * t1599 + t1468 * t1580 - t1598 * t1827 + t1580) * t1505) + t1819 * t1835 + (qJD(1) * t1702 + t1697) * pkin(1) + t1688 * (t1448 * t1819 - t1468 * t1815 - t1815), t1577 + t1807 * (t1492 + (t1449 * t1598 + t1470 * t1579 + t1599 * t1828) * t1506 + (t1449 * t1599 + t1470 * t1580 - t1598 * t1828 + t1580) * t1505) + t1819 * t1834 + t1688 * (t1449 * t1819 - t1470 * t1815 - t1815), r_i_i_C(1) * t1450 - r_i_i_C(2) * t1451; -pkin(16) * t1734 + t1579 * pkin(5) + t1453 * pkin(10) + t1451 * r_i_i_C(1) + t1450 * r_i_i_C(2) + t1807 * t1815 + (qJD(1) * t1701 - t1699) * pkin(1), -t1578 + t1807 * (-t1494 + (-t1448 * t1596 - t1468 * t1581 - t1597 * t1827) * t1506 + (-t1448 * t1597 - t1468 * t1582 + t1596 * t1827 - t1582) * t1505) + t1820 * t1835 + t1816 * pkin(1) + t1688 * (t1448 * t1820 + t1468 * t1836 + t1836), -t1578 + t1807 * (-t1494 + (-t1449 * t1596 - t1470 * t1581 - t1597 * t1828) * t1506 + (-t1449 * t1597 - t1470 * t1582 + t1596 * t1828 - t1582) * t1505) + t1820 * t1834 + t1688 * (t1449 * t1820 + t1470 * t1836 + t1836), t1619 * r_i_i_C(2) + (r_i_i_C(1) * t1676 - t1456 * r_i_i_C(2)) * t1631 + ((qJD(4) * t1633 - t1456) * r_i_i_C(1) - t1676 * r_i_i_C(2)) * t1629; 0, -pkin(1) * t1732 + t1586 + t1807 * (t1498 + (-t1448 * t1604 + t1468 * t1587 + t1606 * t1827) * t1506 + (t1448 * t1606 + t1468 * t1588 + t1604 * t1827 + t1588) * t1505) + t1818 * t1835 + t1688 * (t1448 * t1818 + t1468 * t1837 + t1837), t1586 + t1807 * (t1498 + (-t1449 * t1604 + t1470 * t1587 + t1606 * t1828) * t1506 + (t1449 * t1606 + t1470 * t1588 + t1604 * t1828 + t1588) * t1505) + t1818 * t1834 + t1688 * (t1449 * t1818 + t1470 * t1837 + t1837), (-t1457 * t1631 + t1629 * t1781) * r_i_i_C(2) + (-t1457 * t1629 - t1631 * t1781) * r_i_i_C(1);];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:06
	% EndTime: 2020-04-14 18:43:17
	% DurationCPUTime: 3.02s
	% Computational Cost: add. (51099->97), mult. (81788->209), div. (2926->9), fcn. (51232->13), ass. (0->106)
	t397 = 2 * pkin(7);
	t325 = sin(qJ(2));
	t329 = cos(pkin(19));
	t385 = sin(pkin(19));
	t386 = cos(qJ(2));
	t323 = t325 * t385 + t386 * t329;
	t383 = pkin(1) * t323;
	t321 = t323 * qJD(2);
	t334 = pkin(1) ^ 2;
	t345 = -t325 * t329 + t386 * t385;
	t384 = pkin(1) * t345;
	t364 = t384 * t397 + t334;
	t391 = (-pkin(8) - pkin(3));
	t311 = ((pkin(7) - t391) * (pkin(7) + t391)) + t364;
	t390 = (-pkin(8) + pkin(3));
	t312 = ((pkin(7) - t390) * (pkin(7) + t390)) + t364;
	t392 = pkin(1) * pkin(7);
	t354 = (t311 + t312) * t392;
	t306 = t321 * t354;
	t373 = t312 * t311;
	t335 = sqrt(-t373);
	t309 = 0.1e1 / t335;
	t395 = t306 * t309;
	t302 = t383 * t395;
	t333 = pkin(7) ^ 2;
	t317 = t333 + t364;
	t313 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t317;
	t318 = -pkin(7) - t384;
	t361 = t318 * t397;
	t357 = -t313 + t361;
	t320 = t345 * qJD(2);
	t371 = t320 * t335;
	t292 = -t302 + (t357 * t321 - t371) * pkin(1);
	t359 = t334 * t323 * t321;
	t355 = pkin(7) * t359;
	t370 = t321 * t335;
	t374 = t309 * t318;
	t293 = -t306 * t374 - 0.2e1 * t355 + (t320 * t313 - t370) * pkin(1);
	t314 = 0.1e1 / t317;
	t332 = 0.1e1 / pkin(8);
	t315 = 0.1e1 / t317 ^ 2;
	t360 = t315 * t392;
	t369 = t323 * t335;
	t304 = -pkin(1) * t369 - t318 * t313;
	t330 = cos(pkin(18));
	t366 = t330 * t304;
	t305 = t313 * t383 - t318 * t335;
	t327 = sin(pkin(18));
	t368 = t327 * t305;
	t342 = (t366 - t368) * t360;
	t387 = t330 / 0.2e1;
	t389 = -t327 / 0.2e1;
	t280 = ((t292 * t387 + t293 * t389) * t314 + t321 * t342) * t332;
	t372 = t314 * t332;
	t300 = (t366 / 0.2e1 - t368 / 0.2e1) * t372;
	t297 = 0.1e1 / t300 ^ 2;
	t396 = t280 * t297;
	t307 = t323 * t354;
	t394 = t309 * t307;
	t353 = t333 * t359;
	t393 = -t309 * (t320 * t354 - 0.4e1 * t353) - 0.1e1 / t373 * t306 * t394;
	t296 = 0.1e1 / t300;
	t388 = t327 / 0.2e1;
	t382 = t334 * pkin(7);
	t365 = t330 * t305;
	t375 = t304 * t327;
	t341 = (t365 + t375) * t360;
	t281 = ((t292 * t388 + t293 * t387) * t314 + t321 * t341) * t332;
	t301 = (t365 / 0.2e1 + t375 / 0.2e1) * t372;
	t299 = t301 ^ 2;
	t290 = t299 * t297 + 0.1e1;
	t288 = 0.1e1 / t290;
	t376 = t297 * t301;
	t277 = (-t280 * t376 + t281 * t296) * t288;
	t356 = -t313 - t394;
	t294 = (-t345 * t335 + (t356 + t361) * t323) * pkin(1);
	t295 = -t307 * t374 - 0.2e1 * t323 ^ 2 * t382 + (t313 * t345 - t369) * pkin(1);
	t284 = ((t294 * t387 + t295 * t389) * t314 + t323 * t342) * t332;
	t285 = ((t294 * t388 + t295 * t387) * t314 + t323 * t341) * t332;
	t278 = (-t284 * t376 + t285 * t296) * t288;
	t381 = t277 * t278;
	t326 = sin(qJ(1));
	t380 = t277 * t326;
	t328 = cos(qJ(1));
	t379 = t277 * t328;
	t377 = t296 * t396;
	t378 = (t281 * t376 - t299 * t377) / t290 ^ 2;
	t367 = t327 * t314;
	t363 = qJD(1) * t326;
	t362 = qJD(1) * t328;
	t358 = t314 * t387;
	t291 = atan2(t301, t300);
	t286 = sin(t291);
	t287 = cos(t291);
	t352 = r_i_i_C(1) * t286 + r_i_i_C(2) * t287;
	t351 = t314 * t315 * t353;
	t349 = -r_i_i_C(1) * t287 + r_i_i_C(2) * t286 + pkin(15);
	t348 = t327 * t351;
	t347 = t352 * t328;
	t346 = 0.4e1 * t330 * t351;
	t344 = t292 * t323 + t294 * t321 + t304 * t320;
	t343 = t293 * t323 + t295 * t321 + t305 * t320;
	t283 = 0.4e1 * t355 + (-t345 * t395 + t370 + t393 * t323 + (t357 - t394) * t320) * pkin(1);
	t282 = -t302 + t393 * t318 + (-0.4e1 * t320 * t323 - 0.2e1 * t321 * t345) * t382 + (t356 * t321 - t371) * pkin(1);
	t276 = (-t288 * t396 - 0.2e1 * t296 * t378) * t285 + (0.2e1 * t376 * t378 + (-t281 * t297 + 0.2e1 * t301 * t377) * t288) * t284 + ((t282 * t358 + t305 * t346 + t283 * t367 / 0.2e1 + 0.4e1 * t304 * t348) * t296 - (t283 * t358 + t304 * t346 - t282 * t367 / 0.2e1 - 0.4e1 * t305 * t348) * t376 + ((t343 * t296 - t344 * t376) * t330 + (t344 * t296 + t343 * t376) * t327) * t360) * t288 * t332;
	t1 = [t352 * t380 + (-r_i_i_C(3) * t326 + t349 * t328) * qJD(1), -t276 * t347 + ((t286 * t379 + t287 * t363) * r_i_i_C(2) + (t286 * t363 - t287 * t379) * r_i_i_C(1)) * t278, 0, 0; -t277 * t347 + (r_i_i_C(3) * t328 + t349 * t326) * qJD(1), -t352 * t326 * t276 + ((t286 * t380 - t287 * t362) * r_i_i_C(2) + (-t286 * t362 - t287 * t380) * r_i_i_C(1)) * t278, 0, 0; 0, (-t276 * t286 - t287 * t381) * r_i_i_C(2) + (t276 * t287 - t286 * t381) * r_i_i_C(1), 0, 0;];
	JaD_transl = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_transl_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:08
	% EndTime: 2020-04-14 18:43:33
	% DurationCPUTime: 7.08s
	% Computational Cost: add. (126244->128), mult. (201296->239), div. (7468->9), fcn. (126529->13), ass. (0->130)
	t368 = pkin(7) ^ 2;
	t370 = pkin(1) ^ 2;
	t362 = sin(qJ(2));
	t364 = cos(qJ(2));
	t366 = cos(pkin(19));
	t447 = sin(pkin(19));
	t391 = -t362 * t366 + t364 * t447;
	t446 = pkin(7) * t391;
	t454 = -2 * pkin(1);
	t419 = -t446 * t454 + t370;
	t352 = t368 + t419;
	t348 = pkin(3) ^ 2 - pkin(8) ^ 2 + t352;
	t353 = pkin(1) + t446;
	t358 = t362 * t447 + t364 * t366;
	t452 = -pkin(8) - pkin(3);
	t346 = (pkin(7) - t452) * (pkin(7) + t452) + t419;
	t451 = -pkin(8) + pkin(3);
	t347 = (pkin(7) - t451) * (pkin(7) + t451) + t419;
	t428 = t347 * t346;
	t371 = sqrt(-t428);
	t424 = t358 * t371;
	t339 = -pkin(7) * t424 + t348 * t353;
	t361 = cos(pkin(23));
	t422 = t361 * t339;
	t445 = pkin(7) * t358;
	t340 = t348 * t445 + t353 * t371;
	t360 = sin(pkin(23));
	t423 = t360 * t340;
	t349 = 0.1e1 / t352;
	t369 = 0.1e1 / pkin(3);
	t427 = t349 * t369;
	t335 = (-t422 / 0.2e1 + t423 / 0.2e1) * t427;
	t421 = t361 * t340;
	t430 = t339 * t360;
	t336 = (t421 / 0.2e1 + t430 / 0.2e1) * t427;
	t326 = atan2(t336, t335);
	t322 = cos(t326);
	t321 = sin(t326);
	t434 = t321 * t364;
	t471 = t322 * t362 + t434;
	t356 = t358 * qJD(2);
	t453 = pkin(1) * pkin(7);
	t401 = (t346 + t347) * t453;
	t341 = t356 * t401;
	t344 = 0.1e1 / t371;
	t459 = t341 * t344;
	t337 = t445 * t459;
	t415 = t353 * t454;
	t408 = -t348 + t415;
	t355 = t391 * qJD(2);
	t426 = t355 * t371;
	t327 = -t337 + (t408 * t356 - t426) * pkin(7);
	t410 = t368 * t358 * t356;
	t402 = pkin(1) * t410;
	t425 = t356 * t371;
	t429 = t344 * t353;
	t328 = t341 * t429 - 0.2e1 * t402 + (t355 * t348 - t425) * pkin(7);
	t350 = 0.1e1 / t352 ^ 2;
	t414 = t350 * t453;
	t382 = (t421 + t430) * t414;
	t448 = t361 / 0.2e1;
	t450 = t360 / 0.2e1;
	t310 = ((t327 * t450 + t328 * t448) * t349 + t356 * t382) * t369;
	t342 = t358 * t401;
	t458 = t344 * t342;
	t405 = -t348 - t458;
	t440 = t368 * pkin(1);
	t399 = t370 * t410;
	t455 = 0.1e1 / t428 * t341 * t458 + t344 * (t355 * t401 - 0.4e1 * t399);
	t311 = -t337 + t455 * t353 + (-0.4e1 * t355 * t358 - 0.2e1 * t356 * t391) * t440 + (t405 * t356 - t426) * pkin(7);
	t312 = 0.4e1 * t402 + (-t391 * t459 + t425 - t455 * t358 + (t408 - t458) * t355) * pkin(7);
	t329 = (-t391 * t371 + (t405 + t415) * t358) * pkin(7);
	t330 = t342 * t429 - 0.2e1 * t358 ^ 2 * t440 + (t348 * t391 - t424) * pkin(7);
	t383 = (-t422 + t423) * t414;
	t449 = -t361 / 0.2e1;
	t313 = ((t329 * t449 + t330 * t450) * t349 + t358 * t383) * t369;
	t314 = ((t329 * t450 + t330 * t448) * t349 + t358 * t382) * t369;
	t332 = 0.1e1 / t335 ^ 2;
	t334 = t336 ^ 2;
	t325 = t332 * t334 + 0.1e1;
	t323 = 0.1e1 / t325;
	t331 = 0.1e1 / t335;
	t384 = t328 * t358 + t330 * t356 + t340 * t355;
	t385 = t327 * t358 + t329 * t356 + t339 * t355;
	t396 = t349 * t350 * t399;
	t388 = 0.4e1 * t360 * t396;
	t392 = t361 * t396;
	t409 = t349 * t450;
	t420 = t361 * t349;
	t431 = t332 * t336;
	t309 = ((t327 * t449 + t328 * t450) * t349 + t356 * t383) * t369;
	t460 = t309 * t332;
	t436 = t331 * t460;
	t437 = (t310 * t431 - t334 * t436) / t325 ^ 2;
	t302 = (-t323 * t460 - 0.2e1 * t331 * t437) * t314 + (0.2e1 * t431 * t437 + (-t310 * t332 + 0.2e1 * t336 * t436) * t323) * t313 + ((t311 * t420 / 0.2e1 + 0.4e1 * t340 * t392 + t312 * t409 + t339 * t388) * t331 - (-t312 * t420 / 0.2e1 - 0.4e1 * t339 * t392 + t311 * t409 + t340 * t388) * t431 + ((t384 * t331 + t385 * t431) * t361 + (t385 * t331 - t384 * t431) * t360) * t414) * t323 * t369;
	t306 = (-t309 * t431 + t310 * t331) * t323;
	t307 = (-t313 * t431 + t314 * t331) * t323;
	t467 = t322 * r_i_i_C(1) - t321 * r_i_i_C(2);
	t379 = t467 * (t307 + 0.1e1);
	t442 = t322 * r_i_i_C(2);
	t470 = (pkin(1) + t379) * qJD(2) + t379 * t306 + (t321 * r_i_i_C(1) + t442) * t302;
	t432 = t322 * t364;
	t435 = t321 * t362;
	t393 = -t432 + t435;
	t389 = t393 * r_i_i_C(1);
	t390 = t471 * r_i_i_C(2);
	t468 = (-t390 - t389) * t307;
	t416 = qJD(2) + t306;
	t365 = cos(qJ(1));
	t462 = t471 * t365;
	t403 = t416 * t307;
	t386 = t416 + t403;
	t444 = t302 * r_i_i_C(1);
	t456 = t386 * r_i_i_C(2) - t444;
	t443 = t302 * r_i_i_C(2);
	t441 = t364 * pkin(1);
	t439 = qJD(1) * r_i_i_C(3);
	t438 = qJD(2) * pkin(1);
	t363 = sin(qJ(1));
	t418 = qJD(1) * t363;
	t417 = qJD(1) * t365;
	t411 = t363 * t432;
	t404 = t416 * t362;
	t398 = t462 * qJD(1) + t416 * t411;
	t395 = qJD(1) * t411 + t416 * t462;
	t387 = r_i_i_C(1) * t403 + t443;
	t381 = t389 - t441;
	t378 = t456 * t322;
	t377 = (t386 * r_i_i_C(1) + t443) * t321;
	t1 = [t398 * r_i_i_C(1) + (t362 * pkin(1) - t393 * r_i_i_C(2) - pkin(16)) * t417 + (t364 * t438 - t439 - t404 * t442 + (-t416 * r_i_i_C(2) * t364 - r_i_i_C(1) * t404) * t321) * t363, t395 * r_i_i_C(1) + (-r_i_i_C(1) * t435 - t390 + t441 + t468) * t418 + ((t387 * t321 + t378) * t364 + (-t456 * t321 + t387 * t322 + t438) * t362) * t365, 0, 0; t395 * r_i_i_C(2) + (r_i_i_C(1) * t434 - pkin(16) + (pkin(1) + t467) * t362) * t418 + (t381 * qJD(2) + t306 * t389 + t439) * t365, t398 * r_i_i_C(2) + (t381 - t468) * t417 + (((r_i_i_C(2) * t403 - t444) * t322 + t377) * t364 + t470 * t362) * t363, 0, 0; 0, (t378 + t377) * t362 - t470 * t364, 0, 0;];
	JaD_transl = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_transl_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:05
	% EndTime: 2020-04-14 18:43:20
	% DurationCPUTime: 3.92s
	% Computational Cost: add. (62452->89), mult. (96836->207), div. (2244->9), fcn. (60592->13), ass. (0->104)
	t299 = (pkin(1) ^ 2);
	t368 = -4 * t299;
	t297 = pkin(6) ^ 2;
	t290 = cos(pkin(20));
	t293 = cos(qJ(3));
	t347 = sin(pkin(20));
	t354 = sin(qJ(3));
	t287 = t354 * t290 + t293 * t347;
	t350 = pkin(6) * t287;
	t359 = 2 * pkin(1);
	t336 = t350 * t359 + t297;
	t282 = t299 + t336;
	t280 = 0.1e1 / t282 ^ 2;
	t352 = pkin(1) * t280;
	t288 = -t293 * t290 + t354 * t347;
	t286 = t288 * qJD(3);
	t358 = pkin(1) * pkin(6);
	t333 = t286 * t358;
	t357 = (-pkin(2) - pkin(13));
	t276 = ((pkin(1) - t357) * (pkin(1) + t357)) + t336;
	t356 = (pkin(13) - pkin(2));
	t277 = ((pkin(1) - t356) * (pkin(1) + t356)) + t336;
	t337 = t276 + t277;
	t271 = t337 * t333;
	t342 = t277 * t276;
	t300 = sqrt(-t342);
	t274 = 0.1e1 / t300;
	t367 = t271 * t274;
	t322 = t337 * t358;
	t272 = t288 * t322;
	t365 = t274 * t272;
	t278 = pkin(2) ^ 2 - pkin(13) ^ 2 + t282;
	t285 = t287 * qJD(3);
	t313 = t285 * t278 - t286 * t300;
	t340 = t288 * t297;
	t328 = t286 * t340;
	t283 = -pkin(1) - t350;
	t343 = t274 * t283;
	t254 = t313 * pkin(6) - t271 * t343 - t328 * t359;
	t339 = t288 * t300;
	t269 = -pkin(6) * t339 - t278 * t283;
	t266 = 0.1e1 / t269 ^ 2;
	t349 = pkin(6) * t288;
	t270 = t278 * t349 - t283 * t300;
	t268 = t270 ^ 2;
	t262 = t266 * t268 + 0.1e1;
	t344 = t266 * t270;
	t263 = t349 * t367;
	t341 = t285 * t300;
	t348 = t283 * pkin(1);
	t253 = -t263 + (-t341 - (t278 - 0.2e1 * t348) * t286) * pkin(6);
	t265 = 0.1e1 / t269;
	t345 = t253 * t265 * t266;
	t366 = (t254 * t344 - t268 * t345) / t262 ^ 2;
	t295 = cos(qJ(1));
	t298 = 0.1e1 / pkin(2);
	t279 = 0.1e1 / t282;
	t355 = t279 / 0.2e1;
	t327 = t298 * t355;
	t259 = atan2(t270 * t327, t269 * t327);
	t257 = sin(t259);
	t258 = cos(t259);
	t291 = sin(qJ(2));
	t294 = cos(qJ(2));
	t314 = t257 * t291 - t258 * t294;
	t364 = t295 * t314;
	t260 = 0.1e1 / t262;
	t351 = pkin(2) * t282;
	t331 = t260 * t351;
	t323 = t266 * t331;
	t363 = t298 * t270 * t323;
	t330 = t265 * t351;
	t318 = t260 * t298 * t330;
	t334 = pkin(6) * t352;
	t325 = t270 * t334;
	t326 = t269 * t334;
	t362 = qJD(2) + 0.2e1 * (t254 * t355 + t286 * t325) * t318 - 0.2e1 * (t253 * t355 + t286 * t326) * t363;
	t361 = -t274 * (t285 * t322 + t328 * t368) - 0.1e1 / t342 * t271 * t365;
	t315 = t257 * t294 + t258 * t291;
	t360 = t315 * r_i_i_C(1) - t314 * r_i_i_C(2);
	t310 = t314 * r_i_i_C(1) + t315 * r_i_i_C(2);
	t353 = pkin(1) * t279;
	t256 = -t272 * t343 - 0.2e1 * t297 * t288 ^ 2 * pkin(1) + (t278 * t287 - t339) * pkin(6);
	t252 = (t256 * t355 + t288 * t325) * t298;
	t346 = t252 * t265;
	t292 = sin(qJ(1));
	t335 = qJD(1) * t292;
	t332 = t279 * t280 * t368;
	t324 = t278 + t365;
	t255 = (-t287 * t300 + (-t324 + 0.2e1 * t348) * t288) * pkin(6);
	t251 = (t255 * t355 + t288 * t326) * t298;
	t329 = t251 * t344;
	t312 = qJD(1) * t315;
	t309 = t362 * t315;
	t308 = t310 * t295;
	t307 = t362 * t360;
	t306 = t362 * t310;
	t249 = 0.2e1 * (-t329 + t346) * t331;
	t247 = -t362 * t292 * t314 + t295 * t312;
	t246 = qJD(1) * t364 + t309 * t292;
	t245 = t292 * t312 + t362 * t364;
	t244 = t309 * t295 - t314 * t335;
	t243 = 0.2e1 * ((-0.4e1 * pkin(1) * t285 * t340 + t361 * t283 - t263) * t355 - (t270 * t288 * t332 + t287 * t353) * t297 * t286 + ((-t324 * t286 - t341) * t355 + (t254 * t288 + t256 * t286 + t285 * t270) * t352) * pkin(6)) * t318 - 0.2e1 * (-(t269 * t332 - 0.2e1 * t353) * t328 + ((-t287 * t367 + t361 * t288 - t313) * t355 + (t253 * t288 + t255 * t286) * t352 + (-t355 * t365 + (t269 * t280 + t279 * t283) * pkin(1)) * t285) * pkin(6)) * t363 - 0.2e1 * (0.2e1 * t346 - 0.2e1 * t329) * pkin(2) * t260 * t333 + 0.2e1 * (-t253 * t323 - 0.2e1 * t330 * t366) * t252 + 0.2e1 * (-t254 * t323 + 0.2e1 * (t260 * t345 + t266 * t366) * t270 * t351) * t251;
	t1 = [r_i_i_C(1) * t247 - r_i_i_C(2) * t246 + (-pkin(16) * t295 - r_i_i_C(3) * t292) * qJD(1), r_i_i_C(1) * t244 - r_i_i_C(2) * t245, t243 * t308 + (t307 * t295 - t310 * t335) * t249, 0; r_i_i_C(1) * t245 + r_i_i_C(2) * t244 + (-pkin(16) * t292 + r_i_i_C(3) * t295) * qJD(1), r_i_i_C(1) * t246 + r_i_i_C(2) * t247, t310 * t292 * t243 + (qJD(1) * t308 + t307 * t292) * t249, 0; 0, t306, -t360 * t243 + t306 * t249, 0;];
	JaD_transl = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobiaD_transl_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:12
	% EndTime: 2020-04-14 18:43:42
	% DurationCPUTime: 9.48s
	% Computational Cost: add. (198356->176), mult. (305570->365), div. (8154->14), fcn. (189474->16), ass. (0->169)
	t452 = cos(pkin(20));
	t455 = cos(qJ(3));
	t555 = sin(pkin(20));
	t561 = sin(qJ(3));
	t449 = t561 * t452 + t455 * t555;
	t557 = pkin(6) * t449;
	t528 = pkin(1) * t557;
	t446 = 0.2e1 * t528;
	t461 = pkin(2) ^ 2;
	t460 = pkin(6) ^ 2;
	t463 = pkin(1) ^ 2;
	t535 = t460 + t463;
	t517 = -pkin(13) ^ 2 + t535;
	t440 = t446 + t461 + t517;
	t445 = -pkin(1) - t557;
	t450 = -t455 * t452 + t561 * t555;
	t536 = t446 + t460;
	t567 = -pkin(2) - pkin(13);
	t434 = (pkin(1) - t567) * (pkin(1) + t567) + t536;
	t566 = -pkin(2) + pkin(13);
	t435 = (pkin(1) - t566) * (pkin(1) + t566) + t536;
	t549 = t435 * t434;
	t464 = sqrt(-t549);
	t545 = t450 * t464;
	t421 = -pkin(6) * t545 - t445 * t440;
	t418 = 0.1e1 / t421 ^ 2;
	t422 = pkin(6) * t450 * t440 - t445 * t464;
	t420 = t422 ^ 2;
	t414 = t420 * t418 + 0.1e1;
	t412 = 0.1e1 / t414;
	t444 = t446 + t535;
	t558 = pkin(2) * t444;
	t573 = 0.2e1 * t412 * t558;
	t568 = pkin(1) * pkin(6);
	t485 = 0.2e1 * (t434 + t435) * t568;
	t427 = t450 * t485;
	t432 = 0.1e1 / t464;
	t564 = t432 / 0.2e1;
	t493 = t427 * t564 + t440;
	t556 = t445 * pkin(1);
	t397 = (-t449 * t464 + (-t493 + 0.2e1 * t556) * t450) * pkin(6);
	t462 = 0.1e1 / pkin(2);
	t442 = 0.1e1 / t444 ^ 2;
	t559 = pkin(1) * t442;
	t530 = pkin(6) * t559;
	t509 = t421 * t530;
	t441 = 0.1e1 / t444;
	t563 = t441 / 0.2e1;
	t391 = (t397 * t563 + t450 * t509) * t462;
	t565 = -t432 / 0.2e1;
	t513 = t445 * t565;
	t580 = -0.2e1 * pkin(1);
	t398 = t427 * t513 + t460 * t450 ^ 2 * t580 + (t449 * t440 - t545) * pkin(6);
	t508 = t422 * t530;
	t392 = (t398 * t563 + t450 * t508) * t462;
	t417 = 0.1e1 / t421;
	t551 = t418 * t422;
	t574 = -t391 * t551 + t392 * t417;
	t381 = t574 * t573;
	t439 = t461 - t517 - 0.2e1 * t528;
	t437 = 0.1e1 / t439 ^ 2;
	t548 = t435 * t437;
	t430 = -t434 * t548 + 0.1e1;
	t428 = 0.1e1 / t430;
	t436 = 0.1e1 / t439;
	t514 = t436 * t564;
	t531 = t437 * t568;
	t579 = -0.2e1 * t464 * t531;
	t475 = t427 * t514 + t450 * t579;
	t394 = t475 * t428;
	t575 = t381 + t394;
	t578 = t412 * t462;
	t562 = t462 / 0.2e1;
	t512 = t441 * t562;
	t410 = atan2(t422 * t512, t421 * t512);
	t409 = cos(t410);
	t456 = cos(qJ(2));
	t539 = t456 * t409;
	t408 = sin(t410);
	t453 = sin(qJ(2));
	t544 = t453 * t408;
	t389 = -t539 + t544;
	t448 = t450 * qJD(3);
	t423 = t448 * t485;
	t550 = t423 * t450;
	t415 = pkin(6) * t550 * t565;
	t447 = t449 * qJD(3);
	t547 = t447 * t464;
	t395 = t415 + (-t547 - (t440 - 0.2e1 * t556) * t448) * pkin(6);
	t486 = t447 * t440 - t448 * t464;
	t546 = t450 * t460;
	t518 = t448 * t546;
	t396 = t486 * pkin(6) + t423 * t513 + t518 * t580;
	t525 = t417 * t558;
	t491 = t525 * t578;
	t524 = t418 * t558;
	t496 = t422 * t524;
	t569 = t496 * t578;
	t532 = qJD(2) + 0.2e1 * (t396 * t563 + t448 * t508) * t491 - 0.2e1 * (t395 * t563 + t448 * t509) * t569;
	t577 = t532 * t389;
	t543 = t453 * t409;
	t487 = t456 * t408 + t543;
	t474 = t532 * t487;
	t495 = t463 * t518;
	t416 = t447 * t485 - 0.8e1 * t495;
	t520 = t432 / t549 * t427 * t423;
	t476 = t520 / 0.4e1 + t416 * t564;
	t497 = t412 * t524;
	t527 = -0.4e1 * t441 * t442 * t463;
	t529 = t448 * t568;
	t552 = t395 * t417 * t418;
	t560 = pkin(1) * t441;
	t570 = 0.2e1 * (t396 * t551 - t420 * t552) / t414 ^ 2;
	t362 = 0.2e1 * ((-0.4e1 * pkin(1) * t447 * t546 - t476 * t445 + t415) * t563 - (t422 * t450 * t527 + t449 * t560) * t460 * t448 + ((-t493 * t448 - t547) * t563 + (t396 * t450 + t398 * t448 + t422 * t447) * t559) * pkin(6)) * t491 - 0.2e1 * (-(t421 * t527 - 0.2e1 * t560) * t518 + ((-t450 * t520 / 0.4e1 + (-t449 * t423 / 0.2e1 - t447 * t427 / 0.2e1 - t450 * t416 / 0.2e1) * t432 - t486) * t563 + (t445 * t447 * t441 + (t395 * t450 + t397 * t448 + t421 * t447) * t442) * pkin(1)) * pkin(6)) * t569 - 0.4e1 * t574 * pkin(2) * t412 * t529 + 0.2e1 * (-t395 * t497 - t525 * t570) * t392 + 0.2e1 * (t422 * t552 * t573 - t396 * t497 + t496 * t570) * t391;
	t438 = t436 * t437;
	t375 = t475 / t430 ^ 2 * (-0.2e1 * t548 + (-0.4e1 * t435 * t438 - 0.2e1 * t437) * t434) * t529 + (0.8e1 * t464 * t438 * t495 + t476 * t436 + (-0.2e1 * t547 + (-t427 * t448 - t550) * t432) * t531) * t428;
	t576 = -t375 - t362;
	t454 = sin(qJ(1));
	t457 = cos(qJ(1));
	t533 = qJD(1) * t457;
	t515 = t456 * t533;
	t516 = t453 * t533;
	t519 = t454 * t544;
	t366 = t408 * t515 + (t532 * t456 * t454 + t516) * t409 - t532 * t519;
	t385 = -t454 * t539 + t519;
	t393 = (t423 * t514 + t448 * t579) * t428;
	t504 = t385 * t393 - t366;
	t572 = t504 * r_i_i_C(2);
	t534 = qJD(1) * t454;
	t363 = -t389 * t534 + t474 * t457;
	t538 = t456 * t457;
	t542 = t453 * t457;
	t388 = -t408 * t538 - t409 * t542;
	t507 = t388 * t393 - t363;
	t571 = t507 * r_i_i_C(2);
	t511 = 0.1e1 / pkin(13) * t562;
	t426 = atan2(t464 * t511, t439 * t511);
	t424 = sin(t426);
	t553 = t393 * t424;
	t364 = t534 * t543 + (t456 * t534 + t532 * t542) * t408 - t532 * t409 * t538;
	t387 = t389 * t457;
	t506 = t387 * t393 + t364;
	t472 = t474 * t454;
	t365 = t408 * t516 - t409 * t515 + t472;
	t386 = t487 * t454;
	t505 = t386 * t393 + t365;
	t477 = t389 * t454;
	t503 = t381 * t477 + t385 * t394;
	t502 = t575 * t386;
	t501 = t575 * t387;
	t478 = t487 * t457;
	t500 = -t381 * t478 + t388 * t394;
	t499 = t575 * t487;
	t498 = t575 * t389;
	t489 = t507 * r_i_i_C(1);
	t488 = t504 * r_i_i_C(1);
	t356 = t362 * t387 + t363 * t381;
	t484 = t363 * t394 + t375 * t387 + t356;
	t483 = t364 * t394 + t375 * t388 - t362 * t478 - (-t457 * t577 - t487 * t534) * t381;
	t358 = t362 * t477 + (qJD(1) * t387 + t472) * t381;
	t482 = t365 * t394 + t375 * t385 + t358;
	t481 = -t366 * t394 - (qJD(1) * t478 - t454 * t577) * t381 + t576 * t386;
	t360 = -t487 * t362 + t381 * t577;
	t480 = -t375 * t487 + t394 * t577 + t360;
	t479 = t576 * t389 - t575 * t474;
	t425 = cos(t426);
	t384 = t387 * t553;
	t383 = t386 * t553;
	t1 = [t366 * pkin(2) + t383 * r_i_i_C(1) + (t365 * r_i_i_C(1) - t572) * t424 + (t505 * r_i_i_C(2) + t488) * t425 + (-t457 * pkin(16) - t454 * r_i_i_C(3)) * qJD(1), t363 * pkin(2) + t384 * r_i_i_C(1) + (t364 * r_i_i_C(1) - t571) * t424 + (t506 * r_i_i_C(2) + t489) * t425, t356 * pkin(2) + (-t484 * r_i_i_C(1) + t483 * r_i_i_C(2) + (t500 * r_i_i_C(1) + t501 * r_i_i_C(2)) * t393) * t425 + (t483 * r_i_i_C(1) + t484 * r_i_i_C(2) + (t501 * r_i_i_C(1) - t500 * r_i_i_C(2)) * t393) * t424, 0; t364 * pkin(2) + t384 * r_i_i_C(2) + (t364 * r_i_i_C(2) + t489) * t424 + (-t506 * r_i_i_C(1) + t571) * t425 + (-t454 * pkin(16) + t457 * r_i_i_C(3)) * qJD(1), t365 * pkin(2) + t383 * r_i_i_C(2) + (t365 * r_i_i_C(2) + t488) * t424 + (-t505 * r_i_i_C(1) + t572) * t425, t358 * pkin(2) + (-t482 * r_i_i_C(1) + t481 * r_i_i_C(2) + (-t502 * r_i_i_C(1) + t503 * r_i_i_C(2)) * t393) * t425 + (t481 * r_i_i_C(1) + t482 * r_i_i_C(2) + (t503 * r_i_i_C(1) + t502 * r_i_i_C(2)) * t393) * t424, 0; 0, (-t424 * t474 - t425 * t577) * r_i_i_C(1) + (t424 * t577 - t425 * t474) * r_i_i_C(2) + t577 * pkin(2) + ((-t389 * t425 - t424 * t487) * r_i_i_C(1) + (t389 * t424 - t425 * t487) * r_i_i_C(2)) * t393, t360 * pkin(2) + (-t480 * r_i_i_C(1) + t479 * r_i_i_C(2) + (-t498 * r_i_i_C(1) - t499 * r_i_i_C(2)) * t393) * t425 + (t479 * r_i_i_C(1) + t480 * r_i_i_C(2) + (-t499 * r_i_i_C(1) + t498 * r_i_i_C(2)) * t393) * t424, 0;];
	JaD_transl = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobiaD_transl_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:45:52
	% EndTime: 2020-04-14 18:55:52
	% DurationCPUTime: 366.42s
	% Computational Cost: add. (8893737->388), mult. (13835410->739), div. (525940->18), fcn. (8659891->24), ass. (0->347)
	t1184 = 4 * pkin(5);
	t1148 = -2 * pkin(4);
	t1130 = sin(pkin(19));
	t882 = sin(qJ(2));
	t885 = cos(qJ(2));
	t887 = cos(pkin(19));
	t872 = t882 * t1130 + t885 * t887;
	t870 = t872 * qJD(2);
	t889 = pkin(7) ^ 2;
	t1071 = t870 * t872 * t889;
	t1047 = pkin(1) * t1071;
	t1019 = t885 * t1130 - t882 * t887;
	t1124 = pkin(7) * t1019;
	t1149 = -0.2e1 * pkin(1);
	t893 = pkin(1) ^ 2;
	t1084 = -t1124 * t1149 + t893;
	t1143 = pkin(7) + pkin(8);
	t1144 = pkin(7) - pkin(8);
	t860 = (pkin(3) + t1143) * (-pkin(3) + t1144) + t1084;
	t861 = (-pkin(3) + t1143) * (pkin(3) + t1144) + t1084;
	t1107 = t861 * t860;
	t895 = sqrt(-t1107);
	t858 = 0.1e1 / t895;
	t1135 = t858 / 0.2e1;
	t867 = pkin(1) + t1124;
	t1061 = t867 * t1135;
	t1103 = t870 * t895;
	t1145 = pkin(1) * pkin(7);
	t1030 = 0.2e1 * (t860 + t861) * t1145;
	t855 = t870 * t1030;
	t866 = t889 + t1084;
	t862 = pkin(3) ^ 2 - pkin(8) ^ 2 + t866;
	t869 = t1019 * qJD(2);
	t837 = t855 * t1061 - 0.2e1 * t1047 + (t869 * t862 - t1103) * pkin(7);
	t1102 = t872 * t895;
	t1129 = pkin(1) * t889;
	t856 = t872 * t1030;
	t839 = t856 * t1061 - 0.2e1 * t872 ^ 2 * t1129 + (t1019 * t862 - t1102) * pkin(7);
	t1123 = pkin(7) * t872;
	t854 = t862 * t1123 + t867 * t895;
	t1005 = t837 * t872 + t839 * t870 + t854 * t869;
	t1077 = t867 * t1149;
	t1056 = -t862 + t1077;
	t1104 = t869 * t895;
	t1136 = -t858 / 0.2e1;
	t849 = t855 * t1123 * t1136;
	t836 = t849 + (t1056 * t870 - t1104) * pkin(7);
	t1044 = t856 * t1136 - t862;
	t838 = (-t1019 * t895 + (t1044 + t1077) * t872) * pkin(7);
	t853 = -pkin(7) * t1102 + t862 * t867;
	t1006 = t836 * t872 + t838 * t870 + t853 * t869;
	t1045 = t893 * t1071;
	t863 = 0.1e1 / t866;
	t864 = 0.1e1 / t866 ^ 2;
	t1040 = t863 * t864 * t1045;
	t877 = sin(pkin(23));
	t1014 = 0.4e1 * t877 * t1040;
	t879 = cos(pkin(23));
	t1028 = t879 * t1040;
	t1134 = t877 / 0.2e1;
	t1060 = t863 * t1134;
	t1076 = t864 * t1145;
	t1106 = t863 * t879;
	t1100 = t879 * t853;
	t1101 = t877 * t854;
	t892 = 0.1e1 / pkin(3);
	t1105 = t863 * t892;
	t845 = (-t1100 / 0.2e1 + t1101 / 0.2e1) * t1105;
	t842 = 0.1e1 / t845 ^ 2;
	t1099 = t879 * t854;
	t1112 = t853 * t877;
	t846 = (t1099 / 0.2e1 + t1112 / 0.2e1) * t1105;
	t1113 = t842 * t846;
	t1133 = -t879 / 0.2e1;
	t999 = (-t1100 + t1101) * t1076;
	t802 = ((t836 * t1133 + t837 * t1134) * t863 + t870 * t999) * t892;
	t1162 = t802 * t842;
	t841 = 0.1e1 / t845;
	t1117 = t841 * t1162;
	t1132 = t879 / 0.2e1;
	t998 = (t1099 + t1112) * t1076;
	t803 = ((t837 * t1132 + t836 * t1134) * t863 + t870 * t998) * t892;
	t844 = t846 ^ 2;
	t834 = t842 * t844 + 0.1e1;
	t1119 = 0.2e1 * (t803 * t1113 - t844 * t1117) / t834 ^ 2;
	t1072 = t858 / t1107 * t856 * t855;
	t852 = t1030 * t869 - 0.8e1 * t1045;
	t805 = 0.4e1 * t1047 + (t1103 - t872 * t1072 / 0.4e1 + t1056 * t869 + (-t1019 * t855 / 0.2e1 - t869 * t856 / 0.2e1 - t872 * t852 / 0.2e1) * t858) * pkin(7);
	t1138 = -t805 / 0.2e1;
	t804 = t849 + (t1072 / 0.4e1 + t852 * t1135) * t867 + (-0.2e1 * t1019 * t870 - 0.4e1 * t869 * t872) * t1129 + (t1044 * t870 - t1104) * pkin(7);
	t1139 = t804 / 0.2e1;
	t806 = ((t838 * t1133 + t839 * t1134) * t863 + t872 * t999) * t892;
	t807 = ((t839 * t1132 + t838 * t1134) * t863 + t872 * t998) * t892;
	t832 = 0.1e1 / t834;
	t762 = (-t841 * t1119 - t832 * t1162) * t807 + (t1113 * t1119 + (0.2e1 * t846 * t1117 - t803 * t842) * t832) * t806 + ((t853 * t1014 + 0.4e1 * t854 * t1028 + t805 * t1060 + t1106 * t1139) * t841 - (t854 * t1014 - 0.4e1 * t853 * t1028 + t804 * t1060 + t1106 * t1138) * t1113 + ((t1005 * t841 + t1006 * t1113) * t879 + (-t1005 * t1113 + t1006 * t841) * t877) * t1076) * t832 * t892;
	t1120 = t762 * t885;
	t784 = (-t802 * t1113 + t803 * t841) * t832;
	t1079 = qJD(2) + t784;
	t785 = (-t806 * t1113 + t807 * t841) * t832;
	t1155 = t1079 * t785;
	t835 = atan2(t846, t845);
	t830 = sin(t835);
	t831 = cos(t835);
	t1015 = t1155 + t1079;
	t994 = t1015 * t885 + t762 * t882;
	t988 = t994 * t831;
	t1183 = t988 - (t1155 * t882 - t1120) * t830;
	t884 = cos(qJ(3));
	t1092 = t884 * t836;
	t881 = sin(qJ(3));
	t1097 = t881 * t837;
	t1021 = -t1092 / 0.2e1 + t1097 / 0.2e1;
	t1091 = t884 * t837;
	t1098 = t881 * t836;
	t1024 = t1098 / 0.2e1 + t1091 / 0.2e1;
	t1109 = t854 * t881;
	t1110 = t853 * t884;
	t1026 = t1110 / 0.2e1 - t1109 / 0.2e1;
	t1108 = t854 * t884;
	t1111 = t853 * t881;
	t1027 = t1111 / 0.2e1 + t1108 / 0.2e1;
	t1054 = t870 * t1076;
	t1032 = t1108 + t1111;
	t1033 = t1109 - t1110;
	t876 = pkin(23) + pkin(22);
	t874 = sin(t876);
	t875 = cos(t876);
	t1152 = t1032 * t874 + t875 * t1033;
	t1168 = t892 * (t1054 * t1152 + (t875 * t1021 + t874 * t1024 + (t1026 * t874 + t875 * t1027) * qJD(3)) * t863);
	t1179 = pkin(5) * t1168;
	t847 = t1027 * t1105;
	t848 = t1026 * t1105;
	t818 = t847 * t875 + t848 * t874;
	t1127 = pkin(5) * t818;
	t890 = pkin(5) ^ 2;
	t1085 = -t1127 * t1148 + t890;
	t891 = pkin(4) ^ 2;
	t815 = t891 + t1085;
	t812 = pkin(9) ^ 2 - pkin(11) ^ 2 + t815;
	t1182 = t1179 * t812;
	t1142 = -pkin(9) - pkin(11);
	t810 = (pkin(4) - t1142) * (pkin(4) + t1142) + t1085;
	t1141 = pkin(11) - pkin(9);
	t811 = (pkin(4) - t1141) * (pkin(4) + t1141) + t1085;
	t1116 = t811 * t810;
	t894 = sqrt(-t1116);
	t1181 = t1179 * t894;
	t1180 = t1015 * t882 - t1120;
	t982 = t1032 * t875 - t874 * t1033;
	t1177 = t982 * t1054 + ((t1026 * t875 - t874 * t1027) * qJD(3) - t874 * t1021 + t875 * t1024) * t863;
	t814 = 0.1e1 / t815 ^ 2;
	t888 = 0.1e1 / pkin(9);
	t1161 = t814 * t888;
	t1166 = 0.1e1 / t894;
	t1140 = -t1166 / 0.2e1;
	t816 = -pkin(4) - t1127;
	t1160 = t810 + t811;
	t973 = t892 * t1177;
	t970 = pkin(5) * t973;
	t1164 = t970 * t1148;
	t946 = t1160 * t1164;
	t944 = -t1166 / t1116 * t946 / 0.4e1;
	t1176 = -t970 * t1140 + t816 * t944;
	t1039 = t830 * t885 + t831 * t882;
	t1175 = t1079 * t1039;
	t1174 = (t785 + 0.1e1) * t1039;
	t886 = cos(qJ(1));
	t1080 = qJD(2) * t886;
	t883 = sin(qJ(1));
	t1083 = qJD(1) * t883;
	t1173 = t882 * t1080 + t885 * t1083;
	t1052 = t847 * t874 - t875 * t848;
	t1126 = pkin(5) * t1052;
	t789 = -t894 * t1126 - t812 * t816;
	t787 = 0.1e1 / t789;
	t788 = 0.1e1 / t789 ^ 2;
	t790 = t812 * t1126 - t816 * t894;
	t1147 = t790 ^ 2;
	t1059 = t788 * t1147 + 0.1e1;
	t1118 = t788 * t790;
	t1122 = pkin(9) * t815;
	t1146 = t787 * t788;
	t945 = t946 * t1140;
	t943 = pkin(5) * t945;
	t933 = t1052 * t943 + t816 * t1164 + t812 * t970 - t1181;
	t968 = t890 * t973;
	t964 = pkin(4) * t968;
	t961 = 0.2e1 * t964;
	t934 = t1052 * t961 + t816 * t945 + t894 * t970 + t1182;
	t922 = 0.2e1 * t888 / t1059 ^ 2 * (-t1147 * t1146 * t933 + t934 * t1118) * t1122;
	t778 = 0.1e1 / t1059;
	t1075 = t778 * t1122;
	t931 = t888 * t933;
	t927 = t931 * t1075;
	t965 = pkin(4) * t888 * t973;
	t953 = pkin(9) * t778 * t965;
	t1172 = -0.2e1 * t788 * t927 + (t953 * t1184 - 0.2e1 * t922) * t787;
	t1048 = t788 * t1075;
	t1167 = 2 * pkin(5);
	t932 = t888 * t934;
	t930 = pkin(5) * t932;
	t1170 = t790 * t1146 * t927 * t1184 - 0.2e1 * t930 * t1048 + (t1167 * t922 - 0.4e1 * t890 * t953) * t1118;
	t813 = 0.1e1 / t815;
	t1165 = 0.2e1 * t816;
	t878 = sin(pkin(22));
	t880 = cos(pkin(22));
	t1041 = t790 * t1048;
	t1049 = t787 * t1075;
	t1137 = t813 / 0.2e1;
	t958 = t814 * t965;
	t954 = pkin(5) * t958;
	t919 = 0.2e1 * (t932 * t1137 - t790 * t954) * t1049 - 0.2e1 * (t931 * t1137 - t789 * t954) * t1041;
	t1062 = t888 * t1137;
	t995 = atan2(t790 * t1062, t789 * t1062);
	t990 = sin(t995);
	t917 = t990 * t919;
	t991 = cos(t995);
	t918 = t991 * t919;
	t741 = -t878 * t918 + t880 * t917;
	t740 = -t878 * t917 - t880 * t918;
	t1159 = t944 * t1126 + t1140 * t1179;
	t963 = t891 * t968;
	t951 = -0.4e1 * t813 * t963 * t1161;
	t967 = pkin(4) * t1179;
	t1158 = t1052 * t951 + t967 * t1161;
	t1089 = t884 * t839;
	t1096 = t881 * t838;
	t1023 = t1096 / 0.2e1 + t1089 / 0.2e1;
	t1053 = t872 * t1076;
	t808 = (-t1023 * t863 - t1032 * t1053) * t892;
	t1090 = t884 * t838;
	t1095 = t881 * t839;
	t1020 = -t1090 / 0.2e1 + t1095 / 0.2e1;
	t809 = (t1020 * t863 + t1033 * t1053) * t892;
	t792 = t808 * t875 + t809 * t874;
	t1007 = 0.4e1 * t1032;
	t1008 = 0.4e1 * t1033;
	t1131 = -t884 / 0.2e1;
	t1022 = t805 * t1131 + t881 * t1139;
	t1025 = t804 * t1131 + t881 * t1138;
	t1034 = -t1089 - t1096;
	t1035 = -t1090 + t1095;
	t1036 = -t1091 - t1098;
	t1037 = -t1092 + t1097;
	t940 = t892 * ((-t1007 * t875 + t1008 * t874) * t1040 + (t875 * t1025 + t874 * t1022 + (t1020 * t875 + t1023 * t874) * qJD(3)) * t863 + ((t1034 * t875 + t1035 * t874) * t870 - t982 * t869 + (qJD(3) * t1152 + t1036 * t875 + t1037 * t874) * t872) * t1076);
	t938 = pkin(5) * t940;
	t937 = pkin(4) * t938;
	t1157 = t937 * t1161 + t792 * t951;
	t764 = -t878 * t990 - t880 * t991;
	t1114 = t831 * t885;
	t1115 = t830 * t882;
	t1038 = -t1114 + t1115;
	t1156 = t1038 * t886;
	t1078 = t890 * t1148;
	t1057 = t1052 * t1078;
	t1151 = (t1078 * t1168 + t943) * t1062 - t1057 * t954 + pkin(4) * t814 * t930;
	t1128 = pkin(5) * t814;
	t1125 = pkin(5) * t892;
	t1094 = t882 * t886;
	t1093 = t883 * t885;
	t1088 = t885 * t886;
	t1081 = qJD(2) * t882;
	t1067 = t883 * t1081;
	t783 = t784 * t1115;
	t1087 = -t830 * t1067 - t883 * t783;
	t1086 = t830 * t1081 + t783;
	t1082 = qJD(1) * t886;
	t1074 = qJD(2) * t885 * pkin(1);
	t1073 = t883 * t1115;
	t1070 = t882 * t1082;
	t1068 = t885 * t1082;
	t1065 = t885 * t1080;
	t1064 = t816 * t1140;
	t1063 = t1052 * t1140;
	t1058 = pkin(1) * t882 - pkin(16);
	t1055 = pkin(4) * t1165 - t812;
	t1046 = 0.2e1 * t1140;
	t1043 = 0.2e1 * t1049;
	t1042 = t888 * t1049;
	t1031 = -0.2e1 * t1041;
	t1029 = pkin(4) * t1160 * t1167;
	t1018 = pkin(4) * (t789 * t814 + t813 * t816);
	t1017 = pkin(5) * t888 * t1041;
	t797 = t1039 * t883;
	t1011 = t1038 * t785;
	t779 = t792 * t1029;
	t793 = -t808 * t874 + t809 * t875;
	t1010 = t1063 * t779 - t793 * t894;
	t791 = t1052 * t1029;
	t1009 = t1063 * t791 - t818 * t894;
	t1000 = pkin(4) * (-t1052 * t813 * t890 + t790 * t1128);
	t765 = -qJD(1) * t1073 + (t1088 * t784 + t1065) * t830 + (t1094 * t784 + t1173) * t831;
	t997 = t1011 + t1115;
	t996 = t1011 - t1114;
	t993 = t779 * t1064 + (-t792 * t894 + t793 * t812) * pkin(5);
	t992 = t791 * t1064 + (-t1052 * t894 + t812 * t818) * pkin(5);
	t773 = t1174 * t886;
	t980 = (-t792 * t812 + t1010) * t1137 + t792 * t1018;
	t979 = (-t1052 * t812 + t1009) * t1137 + t1052 * t1018;
	t978 = t792 * t1000 + t993 * t1137;
	t977 = t1000 * t1052 + t992 * t1137;
	t752 = t1180 * t831 + t994 * t830;
	t976 = -t878 * t991 + t880 * t990;
	t969 = t1177 * t1125;
	t960 = -0.4e1 * t964;
	t959 = 0.4e1 * t963;
	t952 = t890 * t958;
	t939 = ((t1007 * t874 + t1008 * t875) * t1040 + (t875 * t1022 - t874 * t1025 + (-t1020 * t874 + t1023 * t875) * qJD(3)) * t863 + ((-t1034 * t874 + t1035 * t875) * t870 + t1152 * t869 + (qJD(3) * t982 - t1036 * t874 + t1037 * t875) * t872) * t1076) * t1125;
	t935 = (t1052 * t959 + t1160 * t967) * t1046;
	t928 = pkin(4) * t931 * t1128;
	t923 = (t1160 * t937 + t792 * t959) * t1046;
	t912 = ((t1057 * t1168 + t1176 * t791 + t812 * t969 + t816 * t935 + t818 * t961 - t1181) * t1062 - t992 * t954 + t1151 * t1052 + t1158 * t790) * t1043 + ((t1052 * t960 + t935 * t1126 + t1159 * t791 + t967 * t1165 + t818 * t943 - t894 * t969 - t1182) * t1062 - (t1052 * t1055 + t1009) * t952 + t1052 * t928 + t1158 * t789) * t1031 + t1172 * t977 + t1170 * t979;
	t911 = t912 * t991;
	t910 = t912 * t990;
	t909 = ((t1057 * t940 + t1176 * t779 + t793 * t961 + t812 * t939 + t816 * t923 - t894 * t938) * t1062 - t993 * t954 + t1151 * t792 + t1157 * t790) * t1043 + ((t923 * t1126 + t1159 * t779 + t937 * t1165 + t792 * t960 + t793 * t943 - t812 * t938 - t894 * t939) * t1062 - (t1055 * t792 + t1010) * t952 + t792 * t928 + t1157 * t789) * t1031 + t1172 * t978 + t1170 * t980;
	t908 = t909 * t991;
	t907 = t909 * t990;
	t828 = t830 * t1094;
	t827 = t831 * t1093;
	t826 = t831 * t1068;
	t799 = t1039 * t886;
	t798 = -t831 * t1088 + t828;
	t796 = -t827 + t1073;
	t775 = t996 + t1115;
	t774 = t886 * t996 + t828;
	t772 = t883 * t997 - t827;
	t771 = t1174 * t883;
	t769 = -t1079 * t1114 + t1086;
	t768 = t830 * t1068 + (t1079 * t1093 + t1070) * t831 + t1087;
	t767 = t1070 * t830 + t1175 * t883 - t826;
	t766 = qJD(1) * t797 + t1079 * t1156;
	t761 = -0.2e1 * t1017 * t979 + 0.2e1 * t1042 * t977;
	t758 = -0.2e1 * t1017 * t980 + 0.2e1 * t1042 * t978;
	t753 = t1086 - t1183;
	t751 = t1082 * t997 + t752 * t883 - t826;
	t750 = qJD(1) * t773 + t1183 * t883 + t1087;
	t749 = t762 * t1156 + (-t1038 * t1083 + t1175 * t886) * t785 + t765;
	t748 = -t1174 * t1083 + (-t1180 * t830 + t988) * t886;
	t747 = t976 * t761;
	t746 = t764 * t761;
	t744 = t976 * t758;
	t743 = t764 * t758;
	t735 = -t740 * t761 - t878 * t911 + t880 * t910;
	t734 = t741 * t761 - t878 * t910 - t880 * t911;
	t733 = -t740 * t758 - t878 * t908 + t880 * t907;
	t732 = t741 * t758 - t878 * t907 - t880 * t908;
	t1 = [(-t740 * t796 + t741 * t797 + t764 * t768 + t767 * t976) * r_i_i_C(1) + (-t740 * t797 - t741 * t796 - t764 * t767 + t768 * t976) * r_i_i_C(2) + t883 * t1074 + (t767 * t878 + t768 * t880) * pkin(4) + (-t883 * r_i_i_C(3) + t1058 * t886) * qJD(1), (t732 * t798 - t733 * t799 + t740 * t773 + t741 * t774 + t743 * t765 + t744 * t766 - t748 * t976 + t749 * t764) * r_i_i_C(1) + (t732 * t799 + t733 * t798 - t740 * t774 + t741 * t773 - t743 * t766 + t744 * t765 + t748 * t764 + t749 * t976) * r_i_i_C(2) + (-t748 * t878 + t749 * t880) * pkin(4) + t1173 * pkin(1), (t734 * t798 - t735 * t799 + t746 * t765 + t747 * t766) * r_i_i_C(1) + (t734 * t799 + t735 * t798 - t746 * t766 + t747 * t765) * r_i_i_C(2), 0; (t740 * t798 - t741 * t799 + t764 * t766 - t765 * t976) * r_i_i_C(1) + (t740 * t799 + t741 * t798 + t764 * t765 + t766 * t976) * r_i_i_C(2) - pkin(1) * t1065 + (-t765 * t878 + t766 * t880) * pkin(4) + (t886 * r_i_i_C(3) + t1058 * t883) * qJD(1), (t732 * t796 - t733 * t797 + t740 * t771 + t741 * t772 + t743 * t767 - t744 * t768 - t750 * t976 + t751 * t764) * r_i_i_C(1) + (t732 * t797 + t733 * t796 - t740 * t772 + t741 * t771 + t743 * t768 + t744 * t767 + t750 * t764 + t751 * t976) * r_i_i_C(2) + (-t750 * t878 + t751 * t880) * pkin(4) + (t1067 - t1068) * pkin(1), (t734 * t796 - t735 * t797 + t746 * t767 - t747 * t768) * r_i_i_C(1) + (t734 * t797 + t735 * t796 + t746 * t768 + t747 * t767) * r_i_i_C(2), 0; 0, (-t1038 * t733 - t1039 * t732 - t1174 * t741 - t1175 * t744 + t740 * t775 + t743 * t769 - t752 * t976 + t753 * t764) * r_i_i_C(1) + (t1038 * t732 - t1039 * t733 + t1174 * t740 + t1175 * t743 + t741 * t775 + t744 * t769 + t752 * t764 + t753 * t976) * r_i_i_C(2) - t1074 + (-t752 * t878 + t753 * t880) * pkin(4), (-t1038 * t735 - t1039 * t734 - t1175 * t747 + t746 * t769) * r_i_i_C(1) + (t1038 * t734 - t1039 * t735 + t1175 * t746 + t747 * t769) * r_i_i_C(2), 0;];
	JaD_transl = t1;
end