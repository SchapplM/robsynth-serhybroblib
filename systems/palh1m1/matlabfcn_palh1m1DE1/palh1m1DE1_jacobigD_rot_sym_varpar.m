% Zeitableitung der rotatorischen Teilmatrix der geometrischen Jacobi-Matrix für beliebiges Segment von
% palh1m1DE1
% Use Code from Maple symbolic Code Generation
%
% Geometrische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorgeschwindigkeit und Geschw. der verallgemeinerten Koordinaten.
% 
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JgD_rot [3x4]
%   Zeitableitung der rotatorischen Teilmatrix der geometrischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-14 19:47
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JgD_rot = palh1m1DE1_jacobigD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1DE1_jacobigD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1DE1_jacobigD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1DE1_jacobigD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1DE1_jacobigD_rot_sym_varpar: pkin has to be [23x1] (double)');
JgD_rot=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobigD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:57
	% EndTime: 2020-04-14 18:42:57
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobigD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobigD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (2->2), div. (0->0), fcn. (2->2), ass. (0->1)
	t1 = [0, qJD(1) * cos(qJ(1)), 0, 0; 0, qJD(1) * sin(qJ(1)), 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobigD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t46 = qJD(1) * cos(qJ(1));
	t45 = qJD(1) * sin(qJ(1));
	t1 = [0, t46, t46, 0; 0, t45, t45, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobigD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:44:58
	% EndTime: 2020-04-14 18:46:16
	% DurationCPUTime: 45.48s
	% Computational Cost: add. (1067500->212), mult. (1666316->434), div. (62252->14), fcn. (1041364->16), ass. (0->214)
	t581 = pkin(7) ^ 2;
	t585 = pkin(1) ^ 2;
	t575 = sin(qJ(2));
	t579 = cos(pkin(19));
	t685 = sin(pkin(19));
	t686 = cos(qJ(2));
	t604 = -t575 * t579 + t686 * t685;
	t681 = pkin(7) * t604;
	t704 = -2 * pkin(1);
	t649 = -t681 * t704 + t585;
	t559 = t581 + t649;
	t556 = 0.1e1 / t559;
	t565 = t575 * t685 + t686 * t579;
	t563 = t565 * qJD(2);
	t584 = 0.1e1 / pkin(3);
	t555 = pkin(3) ^ 2 - pkin(8) ^ 2 + t559;
	t560 = pkin(1) + t681;
	t701 = -pkin(8) - pkin(3);
	t553 = (pkin(7) - t701) * (pkin(7) + t701) + t649;
	t700 = -pkin(8) + pkin(3);
	t554 = (pkin(7) - t700) * (pkin(7) + t700) + t649;
	t667 = t554 * t553;
	t587 = sqrt(-t667);
	t663 = t565 * t587;
	t546 = -pkin(7) * t663 + t555 * t560;
	t577 = cos(qJ(3));
	t652 = t577 * t546;
	t680 = pkin(7) * t565;
	t547 = t555 * t680 + t560 * t587;
	t574 = sin(qJ(3));
	t657 = t574 * t547;
	t619 = -t652 + t657;
	t557 = 0.1e1 / t559 ^ 2;
	t702 = pkin(1) * pkin(7);
	t646 = t557 * t702;
	t599 = t619 * t646;
	t651 = t577 * t547;
	t658 = t574 * t546;
	t613 = t658 / 0.2e1 + t651 / 0.2e1;
	t617 = 0.2e1 * (t553 + t554) * t702;
	t548 = t563 * t617;
	t551 = 0.1e1 / t587;
	t692 = -t551 / 0.2e1;
	t540 = t548 * t680 * t692;
	t647 = t560 * t704;
	t631 = -t555 + t647;
	t562 = t604 * qJD(2);
	t665 = t562 * t587;
	t533 = t540 + (t631 * t563 - t665) * pkin(7);
	t656 = t577 * t533;
	t706 = t563 * t581;
	t642 = t565 * t706;
	t625 = pkin(1) * t642;
	t691 = t551 / 0.2e1;
	t635 = t560 * t691;
	t664 = t563 * t587;
	t534 = t548 * t635 - 0.2e1 * t625 + (t562 * t555 - t664) * pkin(7);
	t661 = t574 * t534;
	t509 = (t563 * t599 + (-t656 / 0.2e1 + t661 / 0.2e1 + t613 * qJD(3)) * t556) * t584;
	t611 = t652 / 0.2e1 - t657 / 0.2e1;
	t618 = t651 + t658;
	t655 = t577 * t534;
	t662 = t574 * t533;
	t510 = (t618 * t563 * t646 + (t662 / 0.2e1 + t655 / 0.2e1 + t611 * qJD(3)) * t556) * t584;
	t571 = pkin(23) + pkin(22);
	t567 = sin(t571);
	t568 = cos(t571);
	t504 = t509 * t567 - t510 * t568;
	t582 = pkin(5) ^ 2;
	t666 = t556 * t584;
	t538 = t613 * t666;
	t539 = t611 * t666;
	t527 = t538 * t568 + t539 * t567;
	t683 = pkin(4) * t527;
	t703 = -2 * pkin(5);
	t650 = -t683 * t703 + t582;
	t699 = -pkin(9) - pkin(11);
	t518 = (pkin(4) - t699) * (pkin(4) + t699) + t650;
	t698 = -pkin(9) + pkin(11);
	t519 = (pkin(4) - t698) * (pkin(4) + t698) + t650;
	t670 = t519 * t518;
	t586 = sqrt(-t670);
	t708 = t504 * t586;
	t648 = 2 * pkin(5);
	t616 = pkin(4) * (t518 + t519) * t648;
	t495 = t504 * t616;
	t583 = pkin(4) ^ 2;
	t524 = t583 + t650;
	t520 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t524;
	t525 = pkin(5) + t683;
	t630 = t525 * t703 - t520;
	t512 = 0.1e1 / t586;
	t626 = t538 * t567 - t568 * t539;
	t693 = -t626 / 0.2e1;
	t639 = t512 * t693;
	t627 = t568 * t509 + t510 * t567;
	t705 = t627 * t586;
	t477 = (t495 * t639 + t630 * t504 - t705) * pkin(4);
	t632 = t583 * t626 * t703;
	t694 = t512 / 0.2e1;
	t640 = t525 * t694;
	t478 = t495 * t640 + t504 * t632 + (t520 * t627 - t708) * pkin(4);
	t521 = 0.1e1 / t524;
	t580 = 0.1e1 / pkin(11);
	t668 = t521 * t580;
	t682 = pkin(4) * t626;
	t500 = t520 * t682 + t525 * t586;
	t572 = sin(pkin(21));
	t673 = t500 * t572;
	t499 = t520 * t525 - t586 * t682;
	t573 = cos(pkin(21));
	t674 = t499 * t573;
	t494 = (-t674 / 0.2e1 + t673 / 0.2e1) * t668;
	t491 = 0.1e1 / t494 ^ 2;
	t522 = 0.1e1 / t524 ^ 2;
	t645 = pkin(4) * pkin(5) * t522;
	t598 = (t673 - t674) * t645;
	t689 = -t573 / 0.2e1;
	t690 = t572 / 0.2e1;
	t707 = ((t477 * t689 + t478 * t690) * t521 + t504 * t598) * t580 * t491;
	t490 = 0.1e1 / t494;
	t697 = -t495 / 0.2e1;
	t606 = t565 * t618;
	t549 = t565 * t617;
	t684 = pkin(1) * t581;
	t536 = t549 * t635 - 0.2e1 * t565 ^ 2 * t684 + (t555 * t604 - t663) * pkin(7);
	t653 = t577 * t536;
	t621 = t549 * t692 - t555;
	t535 = (-t604 * t587 + (t621 + t647) * t565) * pkin(7);
	t660 = t574 * t535;
	t614 = t660 / 0.2e1 + t653 / 0.2e1;
	t516 = (-t614 * t556 - t606 * t646) * t584;
	t654 = t577 * t535;
	t659 = t574 * t536;
	t612 = -t654 / 0.2e1 + t659 / 0.2e1;
	t517 = (t612 * t556 + t565 * t599) * t584;
	t506 = t516 * t568 + t517 * t567;
	t496 = t506 * t616;
	t696 = -t496 / 0.2e1;
	t505 = t626 * t616;
	t695 = -t505 / 0.2e1;
	t688 = t573 / 0.2e1;
	t687 = -t577 / 0.2e1;
	t672 = t500 * t573;
	t675 = t499 * t572;
	t597 = (t672 + t675) * t645;
	t469 = ((t477 * t690 + t478 * t688) * t521 + t504 * t597) * t580;
	t493 = (t675 / 0.2e1 + t672 / 0.2e1) * t668;
	t489 = t493 ^ 2;
	t483 = t489 * t491 + 0.1e1;
	t677 = t491 * t493;
	t678 = t490 * t707;
	t679 = 0.2e1 * (t469 * t677 - t489 * t678) / t483 ^ 2;
	t676 = t495 * t512 / t670;
	t671 = t504 * t583;
	t669 = t521 * t573;
	t576 = sin(qJ(1));
	t569 = qJD(1) * t576;
	t578 = cos(qJ(1));
	t570 = qJD(1) * t578;
	t644 = t582 * t671;
	t643 = t551 / t667 * t549 * t548;
	t641 = t676 / 0.4e1;
	t638 = t521 * t690;
	t637 = -t669 / 0.2e1;
	t636 = t669 / 0.2e1;
	t634 = t583 * t648;
	t633 = 0.4e1 * pkin(5) * t671;
	t481 = 0.1e1 / t483;
	t629 = t481 * t645;
	t628 = -0.8e1 * t644;
	t624 = t521 * t522 * t644;
	t623 = t585 * t642;
	t622 = -t626 * t676 / 0.4e1;
	t620 = t573 * t624;
	t615 = 0.4e1 * t572 * t624;
	t610 = -0.4e1 * t499 * t620;
	t609 = 0.4e1 * t500 * t620;
	t608 = t506 * t615;
	t607 = t626 * t615;
	t605 = -t481 * t707 - t490 * t679;
	t507 = -t516 * t567 + t517 * t568;
	t479 = (t496 * t639 + t630 * t506 - t507 * t586) * pkin(4);
	t545 = t562 * t617 - 0.8e1 * t623;
	t514 = t540 + (t643 / 0.4e1 + t545 * t691) * t560 + (-0.4e1 * t562 * t565 - 0.2e1 * t563 * t604) * t684 + (t621 * t563 - t665) * pkin(7);
	t515 = 0.4e1 * t625 + (t664 - t565 * t643 / 0.4e1 + t631 * t562 + (-t604 * t548 / 0.2e1 - t562 * t549 / 0.2e1 - t565 * t545 / 0.2e1) * t551) * pkin(7);
	t558 = t556 * t557;
	t497 = (0.4e1 * t619 * t558 * t623 + (t515 * t687 + t574 * t514 / 0.2e1 + t614 * qJD(3)) * t556 + ((-t654 + t659) * t563 + t619 * t562 + (t618 * qJD(3) - t656 + t661) * t565) * t646) * t584;
	t498 = (-0.4e1 * t585 * t558 * t606 * t706 + (-t574 * t515 / 0.2e1 + t514 * t687 + t612 * qJD(3)) * t556 + ((-t653 - t660) * t563 - t618 * t562 + (t619 * qJD(3) - t655 - t662) * t565) * t646) * t584;
	t485 = t497 * t567 + t498 * t568;
	t603 = t477 * t506 + t479 * t504 + t485 * t499;
	t487 = (t505 * t639 - t527 * t586 + t626 * t630) * pkin(4);
	t602 = t477 * t626 + t487 * t504 + t499 * t627;
	t480 = t496 * t640 + t506 * t632 + (-t506 * t586 + t507 * t520) * pkin(4);
	t601 = t478 * t506 + t480 * t504 + t485 * t500;
	t488 = t505 * t640 + t626 * t632 + (t520 * t527 - t586 * t626) * pkin(4);
	t600 = t478 * t626 + t488 * t504 + t500 * t627;
	t596 = t677 * t679 + (-t469 * t491 + 0.2e1 * t493 * t678) * t481;
	t486 = t616 * t627 + t626 * t628;
	t484 = t497 * t568 - t498 * t567;
	t476 = ((t487 * t689 + t488 * t690) * t521 + t626 * t598) * t580;
	t475 = ((t487 * t690 + t488 * t688) * t521 + t626 * t597) * t580;
	t474 = t485 * t616 + t506 * t628;
	t473 = ((t479 * t689 + t480 * t690) * t521 + t506 * t598) * t580;
	t472 = ((t479 * t690 + t480 * t688) * t521 + t506 * t597) * t580;
	t471 = t626 * t633 + (t708 + t505 * t622 + t630 * t627 + (t486 * t693 + t527 * t697 + t627 * t695) * t512) * pkin(4);
	t468 = (t486 * t694 + t505 * t641) * t525 + (-t504 * t527 - 0.2e1 * t626 * t627) * t634 + (-t705 - t504 * t520 + (t504 * t695 + t626 * t697) * t512) * pkin(4);
	t467 = t506 * t633 + (-t484 * t586 + t496 * t622 + t630 * t485 + (t474 * t693 + t507 * t697 + t627 * t696) * t512) * pkin(4);
	t466 = (t474 * t694 + t496 * t641) * t525 + (-t485 * t626 - t504 * t507 - t506 * t627) * t634 + (t484 * t520 - t485 * t586 + (t504 * t696 + t506 * t697) * t512) * pkin(4);
	t465 = (t475 * t490 - t476 * t677) * t481;
	t463 = (t472 * t490 - t473 * t677) * t481;
	t462 = t605 * t475 + t596 * t476 + (((t468 * t636 + t471 * t638 + t499 * t607 + t609 * t626) * t490 - (t468 * t638 + t471 * t637 + t500 * t607 + t610 * t626) * t677) * t481 + ((t600 * t490 + t602 * t677) * t573 + (t602 * t490 - t600 * t677) * t572) * t629) * t580;
	t461 = t605 * t472 + t596 * t473 + (((t466 * t636 + t467 * t638 + t499 * t608 + t506 * t609) * t490 - (t466 * t638 + t467 * t637 + t500 * t608 + t506 * t610) * t677) * t481 + ((t601 * t490 + t603 * t677) * t573 + (t603 * t490 - t601 * t677) * t572) * t629) * t580;
	t1 = [0, t461 * t576 + t463 * t570 + t570, t462 * t576 + t465 * t570 + t570, 0; 0, -t461 * t578 + t463 * t569 + t569, -t462 * t578 + t465 * t569 + t569, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobigD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:49:05
	% EndTime: 2020-04-14 18:50:36
	% DurationCPUTime: 53.06s
	% Computational Cost: add. (1275417->221), mult. (1988870->451), div. (75512->14), fcn. (1242592->19), ass. (0->223)
	t840 = pkin(7) ^ 2;
	t844 = pkin(1) ^ 2;
	t833 = sin(qJ(2));
	t836 = cos(qJ(2));
	t838 = cos(pkin(19));
	t952 = sin(pkin(19));
	t875 = -t833 * t838 + t836 * t952;
	t948 = pkin(7) * t875;
	t970 = -2 * pkin(1);
	t916 = -t948 * t970 + t844;
	t817 = t840 + t916;
	t814 = 0.1e1 / t817;
	t823 = t833 * t952 + t836 * t838;
	t821 = t823 * qJD(2);
	t843 = 0.1e1 / pkin(3);
	t813 = pkin(3) ^ 2 - pkin(8) ^ 2 + t817;
	t818 = pkin(1) + t948;
	t967 = -pkin(8) - pkin(3);
	t811 = (pkin(7) - t967) * (pkin(7) + t967) + t916;
	t966 = -pkin(8) + pkin(3);
	t812 = (pkin(7) - t966) * (pkin(7) + t966) + t916;
	t934 = t812 * t811;
	t846 = sqrt(-t934);
	t930 = t823 * t846;
	t804 = -pkin(7) * t930 + t813 * t818;
	t835 = cos(qJ(3));
	t919 = t835 * t804;
	t947 = pkin(7) * t823;
	t805 = t813 * t947 + t818 * t846;
	t832 = sin(qJ(3));
	t924 = t832 * t805;
	t886 = -t919 + t924;
	t815 = 0.1e1 / t817 ^ 2;
	t968 = pkin(1) * pkin(7);
	t913 = t815 * t968;
	t861 = t886 * t913;
	t918 = t835 * t805;
	t925 = t832 * t804;
	t878 = t925 / 0.2e1 + t918 / 0.2e1;
	t882 = 0.2e1 * (t811 + t812) * t968;
	t806 = t821 * t882;
	t809 = 0.1e1 / t846;
	t958 = -t809 / 0.2e1;
	t798 = t806 * t947 * t958;
	t914 = t818 * t970;
	t898 = -t813 + t914;
	t820 = t875 * qJD(2);
	t932 = t820 * t846;
	t791 = t798 + (t898 * t821 - t932) * pkin(7);
	t923 = t835 * t791;
	t974 = t821 * t840;
	t909 = t823 * t974;
	t892 = pkin(1) * t909;
	t957 = t809 / 0.2e1;
	t902 = t818 * t957;
	t931 = t821 * t846;
	t792 = t806 * t902 - 0.2e1 * t892 + (t820 * t813 - t931) * pkin(7);
	t928 = t832 * t792;
	t767 = (t821 * t861 + (-t923 / 0.2e1 + t928 / 0.2e1 + t878 * qJD(3)) * t814) * t843;
	t876 = t919 / 0.2e1 - t924 / 0.2e1;
	t885 = t918 + t925;
	t922 = t835 * t792;
	t929 = t832 * t791;
	t768 = (t885 * t821 * t913 + (t929 / 0.2e1 + t922 / 0.2e1 + t876 * qJD(3)) * t814) * t843;
	t829 = pkin(23) + pkin(22);
	t825 = sin(t829);
	t826 = cos(t829);
	t762 = t767 * t825 - t768 * t826;
	t841 = pkin(5) ^ 2;
	t933 = t814 * t843;
	t796 = t878 * t933;
	t797 = t876 * t933;
	t785 = t796 * t826 + t797 * t825;
	t950 = pkin(4) * t785;
	t969 = -2 * pkin(5);
	t917 = -t950 * t969 + t841;
	t965 = -pkin(9) - pkin(11);
	t776 = (pkin(4) - t965) * (pkin(4) + t965) + t917;
	t964 = -pkin(9) + pkin(11);
	t777 = (pkin(4) - t964) * (pkin(4) + t964) + t917;
	t915 = 2 * pkin(5);
	t881 = pkin(4) * (t776 + t777) * t915;
	t753 = t762 * t881;
	t842 = pkin(4) ^ 2;
	t782 = t842 + t917;
	t778 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t782;
	t783 = pkin(5) + t950;
	t897 = t783 * t969 - t778;
	t937 = t777 * t776;
	t845 = sqrt(-t937);
	t770 = 0.1e1 / t845;
	t893 = t796 * t825 - t826 * t797;
	t959 = -t893 / 0.2e1;
	t906 = t770 * t959;
	t894 = t826 * t767 + t768 * t825;
	t973 = t894 * t845;
	t732 = (t753 * t906 + t897 * t762 - t973) * pkin(4);
	t899 = t893 * t842 * t969;
	t960 = t770 / 0.2e1;
	t907 = t783 * t960;
	t976 = t762 * t845;
	t733 = t753 * t907 + t762 * t899 + (t778 * t894 - t976) * pkin(4);
	t779 = 0.1e1 / t782;
	t839 = 0.1e1 / pkin(11);
	t780 = 0.1e1 / t782 ^ 2;
	t912 = pkin(4) * pkin(5) * t780;
	t949 = pkin(4) * t893;
	t758 = t778 * t949 + t783 * t845;
	t831 = cos(pkin(21));
	t939 = t758 * t831;
	t757 = t778 * t783 - t845 * t949;
	t830 = sin(pkin(21));
	t942 = t757 * t830;
	t859 = (t939 + t942) * t912;
	t954 = t831 / 0.2e1;
	t956 = t830 / 0.2e1;
	t724 = ((t732 * t956 + t733 * t954) * t779 + t762 * t859) * t839;
	t940 = t758 * t830;
	t941 = t757 * t831;
	t860 = (t940 - t941) * t912;
	t955 = -t831 / 0.2e1;
	t725 = ((t732 * t955 + t733 * t956) * t779 + t762 * t860) * t839;
	t935 = t779 * t839;
	t751 = (t942 / 0.2e1 + t939 / 0.2e1) * t935;
	t747 = t751 ^ 2;
	t752 = (-t941 / 0.2e1 + t940 / 0.2e1) * t935;
	t749 = 0.1e1 / t752 ^ 2;
	t740 = t747 * t749 + 0.1e1;
	t738 = 0.1e1 / t740;
	t748 = 0.1e1 / t752;
	t944 = t749 * t751;
	t977 = (t724 * t748 - t725 * t944) * t738 + qJD(3) + qJD(2);
	t741 = atan2(t751, t752);
	t736 = sin(t741);
	t737 = cos(t741);
	t883 = t832 * t833 - t835 * t836;
	t884 = t832 * t836 + t833 * t835;
	t856 = -t883 * t736 + t884 * t737;
	t975 = t725 * t749;
	t963 = -t753 / 0.2e1;
	t870 = t885 * t823;
	t807 = t823 * t882;
	t951 = pkin(1) * t840;
	t794 = t807 * t902 - 0.2e1 * t823 ^ 2 * t951 + (t813 * t875 - t930) * pkin(7);
	t920 = t835 * t794;
	t888 = t807 * t958 - t813;
	t793 = (-t875 * t846 + (t888 + t914) * t823) * pkin(7);
	t927 = t832 * t793;
	t879 = t927 / 0.2e1 + t920 / 0.2e1;
	t774 = (-t879 * t814 - t870 * t913) * t843;
	t921 = t835 * t793;
	t926 = t832 * t794;
	t877 = -t921 / 0.2e1 + t926 / 0.2e1;
	t775 = (t877 * t814 + t823 * t861) * t843;
	t764 = t774 * t826 + t775 * t825;
	t754 = t764 * t881;
	t962 = -t754 / 0.2e1;
	t763 = t893 * t881;
	t961 = -t763 / 0.2e1;
	t953 = -t835 / 0.2e1;
	t945 = t748 * t975;
	t946 = 0.2e1 * (t724 * t944 - t747 * t945) / t740 ^ 2;
	t943 = t753 * t770 / t937;
	t938 = t762 * t842;
	t936 = t779 * t831;
	t834 = sin(qJ(1));
	t827 = qJD(1) * t834;
	t837 = cos(qJ(1));
	t828 = qJD(1) * t837;
	t911 = t841 * t938;
	t910 = t809 / t934 * t807 * t806;
	t908 = t943 / 0.4e1;
	t905 = t779 * t956;
	t904 = -t936 / 0.2e1;
	t903 = t936 / 0.2e1;
	t901 = t842 * t915;
	t900 = 0.4e1 * pkin(5) * t938;
	t896 = t738 * t912;
	t895 = -0.8e1 * t911;
	t891 = t779 * t780 * t911;
	t890 = t844 * t909;
	t889 = -t893 * t943 / 0.4e1;
	t887 = t831 * t891;
	t880 = 0.4e1 * t830 * t891;
	t874 = -0.4e1 * t757 * t887;
	t873 = 0.4e1 * t758 * t887;
	t872 = t764 * t880;
	t871 = t893 * t880;
	t866 = -t738 * t975 - t748 * t946;
	t765 = -t774 * t825 + t775 * t826;
	t734 = (t754 * t906 + t897 * t764 - t765 * t845) * pkin(4);
	t803 = t820 * t882 - 0.8e1 * t890;
	t772 = t798 + (t910 / 0.4e1 + t803 * t957) * t818 + (-0.4e1 * t820 * t823 - 0.2e1 * t821 * t875) * t951 + (t888 * t821 - t932) * pkin(7);
	t773 = 0.4e1 * t892 + (t931 - t823 * t910 / 0.4e1 + t898 * t820 + (-t875 * t806 / 0.2e1 - t820 * t807 / 0.2e1 - t823 * t803 / 0.2e1) * t809) * pkin(7);
	t816 = t814 * t815;
	t755 = (0.4e1 * t886 * t816 * t890 + (t773 * t953 + t832 * t772 / 0.2e1 + t879 * qJD(3)) * t814 + ((-t921 + t926) * t821 + t886 * t820 + (t885 * qJD(3) - t923 + t928) * t823) * t913) * t843;
	t756 = (-0.4e1 * t844 * t816 * t870 * t974 + (-t832 * t773 / 0.2e1 + t772 * t953 + t877 * qJD(3)) * t814 + ((-t920 - t927) * t821 - t885 * t820 + (t886 * qJD(3) - t922 - t929) * t823) * t913) * t843;
	t743 = t755 * t825 + t756 * t826;
	t865 = t732 * t764 + t734 * t762 + t743 * t757;
	t745 = (t763 * t906 - t785 * t845 + t893 * t897) * pkin(4);
	t864 = t732 * t893 + t745 * t762 + t757 * t894;
	t735 = t754 * t907 + t764 * t899 + (-t764 * t845 + t765 * t778) * pkin(4);
	t863 = t733 * t764 + t735 * t762 + t743 * t758;
	t746 = t763 * t907 + t893 * t899 + (t778 * t785 - t845 * t893) * pkin(4);
	t862 = t733 * t893 + t746 * t762 + t758 * t894;
	t858 = t944 * t946 + (-t724 * t749 + 0.2e1 * t751 * t945) * t738;
	t855 = t977 * (-t884 * t736 - t883 * t737);
	t744 = t881 * t894 + t893 * t895;
	t742 = t755 * t826 - t756 * t825;
	t731 = ((t745 * t955 + t746 * t956) * t779 + t893 * t860) * t839;
	t730 = ((t745 * t956 + t746 * t954) * t779 + t893 * t859) * t839;
	t729 = t743 * t881 + t764 * t895;
	t728 = ((t734 * t955 + t735 * t956) * t779 + t764 * t860) * t839;
	t727 = ((t734 * t956 + t735 * t954) * t779 + t764 * t859) * t839;
	t726 = t893 * t900 + (t976 + t763 * t889 + t897 * t894 + (t744 * t959 + t785 * t963 + t894 * t961) * t770) * pkin(4);
	t723 = (t744 * t960 + t763 * t908) * t783 + (-t762 * t785 - 0.2e1 * t893 * t894) * t901 + (-t973 - t762 * t778 + (t762 * t961 + t893 * t963) * t770) * pkin(4);
	t722 = t764 * t900 + (-t742 * t845 + t754 * t889 + t897 * t743 + (t729 * t959 + t765 * t963 + t894 * t962) * t770) * pkin(4);
	t721 = (t729 * t960 + t754 * t908) * t783 + (-t743 * t893 - t762 * t765 - t764 * t894) * t901 + (t742 * t778 - t743 * t845 + (t762 * t962 + t764 * t963) * t770) * pkin(4);
	t720 = (t730 * t748 - t731 * t944) * t738;
	t718 = (t727 * t748 - t728 * t944) * t738;
	t716 = t866 * t730 + t858 * t731 + (((t723 * t903 + t726 * t905 + t757 * t871 + t873 * t893) * t748 - (t723 * t905 + t726 * t904 + t758 * t871 + t874 * t893) * t944) * t738 + ((t862 * t748 + t864 * t944) * t831 + (t864 * t748 - t862 * t944) * t830) * t896) * t839;
	t715 = t866 * t727 + t858 * t728 + (((t721 * t903 + t722 * t905 + t757 * t872 + t764 * t873) * t748 - (t721 * t905 + t722 * t904 + t758 * t872 + t764 * t874) * t944) * t738 + ((t863 * t748 + t865 * t944) * t831 + (t865 * t748 - t863 * t944) * t830) * t896) * t839;
	t1 = [0, t715 * t834 + t718 * t828 + t828, t716 * t834 + t720 * t828 + t828, -t856 * t827 + t855 * t837; 0, -t715 * t837 + t718 * t827 + t827, -t716 * t837 + t720 * t827 + t827, t856 * t828 + t855 * t834; 0, 0, 0, t977 * t856;];
	JgD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobigD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:02
	% EndTime: 2020-04-14 18:43:06
	% DurationCPUTime: 1.10s
	% Computational Cost: add. (12594->80), mult. (20244->170), div. (678->9), fcn. (12648->10), ass. (0->93)
	t275 = 2 * pkin(7);
	t210 = sin(qJ(2));
	t214 = cos(pkin(19));
	t263 = sin(pkin(19));
	t264 = cos(qJ(2));
	t208 = t210 * t263 + t264 * t214;
	t261 = pkin(1) * t208;
	t206 = t208 * qJD(2);
	t219 = pkin(1) ^ 2;
	t230 = -t210 * t214 + t264 * t263;
	t262 = pkin(1) * t230;
	t245 = t262 * t275 + t219;
	t269 = (-pkin(8) - pkin(3));
	t196 = ((pkin(7) - t269) * (pkin(7) + t269)) + t245;
	t268 = (-pkin(8) + pkin(3));
	t197 = ((pkin(7) - t268) * (pkin(7) + t268)) + t245;
	t270 = pkin(1) * pkin(7);
	t236 = (t196 + t197) * t270;
	t191 = t206 * t236;
	t254 = t197 * t196;
	t220 = sqrt(-t254);
	t194 = 0.1e1 / t220;
	t273 = t191 * t194;
	t187 = t261 * t273;
	t218 = pkin(7) ^ 2;
	t202 = t218 + t245;
	t198 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t202;
	t203 = -pkin(7) - t262;
	t243 = t203 * t275;
	t239 = -t198 + t243;
	t205 = t230 * qJD(2);
	t252 = t205 * t220;
	t177 = -t187 + (t239 * t206 - t252) * pkin(1);
	t241 = t219 * t208 * t206;
	t237 = pkin(7) * t241;
	t251 = t206 * t220;
	t255 = t194 * t203;
	t178 = -t191 * t255 - 0.2e1 * t237 + (t205 * t198 - t251) * pkin(1);
	t250 = t208 * t220;
	t189 = -pkin(1) * t250 - t203 * t198;
	t215 = cos(pkin(18));
	t247 = t215 * t189;
	t190 = t198 * t261 - t203 * t220;
	t212 = sin(pkin(18));
	t249 = t212 * t190;
	t199 = 0.1e1 / t202;
	t217 = 0.1e1 / pkin(8);
	t253 = t199 * t217;
	t185 = (t247 / 0.2e1 - t249 / 0.2e1) * t253;
	t182 = 0.1e1 / t185 ^ 2;
	t200 = 0.1e1 / t202 ^ 2;
	t242 = t200 * t270;
	t227 = (t247 - t249) * t242;
	t265 = t215 / 0.2e1;
	t267 = -t212 / 0.2e1;
	t274 = ((t177 * t265 + t178 * t267) * t199 + t206 * t227) * t217 * t182;
	t192 = t208 * t236;
	t272 = t194 * t192;
	t235 = t218 * t241;
	t271 = -t194 * (t205 * t236 - 0.4e1 * t235) - 0.1e1 / t254 * t191 * t272;
	t181 = 0.1e1 / t185;
	t266 = t212 / 0.2e1;
	t260 = t219 * pkin(7);
	t246 = t215 * t190;
	t256 = t189 * t212;
	t226 = (t246 + t256) * t242;
	t169 = ((t177 * t266 + t178 * t265) * t199 + t206 * t226) * t217;
	t186 = (t246 / 0.2e1 + t256 / 0.2e1) * t253;
	t184 = t186 ^ 2;
	t176 = t184 * t182 + 0.1e1;
	t257 = t182 * t186;
	t258 = t181 * t274;
	t259 = (t169 * t257 - t184 * t258) / t176 ^ 2;
	t248 = t212 * t199;
	t238 = -t198 - t272;
	t179 = (-t230 * t220 + (t238 + t243) * t208) * pkin(1);
	t180 = -t192 * t255 - 0.2e1 * t208 ^ 2 * t260 + (t198 * t230 - t250) * pkin(1);
	t172 = ((t179 * t265 + t180 * t267) * t199 + t208 * t227) * t217;
	t173 = ((t179 * t266 + t180 * t265) * t199 + t208 * t226) * t217;
	t174 = 0.1e1 / t176;
	t244 = qJD(1) * (-t172 * t257 + t173 * t181) * t174;
	t240 = t199 * t265;
	t234 = t199 * t200 * t235;
	t232 = t212 * t234;
	t231 = 0.4e1 * t215 * t234;
	t229 = t177 * t208 + t179 * t206 + t189 * t205;
	t228 = t178 * t208 + t180 * t206 + t190 * t205;
	t213 = cos(qJ(1));
	t211 = sin(qJ(1));
	t171 = 0.4e1 * t237 + (-t230 * t273 + t251 + t271 * t208 + (t239 - t272) * t205) * pkin(1);
	t170 = -t187 + t271 * t203 + (-0.4e1 * t205 * t208 - 0.2e1 * t206 * t230) * t260 + (t238 * t206 - t252) * pkin(1);
	t165 = (-t174 * t274 - 0.2e1 * t181 * t259) * t173 + (0.2e1 * t257 * t259 + (-t169 * t182 + 0.2e1 * t186 * t258) * t174) * t172 + ((t170 * t240 + t190 * t231 + t171 * t248 / 0.2e1 + 0.4e1 * t189 * t232) * t181 - (t171 * t240 + t189 * t231 - t170 * t248 / 0.2e1 - 0.4e1 * t190 * t232) * t257 + ((t228 * t181 - t229 * t257) * t215 + (t229 * t181 + t228 * t257) * t212) * t242) * t174 * t217;
	t1 = [0, t165 * t211 + t213 * t244, 0, 0; 0, -t165 * t213 + t211 * t244, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobigD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:04
	% EndTime: 2020-04-14 18:43:08
	% DurationCPUTime: 1.14s
	% Computational Cost: add. (12596->81), mult. (20246->170), div. (678->9), fcn. (12650->10), ass. (0->93)
	t238 = sin(qJ(2));
	t241 = cos(pkin(19));
	t289 = sin(pkin(19));
	t290 = cos(qJ(2));
	t234 = t238 * t289 + t290 * t241;
	t286 = pkin(7) * t234;
	t232 = t234 * qJD(2);
	t245 = pkin(1) ^ 2;
	t256 = -t238 * t241 + t290 * t289;
	t287 = pkin(7) * t256;
	t297 = -2 * pkin(1);
	t271 = -t287 * t297 + t245;
	t295 = -pkin(8) - pkin(3);
	t222 = (pkin(7) - t295) * (pkin(7) + t295) + t271;
	t294 = -pkin(8) + pkin(3);
	t223 = (pkin(7) - t294) * (pkin(7) + t294) + t271;
	t296 = pkin(1) * pkin(7);
	t262 = (t222 + t223) * t296;
	t217 = t232 * t262;
	t280 = t223 * t222;
	t246 = sqrt(-t280);
	t220 = 0.1e1 / t246;
	t300 = t217 * t220;
	t213 = t286 * t300;
	t243 = pkin(7) ^ 2;
	t228 = t243 + t271;
	t224 = pkin(3) ^ 2 - pkin(8) ^ 2 + t228;
	t229 = pkin(1) + t287;
	t270 = t229 * t297;
	t265 = -t224 + t270;
	t231 = t256 * qJD(2);
	t277 = t231 * t246;
	t203 = -t213 + (t265 * t232 - t277) * pkin(7);
	t268 = t232 * t234 * t243;
	t263 = pkin(1) * t268;
	t276 = t232 * t246;
	t281 = t220 * t229;
	t204 = t217 * t281 - 0.2e1 * t263 + (t231 * t224 - t276) * pkin(7);
	t275 = t234 * t246;
	t215 = -pkin(7) * t275 + t224 * t229;
	t237 = cos(pkin(23));
	t273 = t237 * t215;
	t216 = t224 * t286 + t229 * t246;
	t236 = sin(pkin(23));
	t274 = t236 * t216;
	t225 = 0.1e1 / t228;
	t244 = 0.1e1 / pkin(3);
	t278 = t225 * t244;
	t211 = (-t273 / 0.2e1 + t274 / 0.2e1) * t278;
	t208 = 0.1e1 / t211 ^ 2;
	t226 = 0.1e1 / t228 ^ 2;
	t269 = t226 * t296;
	t253 = (-t273 + t274) * t269;
	t292 = -t237 / 0.2e1;
	t293 = t236 / 0.2e1;
	t301 = ((t203 * t292 + t204 * t293) * t225 + t232 * t253) * t244 * t208;
	t218 = t234 * t262;
	t299 = t220 * t218;
	t260 = t245 * t268;
	t298 = 0.1e1 / t280 * t217 * t299 + t220 * (t231 * t262 - 0.4e1 * t260);
	t207 = 0.1e1 / t211;
	t291 = t237 / 0.2e1;
	t288 = pkin(1) * t243;
	t272 = t237 * t216;
	t282 = t215 * t236;
	t252 = (t272 + t282) * t269;
	t195 = ((t203 * t293 + t204 * t291) * t225 + t232 * t252) * t244;
	t212 = (t272 / 0.2e1 + t282 / 0.2e1) * t278;
	t210 = t212 ^ 2;
	t202 = t208 * t210 + 0.1e1;
	t283 = t208 * t212;
	t284 = t207 * t301;
	t285 = (t195 * t283 - t210 * t284) / t202 ^ 2;
	t279 = t225 * t237;
	t267 = t225 * t293;
	t264 = -t224 - t299;
	t205 = (-t256 * t246 + (t264 + t270) * t234) * pkin(7);
	t206 = t218 * t281 - 0.2e1 * t234 ^ 2 * t288 + (t224 * t256 - t275) * pkin(7);
	t198 = ((t205 * t292 + t206 * t293) * t225 + t234 * t253) * t244;
	t199 = ((t205 * t293 + t206 * t291) * t225 + t234 * t252) * t244;
	t200 = 0.1e1 / t202;
	t266 = qJD(1) * ((-t198 * t283 + t199 * t207) * t200 + 0.1e1);
	t259 = t225 * t226 * t260;
	t258 = t237 * t259;
	t257 = 0.4e1 * t236 * t259;
	t255 = t203 * t234 + t205 * t232 + t215 * t231;
	t254 = t204 * t234 + t206 * t232 + t216 * t231;
	t240 = cos(qJ(1));
	t239 = sin(qJ(1));
	t197 = 0.4e1 * t263 + (-t256 * t300 + t276 - t298 * t234 + (t265 - t299) * t231) * pkin(7);
	t196 = -t213 + t298 * t229 + (-0.4e1 * t231 * t234 - 0.2e1 * t232 * t256) * t288 + (t264 * t232 - t277) * pkin(7);
	t191 = (-t200 * t301 - 0.2e1 * t207 * t285) * t199 + (0.2e1 * t283 * t285 + (-t195 * t208 + 0.2e1 * t212 * t284) * t200) * t198 + ((t196 * t279 / 0.2e1 + 0.4e1 * t216 * t258 + t197 * t267 + t215 * t257) * t207 - (-t197 * t279 / 0.2e1 - 0.4e1 * t215 * t258 + t196 * t267 + t216 * t257) * t283 + ((t254 * t207 + t255 * t283) * t237 + (t255 * t207 - t254 * t283) * t236) * t269) * t200 * t244;
	t1 = [0, t191 * t239 + t240 * t266, 0, 0; 0, -t191 * t240 + t239 * t266, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobigD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:02
	% EndTime: 2020-04-14 18:43:05
	% DurationCPUTime: 0.93s
	% Computational Cost: add. (6352->66), mult. (9880->147), div. (186->9), fcn. (6154->8), ass. (0->79)
	t190 = (pkin(1) ^ 2);
	t242 = -4 * t190;
	t188 = pkin(6) ^ 2;
	t183 = cos(pkin(20));
	t185 = cos(qJ(3));
	t225 = sin(pkin(20));
	t232 = sin(qJ(3));
	t180 = t232 * t183 + t185 * t225;
	t228 = pkin(6) * t180;
	t237 = 2 * pkin(1);
	t214 = t228 * t237 + t188;
	t175 = t190 + t214;
	t173 = 0.1e1 / t175 ^ 2;
	t230 = pkin(1) * t173;
	t181 = -t185 * t183 + t232 * t225;
	t179 = t181 * qJD(3);
	t236 = pkin(1) * pkin(6);
	t211 = t179 * t236;
	t235 = (-pkin(2) - pkin(13));
	t169 = ((pkin(1) - t235) * (pkin(1) + t235)) + t214;
	t234 = (-pkin(2) + pkin(13));
	t170 = ((pkin(1) - t234) * (pkin(1) + t234)) + t214;
	t215 = t169 + t170;
	t164 = t215 * t211;
	t220 = t170 * t169;
	t191 = sqrt(-t220);
	t167 = 0.1e1 / t191;
	t241 = t164 * t167;
	t202 = t215 * t236;
	t165 = t181 * t202;
	t239 = t167 * t165;
	t178 = t180 * qJD(3);
	t218 = t181 * t188;
	t206 = t179 * t218;
	t238 = -t167 * (t178 * t202 + t206 * t242) - 0.1e1 / t220 * t164 * t239;
	t171 = pkin(2) ^ 2 - pkin(13) ^ 2 + t175;
	t176 = -pkin(1) - t228;
	t217 = t181 * t191;
	t162 = -pkin(6) * t217 - t176 * t171;
	t158 = 0.1e1 / t162;
	t172 = 0.1e1 / t175;
	t159 = 0.1e1 / t162 ^ 2;
	t233 = t172 / 0.2e1;
	t231 = pkin(1) * t172;
	t229 = pkin(2) * t175;
	t227 = pkin(6) * t181;
	t226 = t176 * pkin(1);
	t221 = t167 * t176;
	t152 = -t165 * t221 - 0.2e1 * t188 * t181 ^ 2 * pkin(1) + (t180 * t171 - t217) * pkin(6);
	t163 = t171 * t227 - t176 * t191;
	t189 = 0.1e1 / pkin(2);
	t205 = t227 * t230;
	t148 = (t152 * t233 + t163 * t205) * t189;
	t224 = t148 * t158;
	t156 = t227 * t241;
	t219 = t178 * t191;
	t149 = -t156 + (-t219 - (t171 - 0.2e1 * t226) * t179) * pkin(6);
	t223 = t149 * t158 * t159;
	t222 = t159 * t163;
	t184 = sin(qJ(1));
	t213 = qJD(1) * t184;
	t186 = cos(qJ(1));
	t212 = qJD(1) * t186;
	t210 = t172 * t173 * t242;
	t161 = t163 ^ 2;
	t155 = t161 * t159 + 0.1e1;
	t153 = 0.1e1 / t155;
	t209 = t153 * t229;
	t208 = t158 * t229;
	t204 = t171 + t239;
	t151 = (-t180 * t191 + (-t204 + 0.2e1 * t226) * t181) * pkin(6);
	t147 = (t151 * t233 + t162 * t205) * t189;
	t207 = t147 * t222;
	t200 = 0.2e1 * t147 * t163 * t229;
	t197 = t178 * t171 - t179 * t191;
	t150 = t197 * pkin(6) - t164 * t221 - t206 * t237;
	t145 = 0.2e1 * (-t207 + t224) * t209;
	t144 = 0.2e1 * (-0.2e1 * t148 * t208 + t159 * t200) * (t150 * t222 - t161 * t223) / t155 ^ 2 + 0.2e1 * (-t148 * t149 - (-(t162 * t210 - 0.2e1 * t231) * t206 + ((-t180 * t241 + t238 * t181 - t197) * t233 + (t149 * t181 + t151 * t179) * t230 + (-t233 * t239 + (t162 * t173 + t176 * t172) * pkin(1)) * t178) * pkin(6)) * t189 * t163 - t147 * t150) * t159 * t209 + 0.2e1 * (-(0.2e1 * t224 - 0.2e1 * t207) * pkin(2) * t211 + ((-0.4e1 * pkin(1) * t178 * t218 + t238 * t176 - t156) * t233 - (t163 * t181 * t210 + t180 * t231) * t188 * t179 + ((-t204 * t179 - t219) * t233 + (t150 * t181 + t152 * t179 + t163 * t178) * t230) * pkin(6)) * t189 * t208 + t200 * t223) * t153;
	t1 = [0, t212, t144 * t184 + t145 * t212, 0; 0, t213, -t144 * t186 + t145 * t213, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobigD_rot_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:07
	% EndTime: 2020-04-14 18:43:12
	% DurationCPUTime: 1.19s
	% Computational Cost: add. (7622->82), mult. (11768->185), div. (258->13), fcn. (7134->8), ass. (0->95)
	t355 = -2 * pkin(1);
	t280 = cos(pkin(20));
	t282 = cos(qJ(3));
	t338 = sin(pkin(20));
	t345 = sin(qJ(3));
	t277 = t345 * t280 + t282 * t338;
	t278 = -t282 * t280 + t345 * t338;
	t341 = pkin(6) * t277;
	t319 = pkin(1) * t341;
	t274 = 0.2e1 * t319;
	t286 = pkin(6) ^ 2;
	t323 = t274 + t286;
	t348 = (-pkin(2) - pkin(13));
	t262 = ((pkin(1) - t348) * (pkin(1) + t348)) + t323;
	t347 = (-pkin(2) + pkin(13));
	t263 = ((pkin(1) - t347) * (pkin(1) + t347)) + t323;
	t331 = t263 * t262;
	t290 = sqrt(-t331);
	t287 = pkin(2) ^ 2;
	t289 = pkin(1) ^ 2;
	t322 = t286 + t289;
	t311 = -pkin(13) ^ 2 + t322;
	t268 = t274 + t287 + t311;
	t324 = t262 + t263;
	t349 = pkin(1) * pkin(6);
	t306 = t324 * t349;
	t255 = t278 * t306;
	t260 = 0.1e1 / t290;
	t333 = t260 * t255;
	t309 = t268 + t333;
	t273 = -pkin(1) - t341;
	t339 = t273 * pkin(1);
	t240 = (-t277 * t290 + (-t309 + 0.2e1 * t339) * t278) * pkin(6);
	t327 = t278 * t290;
	t315 = pkin(6) * t327;
	t252 = -t268 * t273 - t315;
	t288 = 0.1e1 / pkin(2);
	t340 = pkin(6) * t278;
	t272 = t274 + t322;
	t270 = 0.1e1 / t272 ^ 2;
	t343 = pkin(1) * t270;
	t310 = t340 * t343;
	t269 = 0.1e1 / t272;
	t346 = t269 / 0.2e1;
	t235 = (t240 * t346 + t252 * t310) * t288;
	t332 = t260 * t273;
	t241 = -t255 * t332 + t286 * t278 ^ 2 * t355 + (t268 * t277 - t327) * pkin(6);
	t253 = t268 * t340 - t273 * t290;
	t236 = (t241 * t346 + t253 * t310) * t288;
	t248 = 0.1e1 / t252;
	t249 = 0.1e1 / t252 ^ 2;
	t335 = t249 * t253;
	t354 = -t235 * t335 + t236 * t248;
	t342 = pkin(2) * t272;
	t353 = 0.4e1 * t235 * t253 * t342;
	t267 = t287 - t311 - 0.2e1 * t319;
	t264 = 0.1e1 / t267;
	t265 = 0.1e1 / t267 ^ 2;
	t350 = 0.2e1 * t260;
	t344 = pkin(1) * t269;
	t276 = t278 * qJD(3);
	t320 = t276 * t349;
	t254 = t324 * t320;
	t334 = t254 * t278;
	t246 = t260 * pkin(6) * t334;
	t275 = t277 * qJD(3);
	t329 = t275 * t290;
	t238 = -t246 + (-t329 - (t268 - 0.2e1 * t339) * t276) * pkin(6);
	t336 = t238 * t248 * t249;
	t330 = t263 * t265;
	t328 = t278 * t286;
	t298 = t275 * t268 - t276 * t290;
	t312 = t276 * t328;
	t239 = t298 * pkin(6) - t254 * t332 + t312 * t355;
	t251 = t253 ^ 2;
	t245 = t249 * t251 + 0.1e1;
	t243 = 0.1e1 / t245;
	t304 = t289 * t312;
	t247 = t275 * t306 - 0.4e1 * t304;
	t258 = -t262 * t330 + 0.1e1;
	t256 = 0.1e1 / t258;
	t266 = t264 * t265;
	t305 = 0.4e1 / t331 * t254 * t333;
	t299 = -t305 / 0.4e1;
	t301 = pkin(1) * t265 * t315;
	t313 = t264 * t333;
	t316 = t248 * t342;
	t317 = t243 * t342;
	t318 = -0.4e1 * t269 * t270 * t289;
	t321 = t265 * t349;
	t325 = -(-0.2e1 * t313 + 0.4e1 * t301) / t258 ^ 2 * (-t330 + (-0.2e1 * t263 * t266 - t265) * t262) * t320 + (t264 * t305 / 0.4e1 + (0.8e1 * t266 * t304 - 0.2e1 * t275 * t321) * t290 + (t247 * t264 / 0.2e1 + (-t255 * t276 - t334) * t321) * t350) * t256 + (-0.4e1 * t236 * t316 + t249 * t353) * (t239 * t335 - t251 * t336) / t245 ^ 2 - 0.2e1 * (t236 * t238 + (-(t252 * t318 - 0.2e1 * t344) * t312 + ((t278 * t299 + (-t277 * t254 / 0.2e1 - t275 * t255 / 0.2e1 - t278 * t247 / 0.2e1) * t350 - t298) * t346 + (t273 * t275 * t269 + (t238 * t278 + t240 * t276 + t252 * t275) * t270) * pkin(1)) * pkin(6)) * t288 * t253 + t235 * t239) * t249 * t317 + (-0.4e1 * t354 * pkin(2) * t320 + 0.2e1 * ((-0.4e1 * pkin(1) * t275 * t328 - t246 + (-t260 * t247 + t299) * t273) * t346 - (t253 * t278 * t318 + t277 * t344) * t286 * t276 + ((-t309 * t276 - t329) * t346 + (t239 * t278 + t241 * t276 + t275 * t253) * t343) * pkin(6)) * t288 * t316 + t336 * t353) * t243;
	t308 = qJD(1) * (0.2e1 * t354 * t317 + (-0.2e1 * t301 + t313) * t256);
	t283 = cos(qJ(1));
	t281 = sin(qJ(1));
	t1 = [0, qJD(1) * t283, t325 * t281 + t283 * t308, 0; 0, qJD(1) * t281, t281 * t308 - t325 * t283, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobigD_rot_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:45:11
	% EndTime: 2020-04-14 18:45:52
	% DurationCPUTime: 24.27s
	% Computational Cost: add. (542986->224), mult. (846766->491), div. (31210->18), fcn. (529626->16), ass. (0->228)
	t578 = pkin(7) ^ 2;
	t582 = pkin(1) ^ 2;
	t572 = sin(qJ(2));
	t576 = cos(pkin(19));
	t700 = sin(pkin(19));
	t701 = cos(qJ(2));
	t601 = -t572 * t576 + t701 * t700;
	t693 = pkin(7) * t601;
	t722 = -2 * pkin(1);
	t658 = -t693 * t722 + t582;
	t558 = t578 + t658;
	t555 = 0.1e1 / t558;
	t564 = t572 * t700 + t701 * t576;
	t562 = t564 * qJD(2);
	t581 = 0.1e1 / pkin(3);
	t554 = pkin(3) ^ 2 - pkin(8) ^ 2 + t558;
	t559 = pkin(1) + t693;
	t719 = -pkin(8) - pkin(3);
	t552 = (pkin(7) - t719) * (pkin(7) + t719) + t658;
	t718 = -pkin(8) + pkin(3);
	t553 = (pkin(7) - t718) * (pkin(7) + t718) + t658;
	t681 = t553 * t552;
	t584 = sqrt(-t681);
	t676 = t564 * t584;
	t545 = -pkin(7) * t676 + t554 * t559;
	t574 = cos(qJ(3));
	t662 = t574 * t545;
	t692 = pkin(7) * t564;
	t546 = t554 * t692 + t559 * t584;
	t571 = sin(qJ(3));
	t667 = t571 * t546;
	t616 = -t662 + t667;
	t556 = 0.1e1 / t558 ^ 2;
	t720 = pkin(1) * pkin(7);
	t654 = t556 * t720;
	t596 = t616 * t654;
	t661 = t574 * t546;
	t668 = t571 * t545;
	t607 = t668 / 0.2e1 + t661 / 0.2e1;
	t614 = 0.2e1 * (t552 + t553) * t720;
	t547 = t562 * t614;
	t550 = 0.1e1 / t584;
	t707 = -t550 / 0.2e1;
	t539 = t547 * t692 * t707;
	t655 = t559 * t722;
	t639 = -t554 + t655;
	t561 = t601 * qJD(2);
	t678 = t561 * t584;
	t526 = t539 + (t639 * t562 - t678) * pkin(7);
	t666 = t574 * t526;
	t727 = t562 * t578;
	t647 = t564 * t727;
	t629 = pkin(1) * t647;
	t706 = t550 / 0.2e1;
	t643 = t559 * t706;
	t677 = t562 * t584;
	t527 = t547 * t643 - 0.2e1 * t629 + (t561 * t554 - t677) * pkin(7);
	t671 = t571 * t527;
	t495 = (t562 * t596 + (-t666 / 0.2e1 + t671 / 0.2e1 + t607 * qJD(3)) * t555) * t581;
	t605 = t662 / 0.2e1 - t667 / 0.2e1;
	t615 = t661 + t668;
	t665 = t574 * t527;
	t672 = t571 * t526;
	t496 = (t615 * t562 * t654 + (t672 / 0.2e1 + t665 / 0.2e1 + t605 * qJD(3)) * t555) * t581;
	t568 = pkin(23) + pkin(22);
	t566 = sin(t568);
	t567 = cos(t568);
	t490 = t495 * t566 - t496 * t567;
	t580 = pkin(4) ^ 2;
	t579 = pkin(5) ^ 2;
	t679 = t555 * t581;
	t537 = t607 * t679;
	t538 = t605 * t679;
	t517 = t537 * t567 + t538 * t566;
	t696 = pkin(5) * t517;
	t721 = -2 * pkin(4);
	t659 = -t696 * t721 + t579;
	t514 = t580 + t659;
	t510 = pkin(9) ^ 2 - pkin(11) ^ 2 + t514;
	t717 = -pkin(9) - pkin(11);
	t508 = (pkin(4) - t717) * (pkin(4) + t717) + t659;
	t716 = -pkin(9) + pkin(11);
	t509 = (pkin(4) - t716) * (pkin(4) + t716) + t659;
	t685 = t509 * t508;
	t583 = sqrt(-t685);
	t633 = t567 * t495 + t496 * t566;
	t731 = -t490 * t583 + t633 * t510;
	t656 = 2 * pkin(4);
	t557 = t555 * t556;
	t628 = t582 * t647;
	t617 = t557 * t628;
	t730 = 0.4e1 * t617;
	t613 = pkin(5) * (t508 + t509) * t656;
	t472 = t490 * t613;
	t632 = t537 * t566 - t567 * t538;
	t640 = t632 * t579 * t721;
	t515 = -pkin(4) - t696;
	t498 = 0.1e1 / t583;
	t712 = -t498 / 0.2e1;
	t645 = t515 * t712;
	t462 = t731 * pkin(5) + t472 * t645 + t490 * t640;
	t695 = pkin(5) * t632;
	t485 = -t510 * t515 - t583 * t695;
	t482 = 0.1e1 / t485 ^ 2;
	t486 = t510 * t695 - t515 * t583;
	t484 = t486 ^ 2;
	t475 = t482 * t484 + 0.1e1;
	t688 = t482 * t486;
	t638 = t515 * t656 - t510;
	t708 = -t632 / 0.2e1;
	t644 = t498 * t708;
	t725 = t633 * t583;
	t461 = (t472 * t644 + t638 * t490 - t725) * pkin(5);
	t481 = 0.1e1 / t485;
	t690 = t461 * t481 * t482;
	t729 = 0.2e1 * (t462 * t688 - t484 * t690) / t475 ^ 2;
	t570 = cos(pkin(23));
	t674 = t570 * t545;
	t569 = sin(pkin(23));
	t675 = t569 * t546;
	t535 = (-t674 / 0.2e1 + t675 / 0.2e1) * t679;
	t532 = 0.1e1 / t535 ^ 2;
	t598 = (-t674 + t675) * t654;
	t704 = -t570 / 0.2e1;
	t705 = t569 / 0.2e1;
	t728 = ((t526 * t704 + t527 * t705) * t555 + t562 * t598) * t581 * t532;
	t473 = 0.1e1 / t475;
	t627 = pkin(4) * pkin(5) * pkin(9) * t473 * t490;
	t691 = pkin(9) * t514;
	t651 = t473 * t691;
	t631 = t482 * t651;
	t650 = t481 * t691;
	t724 = -t461 * t631 - 0.2e1 * t481 * t627 - t650 * t729;
	t649 = t486 * t691;
	t630 = t482 * t649;
	t723 = 0.2e1 * t473 * t649 * t690 - t462 * t631 + 0.2e1 * t627 * t688 + t630 * t729;
	t511 = 0.1e1 / t514;
	t531 = 0.1e1 / t535;
	t512 = 0.1e1 / t514 ^ 2;
	t715 = -t472 / 0.2e1;
	t603 = t564 * t615;
	t548 = t564 * t614;
	t699 = pkin(1) * t578;
	t529 = t548 * t643 - 0.2e1 * t564 ^ 2 * t699 + (t554 * t601 - t676) * pkin(7);
	t663 = t574 * t529;
	t625 = t548 * t707 - t554;
	t528 = (-t601 * t584 + (t625 + t655) * t564) * pkin(7);
	t670 = t571 * t528;
	t608 = t670 / 0.2e1 + t663 / 0.2e1;
	t506 = (-t608 * t555 - t603 * t654) * t581;
	t664 = t574 * t528;
	t669 = t571 * t529;
	t606 = -t664 / 0.2e1 + t669 / 0.2e1;
	t507 = (t606 * t555 + t564 * t596) * t581;
	t492 = t506 * t567 + t507 * t566;
	t476 = t492 * t613;
	t714 = -t476 / 0.2e1;
	t491 = t632 * t613;
	t713 = -t491 / 0.2e1;
	t544 = t561 * t614 - 0.8e1 * t628;
	t648 = t550 / t681 * t548 * t547;
	t502 = t539 + (t648 / 0.4e1 + t544 * t706) * t559 + (-0.4e1 * t561 * t564 - 0.2e1 * t562 * t601) * t699 + (t625 * t562 - t678) * pkin(7);
	t711 = t502 / 0.2e1;
	t503 = 0.4e1 * t629 + (t677 - t564 * t648 / 0.4e1 + t639 * t561 + (-t601 * t547 / 0.2e1 - t561 * t548 / 0.2e1 - t564 * t544 / 0.2e1) * t550) * pkin(7);
	t710 = -t503 / 0.2e1;
	t709 = t511 / 0.2e1;
	t703 = t570 / 0.2e1;
	t702 = -t574 / 0.2e1;
	t698 = pkin(4) * t511;
	t697 = pkin(4) * t512;
	t577 = 0.1e1 / pkin(9);
	t694 = pkin(5) * t577;
	t673 = t570 * t546;
	t682 = t545 * t569;
	t597 = (t673 + t682) * t654;
	t501 = ((t526 * t705 + t527 * t703) * t555 + t562 * t597) * t581;
	t536 = (t673 / 0.2e1 + t682 / 0.2e1) * t679;
	t534 = t536 ^ 2;
	t523 = t532 * t534 + 0.1e1;
	t683 = t532 * t536;
	t686 = t531 * t728;
	t689 = 0.2e1 * (t501 * t683 - t534 * t686) / t523 ^ 2;
	t687 = t490 * t579;
	t684 = t511 * t515;
	t680 = t555 * t570;
	t477 = (t616 * t730 + (t608 * qJD(3) + t503 * t702 + t571 * t711) * t555 + ((-t664 + t669) * t562 + t616 * t561 + (t615 * qJD(3) - t666 + t671) * t564) * t654) * t581;
	t478 = (-0.4e1 * t582 * t557 * t603 * t727 + (t606 * qJD(3) + t502 * t702 + t571 * t710) * t555 + ((-t663 - t670) * t562 - t615 * t561 + (t616 * qJD(3) - t665 - t672) * t564) * t654) * t581;
	t468 = t477 * t566 + t478 * t567;
	t634 = -0.8e1 * t580 * t687;
	t458 = t468 * t613 + t492 * t634;
	t493 = -t506 * t566 + t507 * t567;
	t463 = (t476 * t644 + t638 * t492 - t493 * t583) * pkin(5);
	t653 = pkin(5) * t697;
	t637 = t485 * t653;
	t459 = (t463 * t709 + t492 * t637) * t577;
	t464 = t476 * t645 + t492 * t640 + (-t492 * t583 + t493 * t510) * pkin(5);
	t636 = t486 * t653;
	t460 = (t464 * t709 + t492 * t636) * t577;
	t467 = t477 * t567 - t478 * t566;
	t504 = ((t528 * t704 + t529 * t705) * t555 + t564 * t598) * t581;
	t505 = ((t528 * t705 + t529 * t703) * t555 + t564 * t597) * t581;
	t521 = 0.1e1 / t523;
	t652 = 0.4e1 * t511 * t512 * t580;
	t595 = t577 * (t485 * t652 + 0.2e1 * t698) * t687;
	t599 = t527 * t564 + t529 * t562 + t546 * t561;
	t600 = t526 * t564 + t528 * t562 + t545 * t561;
	t604 = t569 * t730;
	t610 = t570 * t617;
	t618 = t473 * t630;
	t619 = t473 * t577 * t650;
	t646 = -t472 * t498 / t685 / 0.4e1;
	t626 = t632 * t646;
	t635 = t486 * t652;
	t641 = t579 * t656;
	t642 = t555 * t705;
	t660 = 0.2e1 * (((t458 * t712 + t476 * t646) * t515 + (-t468 * t632 - t492 * t633) * t641) * t709 + (t492 * t635 - t493 * t698) * t687 + ((t467 * t510 - t468 * t583 + (t490 * t714 + t492 * t715) * t498) * t709 + (t462 * t492 + t464 * t490 + t468 * t486) * t697) * pkin(5)) * t619 - 0.2e1 * (t492 * t595 + ((-t467 * t583 + t476 * t626 - t468 * t510 + (t458 * t708 + t493 * t715 + t633 * t714) * t498) * t709 + (t468 * t684 + (t461 * t492 + t463 * t490 + t468 * t485) * t512) * pkin(4)) * t694) * t618 + 0.2e1 * t724 * t460 + 0.2e1 * t723 * t459 + (-t521 * t728 - t531 * t689) * t505 + (t683 * t689 + (-t501 * t532 + 0.2e1 * t536 * t686) * t521) * t504 + ((t503 * t642 + t545 * t604 + 0.4e1 * t546 * t610 + t680 * t711) * t531 - (t502 * t642 - 0.4e1 * t545 * t610 + t546 * t604 + t680 * t710) * t683 + ((t599 * t531 + t600 * t683) * t570 + (t600 * t531 - t599 * t683) * t569) * t654) * t521 * t581;
	t470 = (t491 * t644 - t517 * t583 + t632 * t638) * pkin(5);
	t465 = (t470 * t709 + t632 * t637) * t577;
	t471 = t491 * t645 + t632 * t640 + (t510 * t517 - t583 * t632) * pkin(5);
	t466 = (t471 * t709 + t632 * t636) * t577;
	t623 = 0.2e1 * t651;
	t657 = qJD(1) * (-t465 * t688 + t466 * t481) * t623;
	t624 = qJD(1) * ((-t459 * t688 + t460 * t481) * t623 + (-t504 * t683 + t505 * t531) * t521 + 0.1e1);
	t575 = cos(qJ(1));
	t573 = sin(qJ(1));
	t469 = t613 * t633 + t632 * t634;
	t453 = 0.2e1 * (((t469 * t712 + t491 * t646) * t515 - 0.2e1 * t632 * t633 * t641) * t709 + (-t517 * t698 + t632 * t635) * t687 + ((-t725 - t490 * t510 + (t490 * t713 + t632 * t715) * t498) * t709 + (t462 * t632 + t471 * t490 + t486 * t633) * t697) * pkin(5)) * t619 - 0.2e1 * (t632 * t595 + ((t491 * t626 + (t469 * t708 + t517 * t715 + t633 * t713) * t498 - t731) * t709 + (t633 * t684 + (t461 * t632 + t470 * t490 + t485 * t633) * t512) * pkin(4)) * t694) * t618 + 0.2e1 * t724 * t466 + 0.2e1 * t723 * t465;
	t1 = [0, t660 * t573 + t575 * t624, t453 * t573 + t575 * t657, 0; 0, t573 * t624 - t660 * t575, -t453 * t575 + t573 * t657, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
end