% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh1m1DE1
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JRD_rot [9x4]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-14 19:47
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh1m1DE1_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1DE1_jacobiRD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1DE1_jacobiRD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1DE1_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1DE1_jacobiRD_rot_sym_varpar: pkin has to be [23x1] (double)');
JRD_rot=NaN(9,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:57
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:58
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0; -t31, 0, 0, 0; 0, 0, 0, 0; t31, 0, 0, 0; -t30, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:58
	% EndTime: 2020-04-14 18:42:59
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (10->8), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t32 = sin(qJ(1));
	t39 = qJD(1) * t32;
	t34 = cos(qJ(1));
	t38 = qJD(1) * t34;
	t31 = sin(qJ(2));
	t37 = qJD(2) * t31;
	t33 = cos(qJ(2));
	t36 = qJD(2) * t33;
	t35 = qJD(2) * t34;
	t30 = -t32 * t37 + t33 * t38;
	t29 = t31 * t38 + t32 * t36;
	t28 = t31 * t35 + t33 * t39;
	t27 = t31 * t39 - t33 * t35;
	t1 = [t29, t28, 0, 0; t27, -t30, 0, 0; 0, -t36, 0, 0; t30, -t27, 0, 0; t28, t29, 0, 0; 0, t37, 0, 0; -t39, 0, 0, 0; t38, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:42:59
	% EndTime: 2020-04-14 18:42:59
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (73->18), mult. (250->24), div. (0->0), fcn. (250->6), ass. (0->25)
	t108 = qJD(2) + qJD(3);
	t92 = sin(qJ(1));
	t107 = t108 * t92;
	t90 = sin(qJ(3));
	t91 = sin(qJ(2));
	t106 = t90 * t91;
	t94 = cos(qJ(2));
	t105 = t90 * t94;
	t93 = cos(qJ(3));
	t104 = t91 * t93;
	t103 = t93 * t94;
	t102 = qJD(1) * t92;
	t95 = cos(qJ(1));
	t101 = qJD(1) * t95;
	t100 = t92 * t106;
	t99 = t95 * t105;
	t97 = t104 + t105;
	t96 = -t103 + t106;
	t82 = t108 * t96;
	t81 = t108 * t97;
	t80 = qJD(1) * t99 + (t91 * t101 + t94 * t107) * t93 - t108 * t100;
	t79 = t96 * t101 + t97 * t107;
	t78 = t97 * t102 + t82 * t95;
	t77 = qJD(1) * t100 - t102 * t103 + t108 * (-t95 * t104 - t99);
	t1 = [t79, t78, t78, 0; t77, -t80, -t80, 0; 0, -t81, -t81, 0; t80, -t77, -t77, 0; t78, t79, t79, 0; 0, t82, t82, 0; -t102, 0, 0, 0; t101, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:54:38
	% EndTime: 2020-04-14 19:03:12
	% DurationCPUTime: 309.27s
	% Computational Cost: add. (8968809->293), mult. (13949746->550), div. (538600->14), fcn. (8723138->19), ass. (0->251)
	t1215 = cos(qJ(3));
	t1216 = cos(qJ(2));
	t1214 = sin(qJ(3));
	t1373 = sin(qJ(2));
	t1309 = t1373 * t1214;
	t1261 = -t1216 * t1215 + t1309;
	t1387 = -qJD(3) - qJD(2);
	t1173 = t1261 * t1387;
	t1220 = pkin(7) ^ 2;
	t1224 = pkin(1) ^ 2;
	t1218 = cos(pkin(19));
	t1375 = sin(pkin(19));
	t1191 = -t1216 * t1375 + t1373 * t1218;
	t1356 = pkin(7) * t1191;
	t1382 = -2 * pkin(1);
	t1314 = t1356 * t1382 + t1224;
	t1181 = t1220 + t1314;
	t1178 = 0.1e1 / t1181;
	t1193 = t1216 * t1218 + t1373 * t1375;
	t1189 = t1193 * qJD(2);
	t1223 = 0.1e1 / pkin(3);
	t1177 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1181;
	t1186 = pkin(1) - t1356;
	t1378 = -pkin(8) - pkin(3);
	t1175 = (pkin(7) - t1378) * (pkin(7) + t1378) + t1314;
	t1379 = pkin(3) - pkin(8);
	t1176 = (pkin(7) - t1379) * (pkin(7) + t1379) + t1314;
	t1334 = t1176 * t1175;
	t1226 = sqrt(-t1334);
	t1330 = t1193 * t1226;
	t1162 = -pkin(7) * t1330 + t1177 * t1186;
	t1319 = t1215 * t1162;
	t1355 = pkin(7) * t1193;
	t1163 = t1177 * t1355 + t1186 * t1226;
	t1324 = t1214 * t1163;
	t1267 = -t1319 + t1324;
	t1179 = 0.1e1 / t1181 ^ 2;
	t1380 = pkin(1) * pkin(7);
	t1312 = t1179 * t1380;
	t1243 = t1267 * t1312;
	t1318 = t1215 * t1163;
	t1325 = t1214 * t1162;
	t1259 = t1325 / 0.2e1 + t1318 / 0.2e1;
	t1265 = 0.2e1 * (t1175 + t1176) * t1380;
	t1164 = t1189 * t1265;
	t1171 = 0.1e1 / t1226;
	t1367 = -t1171 / 0.2e1;
	t1156 = t1164 * t1355 * t1367;
	t1313 = t1186 * t1382;
	t1288 = -t1177 + t1313;
	t1188 = t1191 * qJD(2);
	t1332 = t1188 * t1226;
	t1149 = t1156 + (t1288 * t1189 + t1332) * pkin(7);
	t1323 = t1215 * t1149;
	t1389 = t1189 * t1220;
	t1300 = t1193 * t1389;
	t1282 = pkin(1) * t1300;
	t1366 = t1171 / 0.2e1;
	t1291 = t1186 * t1366;
	t1331 = t1189 * t1226;
	t1150 = t1164 * t1291 - 0.2e1 * t1282 + (-t1188 * t1177 - t1331) * pkin(7);
	t1328 = t1214 * t1150;
	t1125 = (t1189 * t1243 + (-t1323 / 0.2e1 + t1328 / 0.2e1 + t1259 * qJD(3)) * t1178) * t1223;
	t1257 = t1319 / 0.2e1 - t1324 / 0.2e1;
	t1266 = t1318 + t1325;
	t1322 = t1215 * t1150;
	t1329 = t1214 * t1149;
	t1126 = (t1266 * t1189 * t1312 + (t1329 / 0.2e1 + t1322 / 0.2e1 + t1257 * qJD(3)) * t1178) * t1223;
	t1211 = pkin(23) + pkin(22);
	t1209 = sin(t1211);
	t1210 = cos(t1211);
	t1120 = t1125 * t1209 - t1126 * t1210;
	t1221 = pkin(5) ^ 2;
	t1333 = t1178 * t1223;
	t1154 = t1259 * t1333;
	t1155 = t1257 * t1333;
	t1143 = t1154 * t1210 + t1155 * t1209;
	t1358 = pkin(4) * t1143;
	t1381 = -2 * pkin(5);
	t1315 = -t1358 * t1381 + t1221;
	t1377 = -pkin(9) - pkin(11);
	t1134 = (pkin(4) - t1377) * (pkin(4) + t1377) + t1315;
	t1376 = pkin(11) - pkin(9);
	t1135 = (pkin(4) - t1376) * (pkin(4) + t1376) + t1315;
	t1337 = t1135 * t1134;
	t1225 = sqrt(-t1337);
	t1395 = t1120 * t1225;
	t1354 = 2 * pkin(5);
	t1264 = pkin(4) * (t1134 + t1135) * t1354;
	t1111 = t1120 * t1264;
	t1222 = pkin(4) ^ 2;
	t1140 = t1222 + t1315;
	t1136 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1140;
	t1141 = pkin(5) + t1358;
	t1287 = t1141 * t1381 - t1136;
	t1128 = 0.1e1 / t1225;
	t1283 = t1154 * t1209 - t1210 * t1155;
	t1368 = -t1283 / 0.2e1;
	t1295 = t1128 * t1368;
	t1284 = t1210 * t1125 + t1126 * t1209;
	t1388 = t1284 * t1225;
	t1081 = (t1111 * t1295 + t1287 * t1120 - t1388) * pkin(4);
	t1289 = t1283 * t1222 * t1381;
	t1369 = t1128 / 0.2e1;
	t1296 = t1141 * t1369;
	t1082 = t1111 * t1296 + t1120 * t1289 + (t1136 * t1284 - t1395) * pkin(4);
	t1137 = 0.1e1 / t1140;
	t1219 = 0.1e1 / pkin(11);
	t1138 = 0.1e1 / t1140 ^ 2;
	t1311 = pkin(4) * pkin(5) * t1138;
	t1357 = pkin(4) * t1283;
	t1116 = t1136 * t1357 + t1141 * t1225;
	t1213 = cos(pkin(21));
	t1339 = t1116 * t1213;
	t1115 = t1136 * t1141 - t1225 * t1357;
	t1212 = sin(pkin(21));
	t1342 = t1115 * t1212;
	t1241 = (t1339 + t1342) * t1311;
	t1363 = t1213 / 0.2e1;
	t1365 = t1212 / 0.2e1;
	t1073 = ((t1081 * t1365 + t1082 * t1363) * t1137 + t1120 * t1241) * t1219;
	t1340 = t1116 * t1212;
	t1341 = t1115 * t1213;
	t1242 = (t1340 - t1341) * t1311;
	t1364 = -t1213 / 0.2e1;
	t1074 = ((t1081 * t1364 + t1082 * t1365) * t1137 + t1120 * t1242) * t1219;
	t1335 = t1137 * t1219;
	t1109 = (t1342 / 0.2e1 + t1339 / 0.2e1) * t1335;
	t1105 = t1109 ^ 2;
	t1110 = (-t1341 / 0.2e1 + t1340 / 0.2e1) * t1335;
	t1107 = 0.1e1 / t1110 ^ 2;
	t1098 = t1105 * t1107 + 0.1e1;
	t1096 = 0.1e1 / t1098;
	t1106 = 0.1e1 / t1110;
	t1344 = t1107 * t1109;
	t1066 = (t1073 * t1106 - t1074 * t1344) * t1096;
	t1099 = atan2(t1109, t1110);
	t1094 = sin(t1099);
	t1095 = cos(t1099);
	t1308 = t1373 * t1215;
	t1190 = -t1216 * t1214 - t1308;
	t1174 = t1387 * t1190;
	t1394 = (t1094 * t1261 + t1095 * t1190) * t1066 - t1173 * t1094 - t1174 * t1095;
	t1374 = sin(qJ(1));
	t1281 = t1374 * t1373;
	t1310 = t1216 * t1374;
	t1182 = t1214 * t1281 - t1215 * t1310;
	t1217 = cos(qJ(1));
	t1316 = t1216 * t1217;
	t1298 = t1214 * t1316;
	t1166 = t1182 * qJD(1) - t1387 * (-t1217 * t1308 - t1298);
	t1183 = t1214 * t1310 + t1215 * t1281;
	t1167 = t1183 * qJD(1) - t1217 * t1173;
	t1299 = t1215 * t1316;
	t1184 = -t1217 * t1309 + t1299;
	t1185 = t1190 * t1217;
	t1393 = -t1166 * t1094 + t1167 * t1095 + (-t1094 * t1185 - t1095 * t1184) * t1066;
	t1353 = qJD(1) * t1217;
	t1235 = -t1387 * t1310 + t1373 * t1353;
	t1384 = t1387 * t1281;
	t1168 = -qJD(1) * t1299 + t1235 * t1214 - t1384 * t1215;
	t1169 = qJD(1) * t1298 + t1384 * t1214 + t1235 * t1215;
	t1238 = t1168 * t1094 - t1169 * t1095 + (t1094 * t1183 + t1095 * t1182) * t1066;
	t1121 = t1283 * t1264;
	t1103 = (t1121 * t1295 - t1143 * t1225 + t1283 * t1287) * pkin(4);
	t1104 = t1121 * t1296 + t1283 * t1289 + (t1136 * t1143 - t1225 * t1283) * pkin(4);
	t1079 = ((t1103 * t1365 + t1104 * t1363) * t1137 + t1283 * t1241) * t1219;
	t1080 = ((t1103 * t1364 + t1104 * t1365) * t1137 + t1283 * t1242) * t1219;
	t1069 = (t1079 * t1106 - t1080 * t1344) * t1096;
	t1392 = t1066 * (t1069 + 0.1e1);
	t1256 = t1193 * t1266;
	t1165 = t1193 * t1265;
	t1359 = pkin(1) * t1220;
	t1152 = t1165 * t1291 - 0.2e1 * t1193 ^ 2 * t1359 + (-t1177 * t1191 - t1330) * pkin(7);
	t1320 = t1215 * t1152;
	t1275 = t1165 * t1367 - t1177;
	t1151 = (t1191 * t1226 + (t1275 + t1313) * t1193) * pkin(7);
	t1327 = t1214 * t1151;
	t1260 = t1327 / 0.2e1 + t1320 / 0.2e1;
	t1132 = (-t1260 * t1178 - t1256 * t1312) * t1223;
	t1321 = t1215 * t1151;
	t1326 = t1214 * t1152;
	t1258 = -t1321 / 0.2e1 + t1326 / 0.2e1;
	t1133 = (t1258 * t1178 + t1193 * t1243) * t1223;
	t1122 = t1132 * t1210 + t1133 * t1209;
	t1112 = t1122 * t1264;
	t1123 = -t1132 * t1209 + t1133 * t1210;
	t1083 = (t1112 * t1295 + t1287 * t1122 - t1123 * t1225) * pkin(4);
	t1084 = t1112 * t1296 + t1122 * t1289 + (-t1122 * t1225 + t1123 * t1136) * pkin(4);
	t1076 = ((t1083 * t1365 + t1084 * t1363) * t1137 + t1122 * t1241) * t1219;
	t1077 = ((t1083 * t1364 + t1084 * t1365) * t1137 + t1122 * t1242) * t1219;
	t1067 = (t1076 * t1106 - t1077 * t1344) * t1096;
	t1391 = t1066 * (t1067 + 0.1e1);
	t1390 = t1074 * t1107;
	t1372 = -t1111 / 0.2e1;
	t1371 = -t1112 / 0.2e1;
	t1370 = -t1121 / 0.2e1;
	t1362 = -t1215 / 0.2e1;
	t1351 = t1106 * t1390;
	t1352 = 0.2e1 * (t1073 * t1344 - t1105 * t1351) / t1098 ^ 2;
	t1343 = t1111 * t1128 / t1337;
	t1338 = t1120 * t1222;
	t1336 = t1137 * t1213;
	t1087 = t1166 * t1095;
	t1303 = t1222 * t1354;
	t1302 = t1221 * t1338;
	t1301 = t1171 / t1334 * t1165 * t1164;
	t1297 = t1343 / 0.4e1;
	t1294 = t1137 * t1365;
	t1293 = -t1336 / 0.2e1;
	t1292 = t1336 / 0.2e1;
	t1290 = 0.4e1 * pkin(5) * t1338;
	t1286 = t1096 * t1311;
	t1285 = -0.8e1 * t1302;
	t1278 = t1137 * t1138 * t1302;
	t1277 = t1224 * t1300;
	t1276 = -t1283 * t1343 / 0.4e1;
	t1271 = t1213 * t1278;
	t1270 = t1094 * t1182 - t1095 * t1183;
	t1269 = -t1094 * t1184 + t1095 * t1185;
	t1268 = t1094 * t1190 - t1095 * t1261;
	t1263 = 0.4e1 * t1212 * t1278;
	t1255 = -0.4e1 * t1115 * t1271;
	t1254 = 0.4e1 * t1116 * t1271;
	t1253 = t1122 * t1263;
	t1252 = t1283 * t1263;
	t1248 = -t1096 * t1390 - t1106 * t1352;
	t1161 = -t1188 * t1265 - 0.8e1 * t1277;
	t1130 = t1156 + (t1301 / 0.4e1 + t1161 * t1366) * t1186 + (0.4e1 * t1188 * t1193 + 0.2e1 * t1189 * t1191) * t1359 + (t1275 * t1189 + t1332) * pkin(7);
	t1131 = 0.4e1 * t1282 + (t1331 - t1193 * t1301 / 0.4e1 - t1288 * t1188 + (t1191 * t1164 / 0.2e1 + t1188 * t1165 / 0.2e1 - t1193 * t1161 / 0.2e1) * t1171) * pkin(7);
	t1180 = t1178 * t1179;
	t1113 = (0.4e1 * t1267 * t1180 * t1277 + (t1131 * t1362 + t1214 * t1130 / 0.2e1 + t1260 * qJD(3)) * t1178 + ((-t1321 + t1326) * t1189 - t1267 * t1188 + (t1266 * qJD(3) - t1323 + t1328) * t1193) * t1312) * t1223;
	t1114 = (-0.4e1 * t1224 * t1180 * t1256 * t1389 + (-t1214 * t1131 / 0.2e1 + t1130 * t1362 + t1258 * qJD(3)) * t1178 + ((-t1320 - t1327) * t1189 + t1266 * t1188 + (t1267 * qJD(3) - t1322 - t1329) * t1193) * t1312) * t1223;
	t1101 = t1113 * t1209 + t1114 * t1210;
	t1247 = t1081 * t1122 + t1083 * t1120 + t1101 * t1115;
	t1246 = t1081 * t1283 + t1103 * t1120 + t1115 * t1284;
	t1245 = t1082 * t1122 + t1084 * t1120 + t1101 * t1116;
	t1244 = t1082 * t1283 + t1104 * t1120 + t1116 * t1284;
	t1236 = t1344 * t1352 + (-t1073 * t1107 + 0.2e1 * t1109 * t1351) * t1096;
	t1102 = t1264 * t1284 + t1283 * t1285;
	t1100 = t1113 * t1210 - t1114 * t1209;
	t1093 = t1173 * t1095;
	t1089 = t1168 * t1095;
	t1078 = t1101 * t1264 + t1122 * t1285;
	t1075 = t1283 * t1290 + (t1395 + t1121 * t1276 + t1287 * t1284 + (t1102 * t1368 + t1143 * t1372 + t1284 * t1370) * t1128) * pkin(4);
	t1072 = (t1102 * t1369 + t1121 * t1297) * t1141 + (-t1120 * t1143 - 0.2e1 * t1283 * t1284) * t1303 + (-t1388 - t1120 * t1136 + (t1120 * t1370 + t1283 * t1372) * t1128) * pkin(4);
	t1071 = t1122 * t1290 + (-t1100 * t1225 + t1112 * t1276 + t1287 * t1101 + (t1078 * t1368 + t1123 * t1372 + t1284 * t1371) * t1128) * pkin(4);
	t1070 = (t1078 * t1369 + t1112 * t1297) * t1141 + (-t1101 * t1283 - t1120 * t1123 - t1122 * t1284) * t1303 + (t1100 * t1136 - t1101 * t1225 + (t1120 * t1371 + t1122 * t1372) * t1128) * pkin(4);
	t1062 = t1248 * t1079 + t1236 * t1080 + (((t1072 * t1292 + t1075 * t1294 + t1115 * t1252 + t1254 * t1283) * t1106 - (t1072 * t1294 + t1075 * t1293 + t1116 * t1252 + t1255 * t1283) * t1344) * t1096 + ((t1244 * t1106 + t1246 * t1344) * t1213 + (t1246 * t1106 - t1244 * t1344) * t1212) * t1286) * t1219;
	t1061 = t1248 * t1076 + t1236 * t1077 + (((t1070 * t1292 + t1071 * t1294 + t1115 * t1253 + t1122 * t1254) * t1106 - (t1070 * t1294 + t1071 * t1293 + t1116 * t1253 + t1122 * t1255) * t1344) * t1096 + ((t1245 * t1106 + t1247 * t1344) * t1213 + (t1247 * t1106 - t1245 * t1344) * t1212) * t1286) * t1219;
	t1 = [-t1270 * t1066 + t1094 * t1169 + t1089, t1269 * t1061 + t1067 * t1393 + t1393, t1062 * t1269 + t1069 * t1393 + t1393, 0; t1269 * t1066 + t1094 * t1167 + t1087, t1061 * t1270 + t1067 * t1238 + t1238, t1062 * t1270 + t1069 * t1238 + t1238, 0; 0, t1061 * t1268 + t1067 * t1394 + t1394, t1062 * t1268 + t1069 * t1394 + t1394, 0; -t1238, -t1087 + (-t1061 * t1184 - t1067 * t1166 - t1185 * t1391) * t1095 + (-t1061 * t1185 - t1067 * t1167 + t1184 * t1391 - t1167) * t1094, -t1087 + (-t1062 * t1184 - t1069 * t1166 - t1185 * t1392) * t1095 + (-t1062 * t1185 - t1069 * t1167 + t1184 * t1392 - t1167) * t1094, 0; t1393, t1089 + (t1061 * t1182 + t1067 * t1168 + t1183 * t1391) * t1095 + (t1061 * t1183 + t1067 * t1169 - t1182 * t1391 + t1169) * t1094, t1089 + (t1062 * t1182 + t1069 * t1168 + t1183 * t1392) * t1095 + (t1062 * t1183 + t1069 * t1169 - t1182 * t1392 + t1169) * t1094, 0; 0, -t1093 + (t1061 * t1190 - t1067 * t1173 + t1261 * t1391) * t1095 + (t1061 * t1261 + t1067 * t1174 - t1190 * t1391 + t1174) * t1094, -t1093 + (t1062 * t1190 - t1069 * t1173 + t1261 * t1392) * t1095 + (t1062 * t1261 + t1069 * t1174 - t1190 * t1392 + t1174) * t1094, 0; -qJD(1) * t1374, 0, 0, 0; t1353, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 19:38:00
	% EndTime: 2020-04-14 19:47:25
	% DurationCPUTime: 545.57s
	% Computational Cost: add. (14615542->298), mult. (22696178->577), div. (884548->14), fcn. (14201116->21), ass. (0->285)
	t2035 = pkin(7) ^ 2;
	t2039 = pkin(1) ^ 2;
	t2033 = cos(pkin(19));
	t2199 = sin(qJ(2));
	t2201 = sin(pkin(19));
	t2202 = cos(qJ(2));
	t2004 = t2199 * t2033 - t2202 * t2201;
	t2185 = pkin(7) * t2004;
	t2209 = -2 * pkin(1);
	t2135 = t2185 * t2209 + t2039;
	t1994 = t2035 + t2135;
	t1991 = 0.1e1 / t1994;
	t2006 = t2202 * t2033 + t2199 * t2201;
	t2002 = t2006 * qJD(2);
	t2038 = 0.1e1 / pkin(3);
	t1990 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1994;
	t1999 = pkin(1) - t2185;
	t2206 = -pkin(8) - pkin(3);
	t1988 = (pkin(7) - t2206) * (pkin(7) + t2206) + t2135;
	t2205 = -pkin(8) + pkin(3);
	t1989 = (pkin(7) - t2205) * (pkin(7) + t2205) + t2135;
	t2158 = t1989 * t1988;
	t2041 = sqrt(-t2158);
	t2154 = t2006 * t2041;
	t1975 = -pkin(7) * t2154 + t1990 * t1999;
	t2031 = cos(qJ(3));
	t2141 = t2031 * t1975;
	t2184 = pkin(7) * t2006;
	t1976 = t1990 * t2184 + t1999 * t2041;
	t2029 = sin(qJ(3));
	t2147 = t2029 * t1976;
	t2086 = -t2141 + t2147;
	t1992 = 0.1e1 / t1994 ^ 2;
	t2207 = pkin(1) * pkin(7);
	t2133 = t1992 * t2207;
	t2060 = t2086 * t2133;
	t2140 = t2031 * t1976;
	t2148 = t2029 * t1975;
	t2076 = t2148 / 0.2e1 + t2140 / 0.2e1;
	t2084 = 0.2e1 * (t1988 + t1989) * t2207;
	t1977 = t2002 * t2084;
	t1984 = 0.1e1 / t2041;
	t2193 = -t1984 / 0.2e1;
	t1969 = t1977 * t2184 * t2193;
	t2134 = t1999 * t2209;
	t2112 = -t1990 + t2134;
	t2001 = t2004 * qJD(2);
	t2156 = t2001 * t2041;
	t1962 = t1969 + (t2112 * t2002 + t2156) * pkin(7);
	t2145 = t2031 * t1962;
	t2226 = t2002 * t2035;
	t2122 = t2006 * t2226;
	t2106 = pkin(1) * t2122;
	t2192 = t1984 / 0.2e1;
	t2115 = t1999 * t2192;
	t2155 = t2002 * t2041;
	t1963 = t1977 * t2115 - 0.2e1 * t2106 + (-t2001 * t1990 - t2155) * pkin(7);
	t2151 = t2029 * t1963;
	t1938 = (t2002 * t2060 + (-t2145 / 0.2e1 + t2151 / 0.2e1 + t2076 * qJD(3)) * t1991) * t2038;
	t2074 = t2141 / 0.2e1 - t2147 / 0.2e1;
	t2085 = t2140 + t2148;
	t2144 = t2031 * t1963;
	t2152 = t2029 * t1962;
	t1939 = (t2085 * t2002 * t2133 + (t2152 / 0.2e1 + t2144 / 0.2e1 + t2074 * qJD(3)) * t1991) * t2038;
	t2025 = pkin(23) + pkin(22);
	t2023 = sin(t2025);
	t2024 = cos(t2025);
	t1933 = t1938 * t2023 - t1939 * t2024;
	t2036 = pkin(5) ^ 2;
	t2157 = t1991 * t2038;
	t1967 = t2076 * t2157;
	t1968 = t2074 * t2157;
	t1956 = t1967 * t2024 + t1968 * t2023;
	t2187 = pkin(4) * t1956;
	t2208 = -2 * pkin(5);
	t2136 = -t2187 * t2208 + t2036;
	t2204 = -pkin(9) - pkin(11);
	t1947 = (pkin(4) - t2204) * (pkin(4) + t2204) + t2136;
	t2203 = -pkin(9) + pkin(11);
	t1948 = (pkin(4) - t2203) * (pkin(4) + t2203) + t2136;
	t2182 = 2 * pkin(5);
	t2083 = pkin(4) * (t1947 + t1948) * t2182;
	t1924 = t1933 * t2083;
	t2037 = pkin(4) ^ 2;
	t1953 = t2037 + t2136;
	t1949 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1953;
	t1954 = pkin(5) + t2187;
	t2111 = t1954 * t2208 - t1949;
	t2161 = t1948 * t1947;
	t2040 = sqrt(-t2161);
	t1941 = 0.1e1 / t2040;
	t2107 = t1967 * t2023 - t2024 * t1968;
	t2194 = -t2107 / 0.2e1;
	t2119 = t1941 * t2194;
	t2108 = t2024 * t1938 + t1939 * t2023;
	t2225 = t2108 * t2040;
	t1888 = (t1924 * t2119 + t2111 * t1933 - t2225) * pkin(4);
	t2113 = t2107 * t2037 * t2208;
	t2195 = t1941 / 0.2e1;
	t2120 = t1954 * t2195;
	t2232 = t1933 * t2040;
	t1889 = t1924 * t2120 + t1933 * t2113 + (t1949 * t2108 - t2232) * pkin(4);
	t1950 = 0.1e1 / t1953;
	t2034 = 0.1e1 / pkin(11);
	t1951 = 0.1e1 / t1953 ^ 2;
	t2132 = pkin(4) * pkin(5) * t1951;
	t2186 = pkin(4) * t2107;
	t1929 = t1949 * t2186 + t1954 * t2040;
	t2027 = cos(pkin(21));
	t2163 = t1929 * t2027;
	t1928 = t1949 * t1954 - t2040 * t2186;
	t2026 = sin(pkin(21));
	t2166 = t1928 * t2026;
	t2058 = (t2163 + t2166) * t2132;
	t2189 = t2027 / 0.2e1;
	t2191 = t2026 / 0.2e1;
	t1876 = ((t1888 * t2191 + t1889 * t2189) * t1950 + t1933 * t2058) * t2034;
	t2164 = t1929 * t2026;
	t2165 = t1928 * t2027;
	t2059 = (t2164 - t2165) * t2132;
	t2190 = -t2027 / 0.2e1;
	t1877 = ((t1888 * t2190 + t1889 * t2191) * t1950 + t1933 * t2059) * t2034;
	t2159 = t1950 * t2034;
	t1922 = (t2166 / 0.2e1 + t2163 / 0.2e1) * t2159;
	t1918 = t1922 ^ 2;
	t1923 = (-t2165 / 0.2e1 + t2164 / 0.2e1) * t2159;
	t1920 = 0.1e1 / t1923 ^ 2;
	t1911 = t1918 * t1920 + 0.1e1;
	t1909 = 0.1e1 / t1911;
	t1919 = 0.1e1 / t1923;
	t2168 = t1920 * t1922;
	t1869 = (t1876 * t1919 - t1877 * t2168) * t1909;
	t1912 = atan2(t1922, t1923);
	t1907 = sin(t1912);
	t1908 = cos(t1912);
	t2127 = t2199 * t2029;
	t2224 = qJD(2) + qJD(3);
	t2211 = t2224 * t2031;
	t1986 = -t2224 * t2127 + t2202 * t2211;
	t2126 = t2199 * t2031;
	t2130 = t2202 * t2029;
	t2003 = -t2130 - t2126;
	t1987 = t2224 * t2003;
	t2129 = t2202 * t2031;
	t2005 = t2129 - t2127;
	t2213 = t2003 * t1907 + t2005 * t1908;
	t2243 = t1869 * t2213 + t1987 * t1907 + t1908 * t1986;
	t2200 = sin(qJ(1));
	t2104 = t2200 * t2199;
	t2091 = t2029 * t2104;
	t2105 = t2202 * t2200;
	t1995 = -t2031 * t2105 + t2091;
	t2032 = cos(qJ(1));
	t2102 = t2032 * t2130;
	t1979 = t1995 * qJD(1) + t2224 * (-t2032 * t2126 - t2102);
	t1996 = t2029 * t2105 + t2031 * t2104;
	t1980 = -t2224 * t2032 * t2005 + t1996 * qJD(1);
	t2101 = t2032 * t2129;
	t1997 = -t2032 * t2127 + t2101;
	t1998 = t2003 * t2032;
	t2214 = -t1997 * t1907 + t1998 * t1908;
	t2242 = t1869 * t2214 + t1980 * t1907 + t1908 * t1979;
	t2230 = -t1907 * t2005 + t1908 * t2003;
	t2241 = t2230 * t1869 - t1986 * t1907 + t1987 * t1908;
	t2073 = t2085 * t2006;
	t1978 = t2006 * t2084;
	t2183 = t2035 * pkin(1);
	t1965 = t1978 * t2115 - 0.2e1 * t2006 ^ 2 * t2183 + (-t2004 * t1990 - t2154) * pkin(7);
	t2142 = t2031 * t1965;
	t2096 = t1978 * t2193 - t1990;
	t1964 = (t2004 * t2041 + (t2096 + t2134) * t2006) * pkin(7);
	t2150 = t2029 * t1964;
	t2077 = t2150 / 0.2e1 + t2142 / 0.2e1;
	t1945 = (-t2077 * t1991 - t2073 * t2133) * t2038;
	t2143 = t2031 * t1964;
	t2149 = t2029 * t1965;
	t2075 = -t2143 / 0.2e1 + t2149 / 0.2e1;
	t1946 = (t2075 * t1991 + t2006 * t2060) * t2038;
	t1935 = t1945 * t2024 + t1946 * t2023;
	t1925 = t1935 * t2083;
	t1936 = -t1945 * t2023 + t1946 * t2024;
	t1890 = (t1925 * t2119 + t2111 * t1935 - t1936 * t2040) * pkin(4);
	t1891 = t1925 * t2120 + t1935 * t2113 + (-t1935 * t2040 + t1936 * t1949) * pkin(4);
	t1879 = ((t1890 * t2191 + t1891 * t2189) * t1950 + t1935 * t2058) * t2034;
	t1880 = ((t1890 * t2190 + t1891 * t2191) * t1950 + t1935 * t2059) * t2034;
	t1870 = (t1879 * t1919 - t1880 * t2168) * t1909;
	t2240 = t1870 + 0.1e1;
	t1934 = t2107 * t2083;
	t1916 = (t1934 * t2119 - t1956 * t2040 + t2107 * t2111) * pkin(4);
	t1917 = t1934 * t2120 + t2107 * t2113 + (t1956 * t1949 - t2040 * t2107) * pkin(4);
	t1886 = ((t1916 * t2191 + t1917 * t2189) * t1950 + t2107 * t2058) * t2034;
	t1887 = ((t1916 * t2190 + t1917 * t2191) * t1950 + t2107 * t2059) * t2034;
	t1872 = (t1886 * t1919 - t1887 * t2168) * t1909;
	t2239 = t1872 + 0.1e1;
	t1883 = t1907 * t1998 + t1908 * t1997;
	t2210 = t1883 * t1869 + t1979 * t1907 - t1980 * t1908;
	t1881 = t1907 * t1996 + t1908 * t1995;
	t2050 = t2199 * qJD(1) * t2032 + t2224 * t2105;
	t1981 = -qJD(1) * t2101 + t2050 * t2029 + t2104 * t2211;
	t1982 = qJD(1) * t2102 + t2050 * t2031 - t2224 * t2091;
	t2236 = t1881 * t1869 + t1981 * t1907 - t1982 * t1908;
	t2030 = cos(qJ(4));
	t2128 = t2200 * t2030;
	t2028 = sin(qJ(4));
	t2153 = t2028 * t2032;
	t2235 = -qJD(1) * t2128 - (t1881 * t2030 + t2153) * qJD(4);
	t2146 = t2030 * t2032;
	t2228 = qJD(4) * t2146 + (-qJD(1) * t2200 - qJD(4) * t1881) * t2028;
	t2227 = t1877 * t1920;
	t1901 = t1995 * t1907;
	t1860 = t1869 * t1901;
	t1902 = t1996 * t1908;
	t1896 = t1982 * t1907;
	t2218 = -t1908 * t1981 - t1896;
	t2223 = -t1869 * t1902 + t1860 + t2218;
	t2215 = t1901 - t1902;
	t2198 = -t1924 / 0.2e1;
	t2197 = -t1925 / 0.2e1;
	t2196 = -t1934 / 0.2e1;
	t2188 = -t2031 / 0.2e1;
	t2181 = qJD(4) * t2028;
	t2180 = qJD(4) * t2030;
	t2178 = t1919 * t2227;
	t2179 = 0.2e1 * (t1876 * t2168 - t1918 * t2178) / t1911 ^ 2;
	t2167 = t1924 * t1941 / t2161;
	t2162 = t1933 * t2037;
	t2160 = t1950 * t2027;
	t2125 = t2037 * t2182;
	t2124 = t2036 * t2162;
	t2123 = t1984 / t2158 * t1978 * t1977;
	t2121 = t2167 / 0.4e1;
	t2118 = t1950 * t2191;
	t2117 = -t2160 / 0.2e1;
	t2116 = t2160 / 0.2e1;
	t2114 = 0.4e1 * pkin(5) * t2162;
	t2110 = t1909 * t2132;
	t2109 = -0.8e1 * t2124;
	t2099 = t1950 * t1951 * t2124;
	t2098 = t2039 * t2122;
	t2097 = -t2107 * t2167 / 0.4e1;
	t2090 = t2027 * t2099;
	t2082 = 0.4e1 * t2026 * t2099;
	t2072 = -0.4e1 * t1928 * t2090;
	t2071 = 0.4e1 * t1929 * t2090;
	t2070 = t1935 * t2082;
	t2069 = t2107 * t2082;
	t2065 = -t1909 * t2227 - t1919 * t2179;
	t1974 = -t2001 * t2084 - 0.8e1 * t2098;
	t1943 = t1969 + (t2123 / 0.4e1 + t1974 * t2192) * t1999 + (0.4e1 * t2001 * t2006 + 0.2e1 * t2002 * t2004) * t2183 + (t2096 * t2002 + t2156) * pkin(7);
	t1944 = 0.4e1 * t2106 + (t2155 - t2006 * t2123 / 0.4e1 - t2112 * t2001 + (t2004 * t1977 / 0.2e1 + t2001 * t1978 / 0.2e1 - t2006 * t1974 / 0.2e1) * t1984) * pkin(7);
	t1993 = t1991 * t1992;
	t1926 = (0.4e1 * t2086 * t1993 * t2098 + (t1944 * t2188 + t2029 * t1943 / 0.2e1 + t2077 * qJD(3)) * t1991 + ((-t2143 + t2149) * t2002 - t2086 * t2001 + (t2085 * qJD(3) - t2145 + t2151) * t2006) * t2133) * t2038;
	t1927 = (-0.4e1 * t2039 * t1993 * t2073 * t2226 + (-t2029 * t1944 / 0.2e1 + t1943 * t2188 + t2075 * qJD(3)) * t1991 + ((-t2142 - t2150) * t2002 + t2085 * t2001 + (t2086 * qJD(3) - t2144 - t2152) * t2006) * t2133) * t2038;
	t1914 = t1926 * t2023 + t1927 * t2024;
	t2064 = t1888 * t1935 + t1890 * t1933 + t1914 * t1928;
	t2063 = t1888 * t2107 + t1916 * t1933 + t1928 * t2108;
	t2062 = t1889 * t1935 + t1891 * t1933 + t1914 * t1929;
	t2061 = t1889 * t2107 + t1917 * t1933 + t1929 * t2108;
	t2054 = t1869 * t2215 + t2218;
	t2051 = t2168 * t2179 + (-t1876 * t1920 + 0.2e1 * t1922 * t2178) * t1909;
	t1915 = t2083 * t2108 + t2107 * t2109;
	t1913 = t1926 * t2024 - t1927 * t2023;
	t1885 = t1914 * t2083 + t1935 * t2109;
	t1878 = t2107 * t2114 + (t2232 + t1934 * t2097 + t2111 * t2108 + (t1915 * t2194 + t1956 * t2198 + t2108 * t2196) * t1941) * pkin(4);
	t1875 = (t1915 * t2195 + t1934 * t2121) * t1954 + (-t1933 * t1956 - 0.2e1 * t2107 * t2108) * t2125 + (-t2225 - t1933 * t1949 + (t1933 * t2196 + t2107 * t2198) * t1941) * pkin(4);
	t1874 = t1935 * t2114 + (-t1913 * t2040 + t1925 * t2097 + t2111 * t1914 + (t1885 * t2194 + t1936 * t2198 + t2108 * t2197) * t1941) * pkin(4);
	t1873 = (t1885 * t2195 + t1925 * t2121) * t1954 + (-t1914 * t2107 - t1933 * t1936 - t1935 * t2108) * t2125 + (t1913 * t1949 - t1914 * t2040 + (t1933 * t2197 + t1935 * t2198) * t1941) * pkin(4);
	t1859 = t2239 * t2213;
	t1858 = t2239 * t2214;
	t1857 = t2239 * t2215;
	t1856 = t2240 * t2213;
	t1855 = t2240 * t2214;
	t1854 = t2240 * t2215;
	t1851 = t1896 - t1860 + (t1869 * t1996 + t1981) * t1908;
	t1849 = qJD(1) * t2153 + t2242 * t2030 + (-t1883 * t2028 + t2128) * qJD(4);
	t1848 = qJD(1) * t2146 - t2242 * t2028 + (-t1883 * t2030 - t2200 * t2028) * qJD(4);
	t1847 = t2065 * t1886 + t2051 * t1887 + (((t1875 * t2116 + t1878 * t2118 + t1928 * t2069 + t2071 * t2107) * t1919 - (t1875 * t2118 + t1878 * t2117 + t1929 * t2069 + t2072 * t2107) * t2168) * t1909 + ((t2061 * t1919 + t2063 * t2168) * t2027 + (t2063 * t1919 - t2061 * t2168) * t2026) * t2110) * t2034;
	t1846 = t2065 * t1879 + t2051 * t1880 + (((t1873 * t2116 + t1874 * t2118 + t1928 * t2070 + t1935 * t2071) * t1919 - (t1873 * t2118 + t1874 * t2117 + t1929 * t2070 + t1935 * t2072) * t2168) * t1909 + ((t2062 * t1919 + t2064 * t2168) * t2027 + (t2064 * t1919 - t2062 * t2168) * t2026) * t2110) * t2034;
	t1845 = t1847 * t2213 + t1872 * t2241 + t2241;
	t1844 = t1847 * t2215 + t1872 * t2236 + t2236;
	t1843 = t1847 * t2214 - t1872 * t2210 - t2210;
	t1842 = t1846 * t2213 + t1870 * t2241 + t2241;
	t1841 = t1846 * t2215 + t1870 * t2236 + t2236;
	t1840 = t1846 * t2214 - t1870 * t2210 - t2210;
	t1 = [t1851 * t2030 + t2228, t1840 * t2030 - t1855 * t2181, t1843 * t2030 - t1858 * t2181, t1848; t1849, t1841 * t2030 - t1854 * t2181, t1844 * t2030 - t1857 * t2181, -t2223 * t2028 - t2235; 0, t1842 * t2030 - t1856 * t2181, t1845 * t2030 - t1859 * t2181, -t2028 * t2243 + t2180 * t2230; -t1851 * t2028 + t2235, -t1840 * t2028 - t1855 * t2180, -t1843 * t2028 - t1858 * t2180, -t1849; t1848, -t1841 * t2028 - t1854 * t2180, -t1844 * t2028 - t1857 * t2180, -t2223 * t2030 + t2228; 0, -t1842 * t2028 - t1856 * t2180, -t1845 * t2028 - t1859 * t2180, -t2030 * t2243 - t2181 * t2230; t2236, t1883 * t1846 + t1870 * t2242 + t2242, t1847 * t1883 + t1872 * t2242 + t2242, 0; t2210, -t1881 * t1846 + t1870 * t2054 + t2223, -t1847 * t1881 + t1872 * t2054 + t2223, 0; 0, -t1846 * t2230 + t1870 * t2243 + t2243, -t1847 * t2230 + t1872 * t2243 + t2243, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:17
	% EndTime: 2020-04-14 18:43:28
	% DurationCPUTime: 2.94s
	% Computational Cost: add. (51091->91), mult. (81758->195), div. (2926->9), fcn. (51230->13), ass. (0->109)
	t522 = 2 * pkin(7);
	t447 = sin(qJ(2));
	t451 = cos(pkin(19));
	t510 = sin(pkin(19));
	t511 = cos(qJ(2));
	t445 = t447 * t510 + t511 * t451;
	t508 = pkin(1) * t445;
	t443 = t445 * qJD(2);
	t456 = pkin(1) ^ 2;
	t467 = -t447 * t451 + t511 * t510;
	t509 = pkin(1) * t467;
	t487 = t509 * t522 + t456;
	t516 = (-pkin(8) - pkin(3));
	t433 = ((pkin(7) - t516) * (pkin(7) + t516)) + t487;
	t515 = (-pkin(8) + pkin(3));
	t434 = ((pkin(7) - t515) * (pkin(7) + t515)) + t487;
	t517 = pkin(1) * pkin(7);
	t477 = (t433 + t434) * t517;
	t428 = t443 * t477;
	t496 = t434 * t433;
	t457 = sqrt(-t496);
	t431 = 0.1e1 / t457;
	t520 = t428 * t431;
	t424 = t508 * t520;
	t455 = pkin(7) ^ 2;
	t439 = t455 + t487;
	t435 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t439;
	t440 = -pkin(7) - t509;
	t484 = t440 * t522;
	t480 = -t435 + t484;
	t442 = t467 * qJD(2);
	t494 = t442 * t457;
	t414 = -t424 + (t480 * t443 - t494) * pkin(1);
	t482 = t456 * t445 * t443;
	t478 = pkin(7) * t482;
	t493 = t443 * t457;
	t497 = t431 * t440;
	t415 = -t428 * t497 - 0.2e1 * t478 + (t442 * t435 - t493) * pkin(1);
	t436 = 0.1e1 / t439;
	t454 = 0.1e1 / pkin(8);
	t437 = 0.1e1 / t439 ^ 2;
	t483 = t437 * t517;
	t492 = t445 * t457;
	t426 = -pkin(1) * t492 - t440 * t435;
	t452 = cos(pkin(18));
	t489 = t452 * t426;
	t427 = t435 * t508 - t440 * t457;
	t449 = sin(pkin(18));
	t491 = t449 * t427;
	t464 = (t489 - t491) * t483;
	t512 = t452 / 0.2e1;
	t514 = -t449 / 0.2e1;
	t402 = ((t414 * t512 + t415 * t514) * t436 + t443 * t464) * t454;
	t495 = t436 * t454;
	t422 = (t489 / 0.2e1 - t491 / 0.2e1) * t495;
	t419 = 0.1e1 / t422 ^ 2;
	t521 = t402 * t419;
	t429 = t445 * t477;
	t519 = t431 * t429;
	t476 = t455 * t482;
	t518 = -t431 * (t442 * t477 - 0.4e1 * t476) - 0.1e1 / t496 * t428 * t519;
	t418 = 0.1e1 / t422;
	t513 = t449 / 0.2e1;
	t507 = t456 * pkin(7);
	t488 = t452 * t427;
	t498 = t426 * t449;
	t463 = (t488 + t498) * t483;
	t403 = ((t414 * t513 + t415 * t512) * t436 + t443 * t463) * t454;
	t423 = (t488 / 0.2e1 + t498 / 0.2e1) * t495;
	t421 = t423 ^ 2;
	t412 = t421 * t419 + 0.1e1;
	t410 = 0.1e1 / t412;
	t499 = t419 * t423;
	t399 = (-t402 * t499 + t403 * t418) * t410;
	t479 = -t435 - t519;
	t416 = (-t467 * t457 + (t479 + t484) * t445) * pkin(1);
	t417 = -t429 * t497 - 0.2e1 * t445 ^ 2 * t507 + (t435 * t467 - t492) * pkin(1);
	t406 = ((t416 * t512 + t417 * t514) * t436 + t445 * t464) * t454;
	t407 = ((t416 * t513 + t417 * t512) * t436 + t445 * t463) * t454;
	t400 = (-t406 * t499 + t407 * t418) * t410;
	t506 = t399 * t400;
	t504 = t418 * t521;
	t505 = (t403 * t499 - t421 * t504) / t412 ^ 2;
	t413 = atan2(t423, t422);
	t408 = sin(t413);
	t448 = sin(qJ(1));
	t503 = t408 * t448;
	t450 = cos(qJ(1));
	t502 = t408 * t450;
	t409 = cos(t413);
	t501 = t409 * t448;
	t500 = t409 * t450;
	t490 = t449 * t436;
	t486 = qJD(1) * t448;
	t485 = qJD(1) * t450;
	t481 = t436 * t512;
	t475 = t436 * t437 * t476;
	t473 = t449 * t475;
	t472 = 0.4e1 * t452 * t475;
	t471 = t399 * t503 - t409 * t485;
	t470 = t399 * t502 + t409 * t486;
	t469 = t399 * t501 + t408 * t485;
	t468 = -t399 * t500 + t408 * t486;
	t466 = t414 * t445 + t416 * t443 + t426 * t442;
	t465 = t415 * t445 + t417 * t443 + t427 * t442;
	t405 = 0.4e1 * t478 + (-t467 * t520 + t493 + t518 * t445 + (t480 - t519) * t442) * pkin(1);
	t404 = -t424 + t518 * t440 + (-0.4e1 * t442 * t445 - 0.2e1 * t443 * t467) * t507 + (t479 * t443 - t494) * pkin(1);
	t398 = (-t410 * t521 - 0.2e1 * t418 * t505) * t407 + (0.2e1 * t499 * t505 + (-t403 * t419 + 0.2e1 * t423 * t504) * t410) * t406 + ((t404 * t481 + t427 * t472 + t405 * t490 / 0.2e1 + 0.4e1 * t426 * t473) * t418 - (t405 * t481 + t426 * t472 - t404 * t490 / 0.2e1 - 0.4e1 * t427 * t473) * t499 + ((t465 * t418 - t466 * t499) * t452 + (t466 * t418 + t465 * t499) * t449) * t483) * t410 * t454;
	t1 = [t471, -t398 * t502 + t468 * t400, 0, 0; -t470, -t398 * t503 - t469 * t400, 0, 0; 0, t398 * t409 - t408 * t506, 0, 0; t469, -t398 * t500 + t470 * t400, 0, 0; t468, -t398 * t501 + t471 * t400, 0, 0; 0, -t398 * t408 - t409 * t506, 0, 0; -t486, 0, 0, 0; t485, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:33
	% EndTime: 2020-04-14 18:43:51
	% DurationCPUTime: 6.82s
	% Computational Cost: add. (126227->107), mult. (201254->220), div. (7468->9), fcn. (126510->13), ass. (0->122)
	t538 = pkin(7) ^ 2;
	t540 = pkin(1) ^ 2;
	t532 = sin(qJ(2));
	t534 = cos(qJ(2));
	t536 = cos(pkin(19));
	t609 = sin(pkin(19));
	t561 = -t532 * t536 + t534 * t609;
	t608 = pkin(7) * t561;
	t616 = -2 * pkin(1);
	t585 = -t608 * t616 + t540;
	t522 = t538 + t585;
	t518 = pkin(3) ^ 2 - pkin(8) ^ 2 + t522;
	t523 = pkin(1) + t608;
	t528 = t532 * t609 + t534 * t536;
	t614 = -pkin(8) - pkin(3);
	t516 = (pkin(7) - t614) * (pkin(7) + t614) + t585;
	t613 = -pkin(8) + pkin(3);
	t517 = (pkin(7) - t613) * (pkin(7) + t613) + t585;
	t594 = t517 * t516;
	t541 = sqrt(-t594);
	t590 = t528 * t541;
	t509 = -pkin(7) * t590 + t523 * t518;
	t531 = cos(pkin(23));
	t588 = t531 * t509;
	t607 = pkin(7) * t528;
	t510 = t518 * t607 + t523 * t541;
	t530 = sin(pkin(23));
	t589 = t530 * t510;
	t519 = 0.1e1 / t522;
	t539 = 0.1e1 / pkin(3);
	t593 = t519 * t539;
	t505 = (-t588 / 0.2e1 + t589 / 0.2e1) * t593;
	t587 = t531 * t510;
	t596 = t509 * t530;
	t506 = (t587 / 0.2e1 + t596 / 0.2e1) * t593;
	t496 = atan2(t506, t505);
	t491 = sin(t496);
	t492 = cos(t496);
	t564 = t491 * t534 + t492 * t532;
	t526 = t528 * qJD(2);
	t615 = pkin(1) * pkin(7);
	t569 = (t516 + t517) * t615;
	t511 = t526 * t569;
	t514 = 0.1e1 / t541;
	t620 = t511 * t514;
	t507 = t607 * t620;
	t581 = t523 * t616;
	t573 = -t518 + t581;
	t525 = t561 * qJD(2);
	t592 = t525 * t541;
	t497 = -t507 + (t573 * t526 - t592) * pkin(7);
	t575 = t538 * t528 * t526;
	t570 = pkin(1) * t575;
	t591 = t526 * t541;
	t595 = t514 * t523;
	t498 = t511 * t595 - 0.2e1 * t570 + (t525 * t518 - t591) * pkin(7);
	t520 = 0.1e1 / t522 ^ 2;
	t580 = t520 * t615;
	t553 = (-t588 + t589) * t580;
	t611 = -t531 / 0.2e1;
	t612 = t530 / 0.2e1;
	t479 = ((t497 * t611 + t498 * t612) * t519 + t526 * t553) * t539;
	t552 = (t587 + t596) * t580;
	t610 = t531 / 0.2e1;
	t480 = ((t497 * t612 + t498 * t610) * t519 + t526 * t552) * t539;
	t502 = 0.1e1 / t505 ^ 2;
	t504 = t506 ^ 2;
	t495 = t504 * t502 + 0.1e1;
	t493 = 0.1e1 / t495;
	t501 = 0.1e1 / t505;
	t597 = t502 * t506;
	t582 = qJD(2) + (-t479 * t597 + t480 * t501) * t493;
	t535 = cos(qJ(1));
	t623 = t564 * t535;
	t512 = t528 * t569;
	t619 = t514 * t512;
	t572 = -t518 - t619;
	t499 = (-t561 * t541 + (t572 + t581) * t528) * pkin(7);
	t606 = t538 * pkin(1);
	t500 = t512 * t595 - 0.2e1 * t528 ^ 2 * t606 + (t518 * t561 - t590) * pkin(7);
	t483 = ((t499 * t611 + t500 * t612) * t519 + t528 * t553) * t539;
	t484 = ((t499 * t612 + t500 * t610) * t519 + t528 * t552) * t539;
	t477 = (-t483 * t597 + t484 * t501) * t493;
	t622 = t477 + 0.1e1;
	t621 = t479 * t502;
	t618 = t582 * t535;
	t567 = t540 * t575;
	t617 = 0.1e1 / t594 * t511 * t619 + t514 * (t525 * t569 - 0.4e1 * t567);
	t481 = -t507 + t617 * t523 + (-0.4e1 * t525 * t528 - 0.2e1 * t526 * t561) * t606 + (t572 * t526 - t592) * pkin(7);
	t482 = 0.4e1 * t570 + (-t561 * t620 + t591 - t617 * t528 + (t573 - t619) * t525) * pkin(7);
	t554 = t498 * t528 + t500 * t526 + t510 * t525;
	t555 = t497 * t528 + t499 * t526 + t509 * t525;
	t565 = t519 * t520 * t567;
	t558 = 0.4e1 * t530 * t565;
	t562 = t531 * t565;
	t574 = t519 * t612;
	t586 = t531 * t519;
	t602 = t501 * t621;
	t603 = (t480 * t597 - t504 * t602) / t495 ^ 2;
	t472 = (-t493 * t621 - 0.2e1 * t501 * t603) * t484 + (0.2e1 * t597 * t603 + (-t480 * t502 + 0.2e1 * t506 * t602) * t493) * t483 + ((t481 * t586 / 0.2e1 + 0.4e1 * t510 * t562 + t482 * t574 + t509 * t558) * t501 - (-t482 * t586 / 0.2e1 - 0.4e1 * t509 * t562 + t481 * t574 + t510 * t558) * t597 + ((t554 * t501 + t555 * t597) * t531 + (t555 * t501 - t554 * t597) * t530) * t580) * t493 * t539;
	t605 = t472 * t532;
	t604 = t472 * t534;
	t601 = t491 * t532;
	t598 = t492 * t534;
	t533 = sin(qJ(1));
	t584 = qJD(1) * t533;
	t583 = qJD(1) * t535;
	t579 = t533 * t601;
	t576 = t533 * t598;
	t571 = t582 * t477;
	t566 = t623 * qJD(1) + t582 * t576;
	t563 = -t598 + t601;
	t560 = t622 * t582;
	t559 = t571 + t582;
	t557 = qJD(1) * t564;
	t556 = qJD(1) * t563;
	t551 = (t576 - t579) * qJD(1) + t582 * t623;
	t550 = t559 * t534 + t605;
	t549 = t559 * t532 - t604;
	t548 = (-t560 * t532 + t604) * t491;
	t547 = t550 * t491 + t549 * t492;
	t1 = [-t582 * t579 + t566, t563 * t535 * t472 + (-t533 * t556 + t564 * t618) * t477 + t551, 0, 0; t533 * t557 + t563 * t618, t622 * t583 * t563 + t547 * t533, 0, 0; 0, (-t560 * t534 - t605) * t492 + t549 * t491, 0, 0; -t582 * t533 * t564 - t535 * t556, (t550 * t492 + t548) * t535 - t622 * t584 * t564, 0, 0; t551, t535 * t477 * t557 + ((t534 * t571 + t605) * t492 + t548) * t533 + t566, 0, 0; 0, t547, 0, 0; -t584, 0, 0, 0; t583, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiRD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:20
	% EndTime: 2020-04-14 18:43:33
	% DurationCPUTime: 3.81s
	% Computational Cost: add. (62441->84), mult. (96814->188), div. (2244->9), fcn. (60590->13), ass. (0->102)
	t421 = cos(qJ(1));
	t425 = pkin(1) ^ 2;
	t423 = pkin(6) ^ 2;
	t416 = cos(pkin(20));
	t419 = cos(qJ(3));
	t472 = sin(pkin(20));
	t479 = sin(qJ(3));
	t413 = t479 * t416 + t419 * t472;
	t475 = pkin(6) * t413;
	t484 = 2 * pkin(1);
	t461 = t475 * t484 + t423;
	t408 = t425 + t461;
	t404 = pkin(2) ^ 2 - pkin(13) ^ 2 + t408;
	t409 = -pkin(1) - t475;
	t414 = -t419 * t416 + t479 * t472;
	t482 = -pkin(2) - pkin(13);
	t402 = (pkin(1) - t482) * (pkin(1) + t482) + t461;
	t481 = pkin(13) - pkin(2);
	t403 = (pkin(1) - t481) * (pkin(1) + t481) + t461;
	t467 = t403 * t402;
	t426 = sqrt(-t467);
	t464 = t414 * t426;
	t395 = -pkin(6) * t464 - t409 * t404;
	t474 = pkin(6) * t414;
	t396 = t404 * t474 - t409 * t426;
	t424 = 0.1e1 / pkin(2);
	t405 = 0.1e1 / t408;
	t480 = t405 / 0.2e1;
	t453 = t424 * t480;
	t385 = atan2(t396 * t453, t395 * t453);
	t383 = sin(t385);
	t384 = cos(t385);
	t417 = sin(qJ(2));
	t420 = cos(qJ(2));
	t440 = t383 * t417 - t384 * t420;
	t412 = t414 * qJD(3);
	t483 = pkin(1) * pkin(6);
	t459 = t412 * t483;
	t462 = t402 + t403;
	t397 = t462 * t459;
	t400 = 0.1e1 / t426;
	t491 = t397 * t400;
	t389 = t474 * t491;
	t411 = t413 * qJD(3);
	t466 = t411 * t426;
	t473 = t409 * pkin(1);
	t379 = -t389 + (-t466 - (t404 - 0.2e1 * t473) * t412) * pkin(6);
	t439 = t411 * t404 - t412 * t426;
	t465 = t414 * t423;
	t454 = t412 * t465;
	t468 = t400 * t409;
	t380 = t439 * pkin(6) - t397 * t468 - t454 * t484;
	t392 = 0.1e1 / t395 ^ 2;
	t394 = t396 ^ 2;
	t388 = t394 * t392 + 0.1e1;
	t386 = 0.1e1 / t388;
	t391 = 0.1e1 / t395;
	t476 = pkin(2) * t408;
	t456 = t391 * t476;
	t444 = t386 * t424 * t456;
	t406 = 0.1e1 / t408 ^ 2;
	t451 = t406 * t459;
	t457 = t386 * t476;
	t449 = t392 * t457;
	t487 = t424 * t396 * t449;
	t486 = qJD(2) + 0.2e1 * (t380 * t480 + t396 * t451) * t444 - 0.2e1 * (t379 * t480 + t395 * t451) * t487;
	t490 = t486 * t440;
	t493 = t421 * t490;
	t492 = -0.4e1 * t425;
	t477 = pkin(1) * t406;
	t448 = t462 * t483;
	t398 = t414 * t448;
	t488 = t400 * t398;
	t450 = t404 + t488;
	t381 = (-t413 * t426 + (-t450 + 0.2e1 * t473) * t414) * pkin(6);
	t452 = t474 * t477;
	t377 = (t381 * t480 + t395 * t452) * t424;
	t382 = -t398 * t468 - 0.2e1 * t423 * t414 ^ 2 * pkin(1) + (t413 * t404 - t464) * pkin(6);
	t378 = (t382 * t480 + t396 * t452) * t424;
	t469 = t392 * t396;
	t455 = t377 * t469;
	t458 = t405 * t406 * t492;
	t470 = t379 * t391 * t392;
	t471 = t378 * t391;
	t478 = pkin(1) * t405;
	t485 = -t400 * (t411 * t448 + t454 * t492) - 0.1e1 / t467 * t397 * t488;
	t489 = (t380 * t469 - t394 * t470) / t388 ^ 2;
	t369 = 0.2e1 * ((-0.4e1 * pkin(1) * t411 * t465 + t485 * t409 - t389) * t480 - (t396 * t414 * t458 + t413 * t478) * t423 * t412 + ((-t450 * t412 - t466) * t480 + (t380 * t414 + t382 * t412 + t396 * t411) * t477) * pkin(6)) * t444 - 0.2e1 * (-(t395 * t458 - 0.2e1 * t478) * t454 + ((-t413 * t491 + t485 * t414 - t439) * t480 + (t379 * t414 + t381 * t412) * t477 + (-t480 * t488 + (t395 * t406 + t409 * t405) * pkin(1)) * t411) * pkin(6)) * t487 - 0.2e1 * (0.2e1 * t471 - 0.2e1 * t455) * pkin(2) * t386 * t459 + 0.2e1 * (-t379 * t449 - 0.2e1 * t456 * t489) * t378 + 0.2e1 * (-t380 * t449 + 0.2e1 * (t386 * t470 + t392 * t489) * t396 * t476) * t377;
	t441 = t383 * t420 + t384 * t417;
	t438 = t369 * t441;
	t418 = sin(qJ(1));
	t460 = qJD(1) * t418;
	t437 = t440 * t369;
	t436 = t440 * t421;
	t435 = qJD(1) * t441;
	t434 = t486 * t441;
	t373 = -t418 * t490 + t421 * t435;
	t370 = t434 * t421 - t440 * t460;
	t372 = qJD(1) * t436 + t434 * t418;
	t375 = 0.2e1 * (-t455 + t471) * t457;
	t371 = t418 * t435 + t493;
	t1 = [t373, t370, t369 * t436 + t370 * t375, 0; t371, t372, t372 * t375 + t418 * t437, 0; 0, t490, t375 * t490 - t438, 0; -t372, -t371, t421 * t438 + (-t441 * t460 - t493) * t375, 0; t370, t373, t373 * t375 + t418 * t438, 0; 0, t434, t434 * t375 + t437, 0; -t460, 0, 0, 0; qJD(1) * t421, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobiRD_rot_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:43:42
	% EndTime: 2020-04-14 18:44:03
	% DurationCPUTime: 8.38s
	% Computational Cost: add. (167117->145), mult. (257134->311), div. (7032->14), fcn. (159178->16), ass. (0->155)
	t677 = cos(pkin(20));
	t680 = cos(qJ(3));
	t777 = sin(pkin(20));
	t783 = sin(qJ(3));
	t674 = t783 * t677 + t680 * t777;
	t779 = pkin(6) * t674;
	t750 = pkin(1) * t779;
	t671 = 0.2e1 * t750;
	t686 = pkin(2) ^ 2;
	t685 = pkin(6) ^ 2;
	t688 = pkin(1) ^ 2;
	t757 = t685 + t688;
	t739 = -pkin(13) ^ 2 + t757;
	t665 = t671 + t686 + t739;
	t670 = -pkin(1) - t779;
	t675 = -t680 * t677 + t783 * t777;
	t758 = t671 + t685;
	t789 = -pkin(2) - pkin(13);
	t659 = (pkin(1) - t789) * (pkin(1) + t789) + t758;
	t788 = -pkin(2) + pkin(13);
	t660 = (pkin(1) - t788) * (pkin(1) + t788) + t758;
	t768 = t660 * t659;
	t689 = sqrt(-t768);
	t764 = t675 * t689;
	t646 = -pkin(6) * t764 - t665 * t670;
	t643 = 0.1e1 / t646 ^ 2;
	t647 = pkin(6) * t675 * t665 - t670 * t689;
	t645 = t647 ^ 2;
	t639 = t643 * t645 + 0.1e1;
	t637 = 0.1e1 / t639;
	t669 = t671 + t757;
	t780 = pkin(2) * t669;
	t798 = 0.2e1 * t637 * t780;
	t790 = pkin(1) * pkin(6);
	t712 = 0.2e1 * (t659 + t660) * t790;
	t652 = t675 * t712;
	t657 = 0.1e1 / t689;
	t786 = t657 / 0.2e1;
	t722 = t652 * t786 + t665;
	t778 = t670 * pkin(1);
	t622 = (-t674 * t689 + (-t722 + 0.2e1 * t778) * t675) * pkin(6);
	t687 = 0.1e1 / pkin(2);
	t667 = 0.1e1 / t669 ^ 2;
	t781 = pkin(1) * t667;
	t752 = pkin(6) * t781;
	t731 = t646 * t752;
	t666 = 0.1e1 / t669;
	t785 = t666 / 0.2e1;
	t616 = (t622 * t785 + t675 * t731) * t687;
	t787 = -t657 / 0.2e1;
	t735 = t670 * t787;
	t806 = -0.2e1 * pkin(1);
	t623 = t652 * t735 + t685 * t675 ^ 2 * t806 + (t665 * t674 - t764) * pkin(6);
	t730 = t647 * t752;
	t617 = (t623 * t785 + t675 * t730) * t687;
	t642 = 0.1e1 / t646;
	t770 = t643 * t647;
	t800 = -t616 * t770 + t617 * t642;
	t606 = t800 * t798;
	t664 = t686 - t739 - 0.2e1 * t750;
	t662 = 0.1e1 / t664 ^ 2;
	t767 = t660 * t662;
	t655 = -t659 * t767 + 0.1e1;
	t653 = 0.1e1 / t655;
	t661 = 0.1e1 / t664;
	t736 = t661 * t786;
	t753 = t662 * t790;
	t805 = -0.2e1 * t689 * t753;
	t705 = t652 * t736 + t675 * t805;
	t619 = t705 * t653;
	t801 = t606 + t619;
	t673 = t675 * qJD(3);
	t648 = t673 * t712;
	t618 = (t648 * t736 + t673 * t805) * t653;
	t799 = t801 * t618;
	t769 = t648 * t675;
	t640 = pkin(6) * t769 * t787;
	t672 = t674 * qJD(3);
	t766 = t672 * t689;
	t620 = t640 + (-t766 - (t665 - 0.2e1 * t778) * t673) * pkin(6);
	t713 = t672 * t665 - t673 * t689;
	t765 = t675 * t685;
	t740 = t673 * t765;
	t621 = t713 * pkin(6) + t648 * t735 + t740 * t806;
	t724 = t688 * t740;
	t641 = t672 * t712 - 0.8e1 * t724;
	t741 = t657 / t768 * t652 * t648;
	t706 = t741 / 0.4e1 + t641 * t786;
	t747 = t642 * t780;
	t804 = t637 * t687;
	t720 = t747 * t804;
	t746 = t643 * t780;
	t725 = t647 * t746;
	t726 = t637 * t746;
	t749 = -0.4e1 * t666 * t667 * t688;
	t751 = t673 * t790;
	t774 = t620 * t642 * t643;
	t782 = pkin(1) * t666;
	t796 = t725 * t804;
	t797 = 0.2e1 * (t621 * t770 - t645 * t774) / t639 ^ 2;
	t587 = 0.2e1 * ((-0.4e1 * pkin(1) * t672 * t765 - t706 * t670 + t640) * t785 - (t647 * t675 * t749 + t674 * t782) * t685 * t673 + ((-t722 * t673 - t766) * t785 + (t621 * t675 + t623 * t673 + t647 * t672) * t781) * pkin(6)) * t720 - 0.2e1 * (-(t646 * t749 - 0.2e1 * t782) * t740 + ((-t675 * t741 / 0.4e1 + (-t674 * t648 / 0.2e1 - t672 * t652 / 0.2e1 - t675 * t641 / 0.2e1) * t657 - t713) * t785 + (t670 * t672 * t666 + (t620 * t675 + t622 * t673 + t646 * t672) * t667) * pkin(1)) * pkin(6)) * t796 - 0.4e1 * t800 * pkin(2) * t637 * t751 + 0.2e1 * (-t620 * t726 - t747 * t797) * t617 + 0.2e1 * (t647 * t774 * t798 - t621 * t726 + t725 * t797) * t616;
	t663 = t661 * t662;
	t600 = t705 / t655 ^ 2 * (-0.2e1 * t767 + (-0.4e1 * t660 * t663 - 0.2e1 * t662) * t659) * t751 + (0.8e1 * t689 * t663 * t724 + t706 * t661 + (-0.2e1 * t766 + (-t652 * t673 - t769) * t657) * t753) * t653;
	t802 = -t600 - t587;
	t784 = t687 / 0.2e1;
	t734 = t666 * t784;
	t635 = atan2(t647 * t734, t646 * t734);
	t634 = cos(t635);
	t681 = cos(qJ(2));
	t761 = t681 * t634;
	t633 = sin(t635);
	t678 = sin(qJ(2));
	t773 = t633 * t678;
	t614 = -t761 + t773;
	t754 = qJD(2) + 0.2e1 * (t621 * t785 + t673 * t730) * t720 - 0.2e1 * (t620 * t785 + t673 * t731) * t796;
	t803 = t754 * t614;
	t771 = t634 * t678;
	t714 = t633 * t681 + t771;
	t699 = t754 * t714;
	t795 = t614 * t799 + t802 * t714 + t801 * t803;
	t679 = sin(qJ(1));
	t697 = t699 * t679;
	t682 = cos(qJ(1));
	t755 = qJD(1) * t682;
	t737 = t681 * t755;
	t738 = t678 * t755;
	t590 = t633 * t738 - t634 * t737 + t697;
	t743 = t679 * t773;
	t610 = -t679 * t761 + t743;
	t611 = t714 * t679;
	t612 = t614 * t682;
	t707 = t614 * t679;
	t794 = t611 * t799 + t590 * t619 + t600 * t610 + t587 * t707 + (qJD(1) * t612 + t697) * t606;
	t756 = qJD(1) * t679;
	t588 = -t614 * t756 + t699 * t682;
	t760 = t681 * t682;
	t763 = t678 * t682;
	t613 = -t633 * t760 - t634 * t763;
	t708 = t714 * t682;
	t793 = (-t606 * t708 + t613 * t619) * t618 + t802 * t612 - t801 * t588;
	t589 = t756 * t771 + (t681 * t756 + t754 * t763) * t633 - t754 * t634 * t760;
	t733 = 0.1e1 / pkin(13) * t784;
	t651 = atan2(t689 * t733, t664 * t733);
	t649 = sin(t651);
	t650 = cos(t651);
	t792 = t588 * t649 + t589 * t650 + (t612 * t650 - t613 * t649) * t618;
	t591 = t633 * t737 + (t754 * t681 * t679 + t738) * t634 - t754 * t743;
	t791 = -t590 * t650 - t591 * t649 + (t610 * t649 - t611 * t650) * t618;
	t775 = t618 * t649;
	t704 = t589 * t649 + t612 * t775 + (t613 * t618 - t588) * t650;
	t703 = t590 * t649 + t611 * t775 + (t610 * t618 - t591) * t650;
	t702 = t589 * t619 + t600 * t613 - t587 * t708 - (-t682 * t803 - t714 * t756) * t606 + t612 * t799;
	t701 = -t591 * t619 - (qJD(1) * t708 - t679 * t803) * t606 + (t606 * t707 + t610 * t619) * t618 + t802 * t611;
	t700 = t802 * t614 - t801 * t699 - t714 * t799;
	t1 = [t703, t704, t702 * t649 + t793 * t650, 0; -t792, t791, t701 * t649 - t794 * t650, 0; 0, -t803 * t650 - t699 * t649 + (-t614 * t650 - t649 * t714) * t618, t700 * t649 - t795 * t650, 0; -t791, t792, -t793 * t649 + t702 * t650, 0; t704, t703, t794 * t649 + t701 * t650, 0; 0, t803 * t649 - t699 * t650 + (t614 * t649 - t650 * t714) * t618, t795 * t649 + t700 * t650, 0; -t756, 0, 0, 0; t755, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobiRD_rot_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-14 18:55:52
	% EndTime: 2020-04-14 19:05:08
	% DurationCPUTime: 366.39s
	% Computational Cost: add. (8767481->357), mult. (13634090->688), div. (518472->18), fcn. (8533354->24), ass. (0->340)
	t1631 = 4 * pkin(5);
	t1593 = -2 * pkin(4);
	t1340 = pkin(7) ^ 2;
	t1344 = pkin(1) ^ 2;
	t1333 = sin(qJ(2));
	t1336 = cos(qJ(2));
	t1338 = cos(pkin(19));
	t1585 = sin(pkin(19));
	t1478 = -t1333 * t1338 + t1336 * t1585;
	t1569 = pkin(7) * t1478;
	t1594 = -2 * pkin(1);
	t1524 = -t1569 * t1594 + t1344;
	t1319 = t1340 + t1524;
	t1315 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1319;
	t1320 = pkin(1) + t1569;
	t1325 = t1333 * t1585 + t1336 * t1338;
	t1588 = pkin(7) + pkin(8);
	t1589 = pkin(7) - pkin(8);
	t1313 = (pkin(3) + t1588) * (-pkin(3) + t1589) + t1524;
	t1314 = (-pkin(3) + t1588) * (pkin(3) + t1589) + t1524;
	t1548 = t1314 * t1313;
	t1346 = sqrt(-t1548);
	t1543 = t1325 * t1346;
	t1306 = -pkin(7) * t1543 + t1315 * t1320;
	t1331 = cos(pkin(23));
	t1541 = t1331 * t1306;
	t1568 = pkin(7) * t1325;
	t1307 = t1315 * t1568 + t1320 * t1346;
	t1330 = sin(pkin(23));
	t1542 = t1330 * t1307;
	t1316 = 0.1e1 / t1319;
	t1343 = 0.1e1 / pkin(3);
	t1546 = t1316 * t1343;
	t1298 = (-t1541 / 0.2e1 + t1542 / 0.2e1) * t1546;
	t1540 = t1331 * t1307;
	t1553 = t1306 * t1330;
	t1299 = (t1540 / 0.2e1 + t1553 / 0.2e1) * t1546;
	t1288 = atan2(t1299, t1298);
	t1283 = sin(t1288);
	t1284 = cos(t1288);
	t1323 = t1325 * qJD(2);
	t1590 = pkin(1) * pkin(7);
	t1481 = 0.2e1 * (t1313 + t1314) * t1590;
	t1308 = t1323 * t1481;
	t1311 = 0.1e1 / t1346;
	t1580 = -t1311 / 0.2e1;
	t1302 = t1308 * t1568 * t1580;
	t1522 = t1320 * t1594;
	t1506 = -t1315 + t1522;
	t1322 = t1478 * qJD(2);
	t1545 = t1322 * t1346;
	t1289 = t1302 + (t1323 * t1506 - t1545) * pkin(7);
	t1514 = t1323 * t1325 * t1340;
	t1496 = pkin(1) * t1514;
	t1579 = t1311 / 0.2e1;
	t1510 = t1320 * t1579;
	t1544 = t1323 * t1346;
	t1290 = t1308 * t1510 - 0.2e1 * t1496 + (t1315 * t1322 - t1544) * pkin(7);
	t1317 = 0.1e1 / t1319 ^ 2;
	t1521 = t1317 * t1590;
	t1448 = (t1540 + t1553) * t1521;
	t1576 = t1331 / 0.2e1;
	t1578 = t1330 / 0.2e1;
	t1256 = ((t1289 * t1578 + t1290 * t1576) * t1316 + t1323 * t1448) * t1343;
	t1495 = t1344 * t1514;
	t1305 = t1322 * t1481 - 0.8e1 * t1495;
	t1309 = t1325 * t1481;
	t1494 = t1309 * t1580 - t1315;
	t1515 = t1311 / t1548 * t1309 * t1308;
	t1574 = pkin(1) * t1340;
	t1257 = t1302 + (t1515 / 0.4e1 + t1305 * t1579) * t1320 + (-0.4e1 * t1322 * t1325 - 0.2e1 * t1323 * t1478) * t1574 + (t1323 * t1494 - t1545) * pkin(7);
	t1258 = 0.4e1 * t1496 + (t1544 - t1325 * t1515 / 0.4e1 + t1506 * t1322 + (-t1478 * t1308 / 0.2e1 - t1322 * t1309 / 0.2e1 - t1325 * t1305 / 0.2e1) * t1311) * pkin(7);
	t1291 = (-t1478 * t1346 + (t1494 + t1522) * t1325) * pkin(7);
	t1292 = t1309 * t1510 - 0.2e1 * t1325 ^ 2 * t1574 + (t1315 * t1478 - t1543) * pkin(7);
	t1449 = (-t1541 + t1542) * t1521;
	t1577 = -t1331 / 0.2e1;
	t1259 = ((t1291 * t1577 + t1292 * t1578) * t1316 + t1325 * t1449) * t1343;
	t1260 = ((t1291 * t1578 + t1292 * t1576) * t1316 + t1325 * t1448) * t1343;
	t1295 = 0.1e1 / t1298 ^ 2;
	t1297 = t1299 ^ 2;
	t1287 = t1295 * t1297 + 0.1e1;
	t1285 = 0.1e1 / t1287;
	t1294 = 0.1e1 / t1298;
	t1451 = t1290 * t1325 + t1292 * t1323 + t1307 * t1322;
	t1452 = t1289 * t1325 + t1291 * t1323 + t1306 * t1322;
	t1490 = t1316 * t1317 * t1495;
	t1461 = 0.4e1 * t1330 * t1490;
	t1477 = t1331 * t1490;
	t1509 = t1316 * t1578;
	t1547 = t1316 * t1331;
	t1554 = t1295 * t1299;
	t1255 = ((t1289 * t1577 + t1290 * t1578) * t1316 + t1323 * t1449) * t1343;
	t1608 = t1255 * t1295;
	t1558 = t1294 * t1608;
	t1560 = 0.2e1 * (t1256 * t1554 - t1297 * t1558) / t1287 ^ 2;
	t1582 = -t1258 / 0.2e1;
	t1583 = t1257 / 0.2e1;
	t1215 = (-t1285 * t1608 - t1294 * t1560) * t1260 + (t1554 * t1560 + (-t1256 * t1295 + 0.2e1 * t1299 * t1558) * t1285) * t1259 + ((t1258 * t1509 + t1306 * t1461 + 0.4e1 * t1307 * t1477 + t1547 * t1583) * t1294 - (t1257 * t1509 - 0.4e1 * t1306 * t1477 + t1307 * t1461 + t1547 * t1582) * t1554 + ((t1294 * t1451 + t1452 * t1554) * t1331 + (t1294 * t1452 - t1451 * t1554) * t1330) * t1521) * t1285 * t1343;
	t1237 = (-t1255 * t1554 + t1256 * t1294) * t1285;
	t1528 = qJD(2) + t1237;
	t1238 = (-t1259 * t1554 + t1260 * t1294) * t1285;
	t1605 = t1528 * t1238;
	t1467 = t1605 + t1528;
	t1444 = t1215 * t1333 + t1336 * t1467;
	t1439 = t1444 * t1284;
	t1561 = t1215 * t1336;
	t1630 = t1439 - (t1333 * t1605 - t1561) * t1283;
	t1342 = pkin(4) ^ 2;
	t1341 = pkin(5) ^ 2;
	t1335 = cos(qJ(3));
	t1549 = t1307 * t1335;
	t1332 = sin(qJ(3));
	t1552 = t1306 * t1332;
	t1476 = t1552 / 0.2e1 + t1549 / 0.2e1;
	t1300 = t1476 * t1546;
	t1550 = t1307 * t1332;
	t1551 = t1306 * t1335;
	t1475 = t1551 / 0.2e1 - t1550 / 0.2e1;
	t1301 = t1475 * t1546;
	t1329 = pkin(23) + pkin(22);
	t1327 = sin(t1329);
	t1328 = cos(t1329);
	t1271 = t1300 * t1328 + t1301 * t1327;
	t1572 = pkin(5) * t1271;
	t1525 = -t1572 * t1593 + t1341;
	t1268 = t1342 + t1525;
	t1265 = pkin(9) ^ 2 - pkin(11) ^ 2 + t1268;
	t1533 = t1335 * t1289;
	t1538 = t1332 * t1290;
	t1470 = -t1533 / 0.2e1 + t1538 / 0.2e1;
	t1532 = t1335 * t1290;
	t1539 = t1332 * t1289;
	t1473 = t1539 / 0.2e1 + t1532 / 0.2e1;
	t1504 = t1323 * t1521;
	t1482 = t1549 + t1552;
	t1483 = t1550 - t1551;
	t1599 = t1327 * t1482 + t1328 * t1483;
	t1614 = t1343 * (t1504 * t1599 + (t1328 * t1470 + t1327 * t1473 + (t1327 * t1475 + t1328 * t1476) * qJD(3)) * t1316);
	t1626 = pkin(5) * t1614;
	t1629 = t1265 * t1626;
	t1587 = -pkin(9) - pkin(11);
	t1263 = (pkin(4) - t1587) * (pkin(4) + t1587) + t1525;
	t1586 = pkin(11) - pkin(9);
	t1264 = (pkin(4) - t1586) * (pkin(4) + t1586) + t1525;
	t1557 = t1264 * t1263;
	t1345 = sqrt(-t1557);
	t1628 = t1345 * t1626;
	t1627 = t1333 * t1467 - t1561;
	t1432 = -t1327 * t1483 + t1328 * t1482;
	t1624 = ((-t1327 * t1476 + t1328 * t1475) * qJD(3) - t1327 * t1470 + t1328 * t1473) * t1316 + t1432 * t1504;
	t1267 = 0.1e1 / t1268 ^ 2;
	t1339 = 0.1e1 / pkin(9);
	t1607 = t1267 * t1339;
	t1489 = t1283 * t1336 + t1284 * t1333;
	t1623 = t1528 * t1489;
	t1622 = (t1238 + 0.1e1) * t1489;
	t1334 = sin(qJ(1));
	t1534 = t1334 * t1336;
	t1280 = t1284 * t1534;
	t1556 = t1283 * t1333;
	t1519 = t1334 * t1556;
	t1621 = t1280 - t1519;
	t1269 = -pkin(4) - t1572;
	t1604 = t1263 + t1264;
	t1424 = t1343 * t1624;
	t1421 = pkin(5) * t1424;
	t1610 = t1421 * t1593;
	t1397 = t1604 * t1610;
	t1612 = 0.1e1 / t1345;
	t1395 = -t1612 / t1557 * t1397 / 0.4e1;
	t1584 = -t1612 / 0.2e1;
	t1620 = t1269 * t1395 - t1421 * t1584;
	t1499 = t1300 * t1327 - t1301 * t1328;
	t1571 = pkin(5) * t1499;
	t1242 = -t1265 * t1269 - t1345 * t1571;
	t1240 = 0.1e1 / t1242;
	t1241 = 0.1e1 / t1242 ^ 2;
	t1396 = t1397 * t1584;
	t1394 = pkin(5) * t1396;
	t1384 = t1265 * t1421 + t1269 * t1610 + t1394 * t1499 - t1628;
	t1419 = t1341 * t1424;
	t1415 = pkin(4) * t1419;
	t1412 = 0.2e1 * t1415;
	t1385 = t1269 * t1396 + t1345 * t1421 + t1412 * t1499 + t1629;
	t1243 = t1265 * t1571 - t1269 * t1345;
	t1592 = t1243 ^ 2;
	t1508 = t1241 * t1592 + 0.1e1;
	t1559 = t1241 * t1243;
	t1567 = pkin(9) * t1268;
	t1591 = t1240 * t1241;
	t1373 = 0.2e1 * t1339 / t1508 ^ 2 * (-t1384 * t1591 * t1592 + t1385 * t1559) * t1567;
	t1382 = t1339 * t1384;
	t1231 = 0.1e1 / t1508;
	t1520 = t1231 * t1567;
	t1378 = t1382 * t1520;
	t1416 = pkin(4) * t1339 * t1424;
	t1404 = pkin(9) * t1231 * t1416;
	t1618 = -0.2e1 * t1241 * t1378 + (t1404 * t1631 - 0.2e1 * t1373) * t1240;
	t1383 = t1339 * t1385;
	t1381 = pkin(5) * t1383;
	t1497 = t1241 * t1520;
	t1613 = 2 * pkin(5);
	t1615 = t1243 * t1591 * t1378 * t1631 - 0.2e1 * t1381 * t1497 + (-0.4e1 * t1341 * t1404 + t1373 * t1613) * t1559;
	t1266 = 0.1e1 / t1268;
	t1611 = 0.2e1 * t1269;
	t1337 = cos(qJ(1));
	t1555 = t1284 * t1336;
	t1488 = -t1555 + t1556;
	t1606 = t1337 * t1488;
	t1409 = t1267 * t1416;
	t1405 = pkin(5) * t1409;
	t1491 = t1243 * t1497;
	t1498 = t1240 * t1520;
	t1581 = t1266 / 0.2e1;
	t1370 = 0.2e1 * (-t1243 * t1405 + t1383 * t1581) * t1498 - 0.2e1 * (-t1242 * t1405 + t1382 * t1581) * t1491;
	t1511 = t1339 * t1581;
	t1445 = atan2(t1243 * t1511, t1242 * t1511);
	t1440 = sin(t1445);
	t1368 = t1440 * t1370;
	t1441 = cos(t1445);
	t1369 = t1441 * t1370;
	t1565 = sin(pkin(22));
	t1566 = cos(pkin(22));
	t1603 = t1368 * t1565 + t1369 * t1566;
	t1194 = t1368 * t1566 - t1369 * t1565;
	t1602 = t1395 * t1571 + t1584 * t1626;
	t1414 = t1342 * t1419;
	t1402 = -0.4e1 * t1266 * t1414 * t1607;
	t1418 = pkin(4) * t1626;
	t1601 = t1402 * t1499 + t1418 * t1607;
	t1530 = t1335 * t1292;
	t1537 = t1332 * t1291;
	t1472 = t1537 / 0.2e1 + t1530 / 0.2e1;
	t1503 = t1325 * t1521;
	t1261 = (-t1316 * t1472 - t1482 * t1503) * t1343;
	t1531 = t1335 * t1291;
	t1536 = t1332 * t1292;
	t1469 = -t1531 / 0.2e1 + t1536 / 0.2e1;
	t1262 = (t1316 * t1469 + t1483 * t1503) * t1343;
	t1245 = t1261 * t1328 + t1262 * t1327;
	t1457 = 0.4e1 * t1482;
	t1458 = 0.4e1 * t1483;
	t1575 = -t1335 / 0.2e1;
	t1471 = t1258 * t1575 + t1332 * t1583;
	t1474 = t1257 * t1575 + t1332 * t1582;
	t1484 = -t1530 - t1537;
	t1485 = -t1531 + t1536;
	t1486 = -t1532 - t1539;
	t1487 = -t1533 + t1538;
	t1391 = t1343 * ((t1327 * t1458 - t1328 * t1457) * t1490 + (t1328 * t1474 + t1327 * t1471 + (t1327 * t1472 + t1328 * t1469) * qJD(3)) * t1316 + ((t1327 * t1485 + t1328 * t1484) * t1323 - t1432 * t1322 + (qJD(3) * t1599 + t1327 * t1487 + t1328 * t1486) * t1325) * t1521);
	t1389 = pkin(5) * t1391;
	t1388 = pkin(4) * t1389;
	t1600 = t1245 * t1402 + t1388 * t1607;
	t1217 = -t1440 * t1565 - t1441 * t1566;
	t1523 = t1341 * t1593;
	t1507 = t1499 * t1523;
	t1596 = (t1523 * t1614 + t1394) * t1511 - t1507 * t1405 + pkin(4) * t1267 * t1381;
	t1573 = pkin(5) * t1267;
	t1570 = pkin(5) * t1343;
	t1564 = qJD(1) * t1334;
	t1563 = qJD(1) * t1337;
	t1535 = t1333 * t1337;
	t1529 = t1336 * t1337;
	t1236 = t1237 * t1556;
	t1527 = -qJD(2) * t1519 - t1236 * t1334;
	t1526 = qJD(2) * t1556 + t1236;
	t1518 = t1283 * t1529;
	t1516 = t1284 * t1529;
	t1281 = t1283 * t1535;
	t1513 = t1269 * t1584;
	t1512 = t1499 * t1584;
	t1505 = pkin(4) * t1611 - t1265;
	t1502 = 0.2e1 * t1584;
	t1493 = 0.2e1 * t1498;
	t1492 = t1339 * t1498;
	t1480 = pkin(4) * t1604 * t1613;
	t1479 = -0.2e1 * t1491;
	t1466 = pkin(4) * (t1242 * t1267 + t1266 * t1269);
	t1465 = pkin(5) * t1339 * t1491;
	t1250 = t1489 * t1334;
	t1462 = t1488 * t1238;
	t1232 = t1245 * t1480;
	t1246 = -t1261 * t1327 + t1262 * t1328;
	t1460 = t1232 * t1512 - t1246 * t1345;
	t1244 = t1499 * t1480;
	t1459 = t1244 * t1512 - t1271 * t1345;
	t1450 = pkin(4) * (-t1266 * t1341 * t1499 + t1243 * t1573);
	t1447 = t1462 + t1556;
	t1446 = t1462 - t1555;
	t1218 = t1621 * qJD(1) + t1528 * (t1284 * t1535 + t1518);
	t1443 = t1232 * t1513 + (-t1245 * t1345 + t1246 * t1265) * pkin(5);
	t1442 = t1244 * t1513 + (t1265 * t1271 - t1345 * t1499) * pkin(5);
	t1226 = t1622 * t1337;
	t1430 = (-t1245 * t1265 + t1460) * t1581 + t1245 * t1466;
	t1429 = (-t1265 * t1499 + t1459) * t1581 + t1499 * t1466;
	t1428 = t1245 * t1450 + t1443 * t1581;
	t1427 = t1442 * t1581 + t1450 * t1499;
	t1205 = t1444 * t1283 + t1284 * t1627;
	t1216 = -t1440 * t1566 + t1441 * t1565;
	t1420 = t1624 * t1570;
	t1411 = -0.4e1 * t1415;
	t1410 = 0.4e1 * t1414;
	t1403 = t1341 * t1409;
	t1390 = ((t1327 * t1457 + t1328 * t1458) * t1490 + (t1328 * t1471 - t1327 * t1474 + (-t1327 * t1469 + t1328 * t1472) * qJD(3)) * t1316 + ((-t1327 * t1484 + t1328 * t1485) * t1323 + t1599 * t1322 + (qJD(3) * t1432 - t1327 * t1486 + t1328 * t1487) * t1325) * t1521) * t1570;
	t1386 = (t1410 * t1499 + t1418 * t1604) * t1502;
	t1379 = pkin(4) * t1382 * t1573;
	t1374 = (t1245 * t1410 + t1388 * t1604) * t1502;
	t1363 = ((t1244 * t1620 + t1265 * t1420 + t1269 * t1386 + t1271 * t1412 + t1507 * t1614 - t1628) * t1511 - t1442 * t1405 + t1596 * t1499 + t1601 * t1243) * t1493 + ((t1244 * t1602 + t1271 * t1394 - t1345 * t1420 + t1386 * t1571 + t1411 * t1499 + t1418 * t1611 - t1629) * t1511 - (t1499 * t1505 + t1459) * t1403 + t1499 * t1379 + t1601 * t1242) * t1479 + t1618 * t1427 + t1615 * t1429;
	t1362 = t1363 * t1441;
	t1361 = t1363 * t1440;
	t1360 = ((t1232 * t1620 + t1246 * t1412 + t1265 * t1390 + t1269 * t1374 - t1345 * t1389 + t1391 * t1507) * t1511 - t1443 * t1405 + t1596 * t1245 + t1600 * t1243) * t1493 + ((t1232 * t1602 + t1245 * t1411 + t1246 * t1394 - t1265 * t1389 - t1345 * t1390 + t1374 * t1571 + t1388 * t1611) * t1511 - (t1245 * t1505 + t1460) * t1403 + t1245 * t1379 + t1600 * t1242) * t1479 + t1618 * t1428 + t1615 * t1430;
	t1359 = t1360 * t1441;
	t1358 = t1360 * t1440;
	t1279 = qJD(1) * t1516;
	t1252 = t1489 * t1337;
	t1251 = t1281 - t1516;
	t1228 = t1446 + t1556;
	t1227 = t1337 * t1446 + t1281;
	t1225 = t1334 * t1447 - t1280;
	t1224 = t1622 * t1334;
	t1222 = -t1528 * t1555 + t1526;
	t1221 = qJD(1) * t1518 + (qJD(1) * t1535 + t1528 * t1534) * t1284 + t1527;
	t1220 = qJD(1) * t1281 + t1334 * t1623 - t1279;
	t1219 = qJD(1) * t1250 + t1528 * t1606;
	t1214 = 0.2e1 * t1427 * t1492 - 0.2e1 * t1429 * t1465;
	t1211 = 0.2e1 * t1428 * t1492 - 0.2e1 * t1430 * t1465;
	t1206 = t1526 - t1630;
	t1204 = t1205 * t1334 + t1447 * t1563 - t1279;
	t1203 = qJD(1) * t1226 + t1334 * t1630 + t1527;
	t1202 = t1215 * t1606 + (t1337 * t1623 - t1488 * t1564) * t1238 + t1218;
	t1201 = -t1622 * t1564 + (-t1283 * t1627 + t1439) * t1337;
	t1200 = t1216 * t1214;
	t1199 = t1217 * t1214;
	t1197 = t1216 * t1211;
	t1196 = t1217 * t1211;
	t1188 = t1214 * t1603 + t1566 * t1361 - t1565 * t1362;
	t1187 = t1194 * t1214 - t1565 * t1361 - t1566 * t1362;
	t1186 = t1211 * t1603 + t1566 * t1358 - t1565 * t1359;
	t1185 = t1194 * t1211 - t1565 * t1358 - t1566 * t1359;
	t1 = [t1194 * t1250 - t1216 * t1220 + t1217 * t1221 - t1603 * t1621, t1185 * t1251 - t1186 * t1252 + t1194 * t1227 + t1196 * t1218 - t1197 * t1219 + t1201 * t1216 + t1202 * t1217 - t1226 * t1603, t1187 * t1251 - t1188 * t1252 + t1199 * t1218 - t1200 * t1219, 0; -t1194 * t1252 + t1216 * t1218 + t1217 * t1219 - t1251 * t1603, -t1185 * t1621 - t1186 * t1250 + t1194 * t1225 + t1196 * t1220 + t1197 * t1221 + t1203 * t1216 + t1204 * t1217 - t1224 * t1603, -t1187 * t1621 - t1188 * t1250 + t1199 * t1220 + t1200 * t1221, 0; 0, -t1185 * t1489 - t1186 * t1488 - t1194 * t1622 + t1196 * t1222 + t1197 * t1623 + t1205 * t1216 + t1206 * t1217 - t1228 * t1603, -t1187 * t1489 - t1188 * t1488 + t1199 * t1222 + t1200 * t1623, 0; t1194 * t1621 - t1216 * t1221 - t1217 * t1220 + t1250 * t1603, t1185 * t1252 + t1186 * t1251 + t1194 * t1226 - t1196 * t1219 - t1197 * t1218 + t1201 * t1217 - t1202 * t1216 + t1227 * t1603, t1187 * t1252 + t1188 * t1251 - t1199 * t1219 - t1200 * t1218, 0; t1194 * t1251 - t1216 * t1219 + t1217 * t1218 - t1252 * t1603, t1185 * t1250 - t1186 * t1621 + t1194 * t1224 + t1196 * t1221 - t1197 * t1220 + t1203 * t1217 - t1204 * t1216 + t1225 * t1603, t1187 * t1250 - t1188 * t1621 + t1199 * t1221 - t1200 * t1220, 0; 0, t1185 * t1488 - t1186 * t1489 + t1194 * t1228 + t1196 * t1623 - t1197 * t1222 + t1205 * t1217 - t1206 * t1216 - t1603 * t1622, t1187 * t1488 - t1188 * t1489 + t1199 * t1623 - t1200 * t1222, 0; -t1564, 0, 0, 0; t1563, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
end