% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% palh1m1OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [13x1]
%   Generalized joint coordinates (joint angles)
% qJD [13x1]
%   Generalized joint velocities
% qJDD [13x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [20x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi312,phi413,phi710,phi711]';
% 
% Output:
% tauB_reg [6x(11*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-15 19:46
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = palh1m1OL_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(13,1),zeros(13,1),zeros(13,1),zeros(3,1),zeros(20,1)}
assert(isreal(qJ) && all(size(qJ) == [13 1]), ...
  'palh1m1OL_invdynB_fixb_reg2_snew_vp: qJ has to be [13x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [13 1]), ...
  'palh1m1OL_invdynB_fixb_reg2_snew_vp: qJD has to be [13x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [13 1]), ...
  'palh1m1OL_invdynB_fixb_reg2_snew_vp: qJDD has to be [13x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh1m1OL_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [20 1]), ...
  'palh1m1OL_invdynB_fixb_reg2_snew_vp: pkin has to be [20x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-15 19:38:29
% EndTime: 2020-04-15 19:44:02
% DurationCPUTime: 90.80s
% Computational Cost: add. (81676->1203), mult. (181890->1949), div. (0->0), fcn. (145856->22), ass. (0->961)
t1450 = sin(qJ(8));
t1437 = qJDD(2) + qJDD(8);
t1456 = sin(qJ(2));
t1459 = cos(qJ(8));
t1465 = cos(qJ(2));
t1475 = t1450 * t1465 + t1456 * t1459;
t1350 = t1475 * qJD(1);
t1599 = -t1450 * t1456 + t1459 * t1465;
t1355 = t1599 * qJD(1);
t1581 = t1355 * t1350;
t1632 = t1437 - t1581;
t1636 = t1450 * t1632;
t1635 = t1459 * t1632;
t1451 = sin(qJ(7));
t1438 = qJDD(2) + qJDD(7);
t1460 = cos(qJ(7));
t1555 = t1451 * t1465;
t1352 = (-t1456 * t1460 - t1555) * qJD(1);
t1533 = t1460 * t1465;
t1556 = t1451 * t1456;
t1356 = (t1533 - t1556) * qJD(1);
t1580 = t1356 * t1352;
t1611 = t1438 + t1580;
t1634 = t1451 * t1611;
t1633 = t1460 * t1611;
t1585 = qJD(1) * qJD(2);
t1494 = t1465 * t1585;
t1513 = t1456 * qJDD(1);
t1379 = -t1494 - t1513;
t1428 = t1465 * qJDD(1);
t1504 = t1456 * t1585;
t1383 = t1428 - t1504;
t1205 = -t1350 * qJD(8) + t1450 * t1379 + t1459 * t1383;
t1439 = qJD(2) + qJD(8);
t1572 = t1439 * t1350;
t1152 = -t1572 + t1205;
t1449 = sin(qJ(9));
t1458 = cos(qJ(9));
t1457 = sin(qJ(1));
t1466 = cos(qJ(1));
t1397 = t1466 * g(1) + t1457 * g(2);
t1469 = qJD(1) ^ 2;
t1374 = -t1469 * pkin(15) - t1397;
t1327 = -t1465 * g(3) - t1456 * t1374;
t1329 = -t1456 * g(3) + t1465 * t1374;
t1208 = t1450 * t1327 + t1459 * t1329;
t1095 = pkin(2) * t1632 - t1208;
t1212 = t1459 * t1327 - t1450 * t1329;
t1342 = t1350 ^ 2;
t1434 = t1439 ^ 2;
t1260 = -t1342 - t1434;
t1134 = pkin(2) * t1260 + t1212;
t991 = -t1458 * t1095 + t1449 * t1134;
t992 = -t1449 * t1095 - t1458 * t1134;
t851 = t1449 * t992 + t1458 * t991;
t1631 = t1450 * t851;
t1455 = sin(qJ(3));
t1454 = sin(qJ(4));
t1463 = cos(qJ(4));
t1503 = t1456 * t1469 * t1465;
t1395 = qJDD(2) - t1503;
t1281 = pkin(1) * t1395 - t1329;
t1444 = t1456 ^ 2;
t1429 = t1444 * t1469;
t1468 = qJD(2) ^ 2;
t1404 = -t1429 - t1468;
t1289 = pkin(1) * t1404 + t1327;
t1464 = cos(qJ(3));
t1136 = -t1464 * t1281 + t1455 * t1289;
t1526 = t1464 * t1465;
t1548 = t1455 * t1456;
t1357 = (t1526 - t1548) * qJD(1);
t1347 = t1357 ^ 2;
t1441 = qJD(2) + qJD(3);
t1436 = t1441 ^ 2;
t1262 = -t1347 - t1436;
t1093 = pkin(5) * t1262 + t1136;
t1138 = t1455 * t1281 + t1464 * t1289;
t1544 = t1456 * t1464;
t1547 = t1455 * t1465;
t1354 = (t1544 + t1547) * qJD(1);
t1284 = t1357 * t1354;
t1510 = qJDD(2) + qJDD(3);
t1600 = t1284 + t1510;
t1470 = pkin(5) * t1600 + t1138;
t945 = t1454 * t1093 - t1463 * t1470;
t946 = t1463 * t1093 + t1454 * t1470;
t793 = t1454 * t946 - t1463 * t945;
t1630 = t1455 * t793;
t1629 = t1459 * t851;
t1628 = t1464 * t793;
t1447 = sin(pkin(19));
t1448 = cos(qJ(10));
t1594 = cos(pkin(19));
t1597 = sin(qJ(10));
t1366 = t1447 * t1448 - t1594 * t1597;
t1367 = -t1447 * t1597 - t1594 * t1448;
t1188 = t1367 * t1352 - t1366 * t1356;
t1189 = t1366 * t1352 + t1367 * t1356;
t1065 = t1188 * t1189;
t1486 = qJDD(10) + t1438;
t1606 = t1065 + t1486;
t1627 = t1366 * t1606;
t1626 = t1367 * t1606;
t1252 = t1458 * t1350 + t1449 * t1355;
t1255 = -t1449 * t1350 + t1458 * t1355;
t1114 = t1252 * t1255;
t1487 = qJDD(9) + t1437;
t1604 = -t1114 + t1487;
t1625 = t1449 * t1604;
t1453 = sin(qJ(5));
t1257 = t1463 * t1354 + t1454 * t1357;
t1426 = qJD(4) + t1441;
t1462 = cos(qJ(5));
t1197 = t1453 * t1257 - t1462 * t1426;
t1199 = t1462 * t1257 + t1453 * t1426;
t1080 = t1199 * t1197;
t1204 = t1357 * qJD(3) - t1464 * t1379 + t1455 * t1383;
t1207 = -t1354 * qJD(3) + t1455 * t1379 + t1464 * t1383;
t1483 = t1454 * t1204 - t1463 * t1207;
t1011 = -t1257 * qJD(4) - t1483;
t1472 = qJDD(5) - t1011;
t1605 = -t1080 + t1472;
t1624 = t1453 * t1605;
t1253 = t1454 * t1354 - t1463 * t1357;
t1115 = t1257 * t1253;
t1422 = qJDD(4) + t1510;
t1603 = -t1115 + t1422;
t1623 = t1454 * t1603;
t1622 = t1455 * t1600;
t1016 = t1464 * t1136 - t1455 * t1138;
t1621 = t1456 * t1016;
t1135 = -t1460 * t1281 + t1451 * t1289;
t1137 = t1451 * t1281 + t1460 * t1289;
t1017 = t1460 * t1135 - t1451 * t1137;
t1620 = t1456 * t1017;
t1619 = t1458 * t1604;
t1618 = t1462 * t1605;
t1617 = t1463 * t1603;
t1616 = t1464 * t1600;
t1615 = t1465 * t1016;
t1614 = t1465 * t1017;
t1206 = t1352 * qJD(7) + t1451 * t1379 + t1460 * t1383;
t1440 = qJD(2) + qJD(7);
t1569 = t1440 * t1352;
t1613 = t1206 + t1569;
t1566 = t1441 * t1354;
t1158 = t1207 - t1566;
t1612 = t1379 - t1494;
t1231 = t1426 * t1253;
t1471 = t1253 * qJD(4) - t1463 * t1204 - t1454 * t1207;
t1610 = t1471 + t1231;
t1076 = t1459 * t1208 - t1450 * t1212;
t1484 = t1450 * t1208 + t1459 * t1212;
t940 = t1456 * t1076 + t1465 * t1484;
t939 = t1465 * t1076 - t1456 * t1484;
t1424 = qJD(10) + t1440;
t1169 = t1424 * t1188;
t1481 = -t1460 * t1379 + t1451 * t1383;
t1203 = -t1356 * qJD(7) - t1481;
t963 = t1188 * qJD(10) + t1366 * t1203 + t1367 * t1206;
t1609 = t1169 + t963;
t1245 = qJD(5) + t1253;
t1092 = t1245 * t1197;
t943 = -t1197 * qJD(5) + t1453 * t1422 - t1462 * t1471;
t870 = -t943 + t1092;
t1170 = t1424 * t1189;
t962 = -t1189 * qJD(10) + t1367 * t1203 - t1366 * t1206;
t909 = t962 + t1170;
t1396 = t1457 * g(1) - t1466 * g(2);
t1371 = qJDD(1) * pkin(15) + t1396;
t1259 = t1475 * t1371;
t1336 = t1441 * t1357;
t1602 = t1204 + t1336;
t1425 = qJD(9) + t1439;
t1230 = t1425 * t1252;
t1482 = -t1459 * t1379 + t1450 * t1383;
t1202 = -t1355 * qJD(8) - t1482;
t1473 = -t1252 * qJD(9) + t1449 * t1202 + t1458 * t1205;
t971 = t1473 - t1230;
t1485 = -t1462 * t1422 - t1453 * t1471;
t865 = (qJD(5) - t1245) * t1199 + t1485;
t968 = (qJD(4) - t1426) * t1257 + t1483;
t1143 = (qJD(8) - t1439) * t1355 + t1482;
t1147 = (qJD(7) - t1440) * t1356 + t1481;
t1185 = t1188 ^ 2;
t1186 = t1189 ^ 2;
t1195 = t1197 ^ 2;
t1196 = t1199 ^ 2;
t1244 = t1245 ^ 2;
t1248 = t1252 ^ 2;
t1249 = t1253 ^ 2;
t1250 = t1255 ^ 2;
t1251 = t1257 ^ 2;
t1343 = t1352 ^ 2;
t1344 = t1354 ^ 2;
t1345 = t1355 ^ 2;
t1346 = t1356 ^ 2;
t1419 = t1424 ^ 2;
t1421 = t1425 ^ 2;
t1598 = t1426 ^ 2;
t1435 = t1440 ^ 2;
t1596 = pkin(4) * t1447;
t1595 = pkin(9) * t1454;
t1593 = pkin(15) * t1457;
t1592 = pkin(15) * t1466;
t1278 = pkin(1) * t1612 + t1371;
t1078 = t1158 * pkin(5) + t1278;
t773 = t1610 * pkin(11) + (t1426 * t1257 - t1011) * pkin(9) - t1078;
t1105 = t1253 * pkin(9) - t1257 * pkin(11);
t845 = -t1598 * pkin(9) + t1422 * pkin(11) - t1253 * t1105 + t946;
t699 = t1453 * t773 + t1462 * t845;
t1508 = pkin(4) * t1594;
t978 = -t1356 * t1440 * t1508 + (t1594 * t1203 + t1447 * t1613) * pkin(4) + t1278;
t1591 = t1366 * t978;
t1590 = t1367 * t978;
t844 = -t1422 * pkin(9) - t1598 * pkin(11) + t1257 * t1105 + t945;
t1589 = t1453 * t844;
t915 = t1080 + t1472;
t1588 = t1453 * t915;
t1587 = t1462 * t844;
t1586 = t1462 * t915;
t1584 = qJD(1) * qJD(6);
t1583 = t1245 * t1453;
t1582 = t1245 * t1462;
t1062 = -t1065 + t1486;
t1579 = t1366 * t1062;
t1578 = t1367 * t1062;
t1577 = t1425 * t1255;
t1576 = t1425 * t1449;
t1575 = t1425 * t1458;
t1574 = t1426 * t1454;
t1573 = t1426 * t1463;
t1571 = t1439 * t1450;
t1570 = t1439 * t1459;
t1568 = t1440 * t1451;
t1567 = t1440 * t1460;
t1565 = t1441 * t1455;
t1564 = t1441 * t1464;
t1452 = sin(qJ(6));
t1443 = t1452 ^ 2;
t1563 = t1443 * t1469;
t1446 = t1465 ^ 2;
t1562 = t1446 * t1469;
t1098 = t1371 + (-t1355 * t1439 + t1202) * pkin(2);
t1561 = t1449 * t1098;
t1100 = t1114 + t1487;
t1560 = t1449 * t1100;
t1265 = t1581 + t1437;
t1559 = t1450 * t1265;
t1268 = -t1580 + t1438;
t1557 = t1451 * t1268;
t1372 = -qJDD(1) * pkin(14) + t1396;
t1554 = t1452 * t1372;
t1461 = cos(qJ(6));
t1412 = t1461 * t1469 * t1452;
t1392 = qJDD(6) + t1412;
t1553 = t1452 * t1392;
t1393 = qJDD(6) - t1412;
t1552 = t1452 * t1393;
t1551 = t1454 * t1078;
t1103 = t1115 + t1422;
t1550 = t1454 * t1103;
t1272 = -t1284 + t1510;
t1549 = t1455 * t1272;
t1394 = qJDD(2) + t1503;
t1546 = t1456 * t1394;
t1545 = t1456 * t1395;
t1543 = t1457 * t1278;
t1542 = t1457 * t1371;
t1541 = t1457 * t1372;
t1445 = t1461 ^ 2;
t1516 = t1443 + t1445;
t1385 = t1516 * qJDD(1);
t1540 = t1457 * t1385;
t1539 = t1458 * t1098;
t1538 = t1458 * t1100;
t1537 = t1459 * t1265;
t1535 = t1460 * t1268;
t1534 = t1460 * t1278;
t1532 = t1461 * t1372;
t1531 = t1461 * t1393;
t1530 = t1463 * t1078;
t1529 = t1463 * t1103;
t1528 = t1464 * t1272;
t1527 = t1464 * t1278;
t1525 = t1465 * t1371;
t1524 = t1465 * t1394;
t1523 = t1465 * t1395;
t1348 = t1466 * t1371;
t1522 = t1466 * t1372;
t1521 = t1466 * t1385;
t1241 = (-t1594 * t1352 - t1356 * t1447) * pkin(4);
t1039 = -t1356 * t1241 + (t1435 * t1447 + t1594 * t1438) * pkin(4) - t1135;
t1040 = t1352 * t1241 + (-t1594 * t1435 + t1438 * t1447) * pkin(4) + t1137;
t860 = t1366 * t1039 + t1367 * t1040;
t1515 = t1444 + t1446;
t1514 = t1452 * qJDD(1);
t1512 = t1457 * qJDD(1);
t1427 = t1461 * qJDD(1);
t1511 = t1466 * qJDD(1);
t1509 = pkin(1) * t1278 * t1465;
t1507 = -pkin(9) * t1463 - pkin(5);
t1506 = t1452 * t1584;
t1505 = t1454 * t1080;
t1502 = t1457 * t1065;
t1501 = t1457 * t1114;
t1500 = t1457 * t1115;
t1499 = t1457 * t1581;
t1498 = t1457 * t1580;
t1497 = t1457 * t1284;
t1496 = t1461 * t1584;
t1495 = t1463 * t1080;
t1493 = t1466 * t1065;
t1492 = t1466 * t1114;
t1491 = t1466 * t1115;
t1490 = t1466 * t1581;
t1489 = t1466 * t1580;
t1488 = t1466 * t1284;
t1010 = t1255 * qJD(9) - t1458 * t1202 + t1449 * t1205;
t1375 = t1469 * pkin(14) - t1397;
t1328 = -t1452 * g(3) + t1461 * t1375;
t859 = t1367 * t1039 - t1366 * t1040;
t744 = -t1366 * t859 + t1367 * t860;
t698 = t1453 * t845 - t1462 * t773;
t795 = t1454 * t945 + t1463 * t946;
t1015 = t1455 * t1136 + t1464 * t1138;
t1018 = t1451 * t1135 + t1460 * t1137;
t1326 = t1461 * g(3) + t1452 * t1375;
t1213 = t1452 * t1326 + t1461 * t1328;
t1295 = -t1457 * t1396 - t1466 * t1397;
t1480 = t1457 * t1503;
t1479 = t1457 * t1412;
t1478 = t1466 * t1503;
t1477 = t1466 * t1412;
t1387 = -t1457 * t1469 + t1511;
t1476 = -pkin(13) * t1387 - t1457 * g(3);
t743 = t1366 * t860 + t1367 * t859;
t852 = t1449 * t991 - t1458 * t992;
t627 = t1453 * t699 - t1462 * t698;
t628 = t1453 * t698 + t1462 * t699;
t1209 = -t1461 * t1326 + t1452 * t1328;
t1214 = t1465 * t1327 + t1456 * t1329;
t1210 = -t1456 * t1327 + t1465 * t1329;
t1294 = t1466 * t1396 - t1457 * t1397;
t966 = -t1010 + t1577;
t1159 = t1207 + t1566;
t1258 = t1599 * t1371;
t1467 = qJD(6) ^ 2;
t1431 = t1445 * t1469;
t1408 = -t1468 - t1562;
t1407 = t1468 - t1562;
t1406 = -t1431 - t1467;
t1405 = t1431 - t1467;
t1403 = t1429 - t1468;
t1402 = -t1467 - t1563;
t1401 = t1467 - t1563;
t1391 = t1429 - t1562;
t1390 = t1429 + t1562;
t1389 = t1431 - t1563;
t1388 = t1431 + t1563;
t1386 = t1466 * t1469 + t1512;
t1384 = t1515 * qJDD(1);
t1382 = t1427 - 0.2e1 * t1506;
t1381 = t1427 - t1506;
t1380 = -0.2e1 * t1494 - t1513;
t1378 = t1496 + t1514;
t1377 = 0.2e1 * t1496 + t1514;
t1376 = -t1428 + 0.2e1 * t1504;
t1370 = t1461 * t1392;
t1369 = t1516 * t1584;
t1368 = t1515 * t1585;
t1365 = pkin(15) * t1371;
t1341 = -pkin(13) * t1386 + t1466 * g(3);
t1325 = t1347 - t1436;
t1324 = -t1346 + t1435;
t1323 = -t1345 + t1434;
t1322 = -t1344 + t1436;
t1321 = t1343 - t1435;
t1320 = t1342 - t1434;
t1319 = t1461 * t1378 - t1443 * t1584;
t1318 = -t1456 * t1383 - t1446 * t1585;
t1317 = -t1452 * t1381 - t1445 * t1584;
t1316 = -t1465 * t1379 - t1444 * t1585;
t1310 = -t1346 - t1435;
t1309 = -t1345 - t1434;
t1308 = -t1344 - t1436;
t1307 = -t1456 * t1408 - t1524;
t1306 = t1465 * t1404 - t1545;
t1305 = -t1452 * t1402 - t1531;
t1304 = -t1452 * t1401 + t1370;
t1303 = t1461 * t1406 - t1553;
t1302 = t1461 * t1405 - t1552;
t1301 = -t1465 * t1408 + t1546;
t1300 = -t1465 * t1407 - t1545;
t1299 = -t1456 * t1404 - t1523;
t1298 = -t1456 * t1403 - t1524;
t1297 = t1461 * t1402 - t1552;
t1296 = t1452 * t1406 + t1370;
t1293 = -t1457 * t1388 + t1521;
t1292 = t1466 * t1384 - t1457 * t1390;
t1291 = t1466 * t1388 + t1540;
t1290 = t1457 * t1384 + t1466 * t1390;
t1288 = -pkin(16) * t1377 - t1532;
t1287 = pkin(16) * t1382 - t1554;
t1286 = -t1452 * t1377 + t1461 * t1382;
t1285 = t1465 * t1376 - t1456 * t1380;
t1277 = -t1346 + t1343;
t1276 = -t1345 + t1342;
t1275 = -t1344 + t1347;
t1263 = t1466 * t1278;
t1261 = -t1435 - t1343;
t1247 = t1466 * t1509;
t1246 = t1457 * t1509;
t1240 = t1466 * t1305 + t1457 * t1377;
t1239 = t1466 * t1303 - t1457 * t1382;
t1238 = t1466 * t1301 - t1457 * t1376;
t1237 = t1466 * t1299 - t1457 * t1380;
t1236 = t1457 * t1305 - t1466 * t1377;
t1235 = t1457 * t1303 + t1466 * t1382;
t1234 = t1457 * t1301 + t1466 * t1376;
t1233 = t1457 * t1299 + t1466 * t1380;
t1229 = -t1251 + t1598;
t1228 = -t1250 + t1421;
t1227 = t1249 - t1598;
t1226 = t1248 - t1421;
t1225 = (-t1354 * t1455 - t1357 * t1464) * t1441;
t1224 = (t1352 * t1460 + t1356 * t1451) * t1440;
t1223 = (-t1350 * t1459 + t1355 * t1450) * t1439;
t1222 = (-t1354 * t1464 + t1357 * t1455) * t1441;
t1221 = (t1352 * t1451 - t1356 * t1460) * t1440;
t1220 = (-t1350 * t1450 - t1355 * t1459) * t1439;
t1219 = -pkin(15) * t1307 + t1327;
t1218 = -pkin(15) * t1306 + t1329;
t1217 = -t1343 - t1346;
t1216 = t1342 + t1345;
t1215 = -t1347 - t1344;
t1201 = -t1251 - t1598;
t1200 = -t1250 - t1421;
t1187 = pkin(16) * t1388 - t1209;
t1183 = -t1464 * t1325 + t1549;
t1182 = t1455 * t1322 - t1616;
t1181 = t1460 * t1321 - t1557;
t1180 = -t1451 * t1324 + t1633;
t1179 = t1459 * t1320 - t1559;
t1178 = -t1450 * t1323 + t1635;
t1177 = t1455 * t1325 + t1528;
t1176 = t1464 * t1322 + t1622;
t1175 = t1451 * t1321 + t1535;
t1174 = t1460 * t1324 + t1634;
t1173 = t1450 * t1320 + t1537;
t1172 = t1459 * t1323 + t1636;
t1168 = t1455 * t1308 + t1528;
t1167 = -t1451 * t1310 - t1535;
t1166 = -t1450 * t1309 - t1537;
t1165 = t1464 * t1308 - t1549;
t1164 = t1460 * t1310 - t1557;
t1163 = t1459 * t1309 - t1559;
t1162 = -t1186 + t1419;
t1161 = t1185 - t1419;
t1157 = -t1206 + t1569;
t1154 = -t1572 - t1205;
t1151 = -t1204 + t1336;
t1146 = (qJD(7) + t1440) * t1356 + t1481;
t1144 = (-qJD(8) - t1439) * t1355 - t1482;
t1142 = t1466 * t1213 - t1541;
t1141 = t1466 * t1210 - t1542;
t1140 = t1457 * t1213 + t1522;
t1139 = t1457 * t1210 + t1348;
t1131 = (-pkin(1) * t1456 + pkin(15)) * t1278;
t1130 = -t1186 - t1419;
t1129 = pkin(14) * t1297 - pkin(16) * t1305 + t1328;
t1128 = pkin(14) * t1296 - pkin(16) * t1303 + t1326;
t1127 = -t1464 * t1204 + t1354 * t1565;
t1126 = t1460 * t1206 - t1356 * t1568;
t1125 = t1459 * t1205 - t1355 * t1571;
t1124 = t1455 * t1204 + t1354 * t1564;
t1123 = t1451 * t1206 + t1356 * t1567;
t1122 = t1450 * t1205 + t1355 * t1570;
t1121 = t1455 * t1207 + t1357 * t1564;
t1120 = -t1451 * t1203 - t1352 * t1567;
t1119 = -t1450 * t1202 + t1350 * t1570;
t1118 = t1464 * t1207 - t1357 * t1565;
t1117 = t1460 * t1203 - t1352 * t1568;
t1116 = t1459 * t1202 + t1350 * t1571;
t1113 = -t1251 + t1249;
t1112 = -t1250 + t1248;
t1111 = -t1464 * t1262 + t1622;
t1110 = t1460 * t1261 - t1634;
t1109 = t1459 * t1260 - t1636;
t1108 = t1455 * t1262 + t1616;
t1107 = t1451 * t1261 + t1633;
t1106 = t1450 * t1260 + t1635;
t1097 = -t1598 - t1249;
t1096 = -t1421 - t1248;
t1091 = -t1196 + t1244;
t1090 = t1195 - t1244;
t1089 = (-t1253 * t1463 + t1257 * t1454) * t1426;
t1088 = (-t1252 * t1458 + t1255 * t1449) * t1425;
t1087 = (-t1253 * t1454 - t1257 * t1463) * t1426;
t1086 = (-t1252 * t1449 - t1255 * t1458) * t1425;
t1084 = -t1465 * t1221 - t1456 * t1224;
t1083 = -t1465 * t1220 - t1456 * t1223;
t1082 = -t1456 * t1222 - t1465 * t1225;
t1081 = pkin(14) * t1209 - pkin(16) * t1213;
t1079 = -t1196 + t1195;
t1073 = -pkin(1) * t1602 + t1527;
t1072 = -pkin(1) * t1146 + t1534;
t1071 = pkin(1) * t1158 + t1455 * t1278;
t1070 = -pkin(1) * t1613 - t1451 * t1278;
t1067 = -t1249 - t1251;
t1066 = -t1248 - t1250;
t1064 = -t1186 + t1185;
t1060 = -t1419 - t1185;
t1059 = -t1196 - t1244;
t1058 = -t1465 * t1175 - t1456 * t1181;
t1057 = -t1465 * t1174 - t1456 * t1180;
t1056 = -t1465 * t1173 - t1456 * t1179;
t1055 = -t1465 * t1172 - t1456 * t1178;
t1054 = -t1456 * t1177 - t1465 * t1183;
t1053 = -t1456 * t1176 - t1465 * t1182;
t1052 = t1463 * t1227 - t1550;
t1051 = -t1454 * t1229 + t1617;
t1050 = -t1458 * t1226 + t1560;
t1049 = t1449 * t1228 - t1619;
t1048 = t1454 * t1227 + t1529;
t1047 = t1463 * t1229 + t1623;
t1046 = -t1449 * t1226 - t1538;
t1045 = -t1458 * t1228 - t1625;
t1044 = -t1454 * t1201 - t1529;
t1043 = t1449 * t1200 + t1538;
t1042 = t1463 * t1201 - t1550;
t1041 = -t1458 * t1200 + t1560;
t1038 = -t1456 * t1164 + t1465 * t1167;
t1037 = -t1456 * t1163 + t1465 * t1166;
t1036 = t1465 * t1165 - t1456 * t1168;
t1035 = -t1465 * t1164 - t1456 * t1167;
t1034 = -t1465 * t1163 - t1456 * t1166;
t1033 = -t1456 * t1165 - t1465 * t1168;
t1032 = -t1244 - t1195;
t1031 = t1455 * t1151 - t1464 * t1159;
t1030 = -t1464 * t1158 + t1455 * t1602;
t1029 = -t1147 * t1460 - t1451 * t1157;
t1028 = -t1460 * t1146 - t1451 * t1613;
t1027 = -t1143 * t1459 - t1450 * t1154;
t1026 = t1459 * t1144 - t1450 * t1152;
t1025 = t1464 * t1151 + t1455 * t1159;
t1024 = t1455 * t1158 + t1464 * t1602;
t1023 = -t1147 * t1451 + t1460 * t1157;
t1022 = -t1451 * t1146 + t1460 * t1613;
t1021 = -t1143 * t1450 + t1459 * t1154;
t1020 = t1450 * t1144 + t1459 * t1152;
t1007 = -t1465 * t1071 - t1456 * t1527;
t1006 = -t1465 * t1070 + t1456 * t1534;
t1005 = -t1465 * t1073 + t1278 * t1548;
t1004 = -t1465 * t1072 + t1278 * t1556;
t1003 = t1195 + t1196;
t1000 = -t1465 * t1123 - t1456 * t1126;
t999 = -t1465 * t1122 - t1456 * t1125;
t998 = -t1456 * t1124 - t1465 * t1127;
t997 = -t1465 * t1117 - t1456 * t1120;
t996 = -t1465 * t1116 - t1456 * t1119;
t995 = -t1456 * t1118 - t1465 * t1121;
t994 = (t1188 * t1367 + t1189 * t1366) * t1424;
t993 = (t1188 * t1366 - t1189 * t1367) * t1424;
t990 = -t1456 * t1107 + t1465 * t1110;
t989 = -t1456 * t1106 + t1465 * t1109;
t988 = t1465 * t1108 - t1456 * t1111;
t987 = -t1465 * t1107 - t1456 * t1110;
t986 = -t1465 * t1106 - t1456 * t1109;
t985 = -t1456 * t1108 - t1465 * t1111;
t984 = t1463 * t1097 - t1623;
t983 = -t1458 * t1096 + t1625;
t982 = t1454 * t1097 + t1617;
t981 = -t1449 * t1096 - t1619;
t980 = t1599 * t1098 * pkin(2);
t979 = -t1185 - t1186;
t977 = (-t1197 * t1462 + t1199 * t1453) * t1245;
t976 = (t1197 * t1453 + t1199 * t1462) * t1245;
t975 = -t1231 + t1471;
t970 = t1230 + t1473;
t967 = (qJD(4) + t1426) * t1257 + t1483;
t965 = t1010 + t1577;
t961 = -pkin(15) * t1037 + t1212;
t960 = -pkin(1) * t1215 + t1015;
t959 = -pkin(1) * t1217 + t1018;
t958 = t1455 * t1087 - t1464 * t1089;
t957 = -t1450 * t1086 + t1459 * t1088;
t956 = t1464 * t1087 + t1455 * t1089;
t955 = t1459 * t1086 + t1450 * t1088;
t954 = -t1257 * t1574 - t1463 * t1471;
t953 = -t1255 * t1576 + t1458 * t1473;
t952 = t1257 * t1573 - t1454 * t1471;
t951 = t1255 * t1575 + t1449 * t1473;
t950 = -t1454 * t1011 + t1253 * t1573;
t949 = t1449 * t1010 + t1252 * t1575;
t948 = t1463 * t1011 + t1253 * t1574;
t947 = -t1458 * t1010 + t1252 * t1576;
t942 = -t1199 * qJD(5) - t1485;
t941 = (pkin(5) * t1455 + pkin(1)) * t1078;
t937 = -pkin(15) * t989 + t1208;
t936 = t1466 * t1035 + t1457 * t1613;
t935 = t1466 * t1034 + t1152 * t1457;
t934 = t1466 * t1033 + t1457 * t1602;
t933 = t1457 * t1035 - t1466 * t1613;
t932 = t1457 * t1034 - t1152 * t1466;
t931 = t1457 * t1033 - t1466 * t1602;
t930 = t1367 * t1161 - t1579;
t929 = -t1366 * t1162 + t1626;
t928 = t1366 * t1161 + t1578;
t927 = t1367 * t1162 + t1627;
t926 = -t1366 * t1130 - t1578;
t925 = t1367 * t1130 - t1579;
t924 = t1466 * t939 - t1542;
t923 = t1457 * t939 + t1348;
t922 = t1457 * t1146 + t1466 * t987;
t921 = -t1457 * t1144 + t1466 * t986;
t920 = -t1457 * t1158 + t1466 * t985;
t919 = -t1466 * t1146 + t1457 * t987;
t918 = t1466 * t1144 + t1457 * t986;
t917 = t1466 * t1158 + t1457 * t985;
t913 = t1169 - t963;
t908 = -t1170 + t962;
t907 = pkin(2) * t965 - t1539;
t906 = pkin(2) * t971 + t1561;
t905 = t1455 * t1048 - t1464 * t1052;
t904 = t1455 * t1047 - t1464 * t1051;
t903 = -t1450 * t1046 + t1459 * t1050;
t902 = -t1450 * t1045 + t1459 * t1049;
t901 = t1464 * t1048 + t1455 * t1052;
t900 = t1464 * t1047 + t1455 * t1051;
t899 = t1459 * t1046 + t1450 * t1050;
t898 = t1459 * t1045 + t1450 * t1049;
t897 = -pkin(1) * t1164 - pkin(15) * t1038 + t1137;
t896 = -pkin(1) * t1168 - pkin(15) * t1036 + t1136;
t895 = -t1366 * t1170 + t1367 * t963;
t894 = t1367 * t1170 + t1366 * t963;
t893 = -t1367 * t1169 - t1366 * t962;
t892 = -t1366 * t1169 + t1367 * t962;
t891 = t1367 * t1060 - t1627;
t890 = t1366 * t1060 + t1626;
t889 = t1455 * t1042 - t1464 * t1044;
t888 = -t1450 * t1041 + t1459 * t1043;
t887 = t1464 * t1042 + t1455 * t1044;
t886 = t1459 * t1041 + t1450 * t1043;
t885 = -t1456 * t1023 + t1465 * t1029;
t884 = -t1456 * t1021 + t1465 * t1027;
t883 = t1465 * t1025 - t1456 * t1031;
t882 = -t1465 * t1023 - t1456 * t1029;
t881 = -t1465 * t1022 - t1456 * t1028;
t880 = -t1465 * t1021 - t1456 * t1027;
t879 = -t1465 * t1020 - t1456 * t1026;
t878 = -t1456 * t1025 - t1465 * t1031;
t877 = -t1456 * t1024 - t1465 * t1030;
t876 = t1465 * t1018 + t1620;
t875 = t1465 * t1015 + t1621;
t874 = -t1456 * t1018 + t1614;
t873 = -t1456 * t1015 + t1615;
t872 = -pkin(5) * t967 + t1530;
t871 = pkin(5) * t1610 - t1551;
t869 = -t1092 - t943;
t866 = (-qJD(5) - t1245) * t1199 - t1485;
t864 = -t1199 * t1583 + t1462 * t943;
t863 = -t1199 * t1582 - t1453 * t943;
t862 = t1197 * t1582 - t1453 * t942;
t861 = -t1197 * t1583 - t1462 * t942;
t858 = -pkin(1) * t1107 - pkin(15) * t990 + t1135;
t857 = -pkin(1) * t1111 - pkin(15) * t988 - t1138;
t855 = -pkin(5) * t1078 * t1544 - t1465 * t941;
t854 = -t1451 * t993 + t1460 * t994;
t853 = t1451 * t994 + t1460 * t993;
t849 = t1466 * t874 - t1543;
t848 = t1466 * t873 - t1543;
t847 = t1457 * t874 + t1263;
t846 = t1457 * t873 + t1263;
t842 = t1454 * t1472 + t1463 * t977;
t841 = t1454 * t977 - t1463 * t1472;
t840 = -t1465 * t959 - t1620;
t839 = -t1465 * t960 - t1621;
t838 = t1462 * t1090 - t1588;
t837 = -t1453 * t1091 + t1618;
t836 = -t1453 * t1090 - t1586;
t835 = -t1462 * t1091 - t1624;
t834 = t1457 * t1217 + t1466 * t882;
t833 = -t1457 * t1216 + t1466 * t880;
t832 = t1457 * t1215 + t1466 * t878;
t831 = -t1466 * t1217 + t1457 * t882;
t830 = t1466 * t1216 + t1457 * t880;
t829 = -t1466 * t1215 + t1457 * t878;
t828 = t1455 * t982 - t1464 * t984;
t827 = -t1450 * t981 + t1459 * t983;
t826 = t1455 * t984 + t1464 * t982;
t825 = t1450 * t983 + t1459 * t981;
t824 = -t1450 * t906 + t1459 * t1539;
t823 = -t1450 * t907 + t1459 * t1561;
t822 = t1450 * t1539 + t1459 * t906;
t821 = t1450 * t1561 + t1459 * t907;
t820 = -t1454 * t975 - t1463 * t968;
t819 = t1454 * t1610 - t1463 * t967;
t818 = -t1449 * t971 - t1458 * t965;
t817 = t1449 * t970 + t1458 * t966;
t816 = -t1454 * t968 + t1463 * t975;
t815 = -t1454 * t967 - t1463 * t1610;
t814 = -t1449 * t965 + t1458 * t971;
t813 = t1449 * t966 - t1458 * t970;
t812 = (t1447 * t1460 - t1594 * t1451) * t978 * pkin(4);
t811 = -t1453 * t1059 - t1586;
t810 = t1462 * t1059 - t1588;
t809 = -t1456 * t957 - t1465 * t955;
t808 = -t1456 * t956 - t1465 * t958;
t807 = t1455 * t952 - t1464 * t954;
t806 = t1455 * t948 - t1464 * t950;
t805 = -t1450 * t951 + t1459 * t953;
t804 = -t1450 * t947 + t1459 * t949;
t803 = t1455 * t954 + t1464 * t952;
t802 = t1455 * t950 + t1464 * t948;
t801 = t1450 * t953 + t1459 * t951;
t800 = t1450 * t949 + t1459 * t947;
t799 = t1462 * t1032 - t1624;
t798 = t1453 * t1032 + t1618;
t797 = -t1455 * t1530 + t1464 * t871;
t796 = -t1455 * t1551 + t1464 * t872;
t792 = t1463 * t864 + t1505;
t791 = t1463 * t862 - t1505;
t790 = t1454 * t864 - t1495;
t789 = t1454 * t862 + t1495;
t788 = -pkin(1) * t1023 - pkin(15) * t885;
t787 = -pkin(1) * t1031 - pkin(15) * t883;
t786 = pkin(1) * t1017 - pkin(15) * t876;
t785 = pkin(1) * t1016 - pkin(15) * t875;
t784 = -pkin(2) * t1066 + t852;
t783 = -t1451 * t928 + t1460 * t930;
t782 = -t1451 * t927 + t1460 * t929;
t781 = t1451 * t930 + t1460 * t928;
t780 = t1451 * t929 + t1460 * t927;
t779 = -t1596 * t1609 - t1590;
t778 = t1508 * t908 + t1590;
t777 = t908 * t1596 - t1591;
t776 = -t1508 * t1609 - t1591;
t775 = -t1451 * t925 + t1460 * t926;
t774 = t1451 * t926 + t1460 * t925;
t770 = -pkin(5) * t1067 + t795;
t769 = -t1366 * t913 + t1367 * t909;
t768 = -t1366 * t1609 + t1367 * t908;
t767 = t1366 * t909 + t1367 * t913;
t766 = t1366 * t908 + t1367 * t1609;
t765 = -t1456 * t903 - t1465 * t899;
t764 = -t1456 * t902 - t1465 * t898;
t763 = -t1456 * t901 - t1465 * t905;
t762 = -t1456 * t900 - t1465 * t904;
t761 = (pkin(1) + (t1447 * t1451 + t1594 * t1460) * pkin(4)) * t978;
t760 = -t1451 * t894 + t1460 * t895;
t759 = -t1451 * t892 + t1460 * t893;
t758 = t1451 * t895 + t1460 * t894;
t757 = t1451 * t893 + t1460 * t892;
t756 = -t1451 * t890 + t1460 * t891;
t755 = t1451 * t891 + t1460 * t890;
t754 = -t1456 * t886 + t1465 * t888;
t753 = -t1456 * t889 + t1465 * t887;
t752 = -t1456 * t888 - t1465 * t886;
t751 = -t1456 * t887 - t1465 * t889;
t750 = pkin(1) * t1610 + t1455 * t871 + t1464 * t1530;
t749 = -pkin(1) * t967 + t1455 * t872 + t1464 * t1551;
t748 = -t1453 * t869 - t1462 * t865;
t747 = t1453 * t870 + t1462 * t866;
t746 = -t1453 * t865 + t1462 * t869;
t745 = -t1453 * t866 + t1462 * t870;
t742 = -t1454 * t865 + t1463 * t838;
t741 = -t1454 * t869 + t1463 * t837;
t740 = t1454 * t838 + t1463 * t865;
t739 = t1454 * t837 + t1463 * t869;
t738 = -t1456 * t854 - t1465 * t853;
t737 = t1459 * t852 + t1631;
t736 = t1450 * t852 - t1629;
t735 = t1455 * t841 - t1464 * t842;
t734 = t1455 * t842 + t1464 * t841;
t733 = -t1454 * t870 + t1463 * t811;
t732 = t1454 * t811 + t1463 * t870;
t731 = -t1454 * t866 + t1463 * t799;
t730 = t1454 * t799 + t1463 * t866;
t729 = -t1456 * t825 + t1465 * t827;
t728 = -t1456 * t828 + t1465 * t826;
t727 = -t1456 * t827 - t1465 * t825;
t726 = -t1456 * t826 - t1465 * t828;
t725 = -t1454 * t1079 + t1463 * t747;
t724 = t1463 * t1079 + t1454 * t747;
t723 = -pkin(11) * t810 + t1587;
t722 = -pkin(11) * t798 + t1589;
t721 = -t1456 * t824 - t1465 * t822;
t720 = -t1456 * t823 - t1465 * t821;
t719 = -t1454 * t1003 + t1463 * t748;
t718 = t1463 * t1003 + t1454 * t748;
t717 = t1455 * t816 - t1464 * t820;
t716 = t1455 * t815 - t1464 * t819;
t715 = -t1450 * t814 + t1459 * t818;
t714 = -t1450 * t813 + t1459 * t817;
t713 = t1455 * t820 + t1464 * t816;
t712 = t1455 * t819 + t1464 * t815;
t711 = t1450 * t818 + t1459 * t814;
t710 = t1450 * t817 + t1459 * t813;
t709 = -t1457 * t971 + t1466 * t752;
t708 = -t1457 * t1610 + t1466 * t751;
t707 = t1457 * t752 + t1466 * t971;
t706 = t1457 * t751 + t1466 * t1610;
t705 = -t1450 * t784 + t1629;
t704 = t1459 * t784 + t1631;
t703 = -t1456 * t805 - t1465 * t801;
t702 = -t1456 * t804 - t1465 * t800;
t701 = -t1456 * t803 - t1465 * t807;
t700 = -t1456 * t802 - t1465 * t806;
t697 = -t1464 * t795 + t1630;
t696 = t1455 * t795 + t1628;
t695 = t1455 * t790 - t1464 * t792;
t694 = t1455 * t789 - t1464 * t791;
t693 = t1455 * t792 + t1464 * t790;
t692 = t1455 * t791 + t1464 * t789;
t691 = -t979 * t1596 - t743;
t690 = -t1508 * t979 + t744;
t689 = -pkin(2) * t1041 - pkin(15) * t754 + t992;
t688 = -t1457 * t965 + t1466 * t727;
t687 = t1457 * t967 + t1466 * t726;
t686 = t1457 * t727 + t1466 * t965;
t685 = t1457 * t726 - t1466 * t967;
t684 = -t1456 * t783 - t1465 * t781;
t683 = -t1456 * t782 - t1465 * t780;
t682 = -t1451 * t776 + t1460 * t779;
t681 = -t1451 * t778 + t1460 * t777;
t680 = -t1456 * t774 + t1465 * t775;
t679 = -t1456 * t775 - t1465 * t774;
t678 = t1464 * t770 - t1630;
t677 = -t1456 * t812 - t1465 * t761;
t676 = -t1456 * t797 - t1465 * t750;
t675 = -t1456 * t796 - t1465 * t749;
t674 = -pkin(2) * t981 - pkin(15) * t729 - t991;
t673 = -pkin(1) * t1067 + t1455 * t770 + t1628;
t672 = -t1451 * t767 + t1460 * t769;
t671 = -t1451 * t766 + t1460 * t768;
t670 = t1451 * t769 + t1460 * t767;
t669 = t1451 * t768 + t1460 * t766;
t668 = -t1456 * t760 - t1465 * t758;
t667 = -t1456 * t759 - t1465 * t757;
t666 = -t1456 * t755 + t1465 * t756;
t665 = -t1456 * t756 - t1465 * t755;
t664 = -pkin(1) * t1609 + t1451 * t779 + t1460 * t776;
t663 = pkin(1) * t908 + t1451 * t777 + t1460 * t778;
t662 = t1457 * t1609 + t1466 * t679;
t661 = t1457 * t679 - t1466 * t1609;
t660 = -pkin(9) * t810 + t699;
t659 = -pkin(1) * t889 - pkin(5) * t1042 - pkin(15) * t753 + t946;
t658 = -pkin(9) * t798 + t698;
t657 = -t1451 * t743 + t1460 * t744;
t656 = t1451 * t744 + t1460 * t743;
t655 = t1455 * t740 - t1464 * t742;
t654 = t1455 * t739 - t1464 * t741;
t653 = t1455 * t742 + t1464 * t740;
t652 = t1455 * t741 + t1464 * t739;
t651 = -t1456 * t736 + t1465 * t737;
t650 = -t1456 * t737 - t1465 * t736;
t649 = -t1456 * t734 - t1465 * t735;
t648 = t1455 * t732 - t1464 * t733;
t647 = t1455 * t733 + t1464 * t732;
t646 = t1455 * t730 - t1464 * t731;
t645 = t1455 * t731 + t1464 * t730;
t644 = -t1457 * t908 + t1466 * t665;
t643 = t1457 * t665 + t1466 * t908;
t642 = t1455 * t724 - t1464 * t725;
t641 = t1455 * t725 + t1464 * t724;
t640 = -pkin(1) * t828 - pkin(5) * t982 - pkin(15) * t728 + t945;
t639 = -t1457 * t1098 + t1466 * t650;
t638 = t1466 * t1098 + t1457 * t650;
t637 = t1455 * t718 - t1464 * t719;
t636 = t1455 * t719 + t1464 * t718;
t635 = -t1456 * t710 + t1465 * t714;
t634 = -t1456 * t717 + t1465 * t713;
t633 = -t1456 * t715 - t1465 * t711;
t632 = -t1456 * t714 - t1465 * t710;
t631 = -t1456 * t713 - t1465 * t717;
t630 = -t1456 * t712 - t1465 * t716;
t629 = -t1456 * t705 - t1465 * t704;
t626 = t1457 * t1066 + t1466 * t632;
t625 = t1457 * t1067 + t1466 * t631;
t624 = -t1466 * t1066 + t1457 * t632;
t623 = -t1466 * t1067 + t1457 * t631;
t622 = -t1456 * t697 + t1465 * t696;
t621 = -t1456 * t696 - t1465 * t697;
t620 = -t1456 * t693 - t1465 * t695;
t619 = -t1456 * t692 - t1465 * t694;
t618 = -t1451 * t690 + t1460 * t691;
t617 = pkin(2) * t851 - pkin(15) * t651;
t616 = -t1457 * t1078 + t1466 * t621;
t615 = t1466 * t1078 + t1457 * t621;
t614 = -pkin(1) * t979 + t1451 * t691 + t1460 * t690;
t613 = -pkin(2) * t813 - pkin(15) * t635;
t612 = -t1454 * t660 + t1463 * t723;
t611 = -t1454 * t658 + t1463 * t722;
t610 = t1454 * t844 + t1463 * t628;
t609 = t1454 * t628 - t1463 * t844;
t608 = -t1456 * t678 - t1465 * t673;
t607 = -t1456 * t682 - t1465 * t664;
t606 = -t1456 * t681 - t1465 * t663;
t605 = -t1456 * t670 + t1465 * t672;
t604 = -t1456 * t672 - t1465 * t670;
t603 = -t1456 * t671 - t1465 * t669;
t602 = -pkin(1) * t774 - pkin(15) * t680 + (-t1447 * t926 - t1594 * t925) * pkin(4) + t860;
t601 = -pkin(11) * t746 - t627;
t600 = -pkin(5) * t810 + t1454 * t723 + t1463 * t660;
t599 = t1457 * t979 + t1466 * t604;
t598 = t1457 * t604 - t1466 * t979;
t597 = -pkin(5) * t798 + t1454 * t722 + t1463 * t658;
t596 = -pkin(1) * t755 - pkin(15) * t666 + (-t1447 * t891 - t1594 * t890) * pkin(4) - t859;
t595 = -t1456 * t656 + t1465 * t657;
t594 = -t1456 * t657 - t1465 * t656;
t593 = -t1456 * t653 - t1465 * t655;
t592 = -t1456 * t652 - t1465 * t654;
t591 = -pkin(1) * t717 - pkin(5) * t816 - pkin(15) * t634;
t590 = -t1456 * t648 + t1465 * t647;
t589 = -t1456 * t647 - t1465 * t648;
t588 = -t1457 * t978 + t1466 * t594;
t587 = t1457 * t594 + t1466 * t978;
t586 = -t1456 * t646 + t1465 * t645;
t585 = -t1456 * t645 - t1465 * t646;
t584 = t1463 * t601 + t746 * t1595;
t583 = -t1456 * t641 - t1465 * t642;
t582 = -pkin(1) * t697 - pkin(5) * t793 - pkin(15) * t622;
t581 = -t1456 * t637 + t1465 * t636;
t580 = -t1456 * t636 - t1465 * t637;
t579 = t1457 * t810 + t1466 * t589;
t578 = t1457 * t589 - t1466 * t810;
t577 = t1457 * t798 + t1466 * t585;
t576 = t1457 * t585 - t1466 * t798;
t575 = (-pkin(11) * t1463 + t1595) * t627;
t574 = t1454 * t601 + t1507 * t746;
t573 = -t1456 * t618 - t1465 * t614;
t572 = t1457 * t746 + t1466 * t580;
t571 = t1457 * t580 - t1466 * t746;
t570 = t1455 * t609 - t1464 * t610;
t569 = t1455 * t610 + t1464 * t609;
t568 = t1455 * t612 + t1464 * t600;
t567 = -pkin(1) * t670 - pkin(15) * t605 + (-t1447 * t769 - t1594 * t767) * pkin(4);
t566 = t1455 * t611 + t1464 * t597;
t565 = -pkin(1) * t810 + t1455 * t600 - t1464 * t612;
t564 = -pkin(1) * t798 + t1455 * t597 - t1464 * t611;
t563 = (-pkin(11) * t1454 + t1507) * t627;
t562 = -pkin(1) * t656 - pkin(15) * t595 + (-t1447 * t744 - t1594 * t743) * pkin(4);
t561 = -pkin(1) * t648 - pkin(5) * t732 - pkin(9) * t870 - pkin(11) * t811 - pkin(15) * t590 - t1589;
t560 = -pkin(1) * t646 - pkin(5) * t730 - pkin(9) * t866 - pkin(11) * t799 - pkin(15) * t586 + t1587;
t559 = t1455 * t584 + t1464 * t574;
t558 = -pkin(1) * t746 + t1455 * t574 - t1464 * t584;
t557 = -pkin(1) * t637 - pkin(5) * t718 - pkin(9) * t1003 - pkin(11) * t748 - pkin(15) * t581 - t628;
t556 = -t1456 * t570 + t1465 * t569;
t555 = -t1456 * t569 - t1465 * t570;
t554 = t1455 * t575 + t1464 * t563;
t553 = -t1456 * t568 - t1465 * t565;
t552 = -t1456 * t566 - t1465 * t564;
t551 = t1457 * t627 + t1466 * t555;
t550 = t1457 * t555 - t1466 * t627;
t549 = -pkin(1) * t627 + t1455 * t563 - t1464 * t575;
t548 = -t1456 * t559 - t1465 * t558;
t547 = -pkin(1) * t570 - pkin(5) * t609 + pkin(9) * t844 - pkin(11) * t628 - pkin(15) * t556;
t546 = -t1456 * t554 - t1465 * t549;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1386, -t1387, 0, t1295, 0, 0, 0, 0, 0, 0, t1237, t1238, t1292, t1141, 0, 0, 0, 0, 0, 0, t920, t934, t832, t848, 0, 0, 0, 0, 0, 0, t687, t708, t625, t616, 0, 0, 0, 0, 0, 0, t577, t579, t572, t551, 0, 0, 0, 0, 0, 0, t1239, t1240, t1293, t1142, 0, 0, 0, 0, 0, 0, t922, t936, t834, t849, 0, 0, 0, 0, 0, 0, t921, t935, t833, t924, 0, 0, 0, 0, 0, 0, t688, t709, t626, t639, 0, 0, 0, 0, 0, 0, t644, t662, t599, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1387, -t1386, 0, t1294, 0, 0, 0, 0, 0, 0, t1233, t1234, t1290, t1139, 0, 0, 0, 0, 0, 0, t917, t931, t829, t846, 0, 0, 0, 0, 0, 0, t685, t706, t623, t615, 0, 0, 0, 0, 0, 0, t576, t578, t571, t550, 0, 0, 0, 0, 0, 0, t1235, t1236, t1291, t1140, 0, 0, 0, 0, 0, 0, t919, t933, t831, t847, 0, 0, 0, 0, 0, 0, t918, t932, t830, t923, 0, 0, 0, 0, 0, 0, t686, t707, t624, t638, 0, 0, 0, 0, 0, 0, t643, t661, t598, t587; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1306, t1307, 0, t1214, 0, 0, 0, 0, 0, 0, t988, t1036, t883, t875, 0, 0, 0, 0, 0, 0, t728, t753, t634, t622, 0, 0, 0, 0, 0, 0, t586, t590, t581, t556, 0, 0, 0, 0, 0, 0, t1296, t1297, 0, t1209, 0, 0, 0, 0, 0, 0, t990, t1038, t885, t876, 0, 0, 0, 0, 0, 0, t989, t1037, t884, t940, 0, 0, 0, 0, 0, 0, t729, t754, t635, t651, 0, 0, 0, 0, 0, 0, t666, t680, t605, t595; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1387, 0, -t1386, 0, t1476, -t1341, -t1294, -pkin(13) * t1294, t1466 * t1318 + t1480, t1466 * t1285 - t1457 * t1391, t1466 * t1300 + t1428 * t1457, t1466 * t1316 - t1480, t1466 * t1298 - t1456 * t1512, t1457 * qJDD(2) + t1466 * t1368, -pkin(13) * t1233 - t1457 * t1218 - t1348 * t1465, -pkin(13) * t1234 - t1457 * t1219 + t1348 * t1456, -pkin(13) * t1290 - t1214 * t1466, -pkin(13) * t1139 + t1214 * t1593, t1466 * t998 - t1497, -t1457 * t1275 + t1466 * t877, t1466 * t1053 - t1457 * t1151, t1466 * t995 + t1497, t1466 * t1054 + t1159 * t1457, t1466 * t1082 + t1457 * t1510, -pkin(13) * t917 + t1466 * t1007 - t1457 * t857, -pkin(13) * t931 + t1466 * t1005 - t1457 * t896, -pkin(13) * t829 - t1457 * t787 + t1466 * t839, -pkin(13) * t846 - t1457 * t785 - t1247, t1466 * t701 + t1500, -t1457 * t1113 + t1466 * t630, -t1457 * t975 + t1466 * t762, t1466 * t700 - t1500, -t1457 * t968 + t1466 * t763, t1457 * t1422 + t1466 * t808, -pkin(13) * t685 - t1457 * t640 + t1466 * t675, -pkin(13) * t706 - t1457 * t659 + t1466 * t676, -pkin(13) * t623 - t1457 * t591 + t1466 * t608, -pkin(13) * t615 - t1457 * t582 + t1466 * t855, -t1457 * t863 + t1466 * t620, -t1457 * t745 + t1466 * t583, -t1457 * t835 + t1466 * t592, -t1457 * t861 + t1466 * t619, -t1457 * t836 + t1466 * t593, -t1457 * t976 + t1466 * t649, -pkin(13) * t576 - t1457 * t560 + t1466 * t552, -pkin(13) * t578 - t1457 * t561 + t1466 * t553, -pkin(13) * t571 - t1457 * t557 + t1466 * t548, -pkin(13) * t550 - t1457 * t547 + t1466 * t546, t1466 * t1319 - t1479, t1466 * t1286 - t1457 * t1389, t1466 * t1304 + t1452 * t1512, t1466 * t1317 + t1479, t1466 * t1302 + t1427 * t1457, t1457 * qJDD(6) + t1466 * t1369, -pkin(13) * t1235 - t1457 * t1128 + t1466 * t1287, -pkin(13) * t1236 - t1457 * t1129 + t1466 * t1288, -pkin(13) * t1291 + pkin(16) * t1540 + t1466 * t1187, -pkin(13) * t1140 + pkin(16) * t1522 - t1457 * t1081, t1466 * t1000 - t1498, -t1457 * t1277 + t1466 * t881, t1466 * t1057 - t1457 * t1157, t1466 * t997 + t1498, t1466 * t1058 - t1457 * t1147, t1466 * t1084 + t1457 * t1438, -pkin(13) * t919 + t1466 * t1004 - t1457 * t858, -pkin(13) * t933 + t1466 * t1006 - t1457 * t897, -pkin(13) * t831 - t1457 * t788 + t1466 * t840, -pkin(13) * t847 - t1457 * t786 - t1247, t1466 * t999 + t1499, -t1457 * t1276 + t1466 * t879, t1466 * t1055 - t1457 * t1154, t1466 * t996 - t1499, t1466 * t1056 - t1457 * t1143, t1466 * t1083 + t1457 * t1437, -pkin(13) * t918 - t1466 * t1258 - t1457 * t937, -pkin(13) * t932 + t1466 * t1259 - t1457 * t961, -pkin(13) * t830 - t1466 * t940 + t884 * t1593, -pkin(13) * t923 + t940 * t1593, t1466 * t703 + t1501, -t1457 * t1112 + t1466 * t633, -t1457 * t970 + t1466 * t764, t1466 * t702 - t1501, -t1457 * t966 + t1466 * t765, t1457 * t1487 + t1466 * t809, -pkin(13) * t686 - t1457 * t674 + t1466 * t720, -pkin(13) * t707 - t1457 * t689 + t1466 * t721, -pkin(13) * t624 - t1457 * t613 + t1466 * t629, -pkin(13) * t638 - t1457 * t617 - t1466 * t980, t1466 * t668 - t1502, -t1457 * t1064 + t1466 * t603, -t1457 * t913 + t1466 * t683, t1466 * t667 + t1502, t1457 * t909 + t1466 * t684, t1457 * t1486 + t1466 * t738, -pkin(13) * t643 - t1457 * t596 + t1466 * t606, -pkin(13) * t661 - t1457 * t602 + t1466 * t607, -pkin(13) * t598 - t1457 * t567 + t1466 * t573, -pkin(13) * t587 - t1457 * t562 + t1466 * t677; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1386, 0, t1387, 0, t1341, t1476, t1295, pkin(13) * t1295, t1457 * t1318 - t1478, t1457 * t1285 + t1466 * t1391, t1457 * t1300 - t1465 * t1511, t1457 * t1316 + t1478, t1457 * t1298 + t1456 * t1511, -t1466 * qJDD(2) + t1457 * t1368, pkin(13) * t1237 + t1466 * t1218 - t1457 * t1525, pkin(13) * t1238 + t1466 * t1219 + t1456 * t1542, pkin(13) * t1292 - t1214 * t1457, pkin(13) * t1141 - t1214 * t1592, t1457 * t998 + t1488, t1466 * t1275 + t1457 * t877, t1457 * t1053 + t1466 * t1151, t1457 * t995 - t1488, t1457 * t1054 - t1159 * t1466, t1457 * t1082 - t1466 * t1510, pkin(13) * t920 + t1457 * t1007 + t1466 * t857, pkin(13) * t934 + t1457 * t1005 + t1466 * t896, pkin(13) * t832 + t1457 * t839 + t1466 * t787, pkin(13) * t848 + t1466 * t785 - t1246, t1457 * t701 - t1491, t1466 * t1113 + t1457 * t630, t1457 * t762 + t1466 * t975, t1457 * t700 + t1491, t1457 * t763 + t1466 * t968, -t1466 * t1422 + t1457 * t808, pkin(13) * t687 + t1457 * t675 + t1466 * t640, pkin(13) * t708 + t1457 * t676 + t1466 * t659, pkin(13) * t625 + t1457 * t608 + t1466 * t591, pkin(13) * t616 + t1457 * t855 + t1466 * t582, t1457 * t620 + t1466 * t863, t1457 * t583 + t1466 * t745, t1457 * t592 + t1466 * t835, t1457 * t619 + t1466 * t861, t1457 * t593 + t1466 * t836, t1457 * t649 + t1466 * t976, pkin(13) * t577 + t1457 * t552 + t1466 * t560, pkin(13) * t579 + t1457 * t553 + t1466 * t561, pkin(13) * t572 + t1457 * t548 + t1466 * t557, pkin(13) * t551 + t1457 * t546 + t1466 * t547, t1457 * t1319 + t1477, t1457 * t1286 + t1466 * t1389, t1457 * t1304 - t1452 * t1511, t1457 * t1317 - t1477, t1457 * t1302 - t1461 * t1511, -t1466 * qJDD(6) + t1457 * t1369, pkin(13) * t1239 + t1466 * t1128 + t1457 * t1287, pkin(13) * t1240 + t1466 * t1129 + t1457 * t1288, pkin(13) * t1293 - pkin(16) * t1521 + t1457 * t1187, pkin(13) * t1142 + pkin(16) * t1541 + t1466 * t1081, t1457 * t1000 + t1489, t1466 * t1277 + t1457 * t881, t1457 * t1057 + t1466 * t1157, t1457 * t997 - t1489, t1457 * t1058 + t1466 * t1147, t1457 * t1084 - t1466 * t1438, pkin(13) * t922 + t1457 * t1004 + t1466 * t858, pkin(13) * t936 + t1457 * t1006 + t1466 * t897, pkin(13) * t834 + t1457 * t840 + t1466 * t788, pkin(13) * t849 + t1466 * t786 - t1246, t1457 * t999 - t1490, t1466 * t1276 + t1457 * t879, t1457 * t1055 + t1466 * t1154, t1457 * t996 + t1490, t1457 * t1056 + t1466 * t1143, t1457 * t1083 - t1466 * t1437, pkin(13) * t921 - t1457 * t1258 + t1466 * t937, pkin(13) * t935 + t1457 * t1259 + t1466 * t961, pkin(13) * t833 - t1457 * t940 - t1592 * t884, pkin(13) * t924 - t1592 * t940, t1457 * t703 - t1492, t1466 * t1112 + t1457 * t633, t1457 * t764 + t1466 * t970, t1457 * t702 + t1492, t1457 * t765 + t1466 * t966, t1457 * t809 - t1466 * t1487, pkin(13) * t688 + t1457 * t720 + t1466 * t674, pkin(13) * t709 + t1457 * t721 + t1466 * t689, pkin(13) * t626 + t1457 * t629 + t1466 * t613, pkin(13) * t639 - t1457 * t980 + t1466 * t617, t1457 * t668 + t1493, t1466 * t1064 + t1457 * t603, t1457 * t683 + t1466 * t913, t1457 * t667 - t1493, t1457 * t684 - t1466 * t909, t1457 * t738 - t1466 * t1486, pkin(13) * t644 + t1457 * t606 + t1466 * t596, pkin(13) * t662 + t1457 * t607 + t1466 * t602, pkin(13) * t599 + t1457 * t573 + t1466 * t567, pkin(13) * t588 + t1457 * t677 + t1466 * t562; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1396, t1397, 0, 0, (t1383 - t1504) * t1465, t1456 * t1376 + t1465 * t1380, -t1456 * t1407 + t1523, -t1612 * t1456, t1465 * t1403 - t1546, 0, pkin(15) * t1380 - t1456 * t1371, pkin(15) * t1376 - t1525, pkin(15) * t1390 + t1210, t1365, t1465 * t1124 - t1456 * t1127, t1465 * t1024 - t1456 * t1030, t1465 * t1176 - t1456 * t1182, t1465 * t1118 - t1456 * t1121, t1465 * t1177 - t1456 * t1183, t1465 * t1222 - t1456 * t1225, pkin(15) * t1158 - t1456 * t1071 + t1278 * t1526, -pkin(15) * t1602 - t1456 * t1073 - t1278 * t1547, -pkin(15) * t1215 - t1456 * t960 + t1615, t1131, -t1456 * t807 + t1465 * t803, -t1456 * t716 + t1465 * t712, -t1456 * t904 + t1465 * t900, -t1456 * t806 + t1465 * t802, -t1456 * t905 + t1465 * t901, -t1456 * t958 + t1465 * t956, -pkin(15) * t967 - t1456 * t749 + t1465 * t796, pkin(15) * t1610 - t1456 * t750 + t1465 * t797, -pkin(15) * t1067 - t1456 * t673 + t1465 * t678, -t1456 * t941 + (pkin(5) * t1526 + pkin(15)) * t1078, -t1456 * t695 + t1465 * t693, -t1456 * t642 + t1465 * t641, -t1456 * t654 + t1465 * t652, -t1456 * t694 + t1465 * t692, -t1456 * t655 + t1465 * t653, -t1456 * t735 + t1465 * t734, -pkin(15) * t798 - t1456 * t564 + t1465 * t566, -pkin(15) * t810 - t1456 * t565 + t1465 * t568, -pkin(15) * t746 - t1456 * t558 + t1465 * t559, -pkin(15) * t627 - t1456 * t549 + t1465 * t554, (t1378 + t1496) * t1452, t1461 * t1377 + t1452 * t1382, t1461 * t1401 + t1553, (t1381 - t1506) * t1461, t1452 * t1405 + t1531, 0, -pkin(14) * t1382 + t1532, pkin(14) * t1377 - t1554, -pkin(14) * t1388 + t1213, -pkin(14) * t1372, -t1456 * t1123 + t1465 * t1126, -t1456 * t1022 + t1465 * t1028, -t1456 * t1174 + t1465 * t1180, -t1456 * t1117 + t1465 * t1120, -t1456 * t1175 + t1465 * t1181, -t1456 * t1221 + t1465 * t1224, -pkin(15) * t1146 - t1456 * t1072 - t1278 * t1555, -pkin(15) * t1613 - t1456 * t1070 - t1278 * t1533, -pkin(15) * t1217 - t1456 * t959 + t1614, t1131, -t1456 * t1122 + t1465 * t1125, -t1456 * t1020 + t1465 * t1026, -t1456 * t1172 + t1465 * t1178, -t1456 * t1116 + t1465 * t1119, -t1456 * t1173 + t1465 * t1179, -t1456 * t1220 + t1465 * t1223, pkin(15) * t1144 - t1259, -pkin(15) * t1152 - t1258, pkin(15) * t1216 + t939, t1365, -t1456 * t801 + t1465 * t805, -t1456 * t711 + t1465 * t715, -t1456 * t898 + t1465 * t902, -t1456 * t800 + t1465 * t804, -t1456 * t899 + t1465 * t903, -t1456 * t955 + t1465 * t957, pkin(15) * t965 - t1456 * t821 + t1465 * t823, pkin(15) * t971 - t1456 * t822 + t1465 * t824, -pkin(15) * t1066 - t1456 * t704 + t1465 * t705, (-pkin(2) * t1475 + pkin(15)) * t1098, -t1456 * t758 + t1465 * t760, -t1456 * t669 + t1465 * t671, -t1456 * t780 + t1465 * t782, -t1456 * t757 + t1465 * t759, -t1456 * t781 + t1465 * t783, -t1456 * t853 + t1465 * t854, pkin(15) * t908 - t1456 * t663 + t1465 * t681, -pkin(15) * t1609 - t1456 * t664 + t1465 * t682, -pkin(15) * t979 - t1456 * t614 + t1465 * t618, pkin(15) * t978 - t1456 * t761 + t1465 * t812;];
tauB_reg = t1;
