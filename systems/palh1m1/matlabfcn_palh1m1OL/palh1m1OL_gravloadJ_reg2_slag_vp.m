% Calculate inertial parameters regressor of gravitation load for
% palh1m1OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [13x1]
%   Generalized joint coordinates (joint angles)
% g_base [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [20x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi312,phi413,phi710,phi711]';
% 
% Output:
% taug_reg [13x(13*10)]
%   inertial parameter regressor of gravitation joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-15 19:46
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taug_reg = palh1m1OL_gravloadJ_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(13,1),zeros(3,1),zeros(20,1)}
assert(isreal(qJ) && all(size(qJ) == [13 1]), ...
  'palh1m1OL_gravloadJ_reg2_slag_vp: qJ has to be [13x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh1m1OL_gravloadJ_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [20 1]), ...
  'palh1m1OL_gravloadJ_reg2_slag_vp: pkin has to be [20x1] (double)');

%% Symbolic Calculation
% From gravload_joint_fixb_regressor_matlab.m
t57 = qJ(2) + qJ(3);
t54 = qJ(4) + t57;
t43 = sin(t54);
t45 = cos(t54);
t73 = t45 * pkin(9) + t43 * pkin(11);
t61 = sin(qJ(1));
t65 = cos(qJ(1));
t68 = g(1) * t61 - g(2) * t65;
t30 = g(1) * t65 + g(2) * t61;
t6 = -g(3) * t45 + t30 * t43;
t49 = sin(t57);
t86 = pkin(5) * t49;
t85 = pkin(9) * t43;
t84 = pkin(11) * t45;
t81 = g(3) * t43;
t60 = sin(qJ(2));
t79 = t60 * pkin(1);
t64 = cos(qJ(2));
t78 = t64 * pkin(1);
t59 = sin(qJ(5));
t77 = t61 * t59;
t63 = cos(qJ(5));
t76 = t61 * t63;
t75 = t65 * t59;
t74 = t65 * t63;
t56 = qJ(2) + qJ(7);
t55 = qJ(2) + qJ(8);
t46 = pkin(19) - t56;
t37 = sin(t46);
t72 = pkin(4) * t37 - t79;
t52 = cos(t57);
t40 = pkin(5) * t52;
t71 = t40 - t79;
t27 = -t78 - t86;
t70 = t27 - t85;
t69 = -t85 - t86;
t47 = sin(t55);
t50 = cos(t55);
t13 = g(3) * t47 + t30 * t50;
t12 = -g(3) * t52 + t30 * t49;
t66 = g(3) * t60 + t30 * t64;
t62 = cos(qJ(6));
t58 = sin(qJ(6));
t53 = qJ(9) + t55;
t51 = cos(t56);
t48 = sin(t56);
t44 = cos(t53);
t42 = sin(t53);
t39 = -qJ(10) + t46;
t38 = cos(t46);
t34 = cos(t39);
t33 = sin(t39);
t29 = t65 * t84;
t28 = t61 * t84;
t26 = t68 * pkin(15);
t25 = pkin(15) + t71;
t22 = t45 * t74 + t77;
t21 = -t45 * t75 + t76;
t20 = -t45 * t76 + t75;
t19 = t45 * t77 + t74;
t18 = t68 * t43;
t17 = t68 * (pkin(15) - t79);
t16 = t66 * pkin(1);
t15 = g(3) * t49 + t30 * t52;
t14 = g(3) * t48 + t30 * t51;
t11 = g(3) * t51 - t30 * t48;
t10 = g(3) * t50 - t30 * t47;
t9 = t13 * pkin(2);
t8 = t30 * t45 + t81;
t7 = -g(3) * t42 - t30 * t44;
t5 = -g(3) * t44 + t30 * t42;
t4 = g(3) * t33 - t30 * t34;
t3 = -g(3) * t34 - t30 * t33;
t2 = t6 * t63;
t1 = t6 * t59;
t23 = [0, 0, 0, 0, 0, 0, t68, t30, 0, 0, 0, 0, 0, 0, 0, 0, -t68 * t60, -t68 * t64, -t30, t26, 0, 0, 0, 0, 0, 0, t68 * t52, -t68 * t49, -t30, t17, 0, 0, 0, 0, 0, 0, t68 * t45, -t18, -t30, t68 * t25, 0, 0, 0, 0, 0, 0, -g(1) * t20 - g(2) * t22, -g(1) * t19 - g(2) * t21, t18, t68 * (t25 + t73), 0, 0, 0, 0, 0, 0, t68 * t62, -t68 * t58, -t30, -t68 * pkin(14), 0, 0, 0, 0, 0, 0, -t68 * t48, -t68 * t51, -t30, t17, 0, 0, 0, 0, 0, 0, -t68 * t47, -t68 * t50, -t30, t26, 0, 0, 0, 0, 0, 0, t68 * t42, t68 * t44, -t30, t68 * (-pkin(2) * t47 + pkin(15)), 0, 0, 0, 0, 0, 0, -t68 * t33, t68 * t34, -t30, t68 * (pkin(15) + t72); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, g(3) * t64 - t30 * t60, 0, 0, 0, 0, 0, 0, 0, 0, t12, t15, 0, t16, 0, 0, 0, 0, 0, 0, t6, t8, 0, -g(3) * t71 - t30 * t27, 0, 0, 0, 0, 0, 0, t2, -t1, -t8, -g(1) * (t70 * t65 + t29) - g(2) * (t70 * t61 + t28) - g(3) * (t71 + t73), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, t11, 0, t16, 0, 0, 0, 0, 0, 0, t13, t10, 0, 0, 0, 0, 0, 0, 0, 0, t7, t5, 0, t9, 0, 0, 0, 0, 0, 0, t4, t3, 0, -g(3) * t72 - t30 * (-pkin(4) * t38 - t78); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, t15, 0, 0, 0, 0, 0, 0, 0, 0, t6, t8, 0, t12 * pkin(5), 0, 0, 0, 0, 0, 0, t2, -t1, -t8, -g(1) * (t69 * t65 + t29) - g(2) * (t69 * t61 + t28) - g(3) * (t40 + t73), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, t8, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t1, -t8, -g(1) * (-t65 * t85 + t29) - g(2) * (-t61 * t85 + t28) - g(3) * t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1) * t21 + g(2) * t19 + t59 * t81, g(1) * t22 - g(2) * t20 + t63 * t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3) * t62 + t30 * t58, g(3) * t58 + t30 * t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3, 0, (-g(3) * t37 + t30 * t38) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, t10, 0, 0, 0, 0, 0, 0, 0, 0, t7, t5, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
taug_reg = t23;
