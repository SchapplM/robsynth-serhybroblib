% Calculate inertial parameters regressor of inverse dynamics with ic joint torque vector for
% palh1m1IC
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [13x1]
%   Generalized joint coordinates (joint angles)
% qJD [13x1]
%   Generalized joint velocities
% qJDD [13x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [20x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi312,phi413,phi710,phi711]';
% 
% Output:
% tau_reg [4x(13*10)]
%   inertial parameter regressor of inverse dynamics with ic joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-15 20:03
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = palh1m1IC_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(13,1),zeros(13,1),zeros(13,1),zeros(3,1),zeros(20,1)}
assert(isreal(qJ) && all(size(qJ) == [13 1]), ...
  'palh1m1IC_invdynJ_fixb_reg2_slag_vp: qJ has to be [13x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [13 1]), ...
  'palh1m1IC_invdynJ_fixb_reg2_slag_vp: qJD has to be [13x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [13 1]), ...
  'palh1m1IC_invdynJ_fixb_reg2_slag_vp: qJDD has to be [13x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh1m1IC_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [20 1]), ...
  'palh1m1IC_invdynJ_fixb_reg2_slag_vp: pkin has to be [20x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_regressor_ic_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-15 20:02:38
% EndTime: 2020-04-15 20:03:01
% DurationCPUTime: 20.25s
% Computational Cost: add. (15652->829), mult. (31347->1184), div. (288->8), fcn. (25301->48), ass. (0->455)
t389 = sin(qJ(7));
t394 = sin(qJ(2));
t398 = cos(qJ(7));
t402 = cos(qJ(2));
t240 = t389 * t402 + t398 * t394;
t225 = t240 * qJD(1);
t557 = qJD(1) * t394;
t519 = t389 * t557;
t556 = qJD(1) * t402;
t228 = t398 * t556 - t519;
t387 = sin(pkin(19));
t597 = cos(pkin(19));
t608 = sin(qJ(10));
t609 = cos(qJ(10));
t238 = t387 * t608 + t597 * t609;
t426 = -t387 * t609 + t597 * t608;
t107 = t225 * t426 - t228 * t238;
t471 = t225 * t238 + t228 * t426;
t664 = t107 * t471;
t377 = -qJ(7) + pkin(19);
t356 = -qJ(10) + t377;
t320 = sin(t356);
t230 = t320 * pkin(8) - pkin(4) * sin(t377);
t321 = cos(t356);
t231 = t321 * pkin(8) - pkin(4) * cos(t377);
t567 = qJ(3) + qJ(4);
t357 = pkin(18) + t567;
t322 = sin(t357);
t325 = cos(t357);
t180 = 0.1e1 / (-t320 * t322 + t321 * t325) / pkin(10) / pkin(8);
t385 = qJ(2) + qJ(7);
t358 = pkin(20) + t385;
t323 = sin(t358);
t326 = cos(t358);
t390 = sin(qJ(6));
t399 = cos(qJ(6));
t188 = 0.1e1 / (-t323 * t390 - t326 * t399) / pkin(7) / pkin(3);
t370 = t394 * pkin(1);
t247 = pkin(3) * t323 + t370;
t621 = pkin(1) * t402;
t248 = pkin(3) * t326 + t621;
t86 = (t247 * t390 + t248 * t399) * pkin(7) * t188;
t432 = t180 * t86;
t25 = (-t230 * t322 + t231 * t325) * pkin(10) * t432;
t624 = -t86 - 0.1e1;
t665 = t25 + t624;
t669 = t665 * t664;
t23 = (t230 * t321 - t231 * t320) * pkin(8) * t432;
t656 = t23 - 0.1e1;
t393 = sin(qJ(3));
t244 = pkin(5) * t393 + pkin(10) * t322;
t401 = cos(qJ(3));
t245 = pkin(5) * t401 + pkin(10) * t325;
t69 = (t244 * t320 - t245 * t321) * t180 * pkin(8);
t655 = t69 + 0.1e1;
t400 = cos(qJ(5));
t548 = qJD(5) * t400;
t241 = t393 * t402 + t394 * t401;
t227 = t241 * qJD(1);
t229 = -t393 * t557 + t401 * t556;
t392 = sin(qJ(4));
t623 = cos(qJ(4));
t150 = t227 * t392 - t623 * t229;
t652 = t150 * t400;
t668 = t548 + t652;
t397 = cos(qJ(8));
t622 = sin(qJ(8));
t520 = t622 * t394;
t494 = qJD(1) * t520;
t223 = -t397 * t556 + t494;
t239 = t397 * t394 + t622 * t402;
t224 = t239 * qJD(1);
t388 = sin(qJ(9));
t396 = cos(qJ(9));
t153 = t223 * t388 - t224 * t396;
t375 = qJD(2) + qJD(8);
t355 = qJD(9) + t375;
t512 = qJDD(1) * t622;
t538 = t402 * qJDD(1);
t181 = t375 * t239;
t558 = qJD(1) * t181;
t121 = -t394 * t512 + t397 * t538 - t558;
t446 = -t375 * t494 + t402 * t512;
t501 = t402 * t375;
t539 = t394 * qJDD(1);
t122 = (qJD(1) * t501 + t539) * t397 + t446;
t547 = qJD(9) * t388;
t52 = t122 * t388 - t223 * t547 + (qJD(9) * t224 - t121) * t396;
t34 = t153 * t355 + t52;
t472 = -t223 * t396 - t224 * t388;
t650 = t472 * t153;
t383 = qJ(8) + qJ(9);
t360 = sin(t383);
t253 = t622 * pkin(2) - t360 * pkin(12);
t364 = cos(t383);
t254 = -pkin(2) * t397 + pkin(12) * t364;
t378 = qJ(3) + pkin(17);
t353 = sin(t378);
t354 = cos(t378);
t617 = pkin(6) / (t253 * t364 + t254 * t360) / pkin(12);
t67 = (-t253 * t353 + t254 * t354) * t617;
t77 = (-t353 * t360 - t354 * t364) * pkin(12) * t617;
t654 = t67 + t77;
t667 = t654 * t650;
t546 = qJD(9) * t396;
t53 = t388 * t121 + t122 * t396 - t223 * t546 - t224 * t547;
t35 = -t355 * t472 + t53;
t456 = t623 * t227 + t392 * t229;
t663 = t150 * t456;
t386 = qJ(2) + qJ(3);
t367 = cos(t386);
t395 = sin(qJ(1));
t403 = cos(qJ(1));
t273 = g(1) * t403 + g(2) * t395;
t363 = sin(t386);
t459 = t273 * t363;
t661 = -g(3) * t367 + t459;
t391 = sin(qJ(5));
t376 = qJD(2) + qJD(3);
t511 = qJD(4) + t376;
t481 = t400 * t511;
t127 = t391 * t456 - t481;
t373 = qJDD(2) + qJDD(3);
t497 = qJDD(4) + t373;
t448 = qJD(3) * t241;
t484 = t393 * t539 - t401 * t538;
t125 = (qJD(2) * t241 + t448) * qJD(1) + t484;
t469 = t393 * t394 - t401 * t402;
t447 = t469 * qJD(3);
t413 = -qJD(2) * t469 - t447;
t126 = qJD(1) * t413 + qJDD(1) * t241;
t516 = t623 * qJD(4);
t552 = qJD(4) * t392;
t54 = t392 * t125 - t623 * t126 + t227 * t552 - t229 * t516;
t549 = qJD(5) * t391;
t30 = -qJD(5) * t481 - t391 * t497 + t400 * t54 + t456 * t549;
t129 = t391 * t511 + t400 * t456;
t551 = qJD(5) * t129;
t31 = -t391 * t54 - t400 * t497 + t551;
t659 = -t127 * t668 - t30 * t400 - t391 * t31;
t27 = t30 * t391;
t658 = t129 * t668 - t27;
t145 = qJD(5) + t150;
t506 = t623 * t125 + t392 * t126;
t55 = qJD(4) * t456 + t506;
t49 = qJDD(5) + t55;
t657 = -t129 * t456 + t145 * t668 + t391 * t49;
t369 = qJ(2) + t567;
t338 = cos(t369);
t611 = g(3) * t338;
t607 = pkin(1) * qJD(2);
t528 = qJD(3) * t607;
t596 = pkin(1) * qJDD(2);
t562 = t393 * t596 + t401 * t528;
t202 = pkin(5) * t373 + t562;
t534 = t393 * t607;
t252 = pkin(5) * t376 + t534;
t345 = t401 * t596;
t496 = t623 * t607;
t479 = t401 * t496;
t98 = qJD(4) * t479 + t623 * t202 + (-qJD(4) * t252 - t393 * t528 + t345) * t392;
t91 = -pkin(9) * t497 - t98;
t518 = -t91 - t611;
t74 = (-t244 * t325 + t245 * t322) * t180 * pkin(10);
t653 = t74 * t664;
t533 = t401 * t607;
t292 = t392 * t533;
t189 = t623 * t252 + t292;
t185 = -pkin(9) * t511 - t189;
t591 = t150 * t185;
t374 = qJD(7) + qJD(2);
t183 = t374 * t240;
t123 = qJD(1) * t183 + t389 * t539 - t398 * t538;
t649 = -t225 * t374 + t123;
t336 = sin(t369);
t578 = t336 * t403;
t579 = t336 * t395;
t648 = g(1) * t578 + g(2) * t579;
t590 = t150 * t391;
t647 = t549 + t590;
t646 = t107 ^ 2 - t471 ^ 2;
t645 = -t150 ^ 2 + t456 ^ 2;
t45 = -t153 ^ 2 + t472 ^ 2;
t87 = pkin(9) * t456 + pkin(11) * t150;
t543 = qJD(1) * qJD(2);
t515 = t394 * t543;
t461 = -qJD(7) * t519 + (-t515 + t538) * t389;
t500 = t402 * t374;
t124 = (qJD(1) * t500 + t539) * t398 + t461;
t215 = t238 * qJD(10);
t216 = t426 * qJD(10);
t33 = -t123 * t426 + t238 * t124 + t215 * t228 - t216 * t225;
t351 = qJD(10) + t374;
t644 = t107 * t351 + t33;
t643 = t150 * t511 - t54;
t595 = qJD(1) * pkin(15);
t272 = pkin(1) * t557 - t595;
t130 = (t597 * t225 - t228 * t387) * pkin(4) + t272;
t328 = -qJ(2) + t356;
t302 = sin(t328);
t344 = t398 * t596;
t372 = qJDD(2) + qJDD(7);
t522 = t597 * pkin(4);
t535 = t389 * t607;
t194 = -qJD(7) * t535 + t372 * t522 + t344;
t554 = qJD(2) * t398;
t619 = pkin(4) * t387;
t195 = t372 * t619 + (qJD(7) * t554 + t389 * qJDD(2)) * pkin(1);
t234 = t374 * t619 + t535;
t235 = pkin(1) * t554 + t374 * t522;
t59 = -t238 * t194 + t195 * t426 + t215 * t234 + t216 * t235;
t437 = g(3) * t302 - t107 * t130 + t59;
t187 = -pkin(5) * t229 + t272;
t316 = g(3) * t336;
t576 = t338 * t403;
t577 = t338 * t395;
t524 = g(1) * t576 + g(2) * t577 + t316;
t480 = t393 * t496;
t521 = t623 * t401;
t499 = pkin(1) * t521;
t97 = qJD(3) * t480 + qJD(4) * t292 - qJDD(2) * t499 + t392 * t202 + t252 * t516;
t423 = t187 * t150 + t524 - t97;
t196 = pkin(2) * t224 - t595;
t368 = qJ(2) + t383;
t335 = sin(t368);
t337 = cos(t368);
t532 = pkin(2) * qJD(9) * t375;
t371 = qJDD(2) + qJDD(8);
t638 = pkin(2) * t371;
t642 = -g(3) * t337 + t153 * t196 + t273 * t335 + t388 * t638 + t396 * t532;
t340 = pkin(1) * t393 + pkin(5);
t218 = t392 * t340 - t499;
t210 = pkin(11) + t218;
t348 = pkin(1) * t556;
t618 = pkin(5) * t227;
t75 = t618 + t87;
t68 = t348 + t75;
t636 = (qJD(5) * t210 + t68) * t145;
t490 = g(1) * t395 - g(2) * t403;
t635 = t490 * t336;
t634 = t624 * t225 * t228;
t95 = -t229 * t376 + t126;
t563 = t338 * pkin(9) + t336 * pkin(11);
t190 = -t392 * t252 + t479;
t186 = pkin(11) * t511 - t190;
t66 = pkin(9) * t150 - pkin(11) * t456 + t187;
t56 = -t186 * t391 + t400 * t66;
t57 = t186 * t400 + t391 * t66;
t482 = -t391 * t56 + t400 * t57;
t633 = t393 ^ 2 + t401 ^ 2;
t270 = pkin(1) * t389 + t619;
t271 = t398 * pkin(1) + t522;
t454 = pkin(1) * (t238 * t389 + t398 * t426);
t486 = qJD(7) * t454 + t215 * t270 + t216 * t271 + t86 * ((t215 * t387 + t597 * t216) * pkin(4) - qJD(2) * t454);
t453 = pkin(1) * (-t238 * t398 + t389 * t426);
t487 = qJD(7) * t453 - t215 * t271 + t216 * t270 + t86 * ((-t597 * t215 + t216 * t387) * pkin(4) - qJD(2) * t453);
t631 = t127 * t456 + t400 * t49;
t32 = t238 * t123 + t124 * t426 + t215 * t225 + t216 * t228;
t630 = -t351 * t471 + t32;
t464 = t185 * t549 + t648 * t400 - t456 * t56;
t468 = t185 * t548 - t518 * t391 + t456 * t57;
t303 = cos(t328);
t58 = -t194 * t426 - t238 * t195 - t215 * t235 + t216 * t234;
t412 = -g(3) * t303 - t130 * t471 - t58;
t409 = -t187 * t456 - t611 + t648 + t98;
t628 = -g(3) * t335 + t472 * t196 - t273 * t337 + t388 * t532;
t627 = t456 * t376 - t506;
t182 = -t375 * t520 + t397 * t501;
t620 = pkin(2) * t182;
t514 = t402 * t543;
t544 = qJDD(1) * pkin(15);
t214 = -t544 + (t514 + t539) * pkin(1);
t96 = pkin(5) * t125 + t214;
t12 = pkin(9) * t55 + pkin(11) * t54 + t96;
t90 = pkin(11) * t497 + t97;
t7 = qJD(5) * t56 + t12 * t391 + t400 * t90;
t6 = t7 * t400;
t605 = t145 * t56;
t604 = t145 * t57;
t29 = t31 * t400;
t406 = qJD(1) ^ 2;
t83 = (t247 * t326 - t248 * t323) * t188 * pkin(3);
t601 = t406 * t83;
t598 = t370 - pkin(15);
t594 = t129 * t127;
t593 = t145 * t391;
t177 = t623 * t241 - t392 * t469;
t588 = t177 * t391;
t587 = t177 * t400;
t586 = t224 * t223;
t583 = t227 * t229;
t582 = t227 * t376;
t581 = t228 * t374;
t575 = t355 * t375;
t574 = t389 * t394;
t573 = t390 * t399;
t572 = t391 * t395;
t571 = t391 * t403;
t570 = t392 * t401;
t569 = t395 * t400;
t568 = t400 * t403;
t359 = -qJ(2) + t377;
t324 = sin(t359);
t564 = pkin(4) * t324 - t370;
t332 = pkin(5) * t367;
t561 = t332 - t370;
t379 = t390 ^ 2;
t381 = t399 ^ 2;
t560 = t379 - t381;
t380 = t394 ^ 2;
t382 = t402 ^ 2;
t559 = t380 - t382;
t555 = qJD(2) * t394;
t553 = qJD(3) * t393;
t550 = qJD(5) * t145;
t545 = qJDD(1) * pkin(14);
t542 = qJD(1) * qJD(6);
t541 = qJDD(1) * t399;
t540 = qJDD(2) * pkin(1) ^ 2;
t531 = pkin(11) * t550;
t349 = t402 * t607;
t530 = t77 * t586;
t527 = t402 * t406 * t394;
t523 = t332 + t563;
t255 = -pkin(5) * t363 - t621;
t513 = -pkin(9) * t336 + t255;
t510 = t656 * t456;
t509 = t655 * t456;
t366 = cos(t385);
t505 = g(3) * t366 + t272 * t225;
t503 = 0.2e1 * pkin(14) * t542;
t502 = t6 - t524;
t498 = t573 * t601;
t495 = pkin(5) * t516;
t346 = qJDD(10) + t372;
t493 = t394 * t514;
t492 = t542 * t573;
t212 = (t392 * t393 - t521) * t607;
t491 = pkin(5) * t552 - t212;
t488 = -pkin(11) * t49 + t591;
t483 = t391 * t57 + t400 * t56;
t339 = pkin(5) * t392 + pkin(11);
t477 = -t339 * t49 + t591;
t109 = t234 * t426 - t235 * t238;
t110 = t234 * t238 + t235 * t426;
t475 = -t107 * t110 + t109 * t471;
t473 = -t150 * t189 - t190 * t456;
t242 = t397 * t402 - t520;
t174 = t239 * t396 + t242 * t388;
t176 = -t239 * t388 + t242 * t396;
t467 = -t56 * t652 - t57 * t590 + t502;
t466 = t647 * t127 - t29;
t462 = -qJD(5) * t66 + t316 - t90;
t460 = t273 * t336;
t414 = t376 * t241;
t436 = t623 * t469;
t72 = qJD(4) * t436 + t241 * t552 + t392 * t414 - t623 * t413;
t458 = t177 * t548 - t391 * t72;
t457 = -t177 * t549 - t400 * t72;
t362 = sin(t385);
t450 = g(3) * t362 - t272 * t228 + t273 * t366 + t344;
t449 = g(3) * t363 - t229 * t272 + t273 * t367 + t345;
t217 = pkin(1) * t570 + t623 * t340;
t445 = -pkin(14) * t406 + t273;
t444 = pkin(15) * t406 + t273;
t442 = -t490 + 0.2e1 * t545;
t441 = -t490 - 0.2e1 * t544;
t439 = g(3) * t370 - t272 * t348 + t273 * t621;
t162 = t340 * t516 + (t401 * t552 + (t623 * t393 + t570) * qJD(3)) * pkin(1);
t438 = -t145 * t162 - t210 * t49 + t591;
t143 = (t225 * t387 + t597 * t228) * pkin(4);
t434 = -t647 * t145 + t631;
t157 = pkin(5) * t414 + t349;
t73 = t177 * qJD(4) + t392 * t413 + t623 * t414;
t22 = t73 * pkin(9) + t72 * pkin(11) + t157;
t175 = t241 * t392 + t436;
t197 = pkin(5) * t469 + t598;
t82 = t175 * pkin(9) - t177 * pkin(11) + t197;
t431 = qJD(5) * t177 * t185 + t145 * t22 + t49 * t82;
t430 = t177 * t91 - t185 * t72 - t550 * t82;
t428 = -t227 * t272 + t562 + t661;
t384 = qJ(2) + qJ(8);
t361 = sin(t384);
t365 = cos(t384);
t427 = g(3) * t361 + t273 * t365;
t424 = -qJD(7) * t374 + (-qJD(7) + t86 * (-qJD(7) + t374)) * qJD(2);
t422 = -t647 * t129 + t659;
t421 = t624 * t273;
t11 = t400 * t12;
t8 = -qJD(5) * t57 - t391 * t90 + t11;
t420 = -qJD(5) * t483 - t8 * t391 + t6;
t257 = pkin(11) * t577;
t258 = pkin(11) * t576;
t419 = -g(1) * (-pkin(9) * t578 + t258) - g(2) * (-pkin(9) * t579 + t257);
t405 = qJD(2) ^ 2;
t404 = qJD(6) ^ 2;
t350 = qJDD(9) + t371;
t341 = -t623 * pkin(5) - pkin(9);
t327 = cos(t359);
t251 = pkin(15) + t561;
t243 = t398 * t402 - t574;
t233 = (t490 + t544) * pkin(15);
t221 = pkin(2) * t239 - pkin(15);
t213 = t480 + t292;
t209 = -pkin(9) - t217;
t208 = t338 * t568 + t572;
t207 = -t338 * t571 + t569;
t206 = -t338 * t569 + t571;
t205 = t338 * t572 + t568;
t191 = t348 + t618;
t184 = -qJD(7) * t574 - t389 * t555 + t398 * t500;
t163 = -t340 * t552 + (-t392 * t553 + (t623 * qJD(3) + t516) * t401) * pkin(1);
t159 = (-t238 * t387 - t426 * t597) * pkin(4);
t158 = (-t597 * t238 + t387 * t426) * pkin(4);
t144 = (t597 * t240 - t243 * t387) * pkin(4) + t598;
t142 = -t223 * t595 + t427;
t141 = g(3) * t365 - t224 * t595 - t273 * t361;
t136 = t348 + t143;
t134 = t227 ^ 2 - t229 ^ 2;
t133 = t223 ^ 2 - t224 ^ 2;
t132 = -t238 * t270 - t271 * t426;
t131 = -t238 * t271 + t270 * t426;
t116 = -t238 * t243 + t240 * t426;
t115 = t238 * t240 + t243 * t426;
t112 = pkin(2) * t122 - t544;
t108 = t272 * t349 - (-t214 + t490) * t598;
t94 = -qJD(1) * t414 - t484 + t582;
t93 = -t223 * t375 + (-t375 * t556 - t539) * t397 - t446;
t92 = t224 * t375 + t121;
t89 = t349 + (t183 * t387 + t597 * t184) * pkin(4);
t85 = (t196 * t223 + t427 + (t388 ^ 2 + t396 ^ 2) * t638) * pkin(2);
t71 = qJD(9) * t176 - t181 * t388 + t182 * t396;
t70 = qJD(9) * t174 + t181 * t396 + t182 * t388;
t65 = t189 * t400 + t391 * t87;
t64 = -t189 * t391 + t400 * t87;
t62 = t213 * t400 + t391 * t75;
t61 = -t213 * t391 + t400 * t75;
t60 = (t123 * t387 + t597 * t124) * pkin(4) + t214;
t51 = -t183 * t426 + t184 * t238 + t215 * t243 - t216 * t240;
t50 = t183 * t238 + t184 * t426 + t215 * t240 + t216 * t243;
t44 = (-t223 * t472 + t350 * t388 + t355 * t546) * pkin(2) + t642;
t43 = (t355 * t547 + t153 * t223 + (-t350 - t371) * t396) * pkin(2) + t628;
t39 = -t190 * t511 + t409;
t38 = t189 * t511 + t423;
t18 = -t110 * t351 - t273 * t303 + t437;
t17 = t109 * t351 - t273 * t302 + t412;
t16 = t127 * t593 - t29;
t13 = -t145 * t593 + t631;
t9 = (t34 * t396 - t35 * t388) * pkin(2);
t5 = -t129 * t593 + t659;
t4 = -pkin(9) * t31 + t127 * t190 - t145 * t64 + t488 * t391 + (t518 - t531) * t400 + t464;
t3 = pkin(9) * t30 + t129 * t190 + t145 * t65 + t488 * t400 + (-t460 + t531) * t391 + t468;
t2 = -t91 * pkin(9) + t420 * pkin(11) - g(3) * t563 + t185 * t190 - t56 * t64 - t57 * t65 + t419;
t1 = t127 * t65 + t129 * t64 + (-t605 + (-t31 + t551) * pkin(11)) * t400 + (-t8 - t604 + (qJD(5) * t127 - t30) * pkin(11)) * t391 + t502;
t10 = [0, 0, 0, 0, 0, qJDD(1), t490, t273, 0, 0, qJDD(1) * t382 - 0.2e1 * t493, -0.2e1 * t394 * t538 + 0.2e1 * t543 * t559, qJDD(2) * t402 - t394 * t405, qJDD(1) * t380 + 0.2e1 * t493, -qJDD(2) * t394 - t402 * t405, 0, -0.2e1 * pkin(15) * t514 + t394 * t441, 0.2e1 * pkin(15) * t515 + t402 * t441, -t273, t233, t126 * t241 + t227 * t413, -t241 * t125 - t126 * t469 + t376 * (-t227 * t241 - t229 * t469), t241 * t373 + t376 * t413, t125 * t469 - t229 * t414, -t373 * t469 - t376 * t414, 0, t598 * t125 + t214 * t469 + t490 * t367 + t272 * t448 + (-t229 * t621 + t241 * t272) * qJD(2), t598 * t126 + t214 * t241 - t490 * t363 - t272 * t447 + (t227 * t621 - t272 * t469) * qJD(2), ((-t393 * t241 + t401 * t469) * qJDD(2) + t633 * qJD(2) * t555) * pkin(1) - t273, t108, -t177 * t54 - t456 * t72, t150 * t72 + t175 * t54 - t177 * t55 - t456 * t73, t177 * t497 - t511 * t72, t150 * t73 + t175 * t55, -t175 * t497 - t511 * t73, 0, t150 * t157 + t175 * t96 + t187 * t73 + t197 * t55 + t338 * t490, t157 * t456 + t177 * t96 - t187 * t72 - t197 * t54 - t635, -t175 * t97 - t177 * t98 + t189 * t72 + t190 * t73 - t273, t157 * t187 + t197 * t96 + t251 * t490, t129 * t457 - t30 * t587, (t127 * t400 + t129 * t391) * t72 + (t27 - t29 + (t127 * t391 - t129 * t400) * qJD(5)) * t177, t129 * t73 + t145 * t457 - t175 * t30 + t49 * t587, t127 * t458 + t31 * t588, -t127 * t73 - t145 * t458 - t175 * t31 - t49 * t588, t145 * t73 + t175 * t49, -g(1) * t206 - g(2) * t208 + t175 * t8 + t391 * t430 + t400 * t431 + t56 * t73, -g(1) * t205 - g(2) * t207 - t175 * t7 - t391 * t431 + t400 * t430 - t57 * t73, t635 + (-t129 * t22 - t177 * t8 + t30 * t82 + t56 * t72 + (-t127 * t82 - t177 * t57) * qJD(5)) * t400 + (-t127 * t22 - t177 * t7 - t31 * t82 + t57 * t72 + (t129 * t82 + t177 * t56) * qJD(5)) * t391, t483 * t22 + (qJD(5) * t482 + t7 * t391 + t8 * t400) * t82 + t490 * (t251 + t563), qJDD(1) * t379 + 0.2e1 * t492, 0.2e1 * t390 * t541 - 0.2e1 * t542 * t560, qJDD(6) * t390 + t399 * t404, qJDD(1) * t381 - 0.2e1 * t492, qJDD(6) * t399 - t390 * t404, 0, t390 * t503 - t399 * t442, t390 * t442 + t399 * t503, -t273, (-t490 + t545) * pkin(14), -t123 * t243 - t183 * t228, t123 * t240 - t124 * t243 + t183 * t225 - t184 * t228, -t183 * t374 + t243 * t372, t124 * t240 + t184 * t225, -t184 * t374 - t240 * t372, 0, t124 * t598 + t184 * t272 + t214 * t240 + t225 * t349 - t362 * t490, -t123 * t598 - t183 * t272 + t214 * t243 + t228 * t349 - t366 * t490, ((-t240 * t389 - t243 * t398) * qJDD(2) + (t183 * t398 - t184 * t389 + (-t240 * t398 + t243 * t389) * qJD(7)) * qJD(2)) * pkin(1) - t273, t108, t121 * t242 + t181 * t223, -t121 * t239 - t122 * t242 + t181 * t224 + t182 * t223, -t181 * t375 + t242 * t371, t122 * t239 + t182 * t224, -t182 * t375 - t239 * t371, 0, -t490 * t361 + (-qJD(1) * t182 - qJDD(1) * t239 - t122) * pkin(15), -t490 * t365 + (-qJDD(1) * t242 - t121 + t558) * pkin(15), -t273, t233, -t176 * t52 - t472 * t70, -t153 * t70 + t174 * t52 - t176 * t53 - t472 * t71, -t176 * t350 + t355 * t70, -t153 * t71 + t174 * t53, t174 * t350 + t355 * t71, 0, -t112 * t174 + t153 * t620 - t196 * t71 - t221 * t53 + t335 * t490, -t112 * t176 + t196 * t70 + t221 * t52 + t337 * t490 - t472 * t620, ((-t174 * t388 - t176 * t396) * t371 + (-t388 * t71 + t396 * t70 + (-t174 * t396 + t176 * t388) * qJD(9)) * t375) * pkin(2) - t273, t196 * t620 + t112 * t221 + t490 * (-pkin(2) * t361 + pkin(15)), t107 * t50 + t116 * t32, t107 * t51 + t115 * t32 + t116 * t33 + t471 * t50, t116 * t346 + t351 * t50, t115 * t33 + t471 * t51, t115 * t346 + t351 * t51, 0, -t115 * t60 - t130 * t51 - t144 * t33 - t302 * t490 - t471 * t89, t107 * t89 + t116 * t60 + t130 * t50 + t144 * t32 + t303 * t490, -t109 * t50 - t110 * t51 + t115 * t58 - t116 * t59 - t273, t130 * t89 + t144 * t60 + t490 * (pkin(15) + t564); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t527, -t559 * t406, t538, -t527, -t539, qJDD(2), g(3) * t394 + t402 * t444, g(3) * t402 - t394 * t444, 0, 0, -t583, t134, t95, t583, t94, t373, (qJD(3) * t376 * t401 + t229 * t556 + t373 * t393) * pkin(1) + t428, (-t227 * t556 + t373 * t401 + (-qJD(2) - t376) * t553) * pkin(1) + t449, ((t125 - t582) * t401 - t95 * t393) * pkin(1), t633 * t540 + t439, -t656 * t663, -t656 * t645, -t656 * t643, t510 * t150, -t656 * t627, -t656 * t497, -t191 * t150 + t163 * t511 + t217 * t497 - t23 * t39 + t409, -t162 * t511 - t191 * t456 - t218 * t497 - t23 * t38 + t423, -t150 * t162 - t163 * t456 + t217 * t54 - t218 * t55 + t473, -g(3) * t561 - t190 * t162 + t189 * t163 - t187 * t191 + t98 * t217 + t97 * t218 - t255 * t273, -t656 * t658, -t23 * t5 + t422, -t656 * t657, -t16 * t23 + t466, -t13 * t23 + t434, t510 * t145, -t127 * t163 + t209 * t31 - t23 * t4 + t438 * t391 + (t518 - t636) * t400 + t464, -t129 * t163 - t209 * t30 - t23 * t3 + t438 * t400 + (-t460 + t636) * t391 + t468, -t1 * t23 + (-t127 * t162 + t129 * t68 - t210 * t31 + (t129 * t210 - t56) * qJD(5)) * t400 + (t127 * t68 + t129 * t162 - t210 * t30 - t8 + (t127 * t210 - t57) * qJD(5)) * t391 + t467, t91 * t209 - t185 * t163 - g(1) * (t403 * t513 + t258) - g(2) * (t395 * t513 + t257) - g(3) * (-t370 + t523) - t23 * t2 - t483 * t68 + t482 * t162 + t420 * t210, -t498, t560 * t601, t83 * t390 * qJDD(1), t498, t83 * t541, t83 * qJDD(6), t83 * (-g(3) * t399 + t390 * t445), t83 * (g(3) * t390 + t399 * t445), 0, 0, -t634, -t624 * (-t225 ^ 2 + t228 ^ 2), t649 * t624, t634, (t461 - t581 + (t374 * t556 + t539) * t398) * t624, -t624 * t372, t86 * t450 + (-t225 * t556 + t398 * t372 + t389 * t424) * pkin(1) + t450, t86 * t505 + t421 * t362 + (-t228 * t556 + (-qJDD(2) * t86 - qJDD(2) - t372) * t389 + t424 * t398) * pkin(1) + t505, (t649 * t398 + (-t124 + t581) * t389) * pkin(1), (t389 ^ 2 + t398 ^ 2) * t540 + t439, -t586, t133, t92, t586, t93, t371, t142, t141, 0, 0, -t650, t45, t34, t650, t35, t350, t43, t44, t9, t85, t669, -t665 * t646, -t665 * t630, -t669, -t665 * t644, -t665 * t346, t131 * t346 + t136 * t471 + t86 * (t143 * t471 + t158 * t346 + t437) - t25 * t18 + t486 * t351 + t421 * t303 + t437, -t132 * t346 - t136 * t107 + t86 * (-t107 * t143 - t159 * t346 + t412) - t25 * t17 - t487 * t351 + t421 * t302 + t412, t132 * t33 - t131 * t32 + t86 * (-t158 * t32 + t159 * t33 + t475) - t486 * t107 + t487 * t471 + t475, t58 * t132 + t59 * t131 - t130 * t136 - g(3) * t564 - t273 * (-pkin(4) * t327 - t621) - t487 * t110 + t486 * t109 + (-t130 * t143 + t158 * t59 + t159 * t58 + (-g(3) * t324 + t273 * t327) * pkin(4)) * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t583, t134, t95, t583, t94, t373, -t376 * t533 + t428, (-qJD(3) + t376) * t534 + t449, 0, 0, t655 * t663, t655 * t645, t655 * t643, -t509 * t150, t655 * t627, t655 * t497, t212 * t511 + t69 * t39 + (-t227 * t150 + t623 * t497 - t511 * t552) * pkin(5) + t409, t213 * t511 + t69 * t38 + (-t227 * t456 - t392 * t497 - t511 * t516) * pkin(5) + t423, t213 * t150 - t212 * t456 + (t623 * t54 - t392 * t55 + (-t623 * t150 + t392 * t456) * qJD(4)) * pkin(5) + t473, t189 * t212 + t190 * t213 + (t623 * t98 - t187 * t227 + t392 * t97 + (-t189 * t392 - t623 * t190) * qJD(4) + t661) * pkin(5), t655 * t658, t5 * t69 + t422, t655 * t657, t16 * t69 + t466, t13 * t69 + t434, -t509 * t145, t341 * t31 + t69 * t4 + t518 * t400 + t477 * t391 + t491 * t127 + (-t339 * t548 - t391 * t495 - t61) * t145 + t464, t69 * t3 - t341 * t30 + t477 * t400 - t391 * t460 + t491 * t129 + (t339 * t549 - t400 * t495 + t62) * t145 + t468, t69 * t1 + t62 * t127 + t61 * t129 + (-t127 * t495 - t31 * t339 + (t129 * t339 - t56) * qJD(5)) * t400 + (t129 * t495 - t30 * t339 - t8 + (t127 * t339 - t57) * qJD(5)) * t391 + t467, t91 * t341 - t57 * t62 - t56 * t61 - t185 * t212 - g(3) * t523 + t69 * t2 + (t459 + (t185 * t392 + t482 * t623) * qJD(4)) * pkin(5) + t420 * t339 + t419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t530, t77 * t133, t77 * t92, t530, t77 * t93, t77 * t371, t77 * t142, t77 * t141, 0, 0, -t667, t654 * t45, t654 * t34, t667, t654 * t35, t654 * t350, t77 * t43 + t67 * ((-t371 * t396 - t388 * t575) * pkin(2) + t628), t77 * t44 + t67 * (-pkin(2) * t396 * t575 + t642), t77 * t9, t77 * t85, -t653, t74 * t646, t74 * t630, t653, t74 * t644, t74 * t346, t74 * t18, t74 * t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t594, -t127 ^ 2 + t129 ^ 2, t127 * t145 - t30, -t594, t129 * t145 - t31, t49, -g(1) * t207 + g(2) * t205 - t129 * t185 - t186 * t548 + t391 * t462 + t11 + t604, g(1) * t208 - g(2) * t206 + t127 * t185 + t605 + (qJD(5) * t186 - t12) * t391 + t462 * t400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
tau_reg = t10;
