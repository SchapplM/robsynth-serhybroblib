% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh1m1DE2
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JRD_rot [9x4]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-15 19:16
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh1m1DE2_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1DE2_jacobiRD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1DE2_jacobiRD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1DE2_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1DE2_jacobiRD_rot_sym_varpar: pkin has to be [23x1] (double)');
JRD_rot=NaN(9,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:35
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:35
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0; -t31, 0, 0, 0; 0, 0, 0, 0; t31, 0, 0, 0; -t30, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:35
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (10->8), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t32 = sin(qJ(1));
	t39 = qJD(1) * t32;
	t34 = cos(qJ(1));
	t38 = qJD(1) * t34;
	t31 = sin(qJ(2));
	t37 = qJD(2) * t31;
	t33 = cos(qJ(2));
	t36 = qJD(2) * t33;
	t35 = qJD(2) * t34;
	t30 = -t32 * t37 + t33 * t38;
	t29 = t31 * t38 + t32 * t36;
	t28 = t31 * t35 + t33 * t39;
	t27 = t31 * t39 - t33 * t35;
	t1 = [t29, t28, 0, 0; t27, -t30, 0, 0; 0, -t36, 0, 0; t30, -t27, 0, 0; t28, t29, 0, 0; 0, t37, 0, 0; -t39, 0, 0, 0; t38, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:36
	% EndTime: 2020-04-15 18:49:36
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (61->14), mult. (54->14), div. (0->0), fcn. (54->4), ass. (0->17)
	t68 = qJ(2) + qJ(3);
	t65 = sin(t68);
	t67 = qJD(2) + qJD(3);
	t76 = t67 * t65;
	t66 = cos(t68);
	t75 = t67 * t66;
	t69 = sin(qJ(1));
	t74 = t67 * t69;
	t70 = cos(qJ(1));
	t73 = t67 * t70;
	t72 = qJD(1) * t69;
	t71 = qJD(1) * t70;
	t64 = t65 * t74 - t66 * t71;
	t63 = t65 * t71 + t66 * t74;
	t62 = t65 * t73 + t66 * t72;
	t61 = t65 * t72 - t66 * t73;
	t1 = [t64, t61, t61, 0; -t62, -t63, -t63, 0; 0, -t76, -t76, 0; t63, t62, t62, 0; t61, t64, t64, 0; 0, -t75, -t75, 0; -t72, 0, 0, 0; t71, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:55:25
	% EndTime: 2020-04-15 18:58:06
	% DurationCPUTime: 138.94s
	% Computational Cost: add. (3964713->230), mult. (6172546->465), div. (235892->14), fcn. (3859290->19), ass. (0->231)
	t1037 = pkin(5) ^ 2;
	t1026 = pkin(23) + pkin(22);
	t1024 = sin(t1026);
	t1025 = cos(t1026);
	t1036 = pkin(7) ^ 2;
	t1040 = pkin(1) ^ 2;
	t1030 = sin(qJ(2));
	t1034 = cos(pkin(19));
	t1160 = sin(pkin(19));
	t1161 = cos(qJ(2));
	t1059 = -t1030 * t1034 + t1161 * t1160;
	t1150 = pkin(7) * t1059;
	t1173 = -2 * pkin(1);
	t1111 = -t1150 * t1173 + t1040;
	t1016 = t1036 + t1111;
	t1012 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1016;
	t1017 = pkin(1) + t1150;
	t1170 = -pkin(8) - pkin(3);
	t1010 = (pkin(7) - t1170) * (pkin(7) + t1170) + t1111;
	t1169 = -pkin(8) + pkin(3);
	t1011 = (pkin(7) - t1169) * (pkin(7) + t1169) + t1111;
	t1120 = t1011 * t1010;
	t1041 = sqrt(-t1120);
	t1022 = t1030 * t1160 + t1161 * t1034;
	t1149 = pkin(7) * t1022;
	t1004 = t1012 * t1149 + t1017 * t1041;
	t1032 = cos(qJ(3));
	t1112 = t1032 * t1004;
	t1116 = t1022 * t1041;
	t1003 = -pkin(7) * t1116 + t1012 * t1017;
	t1029 = sin(qJ(3));
	t1115 = t1029 * t1003;
	t1067 = t1115 / 0.2e1 + t1112 / 0.2e1;
	t1013 = 0.1e1 / t1016;
	t1039 = 0.1e1 / pkin(3);
	t1119 = t1013 * t1039;
	t995 = t1067 * t1119;
	t1113 = t1032 * t1003;
	t1114 = t1029 * t1004;
	t1066 = t1113 / 0.2e1 - t1114 / 0.2e1;
	t996 = t1066 * t1119;
	t985 = -t1024 * t996 - t1025 * t995;
	t1159 = pkin(4) * t985;
	t1172 = -2 * pkin(5);
	t1124 = t1159 * t1172 + t1037;
	t1168 = -pkin(9) - pkin(11);
	t975 = (pkin(4) - t1168) * (pkin(4) + t1168) + t1124;
	t1167 = -pkin(9) + pkin(11);
	t976 = (pkin(4) - t1167) * (pkin(4) + t1167) + t1124;
	t1142 = t976 * t975;
	t1042 = sqrt(-t1142);
	t1020 = t1022 * qJD(2);
	t1077 = -t1113 + t1114;
	t1014 = 0.1e1 / t1016 ^ 2;
	t1171 = pkin(1) * pkin(7);
	t1108 = t1014 * t1171;
	t1052 = t1077 * t1108;
	t1109 = t1017 * t1173;
	t1088 = -t1012 + t1109;
	t1019 = t1059 * qJD(2);
	t1118 = t1019 * t1041;
	t1075 = 0.2e1 * (t1010 + t1011) * t1171;
	t1005 = t1020 * t1075;
	t1008 = 0.1e1 / t1041;
	t1157 = -t1008 / 0.2e1;
	t997 = t1005 * t1149 * t1157;
	t990 = t997 + (t1088 * t1020 - t1118) * pkin(7);
	t1135 = t1032 * t990;
	t1175 = t1020 * t1036;
	t1093 = t1022 * t1175;
	t1084 = pkin(1) * t1093;
	t1156 = t1008 / 0.2e1;
	t1091 = t1017 * t1156;
	t1117 = t1020 * t1041;
	t991 = t1005 * t1091 - 0.2e1 * t1084 + (t1019 * t1012 - t1117) * pkin(7);
	t1139 = t1029 * t991;
	t966 = (t1020 * t1052 + (-t1135 / 0.2e1 + t1139 / 0.2e1 + t1067 * qJD(3)) * t1013) * t1039;
	t1076 = t1112 + t1115;
	t1134 = t1032 * t991;
	t1140 = t1029 * t990;
	t967 = (t1076 * t1020 * t1108 + (t1140 / 0.2e1 + t1134 / 0.2e1 + t1066 * qJD(3)) * t1013) * t1039;
	t961 = t1024 * t966 - t1025 * t967;
	t1177 = t1042 * t961;
	t1035 = 0.1e1 / pkin(11);
	t1038 = pkin(4) ^ 2;
	t981 = t1038 + t1124;
	t979 = 0.1e1 / t981 ^ 2;
	t1110 = pkin(4) * pkin(5) * t979;
	t1027 = sin(pkin(21));
	t1086 = t1024 * t995 - t1025 * t996;
	t1158 = pkin(4) * t1086;
	t977 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t981;
	t982 = pkin(5) - t1159;
	t957 = t1042 * t982 + t977 * t1158;
	t1126 = t957 * t1027;
	t1028 = cos(pkin(21));
	t956 = -t1042 * t1158 + t977 * t982;
	t1127 = t956 * t1028;
	t1054 = (t1126 - t1127) * t1110;
	t1154 = -t1028 / 0.2e1;
	t1155 = t1027 / 0.2e1;
	t1096 = t982 * t1172 - t977;
	t1162 = -t1086 / 0.2e1;
	t969 = 0.1e1 / t1042;
	t1105 = t969 * t1162;
	t1087 = t1024 * t967 + t1025 * t966;
	t1174 = t1087 * t1042;
	t1123 = 2 * pkin(5);
	t1078 = pkin(4) * (t975 + t976) * t1123;
	t952 = t961 * t1078;
	t931 = (t1096 * t961 + t952 * t1105 - t1174) * pkin(4);
	t1089 = t1038 * t1086 * t1172;
	t1163 = t969 / 0.2e1;
	t1106 = t982 * t1163;
	t932 = t952 * t1106 + t961 * t1089 + (t1087 * t977 - t1177) * pkin(4);
	t978 = 0.1e1 / t981;
	t924 = ((t931 * t1154 + t932 * t1155) * t978 + t961 * t1054) * t1035;
	t1130 = t1035 * t978;
	t951 = (-t1127 / 0.2e1 + t1126 / 0.2e1) * t1130;
	t948 = 0.1e1 / t951 ^ 2;
	t1176 = t924 * t948;
	t947 = 0.1e1 / t951;
	t1166 = -t952 / 0.2e1;
	t1060 = t1076 * t1022;
	t1006 = t1022 * t1075;
	t1151 = pkin(1) * t1036;
	t993 = t1006 * t1091 - 0.2e1 * t1022 ^ 2 * t1151 + (t1012 * t1059 - t1116) * pkin(7);
	t1132 = t1032 * t993;
	t1080 = t1006 * t1157 - t1012;
	t992 = (-t1059 * t1041 + (t1080 + t1109) * t1022) * pkin(7);
	t1138 = t1029 * t992;
	t1069 = t1138 / 0.2e1 + t1132 / 0.2e1;
	t973 = (-t1069 * t1013 - t1060 * t1108) * t1039;
	t1133 = t1032 * t992;
	t1137 = t1029 * t993;
	t1068 = -t1133 / 0.2e1 + t1137 / 0.2e1;
	t974 = (t1068 * t1013 + t1022 * t1052) * t1039;
	t963 = t1024 * t974 + t1025 * t973;
	t953 = t963 * t1078;
	t1165 = -t953 / 0.2e1;
	t962 = t1086 * t1078;
	t1164 = -t962 / 0.2e1;
	t1153 = t1028 / 0.2e1;
	t1152 = -t1032 / 0.2e1;
	t1125 = t957 * t1028;
	t1128 = t956 * t1027;
	t950 = (t1128 / 0.2e1 + t1125 / 0.2e1) * t1130;
	t1144 = t948 * t950;
	t1053 = (t1125 + t1128) * t1110;
	t923 = ((t932 * t1153 + t931 * t1155) * t978 + t961 * t1053) * t1035;
	t946 = t950 ^ 2;
	t940 = t946 * t948 + 0.1e1;
	t938 = 0.1e1 / t940;
	t916 = qJD(2) + qJD(3) + (-t924 * t1144 + t923 * t947) * t938;
	t937 = qJ(2) + qJ(3) + atan2(t950, t951);
	t935 = sin(t937);
	t1148 = t916 * t935;
	t936 = cos(t937);
	t1147 = t916 * t936;
	t1145 = t947 * t1176;
	t1146 = 0.2e1 * (t923 * t1144 - t946 * t1145) / t940 ^ 2;
	t1143 = t952 * t969 / t1142;
	t1141 = t1028 * t978;
	t1031 = sin(qJ(1));
	t1136 = t1031 * t916;
	t1033 = cos(qJ(1));
	t1131 = t1033 * t916;
	t1129 = t1038 * t961;
	t1122 = qJD(1) * t1031;
	t1121 = qJD(1) * t1033;
	t1107 = t1143 / 0.4e1;
	t1104 = t935 * t1122;
	t1103 = t936 * t1122;
	t1102 = t935 * t1121;
	t1101 = t936 * t1121;
	t1100 = t1037 * t1129;
	t1099 = t978 * t1155;
	t1098 = -t1141 / 0.2e1;
	t1097 = t1141 / 0.2e1;
	t1095 = t1038 * t1123;
	t1094 = t1008 / t1120 * t1006 * t1005;
	t1092 = t938 * t1110;
	t1090 = 0.4e1 * pkin(5) * t1129;
	t1085 = -0.8e1 * t1100;
	t1083 = -t1086 * t1143 / 0.4e1;
	t1082 = t978 * t979 * t1100;
	t1081 = t1040 * t1093;
	t1079 = t1028 * t1082;
	t1074 = 0.4e1 * t1027 * t1082;
	t1051 = t1144 * t1146 + (0.2e1 * t950 * t1145 - t923 * t948) * t938;
	t964 = -t1024 * t973 + t1025 * t974;
	t934 = t953 * t1106 + t963 * t1089 + (-t1042 * t963 + t964 * t977) * pkin(4);
	t1015 = t1013 * t1014;
	t1002 = t1019 * t1075 - 0.8e1 * t1081;
	t971 = t997 + (t1094 / 0.4e1 + t1002 * t1156) * t1017 + (-0.4e1 * t1019 * t1022 - 0.2e1 * t1020 * t1059) * t1151 + (t1080 * t1020 - t1118) * pkin(7);
	t972 = 0.4e1 * t1084 + (t1117 - t1022 * t1094 / 0.4e1 + t1088 * t1019 + (-t1059 * t1005 / 0.2e1 - t1019 * t1006 / 0.2e1 - t1022 * t1002 / 0.2e1) * t1008) * pkin(7);
	t954 = (0.4e1 * t1077 * t1015 * t1081 + (t972 * t1152 + t1029 * t971 / 0.2e1 + t1069 * qJD(3)) * t1013 + ((-t1133 + t1137) * t1020 + t1077 * t1019 + (t1076 * qJD(3) - t1135 + t1139) * t1022) * t1108) * t1039;
	t955 = (-0.4e1 * t1040 * t1015 * t1060 * t1175 + (-t1029 * t972 / 0.2e1 + t971 * t1152 + t1068 * qJD(3)) * t1013 + ((-t1132 - t1138) * t1020 - t1076 * t1019 + (t1077 * qJD(3) - t1134 - t1140) * t1022) * t1108) * t1039;
	t942 = t1024 * t954 + t1025 * t955;
	t1056 = t932 * t963 + t934 * t961 + t942 * t957;
	t933 = (-t964 * t1042 + t1096 * t963 + t953 * t1105) * pkin(4);
	t1058 = t931 * t963 + t933 * t961 + t942 * t956;
	t1061 = -t947 * t1146 - t938 * t1176;
	t1063 = t963 * t1074;
	t1064 = 0.4e1 * t957 * t1079;
	t1065 = -0.4e1 * t956 * t1079;
	t928 = t942 * t1078 + t963 * t1085;
	t941 = -t1024 * t955 + t1025 * t954;
	t920 = (t953 * t1107 + t928 * t1163) * t982 + (-t1086 * t942 - t1087 * t963 - t961 * t964) * t1095 + (t941 * t977 - t942 * t1042 + (t961 * t1165 + t963 * t1166) * t969) * pkin(4);
	t921 = t963 * t1090 + (-t941 * t1042 + t953 * t1083 + t1096 * t942 + (t1087 * t1165 + t928 * t1162 + t964 * t1166) * t969) * pkin(4);
	t926 = ((t934 * t1153 + t933 * t1155) * t978 + t963 * t1053) * t1035;
	t927 = ((t933 * t1154 + t934 * t1155) * t978 + t963 * t1054) * t1035;
	t914 = t1061 * t926 + t1051 * t927 + (((t956 * t1063 + t963 * t1064 + t920 * t1097 + t921 * t1099) * t947 - (t957 * t1063 + t963 * t1065 + t921 * t1098 + t920 * t1099) * t1144) * t938 + ((t1056 * t947 + t1058 * t1144) * t1028 + (-t1056 * t1144 + t1058 * t947) * t1027) * t1092) * t1035;
	t917 = 0.1e1 + (-t927 * t1144 + t926 * t947) * t938;
	t1073 = -t917 * t1147 - t914 * t935;
	t1072 = t917 * t1148 - t914 * t936;
	t945 = t962 * t1106 + t1086 * t1089 + (-t1042 * t1086 - t977 * t985) * pkin(4);
	t1055 = t1086 * t932 + t1087 * t957 + t945 * t961;
	t944 = (t1042 * t985 + t1086 * t1096 + t962 * t1105) * pkin(4);
	t1057 = t1086 * t931 + t1087 * t956 + t944 * t961;
	t1062 = t1086 * t1074;
	t943 = t1078 * t1087 + t1085 * t1086;
	t922 = (t962 * t1107 + t943 * t1163) * t982 + (-0.2e1 * t1086 * t1087 + t961 * t985) * t1095 + (-t1174 - t961 * t977 + (t1086 * t1166 + t961 * t1164) * t969) * pkin(4);
	t925 = t1086 * t1090 + (t1177 + t962 * t1083 + t1096 * t1087 + (t1087 * t1164 + t943 * t1162 - t1166 * t985) * t969) * pkin(4);
	t929 = ((t945 * t1153 + t944 * t1155) * t978 + t1086 * t1053) * t1035;
	t930 = ((t944 * t1154 + t945 * t1155) * t978 + t1086 * t1054) * t1035;
	t915 = t1061 * t929 + t1051 * t930 + (((t956 * t1062 + t1064 * t1086 + t922 * t1097 + t925 * t1099) * t947 - (t957 * t1062 + t1065 * t1086 + t925 * t1098 + t922 * t1099) * t1144) * t938 + ((t1055 * t947 + t1057 * t1144) * t1028 + (-t1055 * t1144 + t1057 * t947) * t1027) * t1092) * t1035;
	t919 = 0.1e1 + (-t930 * t1144 + t929 * t947) * t938;
	t1071 = -t919 * t1147 - t915 * t935;
	t1070 = t919 * t1148 - t915 * t936;
	t1 = [t935 * t1136 - t1101, t1073 * t1033 + t917 * t1104, t1071 * t1033 + t919 * t1104, 0; -t935 * t1131 - t1103, t1073 * t1031 - t917 * t1102, t1071 * t1031 - t919 * t1102, 0; 0, -t1072, -t1070, 0; t936 * t1136 + t1102, t1072 * t1033 + t917 * t1103, t1070 * t1033 + t919 * t1103, 0; -t936 * t1131 + t1104, t1072 * t1031 - t917 * t1101, t1070 * t1031 - t919 * t1101, 0; 0, t1073, t1071, 0; -t1122, 0, 0, 0; t1121, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 19:12:32
	% EndTime: 2020-04-15 19:16:24
	% DurationCPUTime: 220.18s
	% Computational Cost: add. (6489074->256), mult. (10085632->525), div. (389362->14), fcn. (6309768->21), ass. (0->257)
	t1649 = pkin(7) ^ 2;
	t1653 = pkin(1) ^ 2;
	t1642 = sin(qJ(2));
	t1647 = cos(pkin(19));
	t1798 = sin(pkin(19));
	t1799 = cos(qJ(2));
	t1682 = -t1642 * t1647 + t1799 * t1798;
	t1784 = pkin(7) * t1682;
	t1806 = -2 * pkin(1);
	t1737 = -t1784 * t1806 + t1653;
	t1627 = t1649 + t1737;
	t1624 = 0.1e1 / t1627;
	t1633 = t1642 * t1798 + t1799 * t1647;
	t1631 = t1633 * qJD(2);
	t1652 = 0.1e1 / pkin(3);
	t1623 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1627;
	t1628 = pkin(1) + t1784;
	t1803 = -pkin(8) - pkin(3);
	t1621 = (pkin(7) - t1803) * (pkin(7) + t1803) + t1737;
	t1802 = -pkin(8) + pkin(3);
	t1622 = (pkin(7) - t1802) * (pkin(7) + t1802) + t1737;
	t1759 = t1622 * t1621;
	t1655 = sqrt(-t1759);
	t1755 = t1633 * t1655;
	t1614 = -pkin(7) * t1755 + t1628 * t1623;
	t1645 = cos(qJ(3));
	t1740 = t1645 * t1614;
	t1783 = pkin(7) * t1633;
	t1615 = t1623 * t1783 + t1628 * t1655;
	t1641 = sin(qJ(3));
	t1747 = t1641 * t1615;
	t1696 = -t1740 + t1747;
	t1625 = 0.1e1 / t1627 ^ 2;
	t1804 = pkin(1) * pkin(7);
	t1735 = t1625 * t1804;
	t1672 = t1696 * t1735;
	t1739 = t1645 * t1615;
	t1748 = t1641 * t1614;
	t1690 = t1748 / 0.2e1 + t1739 / 0.2e1;
	t1694 = 0.2e1 * (t1621 + t1622) * t1804;
	t1616 = t1631 * t1694;
	t1619 = 0.1e1 / t1655;
	t1792 = -t1619 / 0.2e1;
	t1608 = t1616 * t1783 * t1792;
	t1736 = t1628 * t1806;
	t1711 = -t1623 + t1736;
	t1630 = t1682 * qJD(2);
	t1757 = t1630 * t1655;
	t1601 = t1608 + (t1711 * t1631 - t1757) * pkin(7);
	t1744 = t1645 * t1601;
	t1808 = t1631 * t1649;
	t1721 = t1633 * t1808;
	t1703 = pkin(1) * t1721;
	t1791 = t1619 / 0.2e1;
	t1714 = t1628 * t1791;
	t1756 = t1631 * t1655;
	t1602 = t1616 * t1714 - 0.2e1 * t1703 + (t1630 * t1623 - t1756) * pkin(7);
	t1751 = t1641 * t1602;
	t1577 = (t1631 * t1672 + (-t1744 / 0.2e1 + t1751 / 0.2e1 + t1690 * qJD(3)) * t1624) * t1652;
	t1688 = t1740 / 0.2e1 - t1747 / 0.2e1;
	t1695 = t1739 + t1748;
	t1743 = t1645 * t1602;
	t1752 = t1641 * t1601;
	t1578 = (t1695 * t1631 * t1735 + (t1752 / 0.2e1 + t1743 / 0.2e1 + t1688 * qJD(3)) * t1624) * t1652;
	t1637 = pkin(23) + pkin(22);
	t1635 = sin(t1637);
	t1636 = cos(t1637);
	t1572 = t1635 * t1577 - t1636 * t1578;
	t1650 = pkin(5) ^ 2;
	t1758 = t1624 * t1652;
	t1606 = t1690 * t1758;
	t1607 = t1688 * t1758;
	t1595 = t1636 * t1606 + t1635 * t1607;
	t1786 = pkin(4) * t1595;
	t1805 = -2 * pkin(5);
	t1738 = -t1786 * t1805 + t1650;
	t1801 = -pkin(9) - pkin(11);
	t1586 = (pkin(4) - t1801) * (pkin(4) + t1801) + t1738;
	t1800 = -pkin(9) + pkin(11);
	t1587 = (pkin(4) - t1800) * (pkin(4) + t1800) + t1738;
	t1762 = t1587 * t1586;
	t1654 = sqrt(-t1762);
	t1810 = t1572 * t1654;
	t1781 = 2 * pkin(5);
	t1693 = pkin(4) * (t1586 + t1587) * t1781;
	t1563 = t1572 * t1693;
	t1651 = pkin(4) ^ 2;
	t1592 = t1651 + t1738;
	t1588 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1592;
	t1593 = pkin(5) + t1786;
	t1710 = t1593 * t1805 - t1588;
	t1580 = 0.1e1 / t1654;
	t1704 = t1635 * t1606 - t1636 * t1607;
	t1793 = -t1704 / 0.2e1;
	t1718 = t1580 * t1793;
	t1705 = t1636 * t1577 + t1635 * t1578;
	t1807 = t1705 * t1654;
	t1542 = (t1563 * t1718 + t1710 * t1572 - t1807) * pkin(4);
	t1712 = t1651 * t1704 * t1805;
	t1794 = t1580 / 0.2e1;
	t1719 = t1593 * t1794;
	t1543 = t1563 * t1719 + t1572 * t1712 + (t1588 * t1705 - t1810) * pkin(4);
	t1589 = 0.1e1 / t1592;
	t1648 = 0.1e1 / pkin(11);
	t1590 = 0.1e1 / t1592 ^ 2;
	t1734 = pkin(4) * pkin(5) * t1590;
	t1785 = pkin(4) * t1704;
	t1568 = t1588 * t1785 + t1593 * t1654;
	t1638 = sin(pkin(21));
	t1765 = t1568 * t1638;
	t1567 = t1593 * t1588 - t1654 * t1785;
	t1639 = cos(pkin(21));
	t1766 = t1567 * t1639;
	t1671 = (t1765 - t1766) * t1734;
	t1789 = -t1639 / 0.2e1;
	t1790 = t1638 / 0.2e1;
	t1535 = ((t1542 * t1789 + t1543 * t1790) * t1589 + t1572 * t1671) * t1648;
	t1760 = t1589 * t1648;
	t1562 = (-t1766 / 0.2e1 + t1765 / 0.2e1) * t1760;
	t1559 = 0.1e1 / t1562 ^ 2;
	t1809 = t1535 * t1559;
	t1558 = 0.1e1 / t1562;
	t1797 = -t1563 / 0.2e1;
	t1687 = t1695 * t1633;
	t1617 = t1633 * t1694;
	t1782 = t1649 * pkin(1);
	t1604 = t1617 * t1714 - 0.2e1 * t1633 ^ 2 * t1782 + (t1623 * t1682 - t1755) * pkin(7);
	t1741 = t1645 * t1604;
	t1699 = t1617 * t1792 - t1623;
	t1603 = (-t1682 * t1655 + (t1699 + t1736) * t1633) * pkin(7);
	t1750 = t1641 * t1603;
	t1691 = t1750 / 0.2e1 + t1741 / 0.2e1;
	t1584 = (-t1691 * t1624 - t1687 * t1735) * t1652;
	t1742 = t1645 * t1603;
	t1749 = t1641 * t1604;
	t1689 = -t1742 / 0.2e1 + t1749 / 0.2e1;
	t1585 = (t1689 * t1624 + t1633 * t1672) * t1652;
	t1574 = t1636 * t1584 + t1635 * t1585;
	t1564 = t1574 * t1693;
	t1796 = -t1564 / 0.2e1;
	t1573 = t1704 * t1693;
	t1795 = -t1573 / 0.2e1;
	t1788 = t1639 / 0.2e1;
	t1787 = -t1645 / 0.2e1;
	t1764 = t1568 * t1639;
	t1767 = t1567 * t1638;
	t1670 = (t1764 + t1767) * t1734;
	t1534 = ((t1542 * t1790 + t1543 * t1788) * t1589 + t1572 * t1670) * t1648;
	t1561 = (t1767 / 0.2e1 + t1764 / 0.2e1) * t1760;
	t1557 = t1561 ^ 2;
	t1551 = t1557 * t1559 + 0.1e1;
	t1549 = 0.1e1 / t1551;
	t1769 = t1559 * t1561;
	t1527 = qJD(2) + qJD(3) + (t1534 * t1558 - t1535 * t1769) * t1549;
	t1548 = qJ(2) + qJ(3) + atan2(t1561, t1562);
	t1547 = cos(t1548);
	t1780 = t1527 * t1547;
	t1778 = t1558 * t1809;
	t1779 = 0.2e1 * (t1534 * t1769 - t1557 * t1778) / t1551 ^ 2;
	t1546 = sin(t1548);
	t1640 = sin(qJ(4));
	t1777 = t1546 * t1640;
	t1643 = sin(qJ(1));
	t1776 = t1546 * t1643;
	t1644 = cos(qJ(4));
	t1775 = t1546 * t1644;
	t1646 = cos(qJ(1));
	t1774 = t1546 * t1646;
	t1773 = t1547 * t1640;
	t1772 = t1547 * t1643;
	t1771 = t1547 * t1644;
	t1770 = t1547 * t1646;
	t1768 = t1563 * t1580 / t1762;
	t1763 = t1572 * t1651;
	t1761 = t1589 * t1639;
	t1754 = t1640 * t1643;
	t1753 = t1640 * t1646;
	t1746 = t1643 * t1644;
	t1745 = t1644 * t1646;
	t1733 = t1651 * t1781;
	t1732 = t1527 * t1776;
	t1731 = t1527 * t1775;
	t1730 = t1527 * t1774;
	t1729 = t1546 * t1754;
	t1728 = t1546 * t1753;
	t1727 = t1546 * t1746;
	t1726 = t1546 * t1745;
	t1725 = t1650 * t1763;
	t1724 = t1619 / t1759 * t1617 * t1616;
	t1723 = t1527 * t1772;
	t1722 = t1527 * t1770;
	t1720 = t1768 / 0.4e1;
	t1717 = t1589 * t1790;
	t1716 = -t1761 / 0.2e1;
	t1715 = t1761 / 0.2e1;
	t1713 = 0.4e1 * pkin(5) * t1763;
	t1709 = t1549 * t1734;
	t1708 = -0.8e1 * t1725;
	t1707 = qJD(4) * t1547 - qJD(1);
	t1706 = qJD(1) * t1547 - qJD(4);
	t1702 = t1589 * t1590 * t1725;
	t1701 = t1653 * t1721;
	t1700 = -t1704 * t1768 / 0.4e1;
	t1698 = t1707 * t1640;
	t1697 = t1639 * t1702;
	t1692 = 0.4e1 * t1638 * t1702;
	t1686 = -0.4e1 * t1567 * t1697;
	t1685 = 0.4e1 * t1568 * t1697;
	t1684 = t1574 * t1692;
	t1683 = t1704 * t1692;
	t1681 = qJD(1) * t1770 - t1732;
	t1680 = -qJD(1) * t1772 - t1730;
	t1679 = -qJD(4) * t1771 + t1527 * t1777;
	t1678 = -qJD(4) * t1773 - t1731;
	t1677 = -t1549 * t1809 - t1558 * t1779;
	t1575 = -t1635 * t1584 + t1636 * t1585;
	t1544 = (t1564 * t1718 + t1710 * t1574 - t1575 * t1654) * pkin(4);
	t1613 = t1630 * t1694 - 0.8e1 * t1701;
	t1582 = t1608 + (t1724 / 0.4e1 + t1613 * t1791) * t1628 + (-0.4e1 * t1630 * t1633 - 0.2e1 * t1631 * t1682) * t1782 + (t1699 * t1631 - t1757) * pkin(7);
	t1583 = 0.4e1 * t1703 + (t1756 - t1633 * t1724 / 0.4e1 + t1711 * t1630 + (-t1682 * t1616 / 0.2e1 - t1630 * t1617 / 0.2e1 - t1633 * t1613 / 0.2e1) * t1619) * pkin(7);
	t1626 = t1624 * t1625;
	t1565 = (0.4e1 * t1696 * t1626 * t1701 + (t1583 * t1787 + t1641 * t1582 / 0.2e1 + t1691 * qJD(3)) * t1624 + ((-t1742 + t1749) * t1631 + t1696 * t1630 + (t1695 * qJD(3) - t1744 + t1751) * t1633) * t1735) * t1652;
	t1566 = (-0.4e1 * t1653 * t1626 * t1687 * t1808 + (-t1641 * t1583 / 0.2e1 + t1582 * t1787 + t1689 * qJD(3)) * t1624 + ((-t1741 - t1750) * t1631 - t1695 * t1630 + (t1696 * qJD(3) - t1743 - t1752) * t1633) * t1735) * t1652;
	t1553 = t1635 * t1565 + t1636 * t1566;
	t1676 = t1542 * t1574 + t1544 * t1572 + t1553 * t1567;
	t1555 = (t1573 * t1718 - t1595 * t1654 + t1704 * t1710) * pkin(4);
	t1675 = t1542 * t1704 + t1555 * t1572 + t1567 * t1705;
	t1545 = t1564 * t1719 + t1574 * t1712 + (-t1574 * t1654 + t1575 * t1588) * pkin(4);
	t1674 = t1543 * t1574 + t1545 * t1572 + t1553 * t1568;
	t1556 = t1573 * t1719 + t1704 * t1712 + (t1595 * t1588 - t1654 * t1704) * pkin(4);
	t1673 = t1543 * t1704 + t1556 * t1572 + t1568 * t1705;
	t1669 = t1706 * t1643 + t1730;
	t1668 = t1769 * t1779 + (-t1534 * t1559 + 0.2e1 * t1561 * t1778) * t1549;
	t1667 = t1640 * t1723 + (qJD(1) * t1753 + qJD(4) * t1746) * t1546;
	t1666 = t1640 * t1722 + (-qJD(1) * t1754 + qJD(4) * t1745) * t1546;
	t1665 = -t1644 * t1723 + (-qJD(1) * t1745 + qJD(4) * t1754) * t1546;
	t1664 = -t1644 * t1722 + (qJD(1) * t1746 + qJD(4) * t1753) * t1546;
	t1554 = t1693 * t1705 + t1704 * t1708;
	t1552 = t1636 * t1565 - t1635 * t1566;
	t1541 = ((t1555 * t1789 + t1556 * t1790) * t1589 + t1704 * t1671) * t1648;
	t1540 = ((t1555 * t1790 + t1556 * t1788) * t1589 + t1704 * t1670) * t1648;
	t1539 = t1553 * t1693 + t1574 * t1708;
	t1538 = ((t1544 * t1789 + t1545 * t1790) * t1589 + t1574 * t1671) * t1648;
	t1537 = ((t1544 * t1790 + t1545 * t1788) * t1589 + t1574 * t1670) * t1648;
	t1536 = t1704 * t1713 + (t1810 + t1573 * t1700 + t1710 * t1705 + (t1554 * t1793 + t1595 * t1797 + t1705 * t1795) * t1580) * pkin(4);
	t1533 = (t1554 * t1794 + t1573 * t1720) * t1593 + (-t1572 * t1595 - 0.2e1 * t1704 * t1705) * t1733 + (-t1807 - t1572 * t1588 + (t1572 * t1795 + t1704 * t1797) * t1580) * pkin(4);
	t1532 = t1574 * t1713 + (-t1552 * t1654 + t1564 * t1700 + t1710 * t1553 + (t1539 * t1793 + t1575 * t1797 + t1705 * t1796) * t1580) * pkin(4);
	t1531 = (t1539 * t1794 + t1564 * t1720) * t1593 + (-t1553 * t1704 - t1572 * t1575 - t1574 * t1705) * t1733 + (t1552 * t1588 - t1553 * t1654 + (t1572 * t1796 + t1574 * t1797) * t1580) * pkin(4);
	t1530 = 0.1e1 + (t1540 * t1558 - t1541 * t1769) * t1549;
	t1528 = 0.1e1 + (t1537 * t1558 - t1538 * t1769) * t1549;
	t1526 = -t1706 * t1745 + (t1698 + t1731) * t1643;
	t1525 = t1707 * t1746 + (t1706 * t1646 - t1732) * t1640;
	t1524 = t1669 * t1644 + t1646 * t1698;
	t1523 = t1669 * t1640 - t1707 * t1745;
	t1522 = t1677 * t1540 + t1668 * t1541 + (((t1533 * t1715 + t1536 * t1717 + t1567 * t1683 + t1685 * t1704) * t1558 - (t1533 * t1717 + t1536 * t1716 + t1568 * t1683 + t1686 * t1704) * t1769) * t1549 + ((t1673 * t1558 + t1675 * t1769) * t1639 + (t1675 * t1558 - t1673 * t1769) * t1638) * t1709) * t1648;
	t1521 = t1677 * t1537 + t1668 * t1538 + (((t1531 * t1715 + t1532 * t1717 + t1567 * t1684 + t1574 * t1685) * t1558 - (t1531 * t1717 + t1532 * t1716 + t1568 * t1684 + t1574 * t1686) * t1769) * t1549 + ((t1674 * t1558 + t1676 * t1769) * t1639 + (t1676 * t1558 - t1674 * t1769) * t1638) * t1709) * t1648;
	t1 = [t1526, -t1521 * t1726 + t1664 * t1528, -t1522 * t1726 + t1664 * t1530, t1523; -t1524, -t1521 * t1727 + t1665 * t1528, -t1522 * t1727 + t1665 * t1530, -t1525; 0, t1521 * t1771 + t1678 * t1528, t1522 * t1771 + t1678 * t1530, -qJD(4) * t1775 - t1527 * t1773; t1525, t1521 * t1728 + t1666 * t1528, t1522 * t1728 + t1666 * t1530, t1524; t1523, t1521 * t1729 + t1667 * t1528, t1522 * t1729 + t1667 * t1530, t1526; 0, -t1521 * t1773 + t1679 * t1528, -t1522 * t1773 + t1679 * t1530, qJD(4) * t1777 - t1527 * t1771; -qJD(1) * t1774 - t1723, t1521 * t1770 + t1680 * t1528, t1522 * t1770 + t1680 * t1530, 0; -qJD(1) * t1776 + t1722, t1521 * t1772 + t1681 * t1528, t1522 * t1772 + t1681 * t1530, 0; 0, t1521 * t1546 + t1528 * t1780, t1522 * t1546 + t1530 * t1780, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:53
	% EndTime: 2020-04-15 18:50:04
	% DurationCPUTime: 3.03s
	% Computational Cost: add. (51091->91), mult. (81758->195), div. (2926->9), fcn. (51230->13), ass. (0->109)
	t522 = 2 * pkin(7);
	t447 = sin(qJ(2));
	t451 = cos(pkin(19));
	t510 = sin(pkin(19));
	t511 = cos(qJ(2));
	t445 = t447 * t510 + t511 * t451;
	t508 = pkin(1) * t445;
	t443 = t445 * qJD(2);
	t456 = pkin(1) ^ 2;
	t467 = -t447 * t451 + t511 * t510;
	t509 = pkin(1) * t467;
	t487 = t509 * t522 + t456;
	t516 = (-pkin(8) - pkin(3));
	t433 = ((pkin(7) - t516) * (pkin(7) + t516)) + t487;
	t515 = (-pkin(8) + pkin(3));
	t434 = ((pkin(7) - t515) * (pkin(7) + t515)) + t487;
	t517 = pkin(1) * pkin(7);
	t477 = (t433 + t434) * t517;
	t428 = t443 * t477;
	t496 = t434 * t433;
	t457 = sqrt(-t496);
	t431 = 0.1e1 / t457;
	t520 = t428 * t431;
	t424 = t508 * t520;
	t455 = pkin(7) ^ 2;
	t439 = t455 + t487;
	t435 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t439;
	t440 = -pkin(7) - t509;
	t484 = t440 * t522;
	t480 = -t435 + t484;
	t442 = t467 * qJD(2);
	t493 = t442 * t457;
	t414 = -t424 + (t480 * t443 - t493) * pkin(1);
	t482 = t443 * t445 * t456;
	t478 = pkin(7) * t482;
	t492 = t443 * t457;
	t497 = t431 * t440;
	t415 = -t428 * t497 - 0.2e1 * t478 + (t442 * t435 - t492) * pkin(1);
	t436 = 0.1e1 / t439;
	t454 = 0.1e1 / pkin(8);
	t437 = 0.1e1 / t439 ^ 2;
	t483 = t437 * t517;
	t491 = t445 * t457;
	t426 = -pkin(1) * t491 - t440 * t435;
	t452 = cos(pkin(18));
	t489 = t452 * t426;
	t427 = t435 * t508 - t440 * t457;
	t449 = sin(pkin(18));
	t490 = t449 * t427;
	t464 = (t489 - t490) * t483;
	t512 = t452 / 0.2e1;
	t514 = -t449 / 0.2e1;
	t402 = ((t414 * t512 + t415 * t514) * t436 + t443 * t464) * t454;
	t494 = t436 * t454;
	t422 = (t489 / 0.2e1 - t490 / 0.2e1) * t494;
	t419 = 0.1e1 / t422 ^ 2;
	t521 = t402 * t419;
	t429 = t445 * t477;
	t519 = t431 * t429;
	t476 = t455 * t482;
	t518 = -t431 * (t442 * t477 - 0.4e1 * t476) - 0.1e1 / t496 * t428 * t519;
	t418 = 0.1e1 / t422;
	t513 = t449 / 0.2e1;
	t507 = t456 * pkin(7);
	t488 = t452 * t427;
	t498 = t426 * t449;
	t463 = (t488 + t498) * t483;
	t403 = ((t414 * t513 + t415 * t512) * t436 + t443 * t463) * t454;
	t423 = (t488 / 0.2e1 + t498 / 0.2e1) * t494;
	t421 = t423 ^ 2;
	t412 = t421 * t419 + 0.1e1;
	t410 = 0.1e1 / t412;
	t499 = t419 * t423;
	t399 = (-t402 * t499 + t403 * t418) * t410;
	t479 = -t435 - t519;
	t416 = (-t467 * t457 + (t479 + t484) * t445) * pkin(1);
	t417 = -t429 * t497 - 0.2e1 * t445 ^ 2 * t507 + (t435 * t467 - t491) * pkin(1);
	t406 = ((t416 * t512 + t417 * t514) * t436 + t445 * t464) * t454;
	t407 = ((t416 * t513 + t417 * t512) * t436 + t445 * t463) * t454;
	t400 = (-t406 * t499 + t407 * t418) * t410;
	t506 = t399 * t400;
	t504 = t418 * t521;
	t505 = (t403 * t499 - t421 * t504) / t412 ^ 2;
	t413 = atan2(t423, t422);
	t408 = sin(t413);
	t448 = sin(qJ(1));
	t503 = t408 * t448;
	t450 = cos(qJ(1));
	t502 = t408 * t450;
	t409 = cos(t413);
	t501 = t409 * t448;
	t500 = t409 * t450;
	t495 = t436 * t449;
	t486 = qJD(1) * t448;
	t485 = qJD(1) * t450;
	t481 = t436 * t512;
	t475 = t436 * t437 * t476;
	t473 = t449 * t475;
	t472 = 0.4e1 * t452 * t475;
	t471 = t399 * t503 - t409 * t485;
	t470 = t399 * t502 + t409 * t486;
	t469 = t399 * t501 + t408 * t485;
	t468 = -t399 * t500 + t408 * t486;
	t466 = t414 * t445 + t416 * t443 + t426 * t442;
	t465 = t415 * t445 + t417 * t443 + t427 * t442;
	t405 = 0.4e1 * t478 + (-t467 * t520 + t492 + t518 * t445 + (t480 - t519) * t442) * pkin(1);
	t404 = -t424 + t518 * t440 + (-0.4e1 * t442 * t445 - 0.2e1 * t443 * t467) * t507 + (t479 * t443 - t493) * pkin(1);
	t398 = (-t410 * t521 - 0.2e1 * t418 * t505) * t407 + (0.2e1 * t499 * t505 + (-t403 * t419 + 0.2e1 * t423 * t504) * t410) * t406 + ((t404 * t481 + t427 * t472 + t405 * t495 / 0.2e1 + 0.4e1 * t426 * t473) * t418 - (t405 * t481 + t426 * t472 - t404 * t495 / 0.2e1 - 0.4e1 * t427 * t473) * t499 + ((t465 * t418 - t466 * t499) * t452 + (t466 * t418 + t465 * t499) * t449) * t483) * t410 * t454;
	t1 = [t471, -t398 * t502 + t468 * t400, 0, 0; -t470, -t398 * t503 - t469 * t400, 0, 0; 0, t398 * t409 - t408 * t506, 0, 0; t469, -t398 * t500 + t470 * t400, 0, 0; t468, -t398 * t501 + t471 * t400, 0, 0; 0, -t398 * t408 - t409 * t506, 0, 0; -t486, 0, 0, 0; t485, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:53
	% EndTime: 2020-04-15 18:50:03
	% DurationCPUTime: 3.07s
	% Computational Cost: add. (51135->93), mult. (81758->195), div. (2926->9), fcn. (51230->13), ass. (0->109)
	t459 = sin(qJ(2));
	t462 = cos(pkin(19));
	t520 = sin(pkin(19));
	t521 = cos(qJ(2));
	t455 = t459 * t520 + t462 * t521;
	t518 = pkin(7) * t455;
	t453 = t455 * qJD(2);
	t466 = pkin(1) ^ 2;
	t477 = -t459 * t462 + t520 * t521;
	t519 = pkin(7) * t477;
	t528 = -2 * pkin(1);
	t497 = -t519 * t528 + t466;
	t526 = -pkin(8) - pkin(3);
	t443 = (pkin(7) - t526) * (pkin(7) + t526) + t497;
	t525 = -pkin(8) + pkin(3);
	t444 = (pkin(7) - t525) * (pkin(7) + t525) + t497;
	t527 = pkin(1) * pkin(7);
	t487 = (t443 + t444) * t527;
	t438 = t453 * t487;
	t506 = t444 * t443;
	t467 = sqrt(-t506);
	t441 = 0.1e1 / t467;
	t531 = t438 * t441;
	t434 = t518 * t531;
	t464 = pkin(7) ^ 2;
	t449 = t464 + t497;
	t445 = pkin(3) ^ 2 - pkin(8) ^ 2 + t449;
	t450 = pkin(1) + t519;
	t494 = t450 * t528;
	t490 = -t445 + t494;
	t452 = t477 * qJD(2);
	t504 = t452 * t467;
	t424 = -t434 + (t453 * t490 - t504) * pkin(7);
	t492 = t464 * t455 * t453;
	t488 = pkin(1) * t492;
	t503 = t453 * t467;
	t507 = t441 * t450;
	t425 = t438 * t507 - 0.2e1 * t488 + (t452 * t445 - t503) * pkin(7);
	t446 = 0.1e1 / t449;
	t465 = 0.1e1 / pkin(3);
	t447 = 0.1e1 / t449 ^ 2;
	t493 = t447 * t527;
	t502 = t455 * t467;
	t436 = -pkin(7) * t502 + t450 * t445;
	t458 = cos(pkin(23));
	t500 = t458 * t436;
	t437 = t445 * t518 + t450 * t467;
	t457 = sin(pkin(23));
	t501 = t457 * t437;
	t474 = (-t500 + t501) * t493;
	t523 = -t458 / 0.2e1;
	t524 = t457 / 0.2e1;
	t412 = ((t424 * t523 + t425 * t524) * t446 + t453 * t474) * t465;
	t505 = t446 * t465;
	t432 = (-t500 / 0.2e1 + t501 / 0.2e1) * t505;
	t429 = 0.1e1 / t432 ^ 2;
	t532 = t412 * t429;
	t439 = t455 * t487;
	t530 = t441 * t439;
	t485 = t466 * t492;
	t529 = 0.1e1 / t506 * t438 * t530 + t441 * (t452 * t487 - 0.4e1 * t485);
	t428 = 0.1e1 / t432;
	t522 = t458 / 0.2e1;
	t517 = t464 * pkin(1);
	t499 = t458 * t437;
	t508 = t436 * t457;
	t473 = (t499 + t508) * t493;
	t413 = ((t424 * t524 + t425 * t522) * t446 + t453 * t473) * t465;
	t433 = (t499 / 0.2e1 + t508 / 0.2e1) * t505;
	t431 = t433 ^ 2;
	t423 = t431 * t429 + 0.1e1;
	t421 = 0.1e1 / t423;
	t509 = t429 * t433;
	t409 = qJD(2) + (-t412 * t509 + t413 * t428) * t421;
	t489 = -t445 - t530;
	t426 = (-t477 * t467 + (t489 + t494) * t455) * pkin(7);
	t427 = t439 * t507 - 0.2e1 * t455 ^ 2 * t517 + (t445 * t477 - t502) * pkin(7);
	t416 = ((t426 * t523 + t427 * t524) * t446 + t455 * t474) * t465;
	t417 = ((t426 * t524 + t427 * t522) * t446 + t455 * t473) * t465;
	t410 = 0.1e1 + (-t416 * t509 + t417 * t428) * t421;
	t516 = t409 * t410;
	t514 = t428 * t532;
	t515 = (t413 * t509 - t431 * t514) / t423 ^ 2;
	t420 = qJ(2) + atan2(t433, t432);
	t418 = sin(t420);
	t460 = sin(qJ(1));
	t513 = t418 * t460;
	t461 = cos(qJ(1));
	t512 = t418 * t461;
	t419 = cos(t420);
	t511 = t419 * t460;
	t510 = t419 * t461;
	t498 = t458 * t446;
	t496 = qJD(1) * t460;
	t495 = qJD(1) * t461;
	t491 = t446 * t524;
	t484 = t446 * t447 * t485;
	t483 = t458 * t484;
	t482 = 0.4e1 * t457 * t484;
	t481 = -t409 * t513 + t419 * t495;
	t480 = t409 * t512 + t419 * t496;
	t479 = t409 * t511 + t418 * t495;
	t478 = -t409 * t510 + t418 * t496;
	t476 = t424 * t455 + t426 * t453 + t436 * t452;
	t475 = t425 * t455 + t427 * t453 + t437 * t452;
	t415 = 0.4e1 * t488 + (-t477 * t531 + t503 - t529 * t455 + (t490 - t530) * t452) * pkin(7);
	t414 = -t434 + t529 * t450 + (-0.4e1 * t452 * t455 - 0.2e1 * t453 * t477) * t517 + (t453 * t489 - t504) * pkin(7);
	t408 = (-t421 * t532 - 0.2e1 * t428 * t515) * t417 + (0.2e1 * t509 * t515 + (-t413 * t429 + 0.2e1 * t433 * t514) * t421) * t416 + ((t414 * t498 / 0.2e1 + 0.4e1 * t437 * t483 + t415 * t491 + t436 * t482) * t428 - (-t415 * t498 / 0.2e1 - 0.4e1 * t436 * t483 + t414 * t491 + t437 * t482) * t509 + ((t428 * t475 + t476 * t509) * t458 + (t428 * t476 - t475 * t509) * t457) * t493) * t421 * t465;
	t1 = [t479, -t408 * t510 + t410 * t480, 0, 0; t478, -t408 * t511 - t410 * t481, 0, 0; 0, -t408 * t418 - t419 * t516, 0, 0; t481, t408 * t512 - t410 * t478, 0, 0; t480, t408 * t513 + t410 * t479, 0, 0; 0, -t408 * t419 + t418 * t516, 0, 0; -t496, 0, 0, 0; t495, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiRD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:48
	% EndTime: 2020-04-15 18:49:56
	% DurationCPUTime: 2.24s
	% Computational Cost: add. (28212->83), mult. (43754->186), div. (974->9), fcn. (27294->11), ass. (0->99)
	t404 = (pkin(1) ^ 2);
	t468 = -4 * t404;
	t402 = pkin(6) ^ 2;
	t397 = cos(pkin(20));
	t399 = cos(qJ(3));
	t450 = sin(pkin(20));
	t457 = sin(qJ(3));
	t394 = t457 * t397 + t399 * t450;
	t453 = pkin(6) * t394;
	t462 = 2 * pkin(1);
	t433 = t453 * t462 + t402;
	t389 = t404 + t433;
	t387 = 0.1e1 / t389 ^ 2;
	t455 = pkin(1) * t387;
	t395 = -t399 * t397 + t457 * t450;
	t393 = t395 * qJD(3);
	t461 = pkin(1) * pkin(6);
	t429 = t393 * t461;
	t460 = (-pkin(2) - pkin(13));
	t383 = ((pkin(1) - t460) * (pkin(1) + t460)) + t433;
	t459 = (-pkin(2) + pkin(13));
	t384 = ((pkin(1) - t459) * (pkin(1) + t459)) + t433;
	t434 = t383 + t384;
	t378 = t434 * t429;
	t439 = t384 * t383;
	t405 = sqrt(-t439);
	t381 = 0.1e1 / t405;
	t467 = t378 * t381;
	t418 = t434 * t461;
	t379 = t395 * t418;
	t465 = t381 * t379;
	t385 = pkin(2) ^ 2 - pkin(13) ^ 2 + t389;
	t392 = t394 * qJD(3);
	t411 = t392 * t385 - t393 * t405;
	t437 = t395 * t402;
	t424 = t393 * t437;
	t390 = -pkin(1) - t453;
	t440 = t381 * t390;
	t361 = t411 * pkin(6) - t378 * t440 - t424 * t462;
	t436 = t395 * t405;
	t376 = -pkin(6) * t436 - t385 * t390;
	t373 = 0.1e1 / t376 ^ 2;
	t452 = pkin(6) * t395;
	t377 = t385 * t452 - t390 * t405;
	t375 = t377 ^ 2;
	t369 = t373 * t375 + 0.1e1;
	t441 = t373 * t377;
	t370 = t452 * t467;
	t438 = t392 * t405;
	t451 = t390 * pkin(1);
	t360 = -t370 + (-t438 - (t385 - 0.2e1 * t451) * t393) * pkin(6);
	t372 = 0.1e1 / t376;
	t446 = t360 * t372 * t373;
	t466 = (t361 * t441 - t375 * t446) / t369 ^ 2;
	t403 = 0.1e1 / pkin(2);
	t367 = 0.1e1 / t369;
	t454 = pkin(2) * t389;
	t427 = t367 * t454;
	t419 = t373 * t427;
	t464 = t403 * t377 * t419;
	t463 = -t381 * (t392 * t418 + t424 * t468) - 0.1e1 / t439 * t378 * t465;
	t386 = 0.1e1 / t389;
	t458 = t386 / 0.2e1;
	t456 = pkin(1) * t386;
	t426 = t372 * t454;
	t414 = t367 * t403 * t426;
	t430 = pkin(6) * t455;
	t421 = t377 * t430;
	t422 = t376 * t430;
	t355 = qJD(2) + 0.2e1 * (t361 * t458 + t393 * t421) * t414 - 0.2e1 * (t360 * t458 + t393 * t422) * t464;
	t423 = t403 * t458;
	t366 = qJ(2) + atan2(t377 * t423, t376 * t423);
	t364 = sin(t366);
	t449 = t355 * t364;
	t365 = cos(t366);
	t448 = t355 * t365;
	t363 = -t379 * t440 - 0.2e1 * t402 * t395 ^ 2 * pkin(1) + (t385 * t394 - t436) * pkin(6);
	t359 = (t363 * t458 + t395 * t421) * t403;
	t447 = t359 * t372;
	t398 = sin(qJ(1));
	t445 = t364 * t398;
	t400 = cos(qJ(1));
	t444 = t364 * t400;
	t443 = t365 * t398;
	t442 = t365 * t400;
	t432 = qJD(1) * t398;
	t431 = qJD(1) * t400;
	t428 = t386 * t387 * t468;
	t420 = t385 + t465;
	t362 = (-t394 * t405 + (-t420 + 0.2e1 * t451) * t395) * pkin(6);
	t358 = (t362 * t458 + t395 * t422) * t403;
	t425 = t358 * t441;
	t354 = -t355 * t445 + t365 * t431;
	t352 = t355 * t444 + t365 * t432;
	t353 = t355 * t443 + t364 * t431;
	t351 = -t355 * t442 + t364 * t432;
	t356 = 0.2e1 * (-t425 + t447) * t427;
	t350 = 0.2e1 * ((-0.4e1 * pkin(1) * t392 * t437 + t463 * t390 - t370) * t458 - (t377 * t395 * t428 + t394 * t456) * t402 * t393 + ((-t420 * t393 - t438) * t458 + (t361 * t395 + t363 * t393 + t392 * t377) * t455) * pkin(6)) * t414 - 0.2e1 * (-(t376 * t428 - 0.2e1 * t456) * t424 + ((-t394 * t467 + t463 * t395 - t411) * t458 + (t360 * t395 + t362 * t393) * t455 + (-t458 * t465 + (t376 * t387 + t386 * t390) * pkin(1)) * t392) * pkin(6)) * t464 - 0.2e1 * (0.2e1 * t447 - 0.2e1 * t425) * pkin(2) * t367 * t429 + 0.2e1 * (-t360 * t419 - 0.2e1 * t426 * t466) * t359 + 0.2e1 * (-t361 * t419 + 0.2e1 * (t367 * t446 + t373 * t466) * t377 * t454) * t358;
	t1 = [t353, t352, -t350 * t442 + t352 * t356, 0; t351, -t354, -t350 * t443 - t354 * t356, 0; 0, -t448, -t350 * t364 - t356 * t448, 0; t354, -t351, t350 * t444 - t351 * t356, 0; t352, t353, t350 * t445 + t353 * t356, 0; 0, t449, -t350 * t365 + t356 * t449, 0; -t432, 0, 0, 0; t431, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobiRD_rot_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:54
	% EndTime: 2020-04-15 18:50:04
	% DurationCPUTime: 2.93s
	% Computational Cost: add. (34736->102), mult. (53114->216), div. (1446->14), fcn. (32172->12), ass. (0->122)
	t625 = -2 * pkin(1);
	t532 = cos(pkin(20));
	t534 = cos(qJ(3));
	t608 = sin(pkin(20));
	t614 = sin(qJ(3));
	t529 = t614 * t532 + t534 * t608;
	t610 = pkin(6) * t529;
	t580 = pkin(1) * t610;
	t526 = 0.2e1 * t580;
	t539 = pkin(6) ^ 2;
	t586 = t526 + t539;
	t618 = (-pkin(2) - pkin(13));
	t514 = ((pkin(1) - t618) * (pkin(1) + t618)) + t586;
	t617 = (-pkin(2) + pkin(13));
	t515 = ((pkin(1) - t617) * (pkin(1) + t617)) + t586;
	t540 = pkin(2) ^ 2;
	t542 = pkin(1) ^ 2;
	t585 = t539 + t542;
	t571 = -pkin(13) ^ 2 + t585;
	t519 = t540 - t571 - 0.2e1 * t580;
	t517 = 0.1e1 / t519 ^ 2;
	t592 = t515 * t517;
	t510 = -t514 * t592 + 0.1e1;
	t508 = 0.1e1 / t510;
	t619 = pkin(1) * pkin(6);
	t561 = -0.2e1 * t508 * t517 * t619;
	t524 = t526 + t585;
	t522 = 0.1e1 / t524 ^ 2;
	t612 = pkin(1) * t522;
	t530 = -t534 * t532 + t614 * t608;
	t528 = t530 * qJD(3);
	t581 = t528 * t619;
	t587 = t514 + t515;
	t506 = t587 * t581;
	t593 = t515 * t514;
	t543 = sqrt(-t593);
	t512 = 0.1e1 / t543;
	t624 = t506 * t512;
	t564 = t587 * t619;
	t507 = t530 * t564;
	t596 = t512 * t507;
	t520 = t526 + t540 + t571;
	t527 = t529 * qJD(3);
	t553 = t527 * t520 - t528 * t543;
	t590 = t530 * t539;
	t572 = t528 * t590;
	t525 = -pkin(1) - t610;
	t594 = t512 * t525;
	t491 = t553 * pkin(6) - t506 * t594 + t572 * t625;
	t589 = t530 * t543;
	t576 = pkin(6) * t589;
	t504 = -t520 * t525 - t576;
	t501 = 0.1e1 / t504 ^ 2;
	t505 = pkin(6) * t530 * t520 - t525 * t543;
	t503 = t505 ^ 2;
	t497 = t501 * t503 + 0.1e1;
	t598 = t501 * t505;
	t622 = t530 * t624;
	t498 = pkin(6) * t622;
	t591 = t527 * t543;
	t609 = t525 * pkin(1);
	t490 = -t498 + (-t591 - (t520 - 0.2e1 * t609) * t528) * pkin(6);
	t500 = 0.1e1 / t504;
	t600 = t490 * t500 * t501;
	t623 = (t491 * t598 - t503 * t600) / t497 ^ 2;
	t541 = 0.1e1 / pkin(2);
	t495 = 0.1e1 / t497;
	t611 = pkin(2) * t524;
	t578 = t495 * t611;
	t558 = -0.2e1 * t501 * t578;
	t621 = t541 * t505 * t558;
	t562 = t542 * t572;
	t499 = t527 * t564 - 0.4e1 * t562;
	t563 = 0.4e1 / t593 * t506 * t596;
	t620 = -t512 * t499 - t563 / 0.4e1;
	t516 = 0.1e1 / t519;
	t521 = 0.1e1 / t524;
	t616 = t521 / 0.2e1;
	t615 = t541 / 0.2e1;
	t613 = pkin(1) * t521;
	t577 = t500 * t611;
	t552 = 0.2e1 * t495 * t541 * t577;
	t555 = t528 * t561;
	t582 = pkin(6) * t612;
	t566 = t505 * t582;
	t567 = t504 * t582;
	t595 = t512 * t516;
	t574 = t508 * t595;
	t482 = qJD(2) + (t491 * t616 + t528 * t566) * t552 + (t490 * t616 + t528 * t567) * t621 + t506 * t574 + t543 * t555;
	t569 = 0.1e1 / pkin(13) * t615;
	t570 = t521 * t615;
	t489 = qJ(2) + atan2(t505 * t570, t504 * t570) + atan2(t543 * t569, t519 * t569);
	t487 = sin(t489);
	t607 = t482 * t487;
	t488 = cos(t489);
	t606 = t482 * t488;
	t493 = -t507 * t594 + t539 * t530 ^ 2 * t625 + (t520 * t529 - t589) * pkin(6);
	t486 = (t493 * t616 + t530 * t566) * t541;
	t605 = t486 * t500;
	t533 = sin(qJ(1));
	t604 = t487 * t533;
	t535 = cos(qJ(1));
	t603 = t487 * t535;
	t602 = t488 * t533;
	t601 = t488 * t535;
	t584 = qJD(1) * t533;
	t583 = qJD(1) * t535;
	t579 = -0.4e1 * t521 * t522 * t542;
	t565 = t520 + t596;
	t492 = (-t529 * t543 + (-t565 + 0.2e1 * t609) * t530) * pkin(6);
	t485 = (t492 * t616 + t530 * t567) * t541;
	t575 = t485 * t598;
	t573 = t507 * t595;
	t557 = pkin(1) * t517 * t576;
	t481 = -t482 * t604 + t488 * t583;
	t479 = -t482 * t603 - t488 * t584;
	t480 = -t482 * t602 - t487 * t583;
	t478 = -t482 * t601 + t487 * t584;
	t518 = t516 * t517;
	t483 = (-0.2e1 * t557 + t573) * t508 + 0.2e1 * (-t575 + t605) * t578;
	t477 = ((-0.4e1 * pkin(1) * t527 * t590 + t620 * t525 - t498) * t616 - (t505 * t530 * t579 + t529 * t613) * t539 * t528 + ((-t565 * t528 - t591) * t616 + (t491 * t530 + t493 * t528 + t527 * t505) * t612) * pkin(6)) * t552 + (-(t504 * t579 - 0.2e1 * t613) * t572 + ((-t529 * t624 + t620 * t530 - t553) * t616 + (t490 * t530 + t492 * t528) * t612 + (-t616 * t596 + (t504 * t522 + t521 * t525) * pkin(1)) * t527) * pkin(6)) * t621 + t499 * t574 + t555 * t596 + (t591 + t622) * t561 + (t516 * t563 / 0.4e1 + 0.8e1 * t543 * t518 * t562) * t508 + (t490 * t558 - 0.4e1 * t577 * t623) * t486 + ((0.2e1 * t573 - 0.4e1 * t557) * (-t592 + (-0.2e1 * t515 * t518 - t517) * t514) / t510 ^ 2 - (0.4e1 * t605 - 0.4e1 * t575) * pkin(2) * t495) * t581 + (t491 * t558 + 0.4e1 * (t495 * t600 + t501 * t623) * t505 * t611) * t485;
	t1 = [t480, t479, t477 * t601 + t479 * t483, 0; -t478, t481, t477 * t602 + t481 * t483, 0; 0, t606, t477 * t487 + t483 * t606, 0; -t481, t478, -t477 * t603 + t478 * t483, 0; t479, t480, -t477 * t604 + t480 * t483, 0; 0, -t607, t477 * t488 - t483 * t607, 0; -t584, 0, 0, 0; t583, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobiRD_rot_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:52:59
	% EndTime: 2020-04-15 18:54:59
	% DurationCPUTime: 72.45s
	% Computational Cost: add. (2015891->243), mult. (3136844->523), div. (118294->18), fcn. (1962534->20), ass. (0->246)
	t1103 = pkin(7) ^ 2;
	t1107 = pkin(1) ^ 2;
	t1097 = sin(qJ(2));
	t1101 = cos(pkin(19));
	t1253 = sin(pkin(19));
	t1254 = cos(qJ(2));
	t1126 = -t1097 * t1101 + t1254 * t1253;
	t1235 = pkin(7) * t1126;
	t1262 = -2 * pkin(1);
	t1192 = -t1235 * t1262 + t1107;
	t1083 = t1103 + t1192;
	t1080 = 0.1e1 / t1083;
	t1089 = t1097 * t1253 + t1254 * t1101;
	t1087 = t1089 * qJD(2);
	t1106 = 0.1e1 / pkin(3);
	t1079 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1083;
	t1084 = pkin(1) + t1235;
	t1259 = -pkin(8) - pkin(3);
	t1077 = (pkin(7) - t1259) * (pkin(7) + t1259) + t1192;
	t1258 = -pkin(8) + pkin(3);
	t1078 = (pkin(7) - t1258) * (pkin(7) + t1258) + t1192;
	t1213 = t1078 * t1077;
	t1109 = sqrt(-t1213);
	t1209 = t1089 * t1109;
	t1070 = -pkin(7) * t1209 + t1079 * t1084;
	t1099 = cos(qJ(3));
	t1195 = t1099 * t1070;
	t1234 = pkin(7) * t1089;
	t1071 = t1079 * t1234 + t1084 * t1109;
	t1096 = sin(qJ(3));
	t1200 = t1096 * t1071;
	t1143 = -t1195 + t1200;
	t1081 = 0.1e1 / t1083 ^ 2;
	t1260 = pkin(1) * pkin(7);
	t1190 = t1081 * t1260;
	t1121 = t1143 * t1190;
	t1194 = t1099 * t1071;
	t1201 = t1096 * t1070;
	t1131 = t1201 / 0.2e1 + t1194 / 0.2e1;
	t1141 = 0.2e1 * (t1077 + t1078) * t1260;
	t1072 = t1087 * t1141;
	t1075 = 0.1e1 / t1109;
	t1247 = -t1075 / 0.2e1;
	t1064 = t1072 * t1234 * t1247;
	t1191 = t1084 * t1262;
	t1169 = -t1079 + t1191;
	t1086 = t1126 * qJD(2);
	t1211 = t1086 * t1109;
	t1051 = t1064 + (t1169 * t1087 - t1211) * pkin(7);
	t1199 = t1099 * t1051;
	t1268 = t1087 * t1103;
	t1175 = t1089 * t1268;
	t1159 = pkin(1) * t1175;
	t1246 = t1075 / 0.2e1;
	t1171 = t1084 * t1246;
	t1210 = t1087 * t1109;
	t1052 = t1072 * t1171 - 0.2e1 * t1159 + (t1086 * t1079 - t1210) * pkin(7);
	t1204 = t1096 * t1052;
	t1020 = (t1087 * t1121 + (-t1199 / 0.2e1 + t1204 / 0.2e1 + t1131 * qJD(3)) * t1080) * t1106;
	t1129 = t1195 / 0.2e1 - t1200 / 0.2e1;
	t1142 = t1194 + t1201;
	t1198 = t1099 * t1052;
	t1205 = t1096 * t1051;
	t1021 = (t1142 * t1087 * t1190 + (t1205 / 0.2e1 + t1198 / 0.2e1 + t1129 * qJD(3)) * t1080) * t1106;
	t1093 = pkin(23) + pkin(22);
	t1091 = sin(t1093);
	t1092 = cos(t1093);
	t1015 = t1020 * t1091 - t1021 * t1092;
	t1105 = pkin(4) ^ 2;
	t1104 = pkin(5) ^ 2;
	t1212 = t1080 * t1106;
	t1062 = t1131 * t1212;
	t1063 = t1129 * t1212;
	t1042 = t1062 * t1092 + t1063 * t1091;
	t1238 = pkin(5) * t1042;
	t1261 = -2 * pkin(4);
	t1193 = -t1238 * t1261 + t1104;
	t1039 = t1105 + t1193;
	t1035 = pkin(9) ^ 2 - pkin(11) ^ 2 + t1039;
	t1257 = -pkin(9) - pkin(11);
	t1033 = (pkin(4) - t1257) * (pkin(4) + t1257) + t1193;
	t1256 = -pkin(9) + pkin(11);
	t1034 = (pkin(4) - t1256) * (pkin(4) + t1256) + t1193;
	t1219 = t1034 * t1033;
	t1108 = sqrt(-t1219);
	t1162 = t1092 * t1020 + t1021 * t1091;
	t1270 = -t1015 * t1108 + t1162 * t1035;
	t1227 = 2 * pkin(4);
	t1040 = -pkin(4) - t1238;
	t1161 = t1062 * t1091 - t1092 * t1063;
	t1237 = pkin(5) * t1161;
	t1010 = -t1035 * t1040 - t1108 * t1237;
	t1007 = 0.1e1 / t1010 ^ 2;
	t1011 = t1035 * t1237 - t1040 * t1108;
	t1009 = t1011 ^ 2;
	t1001 = t1007 * t1009 + 0.1e1;
	t1223 = t1007 * t1011;
	t1006 = 0.1e1 / t1010;
	t1168 = t1040 * t1227 - t1035;
	t1023 = 0.1e1 / t1108;
	t1248 = -t1161 / 0.2e1;
	t1173 = t1023 * t1248;
	t1266 = t1162 * t1108;
	t1140 = pkin(5) * (t1033 + t1034) * t1227;
	t998 = t1015 * t1140;
	t984 = (t1168 * t1015 + t998 * t1173 - t1266) * pkin(5);
	t1230 = t1006 * t1007 * t984;
	t1170 = t1161 * t1104 * t1261;
	t1250 = -t1023 / 0.2e1;
	t1174 = t1040 * t1250;
	t985 = t1270 * pkin(5) + t1015 * t1170 + t998 * t1174;
	t1269 = 0.2e1 / t1001 ^ 2 * (-t1009 * t1230 + t985 * t1223);
	t1073 = t1089 * t1141;
	t1154 = t1073 * t1247 - t1079;
	t1053 = (-t1126 * t1109 + (t1154 + t1191) * t1089) * pkin(7);
	t1241 = pkin(1) * t1103;
	t1054 = t1073 * t1171 - 0.2e1 * t1089 ^ 2 * t1241 + (t1079 * t1126 - t1209) * pkin(7);
	t1095 = cos(pkin(23));
	t1207 = t1095 * t1070;
	t1094 = sin(pkin(23));
	t1208 = t1094 * t1071;
	t1145 = -t1207 + t1208;
	t1123 = t1145 * t1190;
	t1244 = -t1095 / 0.2e1;
	t1245 = t1094 / 0.2e1;
	t1029 = ((t1053 * t1244 + t1054 * t1245) * t1080 + t1089 * t1123) * t1106;
	t1206 = t1095 * t1071;
	t1214 = t1070 * t1094;
	t1144 = t1206 + t1214;
	t1122 = t1144 * t1190;
	t1243 = t1095 / 0.2e1;
	t1030 = ((t1053 * t1245 + t1054 * t1243) * t1080 + t1089 * t1122) * t1106;
	t1060 = (-t1207 / 0.2e1 + t1208 / 0.2e1) * t1212;
	t1056 = 0.1e1 / t1060;
	t1057 = 0.1e1 / t1060 ^ 2;
	t1061 = (t1206 / 0.2e1 + t1214 / 0.2e1) * t1212;
	t1215 = t1057 * t1061;
	t1265 = -t1029 * t1215 + t1030 * t1056;
	t999 = 0.1e1 / t1001;
	t1158 = pkin(4) * pkin(5) * pkin(9) * t1015 * t999;
	t1233 = pkin(9) * t1039;
	t1188 = t999 * t1233;
	t1165 = t1007 * t1188;
	t1186 = t1006 * t1233;
	t1264 = 0.2e1 * t1006 * t1158 + t984 * t1165 + t1186 * t1269;
	t1185 = t1011 * t1233;
	t1160 = t1007 * t1185;
	t1263 = -0.2e1 * t999 * t1185 * t1230 - 0.2e1 * t1158 * t1223 - t1160 * t1269 + t985 * t1165;
	t1036 = 0.1e1 / t1039;
	t1037 = 0.1e1 / t1039 ^ 2;
	t1255 = -t998 / 0.2e1;
	t1127 = t1142 * t1089;
	t1196 = t1099 * t1054;
	t1203 = t1096 * t1053;
	t1132 = t1203 / 0.2e1 + t1196 / 0.2e1;
	t1031 = (-t1132 * t1080 - t1127 * t1190) * t1106;
	t1197 = t1099 * t1053;
	t1202 = t1096 * t1054;
	t1130 = -t1197 / 0.2e1 + t1202 / 0.2e1;
	t1032 = (t1130 * t1080 + t1089 * t1121) * t1106;
	t1017 = t1031 * t1092 + t1032 * t1091;
	t1002 = t1017 * t1140;
	t1252 = -t1002 / 0.2e1;
	t1016 = t1161 * t1140;
	t1251 = -t1016 / 0.2e1;
	t1249 = t1036 / 0.2e1;
	t1242 = -t1099 / 0.2e1;
	t1240 = pkin(4) * t1036;
	t1239 = pkin(4) * t1037;
	t1102 = 0.1e1 / pkin(9);
	t1236 = pkin(5) * t1102;
	t1026 = ((t1051 * t1245 + t1052 * t1243) * t1080 + t1087 * t1122) * t1106;
	t1059 = t1061 ^ 2;
	t1048 = t1057 * t1059 + 0.1e1;
	t1046 = 0.1e1 / t1048;
	t1150 = t999 * t1160;
	t1146 = 0.2e1 * t1150;
	t1151 = t1102 * t999 * t1186;
	t1147 = -0.2e1 * t1151;
	t1189 = pkin(5) * t1239;
	t1166 = t1011 * t1189;
	t1167 = t1010 * t1189;
	t1025 = ((t1051 * t1244 + t1052 * t1245) * t1080 + t1087 * t1123) * t1106;
	t1217 = t1046 * t1057;
	t1177 = t1025 * t1217;
	t977 = -qJD(2) - t1026 * t1056 * t1046 + t1061 * t1177 + (t1015 * t1166 + t985 * t1249) * t1147 + (t1015 * t1167 + t984 * t1249) * t1102 * t1146;
	t1172 = t1102 * t1249;
	t997 = -qJ(2) - atan2(t1061, t1060) + pkin(22) - atan2(t1011 * t1172, t1010 * t1172);
	t995 = sin(t997);
	t1232 = t977 * t995;
	t996 = cos(t997);
	t1231 = t977 * t996;
	t1098 = sin(qJ(1));
	t1229 = t1098 * t977;
	t1100 = cos(qJ(1));
	t1228 = t1100 * t977;
	t1226 = qJD(1) * t1098;
	t1225 = qJD(1) * t1100;
	t1222 = t1015 * t1104;
	t1221 = t1025 * t1056 * t1057;
	t1218 = t1036 * t1040;
	t1187 = 0.4e1 * t1036 * t1037 * t1105;
	t1184 = t995 * t1226;
	t1183 = t996 * t1226;
	t1182 = t995 * t1225;
	t1181 = t996 * t1225;
	t1180 = -t1023 / t1219 * t998 / 0.4e1;
	t1179 = t1104 * t1227;
	t1176 = t1075 / t1213 * t1073 * t1072;
	t1164 = t1011 * t1187;
	t1163 = -0.8e1 * t1105 * t1222;
	t1157 = 0.2e1 * t1188;
	t1156 = t1161 * t1180;
	t1155 = t1107 * t1175;
	t1018 = -t1031 * t1091 + t1032 * t1092;
	t1069 = t1086 * t1141 - 0.8e1 * t1155;
	t1027 = t1064 + (t1176 / 0.4e1 + t1069 * t1246) * t1084 + (-0.4e1 * t1086 * t1089 - 0.2e1 * t1087 * t1126) * t1241 + (t1154 * t1087 - t1211) * pkin(7);
	t1028 = 0.4e1 * t1159 + (t1210 - t1089 * t1176 / 0.4e1 + t1169 * t1086 + (-t1126 * t1072 / 0.2e1 - t1086 * t1073 / 0.2e1 - t1089 * t1069 / 0.2e1) * t1075) * pkin(7);
	t1120 = t1102 * (t1010 * t1187 + 0.2e1 * t1240) * t1222;
	t1124 = t1052 * t1089 + t1054 * t1087 + t1071 * t1086;
	t1125 = t1051 * t1089 + t1053 * t1087 + t1070 * t1086;
	t1082 = t1080 * t1081;
	t1128 = 0.4e1 * t1082 * t1155;
	t1003 = (t1143 * t1128 + (t1028 * t1242 + t1096 * t1027 / 0.2e1 + t1132 * qJD(3)) * t1080 + ((-t1197 + t1202) * t1087 + t1143 * t1086 + (t1142 * qJD(3) - t1199 + t1204) * t1089) * t1190) * t1106;
	t1004 = (-0.4e1 * t1107 * t1082 * t1127 * t1268 + (-t1096 * t1028 / 0.2e1 + t1027 * t1242 + t1130 * qJD(3)) * t1080 + ((-t1196 - t1203) * t1087 - t1142 * t1086 + (t1143 * qJD(3) - t1198 - t1205) * t1089) * t1190) * t1106;
	t991 = t1003 * t1091 + t1004 * t1092;
	t981 = t1017 * t1163 + t991 * t1140;
	t986 = (t1002 * t1173 + t1168 * t1017 - t1018 * t1108) * pkin(5);
	t982 = (t1017 * t1167 + t986 * t1249) * t1102;
	t987 = t1002 * t1174 + t1017 * t1170 + (-t1017 * t1108 + t1018 * t1035) * pkin(5);
	t983 = (t1017 * t1166 + t987 * t1249) * t1102;
	t990 = t1003 * t1092 - t1004 * t1091;
	t975 = t1030 * t1177 + (((t1002 * t1180 + t981 * t1250) * t1040 + (-t1017 * t1162 - t1161 * t991) * t1179) * t1249 + (t1017 * t1164 - t1018 * t1240) * t1222 + ((-t991 * t1108 + t990 * t1035 + (t1015 * t1252 + t1017 * t1255) * t1023) * t1249 + (t1011 * t991 + t1015 * t987 + t1017 * t985) * t1239) * pkin(5)) * t1147 + (t1017 * t1120 + ((-t990 * t1108 + t1002 * t1156 - t991 * t1035 + (t1018 * t1255 + t1162 * t1252 + t981 * t1248) * t1023) * t1249 + (t991 * t1218 + (t1010 * t991 + t1015 * t986 + t1017 * t984) * t1037) * pkin(4)) * t1236) * t1146 + 0.2e1 * t1265 * (t1026 * t1215 - t1059 * t1221) / t1048 ^ 2 + (-(t1144 * t1128 + (t1027 * t1243 + t1028 * t1245) * t1080 + (t1125 * t1094 + t1124 * t1095) * t1190) * t1056 + (t1145 * t1128 + (t1027 * t1245 + t1028 * t1244) * t1080 + (t1124 * t1094 - t1125 * t1095) * t1190) * t1215) * t1046 * t1106 + (-0.2e1 * t1061 * t1046 * t1221 + t1026 * t1217) * t1029 + 0.2e1 * t1263 * t982 + 0.2e1 * t1264 * t983;
	t978 = -0.1e1 - t1265 * t1046 + (-t1006 * t983 + t982 * t1223) * t1157;
	t1138 = t978 * t1231 + t975 * t995;
	t1137 = t978 * t1232 - t975 * t996;
	t993 = (t1016 * t1173 - t1042 * t1108 + t1161 * t1168) * pkin(5);
	t988 = (t1161 * t1167 + t993 * t1249) * t1102;
	t994 = t1016 * t1174 + t1161 * t1170 + (t1035 * t1042 - t1108 * t1161) * pkin(5);
	t989 = (t1161 * t1166 + t994 * t1249) * t1102;
	t992 = t1140 * t1162 + t1161 * t1163;
	t976 = -0.2e1 * (((t1016 * t1180 + t992 * t1250) * t1040 - 0.2e1 * t1161 * t1162 * t1179) * t1249 + (-t1042 * t1240 + t1161 * t1164) * t1222 + ((-t1266 - t1015 * t1035 + (t1015 * t1251 + t1161 * t1255) * t1023) * t1249 + (t1011 * t1162 + t1015 * t994 + t1161 * t985) * t1239) * pkin(5)) * t1151 + 0.2e1 * (t1161 * t1120 + ((t1016 * t1156 + (t1042 * t1255 + t1162 * t1251 + t992 * t1248) * t1023 - t1270) * t1249 + (t1162 * t1218 + (t1010 * t1162 + t1015 * t993 + t1161 * t984) * t1037) * pkin(4)) * t1236) * t1150 + 0.2e1 * t1264 * t989 + 0.2e1 * t1263 * t988;
	t980 = (-t1006 * t989 + t988 * t1223) * t1157;
	t1136 = t980 * t1231 + t976 * t995;
	t1135 = t980 * t1232 - t976 * t996;
	t1 = [t996 * t1229 + t1182, t1137 * t1100 + t978 * t1183, t1135 * t1100 + t980 * t1183, 0; -t996 * t1228 + t1184, t1137 * t1098 - t978 * t1181, t1135 * t1098 - t980 * t1181, 0; 0, t1138, t1136, 0; t995 * t1229 - t1181, -t1138 * t1100 + t978 * t1184, -t1136 * t1100 + t980 * t1184, 0; -t995 * t1228 - t1183, -t1138 * t1098 - t978 * t1182, -t1136 * t1098 - t980 * t1182, 0; 0, t1137, t1135, 0; -t1226, 0, 0, 0; t1225, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
end