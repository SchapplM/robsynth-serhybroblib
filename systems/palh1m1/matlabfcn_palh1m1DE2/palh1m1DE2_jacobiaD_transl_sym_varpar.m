% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% palh1m1DE2
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [23x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DA,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% JaD_transl [3x4]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-15 19:16
% Revision: 2d0abd6fcc3afe6f578a07ad3d897ec57baa6ba1 (2020-04-13)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = palh1m1DE2_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(3,1),zeros(23,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m1DE2_jacobiaD_transl_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m1DE2_jacobiaD_transl_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'palh1m1DE2_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh1m1DE2_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [23 1]), ...
  'palh1m1DE2_jacobiaD_transl_sym_varpar: pkin has to be [23x1] (double)');
JaD_transl=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:35
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:35
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:35
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (17->14), mult. (60->29), div. (0->0), fcn. (38->4), ass. (0->12)
	t17 = sin(qJ(1));
	t26 = qJD(1) * t17;
	t19 = cos(qJ(1));
	t25 = qJD(1) * t19;
	t24 = qJD(2) * t17;
	t23 = qJD(2) * t19;
	t16 = sin(qJ(2));
	t18 = cos(qJ(2));
	t22 = r_i_i_C(1) * t18 - r_i_i_C(2) * t16;
	t21 = r_i_i_C(1) * t16 + r_i_i_C(2) * t18 - pkin(16);
	t20 = t22 * qJD(2);
	t1 = [t22 * t24 + (-r_i_i_C(3) * t17 + t19 * t21) * qJD(1), (-t16 * t26 + t18 * t23) * r_i_i_C(2) + (t16 * t23 + t18 * t26) * r_i_i_C(1), 0, 0; -t19 * t20 + (r_i_i_C(3) * t19 + t17 * t21) * qJD(1), (t16 * t25 + t18 * t24) * r_i_i_C(2) + (t16 * t24 - t18 * t25) * r_i_i_C(1), 0, 0; 0, -t20, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:35
	% EndTime: 2020-04-15 18:49:36
	% DurationCPUTime: 0.13s
	% Computational Cost: add. (77->25), mult. (110->37), div. (0->0), fcn. (71->6), ass. (0->26)
	t37 = qJD(2) + qJD(3);
	t38 = qJ(2) + qJ(3);
	t36 = cos(t38);
	t56 = r_i_i_C(2) * t36;
	t35 = sin(t38);
	t58 = r_i_i_C(1) * t35;
	t47 = t56 + t58;
	t45 = t47 * t37;
	t41 = cos(qJ(2));
	t59 = pkin(1) * t41;
	t60 = qJD(2) * t59 + t45;
	t57 = r_i_i_C(2) * t35;
	t55 = t36 * t37;
	t40 = sin(qJ(1));
	t54 = qJD(1) * t40;
	t42 = cos(qJ(1));
	t53 = qJD(1) * t42;
	t39 = sin(qJ(2));
	t52 = qJD(2) * t39;
	t51 = r_i_i_C(1) * t55;
	t50 = t37 * t57;
	t49 = qJD(1) * t56;
	t46 = t39 * pkin(1) - r_i_i_C(1) * t36 - pkin(16) + t57;
	t44 = t40 * t49 + t54 * t58 + (t50 - t51) * t42;
	t30 = t40 * t50;
	t1 = [t60 * t40 + (-r_i_i_C(3) * t40 + t46 * t42) * qJD(1), (t41 * t54 + t42 * t52) * pkin(1) + t44, t44, 0; -t60 * t42 + (r_i_i_C(3) * t42 + t46 * t40) * qJD(1), t30 + (pkin(1) * t52 - t51) * t40 + (-t47 - t59) * t53, -t42 * t49 + t30 + (-t35 * t53 - t40 * t55) * r_i_i_C(1), 0; 0, -t60, -t45, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:51:50
	% EndTime: 2020-04-15 18:55:25
	% DurationCPUTime: 138.72s
	% Computational Cost: add. (3964769->242), mult. (6172642->480), div. (235892->14), fcn. (3859325->21), ass. (0->242)
	t767 = pkin(7) ^ 2;
	t771 = pkin(1) ^ 2;
	t760 = sin(qJ(2));
	t763 = cos(qJ(2));
	t765 = cos(pkin(19));
	t888 = sin(pkin(19));
	t798 = -t760 * t765 + t763 * t888;
	t883 = pkin(7) * t798;
	t906 = -2 * pkin(1);
	t847 = -t883 * t906 + t771;
	t738 = t767 + t847;
	t735 = 0.1e1 / t738;
	t746 = t760 * t888 + t763 * t765;
	t744 = t746 * qJD(2);
	t770 = 0.1e1 / pkin(3);
	t734 = pkin(3) ^ 2 - pkin(8) ^ 2 + t738;
	t741 = pkin(1) + t883;
	t903 = -pkin(8) - pkin(3);
	t732 = (pkin(7) - t903) * (pkin(7) + t903) + t847;
	t902 = -pkin(8) + pkin(3);
	t733 = (pkin(7) - t902) * (pkin(7) + t902) + t847;
	t865 = t733 * t732;
	t773 = sqrt(-t865);
	t861 = t746 * t773;
	t725 = -pkin(7) * t861 + t734 * t741;
	t762 = cos(qJ(3));
	t850 = t762 * t725;
	t882 = pkin(7) * t746;
	t726 = t734 * t882 + t741 * t773;
	t759 = sin(qJ(3));
	t855 = t759 * t726;
	t812 = -t850 + t855;
	t736 = 0.1e1 / t738 ^ 2;
	t904 = pkin(1) * pkin(7);
	t842 = t736 * t904;
	t787 = t812 * t842;
	t849 = t762 * t726;
	t856 = t759 * t725;
	t801 = t856 / 0.2e1 + t849 / 0.2e1;
	t810 = 0.2e1 * (t732 + t733) * t904;
	t727 = t744 * t810;
	t730 = 0.1e1 / t773;
	t894 = -t730 / 0.2e1;
	t719 = t727 * t882 * t894;
	t843 = t741 * t906;
	t825 = -t734 + t843;
	t743 = t798 * qJD(2);
	t863 = t743 * t773;
	t712 = t719 + (t744 * t825 - t863) * pkin(7);
	t854 = t762 * t712;
	t911 = t744 * t767;
	t836 = t746 * t911;
	t819 = pkin(1) * t836;
	t893 = t730 / 0.2e1;
	t829 = t741 * t893;
	t862 = t744 * t773;
	t713 = t727 * t829 - 0.2e1 * t819 + (t743 * t734 - t862) * pkin(7);
	t859 = t759 * t713;
	t688 = (t744 * t787 + (-t854 / 0.2e1 + t859 / 0.2e1 + t801 * qJD(3)) * t735) * t770;
	t799 = t850 / 0.2e1 - t855 / 0.2e1;
	t811 = t849 + t856;
	t853 = t762 * t713;
	t860 = t759 * t712;
	t689 = (t811 * t744 * t842 + (t860 / 0.2e1 + t853 / 0.2e1 + t799 * qJD(3)) * t735) * t770;
	t754 = pkin(23) + pkin(22);
	t750 = sin(t754);
	t751 = cos(t754);
	t683 = t688 * t750 - t689 * t751;
	t768 = pkin(5) ^ 2;
	t864 = t735 * t770;
	t717 = t801 * t864;
	t718 = t799 * t864;
	t706 = t717 * t751 + t718 * t750;
	t887 = pkin(4) * t706;
	t905 = -2 * pkin(5);
	t848 = -t887 * t905 + t768;
	t901 = -pkin(9) - pkin(11);
	t697 = (pkin(4) - t901) * (pkin(4) + t901) + t848;
	t900 = -pkin(9) + pkin(11);
	t698 = (pkin(4) - t900) * (pkin(4) + t900) + t848;
	t868 = t698 * t697;
	t772 = sqrt(-t868);
	t913 = t683 * t772;
	t844 = 2 * pkin(5);
	t809 = pkin(4) * (t697 + t698) * t844;
	t674 = t683 * t809;
	t769 = pkin(4) ^ 2;
	t703 = t769 + t848;
	t699 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t703;
	t704 = pkin(5) + t887;
	t824 = t704 * t905 - t699;
	t691 = 0.1e1 / t772;
	t820 = t717 * t750 - t718 * t751;
	t895 = -t820 / 0.2e1;
	t833 = t691 * t895;
	t821 = t688 * t751 + t689 * t750;
	t910 = t821 * t772;
	t653 = (t674 * t833 + t683 * t824 - t910) * pkin(4);
	t826 = t769 * t820 * t905;
	t896 = t691 / 0.2e1;
	t834 = t704 * t896;
	t654 = t674 * t834 + t683 * t826 + (t699 * t821 - t913) * pkin(4);
	t700 = 0.1e1 / t703;
	t766 = 0.1e1 / pkin(11);
	t701 = 0.1e1 / t703 ^ 2;
	t841 = pkin(4) * pkin(5) * t701;
	t886 = pkin(4) * t820;
	t679 = t699 * t886 + t704 * t772;
	t757 = sin(pkin(21));
	t871 = t679 * t757;
	t678 = t699 * t704 - t772 * t886;
	t758 = cos(pkin(21));
	t872 = t678 * t758;
	t786 = (t871 - t872) * t841;
	t891 = -t758 / 0.2e1;
	t892 = t757 / 0.2e1;
	t646 = ((t653 * t891 + t654 * t892) * t700 + t683 * t786) * t766;
	t866 = t700 * t766;
	t673 = (-t872 / 0.2e1 + t871 / 0.2e1) * t866;
	t670 = 0.1e1 / t673 ^ 2;
	t912 = t646 * t670;
	t870 = t679 * t758;
	t873 = t678 * t757;
	t785 = (t870 + t873) * t841;
	t890 = t758 / 0.2e1;
	t645 = ((t653 * t892 + t654 * t890) * t700 + t683 * t785) * t766;
	t672 = (t873 / 0.2e1 + t870 / 0.2e1) * t866;
	t668 = t672 ^ 2;
	t662 = t668 * t670 + 0.1e1;
	t660 = 0.1e1 / t662;
	t669 = 0.1e1 / t673;
	t755 = qJD(2) + qJD(3);
	t875 = t670 * t672;
	t638 = (t645 * t669 - t646 * t875) * t660 + t755;
	t756 = qJ(2) + qJ(3);
	t752 = sin(t756);
	t884 = pkin(5) * t755;
	t840 = t752 * t884;
	t880 = pkin(1) * qJD(2);
	t739 = -t763 * t880 - t840;
	t659 = atan2(t672, t673) + t756;
	t657 = sin(t659);
	t658 = cos(t659);
	t814 = r_i_i_C(1) * t657 + r_i_i_C(2) * t658;
	t909 = t638 * t814 - t739;
	t793 = t811 * t746;
	t728 = t746 * t810;
	t881 = t767 * pkin(1);
	t715 = t728 * t829 - 0.2e1 * t746 ^ 2 * t881 + (t734 * t798 - t861) * pkin(7);
	t851 = t762 * t715;
	t815 = t728 * t894 - t734;
	t714 = (-t798 * t773 + (t815 + t843) * t746) * pkin(7);
	t858 = t759 * t714;
	t802 = t858 / 0.2e1 + t851 / 0.2e1;
	t695 = (-t735 * t802 - t793 * t842) * t770;
	t852 = t762 * t714;
	t857 = t759 * t715;
	t800 = -t852 / 0.2e1 + t857 / 0.2e1;
	t696 = (t735 * t800 + t746 * t787) * t770;
	t685 = t695 * t751 + t696 * t750;
	t675 = t685 * t809;
	t686 = -t695 * t750 + t696 * t751;
	t655 = (t675 * t833 + t685 * t824 - t686 * t772) * pkin(4);
	t656 = t675 * t834 + t685 * t826 + (-t685 * t772 + t686 * t699) * pkin(4);
	t648 = ((t655 * t892 + t656 * t890) * t700 + t685 * t785) * t766;
	t649 = ((t655 * t891 + t656 * t892) * t700 + t685 * t786) * t766;
	t639 = 0.1e1 + (t648 * t669 - t649 * t875) * t660;
	t885 = pkin(5) * t752;
	t908 = pkin(1) * t763 + t639 * t814 + t885;
	t684 = t820 * t809;
	t666 = (t684 * t833 - t706 * t772 + t820 * t824) * pkin(4);
	t667 = t684 * t834 + t820 * t826 + (t699 * t706 - t772 * t820) * pkin(4);
	t651 = ((t666 * t892 + t667 * t890) * t700 + t820 * t785) * t766;
	t652 = ((t666 * t891 + t667 * t892) * t700 + t820 * t786) * t766;
	t641 = 0.1e1 + (t651 * t669 - t652 * t875) * t660;
	t907 = t641 * t814 + t885;
	t899 = -t674 / 0.2e1;
	t898 = -t675 / 0.2e1;
	t897 = -t684 / 0.2e1;
	t889 = -t762 / 0.2e1;
	t879 = t638 * t657;
	t878 = t638 * t658;
	t876 = t669 * t912;
	t877 = 0.2e1 * (t645 * t875 - t668 * t876) / t662 ^ 2;
	t874 = t674 * t691 / t868;
	t869 = t683 * t769;
	t867 = t700 * t758;
	t761 = sin(qJ(1));
	t846 = qJD(1) * t761;
	t764 = cos(qJ(1));
	t845 = qJD(1) * t764;
	t753 = cos(t756);
	t839 = t753 * t884;
	t838 = t768 * t869;
	t837 = t730 / t865 * t728 * t727;
	t835 = t874 / 0.4e1;
	t832 = t700 * t892;
	t831 = -t867 / 0.2e1;
	t830 = t867 / 0.2e1;
	t828 = t769 * t844;
	t827 = 0.4e1 * pkin(5) * t869;
	t823 = t660 * t841;
	t822 = -0.8e1 * t838;
	t818 = t700 * t701 * t838;
	t817 = t771 * t836;
	t816 = -t820 * t874 / 0.4e1;
	t813 = t758 * t818;
	t808 = 0.4e1 * t757 * t818;
	t807 = pkin(1) * t760 - pkin(5) * t753 - r_i_i_C(1) * t658 + r_i_i_C(2) * t657 - pkin(16);
	t724 = t743 * t810 - 0.8e1 * t817;
	t693 = t719 + (t837 / 0.4e1 + t724 * t893) * t741 + (-0.4e1 * t743 * t746 - 0.2e1 * t744 * t798) * t881 + (t744 * t815 - t863) * pkin(7);
	t694 = 0.4e1 * t819 + (t862 - t746 * t837 / 0.4e1 + t825 * t743 + (-t798 * t727 / 0.2e1 - t743 * t728 / 0.2e1 - t746 * t724 / 0.2e1) * t730) * pkin(7);
	t737 = t735 * t736;
	t676 = (0.4e1 * t812 * t737 * t817 + (t694 * t889 + t759 * t693 / 0.2e1 + t802 * qJD(3)) * t735 + ((-t852 + t857) * t744 + t812 * t743 + (qJD(3) * t811 - t854 + t859) * t746) * t842) * t770;
	t677 = (-0.4e1 * t771 * t737 * t793 * t911 + (-t759 * t694 / 0.2e1 + t693 * t889 + t800 * qJD(3)) * t735 + ((-t851 - t858) * t744 - t811 * t743 + (qJD(3) * t812 - t853 - t860) * t746) * t842) * t770;
	t664 = t676 * t750 + t677 * t751;
	t650 = t664 * t809 + t685 * t822;
	t663 = t676 * t751 - t677 * t750;
	t642 = (t650 * t896 + t675 * t835) * t704 + (-t664 * t820 - t683 * t686 - t685 * t821) * t828 + (t663 * t699 - t664 * t772 + (t683 * t898 + t685 * t899) * t691) * pkin(4);
	t643 = t685 * t827 + (-t663 * t772 + t675 * t816 + t824 * t664 + (t650 * t895 + t686 * t899 + t821 * t898) * t691) * pkin(4);
	t784 = t875 * t877 + (-t645 * t670 + 0.2e1 * t672 * t876) * t660;
	t789 = t654 * t685 + t656 * t683 + t664 * t679;
	t791 = t653 * t685 + t655 * t683 + t664 * t678;
	t792 = -t660 * t912 - t669 * t877;
	t795 = t685 * t808;
	t796 = 0.4e1 * t679 * t813;
	t797 = -0.4e1 * t678 * t813;
	t636 = t792 * t648 + t784 * t649 + (((t642 * t830 + t643 * t832 + t678 * t795 + t685 * t796) * t669 - (t642 * t832 + t643 * t831 + t679 * t795 + t685 * t797) * t875) * t660 + ((t669 * t789 + t791 * t875) * t758 + (t669 * t791 - t789 * t875) * t757) * t823) * t766;
	t806 = -t636 * t657 - t639 * t878;
	t805 = -t636 * t658 + t639 * t879;
	t665 = t809 * t821 + t820 * t822;
	t644 = (t665 * t896 + t684 * t835) * t704 + (-t683 * t706 - 0.2e1 * t820 * t821) * t828 + (-t910 - t683 * t699 + (t683 * t897 + t820 * t899) * t691) * pkin(4);
	t647 = t820 * t827 + (t913 + t684 * t816 + t824 * t821 + (t665 * t895 + t706 * t899 + t821 * t897) * t691) * pkin(4);
	t788 = t654 * t820 + t667 * t683 + t679 * t821;
	t790 = t653 * t820 + t666 * t683 + t678 * t821;
	t794 = t820 * t808;
	t637 = t792 * t651 + t784 * t652 + (((t644 * t830 + t647 * t832 + t678 * t794 + t796 * t820) * t669 - (t644 * t832 + t647 * t831 + t679 * t794 + t797 * t820) * t875) * t660 + ((t669 * t788 + t790 * t875) * t758 + (t669 * t790 - t788 * t875) * t757) * t823) * t766;
	t804 = -t637 * t657 - t641 * t878;
	t803 = -t637 * t658 + t641 * t879;
	t783 = r_i_i_C(1) * t806 + r_i_i_C(2) * t805 + t760 * t880 - t839;
	t782 = r_i_i_C(1) * t804 + r_i_i_C(2) * t803 - t839;
	t1 = [t909 * t761 + (-r_i_i_C(3) * t761 + t764 * t807) * qJD(1), t783 * t764 + t846 * t908, t782 * t764 + t846 * t907, 0; -t909 * t764 + (r_i_i_C(3) * t764 + t761 * t807) * qJD(1), t783 * t761 - t845 * t908, t782 * t761 - t845 * t907, 0; 0, -r_i_i_C(1) * t805 + r_i_i_C(2) * t806 + t739, -r_i_i_C(1) * t803 + r_i_i_C(2) * t804 - t840, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 19:06:37
	% EndTime: 2020-04-15 19:12:32
	% DurationCPUTime: 344.62s
	% Computational Cost: add. (10453868->262), mult. (16258346->512), div. (625254->14), fcn. (10169091->23), ass. (0->261)
	t1354 = pkin(7) ^ 2;
	t1358 = pkin(1) ^ 2;
	t1346 = sin(qJ(2));
	t1350 = cos(qJ(2));
	t1352 = cos(pkin(19));
	t1501 = sin(pkin(19));
	t1396 = -t1346 * t1352 + t1350 * t1501;
	t1482 = pkin(7) * t1396;
	t1509 = -2 * pkin(1);
	t1440 = -t1482 * t1509 + t1358;
	t1323 = t1354 + t1440;
	t1320 = 0.1e1 / t1323;
	t1357 = 0.1e1 / pkin(3);
	t1331 = t1346 * t1501 + t1350 * t1352;
	t1319 = pkin(3) ^ 2 - pkin(8) ^ 2 + t1323;
	t1326 = pkin(1) + t1482;
	t1506 = -pkin(8) - pkin(3);
	t1317 = (pkin(7) - t1506) * (pkin(7) + t1506) + t1440;
	t1505 = -pkin(8) + pkin(3);
	t1318 = (pkin(7) - t1505) * (pkin(7) + t1505) + t1440;
	t1459 = t1318 * t1317;
	t1360 = sqrt(-t1459);
	t1481 = pkin(7) * t1331;
	t1311 = t1319 * t1481 + t1326 * t1360;
	t1349 = cos(qJ(3));
	t1442 = t1349 * t1311;
	t1455 = t1331 * t1360;
	t1310 = -pkin(7) * t1455 + t1319 * t1326;
	t1345 = sin(qJ(3));
	t1450 = t1345 * t1310;
	t1400 = t1442 + t1450;
	t1391 = t1400 * t1331;
	t1507 = pkin(1) * pkin(7);
	t1399 = 0.2e1 * (t1317 + t1318) * t1507;
	t1313 = t1331 * t1399;
	t1315 = 0.1e1 / t1360;
	t1494 = t1315 / 0.2e1;
	t1421 = t1326 * t1494;
	t1487 = pkin(1) * t1354;
	t1300 = t1313 * t1421 - 0.2e1 * t1331 ^ 2 * t1487 + (t1319 * t1396 - t1455) * pkin(7);
	t1444 = t1349 * t1300;
	t1495 = -t1315 / 0.2e1;
	t1406 = t1313 * t1495 - t1319;
	t1439 = t1326 * t1509;
	t1299 = (-t1396 * t1360 + (t1406 + t1439) * t1331) * pkin(7);
	t1452 = t1345 * t1299;
	t1395 = t1452 / 0.2e1 + t1444 / 0.2e1;
	t1321 = 0.1e1 / t1323 ^ 2;
	t1438 = t1321 * t1507;
	t1280 = (-t1395 * t1320 - t1391 * t1438) * t1357;
	t1443 = t1349 * t1310;
	t1449 = t1345 * t1311;
	t1401 = -t1443 + t1449;
	t1381 = t1401 * t1438;
	t1445 = t1349 * t1299;
	t1451 = t1345 * t1300;
	t1393 = -t1445 / 0.2e1 + t1451 / 0.2e1;
	t1281 = (t1393 * t1320 + t1331 * t1381) * t1357;
	t1339 = pkin(23) + pkin(22);
	t1335 = sin(t1339);
	t1336 = cos(t1339);
	t1270 = t1280 * t1336 + t1281 * t1335;
	t1355 = pkin(5) ^ 2;
	t1394 = t1450 / 0.2e1 + t1442 / 0.2e1;
	t1458 = t1320 * t1357;
	t1302 = t1394 * t1458;
	t1392 = t1443 / 0.2e1 - t1449 / 0.2e1;
	t1303 = t1392 * t1458;
	t1291 = t1302 * t1336 + t1303 * t1335;
	t1486 = pkin(4) * t1291;
	t1508 = -2 * pkin(5);
	t1441 = -t1486 * t1508 + t1355;
	t1504 = -pkin(9) - pkin(11);
	t1282 = (pkin(4) - t1504) * (pkin(4) + t1504) + t1441;
	t1503 = -pkin(9) + pkin(11);
	t1283 = (pkin(4) - t1503) * (pkin(4) + t1503) + t1441;
	t1479 = 2 * pkin(5);
	t1398 = pkin(4) * (t1282 + t1283) * t1479;
	t1260 = t1270 * t1398;
	t1271 = -t1280 * t1335 + t1281 * t1336;
	t1462 = t1283 * t1282;
	t1359 = sqrt(-t1462);
	t1356 = pkin(4) ^ 2;
	t1288 = t1356 + t1441;
	t1284 = -pkin(9) ^ 2 + pkin(11) ^ 2 + t1288;
	t1289 = pkin(5) + t1486;
	t1417 = t1289 * t1508 - t1284;
	t1276 = 0.1e1 / t1359;
	t1411 = t1302 * t1335 - t1336 * t1303;
	t1496 = -t1411 / 0.2e1;
	t1425 = t1276 * t1496;
	t1240 = (t1260 * t1425 + t1417 * t1270 - t1271 * t1359) * pkin(4);
	t1419 = t1356 * t1411 * t1508;
	t1497 = t1276 / 0.2e1;
	t1426 = t1289 * t1497;
	t1241 = t1260 * t1426 + t1270 * t1419 + (-t1270 * t1359 + t1271 * t1284) * pkin(4);
	t1285 = 0.1e1 / t1288;
	t1353 = 0.1e1 / pkin(11);
	t1286 = 0.1e1 / t1288 ^ 2;
	t1437 = pkin(4) * pkin(5) * t1286;
	t1485 = pkin(4) * t1411;
	t1264 = t1284 * t1485 + t1289 * t1359;
	t1343 = cos(pkin(21));
	t1464 = t1264 * t1343;
	t1263 = t1284 * t1289 - t1359 * t1485;
	t1342 = sin(pkin(21));
	t1467 = t1263 * t1342;
	t1379 = (t1464 + t1467) * t1437;
	t1491 = t1343 / 0.2e1;
	t1493 = t1342 / 0.2e1;
	t1233 = ((t1240 * t1493 + t1241 * t1491) * t1285 + t1270 * t1379) * t1353;
	t1465 = t1264 * t1342;
	t1466 = t1263 * t1343;
	t1380 = (t1465 - t1466) * t1437;
	t1492 = -t1343 / 0.2e1;
	t1234 = ((t1240 * t1492 + t1241 * t1493) * t1285 + t1270 * t1380) * t1353;
	t1460 = t1285 * t1353;
	t1257 = (t1467 / 0.2e1 + t1464 / 0.2e1) * t1460;
	t1253 = t1257 ^ 2;
	t1258 = (-t1466 / 0.2e1 + t1465 / 0.2e1) * t1460;
	t1255 = 0.1e1 / t1258 ^ 2;
	t1247 = t1253 * t1255 + 0.1e1;
	t1245 = 0.1e1 / t1247;
	t1254 = 0.1e1 / t1258;
	t1469 = t1255 * t1257;
	t1224 = 0.1e1 + (t1233 * t1254 - t1234 * t1469) * t1245;
	t1341 = qJ(2) + qJ(3);
	t1244 = atan2(t1257, t1258) + t1341;
	t1242 = sin(t1244);
	t1344 = sin(qJ(4));
	t1348 = cos(qJ(4));
	t1404 = r_i_i_C(1) * t1348 - r_i_i_C(2) * t1344 + pkin(10);
	t1243 = cos(t1244);
	t1502 = pkin(12) + r_i_i_C(3);
	t1510 = t1502 * t1243;
	t1374 = -t1404 * t1242 + t1510;
	t1337 = sin(t1341);
	t1484 = pkin(5) * t1337;
	t1488 = pkin(1) * t1350;
	t1520 = t1374 * t1224 - t1484 - t1488;
	t1269 = t1411 * t1398;
	t1251 = (t1269 * t1425 - t1291 * t1359 + t1411 * t1417) * pkin(4);
	t1252 = t1269 * t1426 + t1411 * t1419 + (t1284 * t1291 - t1359 * t1411) * pkin(4);
	t1236 = ((t1251 * t1493 + t1252 * t1491) * t1285 + t1411 * t1379) * t1353;
	t1237 = ((t1251 * t1492 + t1252 * t1493) * t1285 + t1411 * t1380) * t1353;
	t1226 = 0.1e1 + (t1236 * t1254 - t1237 * t1469) * t1245;
	t1519 = t1374 * t1226 - t1484;
	t1329 = t1331 * qJD(2);
	t1312 = t1329 * t1399;
	t1304 = t1312 * t1481 * t1495;
	t1418 = -t1319 + t1439;
	t1328 = t1396 * qJD(2);
	t1457 = t1328 * t1360;
	t1297 = t1304 + (t1418 * t1329 - t1457) * pkin(7);
	t1447 = t1349 * t1297;
	t1514 = t1329 * t1354;
	t1428 = t1331 * t1514;
	t1410 = pkin(1) * t1428;
	t1456 = t1329 * t1360;
	t1298 = t1312 * t1421 - 0.2e1 * t1410 + (t1328 * t1319 - t1456) * pkin(7);
	t1453 = t1345 * t1298;
	t1273 = (t1329 * t1381 + (-t1447 / 0.2e1 + t1453 / 0.2e1 + t1394 * qJD(3)) * t1320) * t1357;
	t1446 = t1349 * t1298;
	t1454 = t1345 * t1297;
	t1274 = (t1400 * t1329 * t1438 + (t1454 / 0.2e1 + t1446 / 0.2e1 + t1392 * qJD(3)) * t1320) * t1357;
	t1268 = t1273 * t1335 - t1274 * t1336;
	t1259 = t1268 * t1398;
	t1412 = t1336 * t1273 + t1274 * t1335;
	t1511 = t1412 * t1359;
	t1238 = (t1259 * t1425 + t1417 * t1268 - t1511) * pkin(4);
	t1517 = t1268 * t1359;
	t1239 = t1259 * t1426 + t1268 * t1419 + (t1284 * t1412 - t1517) * pkin(4);
	t1230 = ((t1238 * t1493 + t1239 * t1491) * t1285 + t1268 * t1379) * t1353;
	t1231 = ((t1238 * t1492 + t1239 * t1493) * t1285 + t1268 * t1380) * t1353;
	t1340 = qJD(2) + qJD(3);
	t1223 = (t1230 * t1254 - t1231 * t1469) * t1245 + t1340;
	t1483 = pkin(5) * t1340;
	t1436 = t1337 * t1483;
	t1324 = -qJD(2) * t1488 - t1436;
	t1518 = (-pkin(10) * t1242 + t1510) * t1223 + t1324;
	t1434 = t1502 * t1242;
	t1375 = t1404 * t1243 + t1434;
	t1515 = t1231 * t1255;
	t1500 = -t1259 / 0.2e1;
	t1499 = -t1260 / 0.2e1;
	t1498 = -t1269 / 0.2e1;
	t1490 = -t1349 / 0.2e1;
	t1489 = pkin(1) * t1346;
	t1347 = sin(qJ(1));
	t1478 = qJD(1) * t1347;
	t1351 = cos(qJ(1));
	t1477 = qJD(1) * t1351;
	t1476 = qJD(4) * t1242;
	t1475 = qJD(4) * t1243;
	t1474 = t1223 * t1242;
	t1473 = t1223 * t1243;
	t1471 = t1254 * t1515;
	t1472 = 0.2e1 * (t1230 * t1469 - t1253 * t1471) / t1247 ^ 2;
	t1470 = t1242 * t1348;
	t1468 = t1259 * t1276 / t1462;
	t1463 = t1268 * t1356;
	t1461 = t1285 * t1343;
	t1448 = t1348 * t1351;
	t1338 = cos(t1341);
	t1435 = t1338 * t1483;
	t1431 = t1356 * t1479;
	t1430 = t1355 * t1463;
	t1429 = t1315 / t1459 * t1313 * t1312;
	t1427 = t1468 / 0.4e1;
	t1424 = t1285 * t1493;
	t1423 = -t1461 / 0.2e1;
	t1422 = t1461 / 0.2e1;
	t1420 = 0.4e1 * pkin(5) * t1463;
	t1416 = t1245 * t1437;
	t1415 = -0.8e1 * t1430;
	t1414 = -qJD(1) + t1475;
	t1413 = qJD(1) * t1243 - qJD(4);
	t1409 = t1285 * t1286 * t1430;
	t1408 = t1358 * t1428;
	t1407 = -t1411 * t1468 / 0.4e1;
	t1405 = r_i_i_C(1) * t1344 + r_i_i_C(2) * t1348;
	t1403 = t1414 * t1344;
	t1402 = t1343 * t1409;
	t1397 = 0.4e1 * t1342 * t1409;
	t1390 = -0.4e1 * t1263 * t1402;
	t1389 = 0.4e1 * t1264 * t1402;
	t1388 = t1270 * t1397;
	t1387 = t1411 * t1397;
	t1386 = -t1245 * t1515 - t1254 * t1472;
	t1309 = t1328 * t1399 - 0.8e1 * t1408;
	t1278 = t1304 + (t1429 / 0.4e1 + t1309 * t1494) * t1326 + (-0.4e1 * t1328 * t1331 - 0.2e1 * t1329 * t1396) * t1487 + (t1406 * t1329 - t1457) * pkin(7);
	t1279 = 0.4e1 * t1410 + (t1456 - t1331 * t1429 / 0.4e1 + t1418 * t1328 + (-t1396 * t1312 / 0.2e1 - t1328 * t1313 / 0.2e1 - t1331 * t1309 / 0.2e1) * t1315) * pkin(7);
	t1322 = t1320 * t1321;
	t1261 = (0.4e1 * t1401 * t1322 * t1408 + (t1279 * t1490 + t1345 * t1278 / 0.2e1 + t1395 * qJD(3)) * t1320 + ((-t1445 + t1451) * t1329 + t1401 * t1328 + (t1400 * qJD(3) - t1447 + t1453) * t1331) * t1438) * t1357;
	t1262 = (-0.4e1 * t1358 * t1322 * t1391 * t1514 + (-t1345 * t1279 / 0.2e1 + t1278 * t1490 + t1393 * qJD(3)) * t1320 + ((-t1444 - t1452) * t1329 - t1400 * t1328 + (t1401 * qJD(3) - t1446 - t1454) * t1331) * t1438) * t1357;
	t1249 = t1261 * t1335 + t1262 * t1336;
	t1385 = t1238 * t1270 + t1240 * t1268 + t1249 * t1263;
	t1384 = t1238 * t1411 + t1251 * t1268 + t1263 * t1412;
	t1383 = t1239 * t1270 + t1241 * t1268 + t1249 * t1264;
	t1382 = t1239 * t1411 + t1252 * t1268 + t1264 * t1412;
	t1378 = qJD(1) * (-pkin(5) * t1338 - pkin(10) * t1243 - pkin(16) - t1434 + t1489);
	t1377 = t1413 * t1347 + t1351 * t1474;
	t1373 = t1469 * t1472 + (-t1230 * t1255 + 0.2e1 * t1257 * t1471) * t1245;
	t1372 = t1374 * t1223 - t1405 * t1475;
	t1371 = -t1375 * t1223 + t1405 * t1476;
	t1235 = t1249 * t1398 + t1270 * t1415;
	t1248 = t1261 * t1336 - t1262 * t1335;
	t1227 = (t1235 * t1497 + t1260 * t1427) * t1289 + (-t1249 * t1411 - t1268 * t1271 - t1270 * t1412) * t1431 + (t1248 * t1284 - t1249 * t1359 + (t1268 * t1499 + t1270 * t1500) * t1276) * pkin(4);
	t1228 = t1270 * t1420 + (-t1248 * t1359 + t1260 * t1407 + t1417 * t1249 + (t1235 * t1496 + t1271 * t1500 + t1412 * t1499) * t1276) * pkin(4);
	t1217 = t1386 * t1233 + t1373 * t1234 + (((t1227 * t1422 + t1228 * t1424 + t1263 * t1388 + t1270 * t1389) * t1254 - (t1227 * t1424 + t1228 * t1423 + t1264 * t1388 + t1270 * t1390) * t1469) * t1245 + ((t1383 * t1254 + t1385 * t1469) * t1343 + (t1385 * t1254 - t1383 * t1469) * t1342) * t1416) * t1353;
	t1370 = qJD(2) * t1489 + t1374 * t1217 + t1371 * t1224 - t1435;
	t1250 = t1398 * t1412 + t1411 * t1415;
	t1229 = (t1250 * t1497 + t1269 * t1427) * t1289 + (-t1268 * t1291 - 0.2e1 * t1411 * t1412) * t1431 + (-t1511 - t1268 * t1284 + (t1268 * t1498 + t1411 * t1500) * t1276) * pkin(4);
	t1232 = t1411 * t1420 + (t1517 + t1269 * t1407 + t1417 * t1412 + (t1250 * t1496 + t1291 * t1500 + t1412 * t1498) * t1276) * pkin(4);
	t1218 = t1386 * t1236 + t1373 * t1237 + (((t1229 * t1422 + t1232 * t1424 + t1263 * t1387 + t1389 * t1411) * t1254 - (t1229 * t1424 + t1232 * t1423 + t1264 * t1387 + t1390 * t1411) * t1469) * t1245 + ((t1382 * t1254 + t1384 * t1469) * t1343 + (t1384 * t1254 - t1382 * t1469) * t1342) * t1416) * t1353;
	t1369 = t1374 * t1218 + t1371 * t1226 - t1435;
	t1222 = -t1413 * t1448 + (t1223 * t1470 + t1403) * t1347;
	t1221 = t1414 * t1348 * t1347 + (-t1347 * t1474 + t1413 * t1351) * t1344;
	t1220 = t1377 * t1348 + t1351 * t1403;
	t1219 = t1377 * t1344 - t1414 * t1448;
	t1 = [r_i_i_C(1) * t1222 + r_i_i_C(2) * t1221 - t1518 * t1347 + t1351 * t1378, t1370 * t1351 - t1520 * t1478, t1369 * t1351 - t1519 * t1478, r_i_i_C(1) * t1219 + r_i_i_C(2) * t1220; -r_i_i_C(1) * t1220 + r_i_i_C(2) * t1219 + t1347 * t1378 + t1518 * t1351, t1370 * t1347 + t1520 * t1477, t1369 * t1347 + t1519 * t1477, -r_i_i_C(1) * t1221 + r_i_i_C(2) * t1222; 0, t1375 * t1217 + t1372 * t1224 + t1324, t1375 * t1218 + t1372 * t1226 - t1436, (t1344 * t1476 - t1348 * t1473) * r_i_i_C(2) + (-qJD(4) * t1470 - t1344 * t1473) * r_i_i_C(1);];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:43
	% EndTime: 2020-04-15 18:49:53
	% DurationCPUTime: 3.05s
	% Computational Cost: add. (51099->97), mult. (81788->209), div. (2926->9), fcn. (51232->13), ass. (0->106)
	t397 = 2 * pkin(7);
	t325 = sin(qJ(2));
	t329 = cos(pkin(19));
	t385 = sin(pkin(19));
	t386 = cos(qJ(2));
	t323 = t325 * t385 + t386 * t329;
	t383 = pkin(1) * t323;
	t321 = t323 * qJD(2);
	t334 = pkin(1) ^ 2;
	t345 = -t325 * t329 + t386 * t385;
	t384 = pkin(1) * t345;
	t364 = t384 * t397 + t334;
	t391 = (-pkin(8) - pkin(3));
	t311 = ((pkin(7) - t391) * (pkin(7) + t391)) + t364;
	t390 = (-pkin(8) + pkin(3));
	t312 = ((pkin(7) - t390) * (pkin(7) + t390)) + t364;
	t392 = pkin(1) * pkin(7);
	t354 = (t311 + t312) * t392;
	t306 = t321 * t354;
	t373 = t312 * t311;
	t335 = sqrt(-t373);
	t309 = 0.1e1 / t335;
	t395 = t306 * t309;
	t302 = t383 * t395;
	t333 = pkin(7) ^ 2;
	t317 = t333 + t364;
	t313 = -pkin(3) ^ 2 + pkin(8) ^ 2 + t317;
	t318 = -pkin(7) - t384;
	t361 = t318 * t397;
	t357 = -t313 + t361;
	t320 = t345 * qJD(2);
	t371 = t320 * t335;
	t292 = -t302 + (t357 * t321 - t371) * pkin(1);
	t359 = t334 * t323 * t321;
	t355 = pkin(7) * t359;
	t370 = t321 * t335;
	t374 = t309 * t318;
	t293 = -t306 * t374 - 0.2e1 * t355 + (t320 * t313 - t370) * pkin(1);
	t314 = 0.1e1 / t317;
	t332 = 0.1e1 / pkin(8);
	t315 = 0.1e1 / t317 ^ 2;
	t360 = t315 * t392;
	t369 = t323 * t335;
	t304 = -pkin(1) * t369 - t318 * t313;
	t330 = cos(pkin(18));
	t366 = t330 * t304;
	t305 = t313 * t383 - t318 * t335;
	t327 = sin(pkin(18));
	t368 = t327 * t305;
	t342 = (t366 - t368) * t360;
	t387 = t330 / 0.2e1;
	t389 = -t327 / 0.2e1;
	t280 = ((t292 * t387 + t293 * t389) * t314 + t321 * t342) * t332;
	t372 = t314 * t332;
	t300 = (t366 / 0.2e1 - t368 / 0.2e1) * t372;
	t297 = 0.1e1 / t300 ^ 2;
	t396 = t280 * t297;
	t307 = t323 * t354;
	t394 = t309 * t307;
	t353 = t333 * t359;
	t393 = -t309 * (t320 * t354 - 0.4e1 * t353) - 0.1e1 / t373 * t306 * t394;
	t296 = 0.1e1 / t300;
	t388 = t327 / 0.2e1;
	t382 = t334 * pkin(7);
	t365 = t330 * t305;
	t375 = t304 * t327;
	t341 = (t365 + t375) * t360;
	t281 = ((t292 * t388 + t293 * t387) * t314 + t321 * t341) * t332;
	t301 = (t365 / 0.2e1 + t375 / 0.2e1) * t372;
	t299 = t301 ^ 2;
	t290 = t299 * t297 + 0.1e1;
	t288 = 0.1e1 / t290;
	t376 = t297 * t301;
	t277 = (-t280 * t376 + t281 * t296) * t288;
	t356 = -t313 - t394;
	t294 = (-t345 * t335 + (t356 + t361) * t323) * pkin(1);
	t295 = -t307 * t374 - 0.2e1 * t323 ^ 2 * t382 + (t313 * t345 - t369) * pkin(1);
	t284 = ((t294 * t387 + t295 * t389) * t314 + t323 * t342) * t332;
	t285 = ((t294 * t388 + t295 * t387) * t314 + t323 * t341) * t332;
	t278 = (-t284 * t376 + t285 * t296) * t288;
	t381 = t277 * t278;
	t326 = sin(qJ(1));
	t380 = t277 * t326;
	t328 = cos(qJ(1));
	t379 = t277 * t328;
	t377 = t296 * t396;
	t378 = (t281 * t376 - t299 * t377) / t290 ^ 2;
	t367 = t327 * t314;
	t363 = qJD(1) * t326;
	t362 = qJD(1) * t328;
	t358 = t314 * t387;
	t291 = atan2(t301, t300);
	t286 = sin(t291);
	t287 = cos(t291);
	t352 = r_i_i_C(1) * t286 + r_i_i_C(2) * t287;
	t351 = t314 * t315 * t353;
	t349 = -r_i_i_C(1) * t287 + r_i_i_C(2) * t286 + pkin(15);
	t348 = t327 * t351;
	t347 = t352 * t328;
	t346 = 0.4e1 * t330 * t351;
	t344 = t292 * t323 + t294 * t321 + t304 * t320;
	t343 = t293 * t323 + t295 * t321 + t305 * t320;
	t283 = 0.4e1 * t355 + (-t345 * t395 + t370 + t393 * t323 + (t357 - t394) * t320) * pkin(1);
	t282 = -t302 + t393 * t318 + (-0.4e1 * t320 * t323 - 0.2e1 * t321 * t345) * t382 + (t356 * t321 - t371) * pkin(1);
	t276 = (-t288 * t396 - 0.2e1 * t296 * t378) * t285 + (0.2e1 * t376 * t378 + (-t281 * t297 + 0.2e1 * t301 * t377) * t288) * t284 + ((t282 * t358 + t305 * t346 + t283 * t367 / 0.2e1 + 0.4e1 * t304 * t348) * t296 - (t283 * t358 + t304 * t346 - t282 * t367 / 0.2e1 - 0.4e1 * t305 * t348) * t376 + ((t343 * t296 - t344 * t376) * t330 + (t344 * t296 + t343 * t376) * t327) * t360) * t288 * t332;
	t1 = [t352 * t380 + (-r_i_i_C(3) * t326 + t349 * t328) * qJD(1), -t276 * t347 + ((t286 * t379 + t287 * t363) * r_i_i_C(2) + (t286 * t363 - t287 * t379) * r_i_i_C(1)) * t278, 0, 0; -t277 * t347 + (r_i_i_C(3) * t328 + t349 * t326) * qJD(1), -t352 * t326 * t276 + ((t286 * t380 - t287 * t362) * r_i_i_C(2) + (-t286 * t362 - t287 * t380) * r_i_i_C(1)) * t278, 0, 0; 0, (-t276 * t286 - t287 * t381) * r_i_i_C(2) + (t276 * t287 - t286 * t381) * r_i_i_C(1), 0, 0;];
	JaD_transl = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_transl_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:42
	% EndTime: 2020-04-15 18:49:53
	% DurationCPUTime: 3.06s
	% Computational Cost: add. (51152->100), mult. (81810->201), div. (2926->9), fcn. (51247->13), ass. (0->108)
	t333 = sin(qJ(2));
	t335 = cos(qJ(2));
	t337 = cos(pkin(19));
	t393 = sin(pkin(19));
	t328 = t333 * t393 + t335 * t337;
	t341 = pkin(1) ^ 2;
	t354 = -t333 * t337 + t335 * t393;
	t391 = pkin(7) * t354;
	t400 = -2 * pkin(1);
	t372 = -t391 * t400 + t341;
	t398 = -pkin(8) - pkin(3);
	t316 = (pkin(7) - t398) * (pkin(7) + t398) + t372;
	t397 = -pkin(8) + pkin(3);
	t317 = (pkin(7) - t397) * (pkin(7) + t397) + t372;
	t381 = t317 * t316;
	t342 = sqrt(-t381);
	t339 = pkin(7) ^ 2;
	t322 = t339 + t372;
	t318 = pkin(3) ^ 2 - pkin(8) ^ 2 + t322;
	t399 = pkin(1) * pkin(7);
	t363 = (t316 + t317) * t399;
	t312 = t328 * t363;
	t314 = 0.1e1 / t342;
	t404 = t314 * t312;
	t365 = -t318 - t404;
	t323 = pkin(1) + t391;
	t371 = t323 * t400;
	t299 = (-t354 * t342 + (t365 + t371) * t328) * pkin(7);
	t377 = t328 * t342;
	t382 = t314 * t323;
	t389 = t339 * pkin(1);
	t300 = t312 * t382 - 0.2e1 * t328 ^ 2 * t389 + (t318 * t354 - t377) * pkin(7);
	t319 = 0.1e1 / t322;
	t340 = 0.1e1 / pkin(3);
	t320 = 0.1e1 / t322 ^ 2;
	t370 = t320 * t399;
	t309 = -pkin(7) * t377 + t323 * t318;
	t332 = cos(pkin(23));
	t375 = t332 * t309;
	t390 = pkin(7) * t328;
	t310 = t318 * t390 + t323 * t342;
	t331 = sin(pkin(23));
	t376 = t331 * t310;
	t350 = (-t375 + t376) * t370;
	t395 = -t332 / 0.2e1;
	t396 = t331 / 0.2e1;
	t289 = ((t299 * t395 + t300 * t396) * t319 + t328 * t350) * t340;
	t374 = t332 * t310;
	t383 = t309 * t331;
	t349 = (t374 + t383) * t370;
	t394 = t332 / 0.2e1;
	t290 = ((t299 * t396 + t300 * t394) * t319 + t328 * t349) * t340;
	t380 = t319 * t340;
	t305 = (-t375 / 0.2e1 + t376 / 0.2e1) * t380;
	t302 = 0.1e1 / t305 ^ 2;
	t306 = (t374 / 0.2e1 + t383 / 0.2e1) * t380;
	t304 = t306 ^ 2;
	t296 = t304 * t302 + 0.1e1;
	t294 = 0.1e1 / t296;
	t301 = 0.1e1 / t305;
	t384 = t302 * t306;
	t283 = 0.1e1 + (-t384 * t289 + t290 * t301) * t294;
	t293 = qJ(2) + atan2(t306, t305);
	t291 = sin(t293);
	t292 = cos(t293);
	t360 = r_i_i_C(1) * t292 - r_i_i_C(2) * t291;
	t407 = qJD(1) * (pkin(1) * t335 + t283 * t360);
	t326 = t328 * qJD(2);
	t311 = t326 * t363;
	t405 = t311 * t314;
	t307 = t390 * t405;
	t366 = -t318 + t371;
	t325 = t354 * qJD(2);
	t379 = t325 * t342;
	t297 = -t307 + (t326 * t366 - t379) * pkin(7);
	t368 = t339 * t328 * t326;
	t364 = pkin(1) * t368;
	t378 = t326 * t342;
	t298 = t311 * t382 - 0.2e1 * t364 + (t325 * t318 - t378) * pkin(7);
	t285 = ((t297 * t395 + t298 * t396) * t319 + t326 * t350) * t340;
	t406 = t285 * t302;
	t286 = ((t297 * t396 + t298 * t394) * t319 + t326 * t349) * t340;
	t282 = qJD(2) + (-t285 * t384 + t286 * t301) * t294;
	t388 = pkin(1) * qJD(2);
	t369 = t335 * t388;
	t403 = t282 * t360 + t369;
	t361 = t341 * t368;
	t401 = 0.1e1 / t381 * t311 * t404 + t314 * (t325 * t363 - 0.4e1 * t361);
	t387 = t282 * t283;
	t385 = t301 * t406;
	t386 = (t286 * t384 - t304 * t385) / t296 ^ 2;
	t373 = t332 * t319;
	t367 = t319 * t396;
	t359 = t319 * t320 * t361;
	t358 = t333 * pkin(1) + r_i_i_C(1) * t291 + r_i_i_C(2) * t292 - pkin(16);
	t357 = t332 * t359;
	t287 = -t307 + t401 * t323 + (-0.4e1 * t325 * t328 - 0.2e1 * t326 * t354) * t389 + (t326 * t365 - t379) * pkin(7);
	t288 = 0.4e1 * t364 + (-t354 * t405 + t378 - t401 * t328 + (t366 - t404) * t325) * pkin(7);
	t351 = t298 * t328 + t300 * t326 + t310 * t325;
	t352 = t297 * t328 + t299 * t326 + t309 * t325;
	t353 = 0.4e1 * t331 * t359;
	t281 = (-t294 * t406 - 0.2e1 * t301 * t386) * t290 + (0.2e1 * t384 * t386 + (-t286 * t302 + 0.2e1 * t306 * t385) * t294) * t289 + ((t287 * t373 / 0.2e1 + 0.4e1 * t310 * t357 + t288 * t367 + t309 * t353) * t301 - (-t288 * t373 / 0.2e1 - 0.4e1 * t309 * t357 + t287 * t367 + t310 * t353) * t384 + ((t301 * t351 + t352 * t384) * t332 + (t301 * t352 - t351 * t384) * t331) * t370) * t294 * t340;
	t356 = t281 * t291 + t292 * t387;
	t355 = -t281 * t292 + t291 * t387;
	t348 = r_i_i_C(1) * t355 + r_i_i_C(2) * t356 + t333 * t388;
	t336 = cos(qJ(1));
	t334 = sin(qJ(1));
	t1 = [t403 * t334 + (-r_i_i_C(3) * t334 + t336 * t358) * qJD(1), t334 * t407 + t348 * t336, 0, 0; -t403 * t336 + (r_i_i_C(3) * t336 + t334 * t358) * qJD(1), t348 * t334 - t336 * t407, 0, 0; 0, -r_i_i_C(1) * t356 + r_i_i_C(2) * t355 - t369, 0, 0;];
	JaD_transl = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_transl_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:40
	% EndTime: 2020-04-15 18:49:48
	% DurationCPUTime: 2.15s
	% Computational Cost: add. (28222->88), mult. (43794->199), div. (974->9), fcn. (27296->11), ass. (0->96)
	t284 = (pkin(1) ^ 2);
	t349 = -4 * t284;
	t282 = pkin(6) ^ 2;
	t277 = cos(pkin(20));
	t279 = cos(qJ(3));
	t331 = sin(pkin(20));
	t338 = sin(qJ(3));
	t274 = t338 * t277 + t279 * t331;
	t334 = pkin(6) * t274;
	t343 = 2 * pkin(1);
	t317 = t334 * t343 + t282;
	t269 = t284 + t317;
	t267 = 0.1e1 / t269 ^ 2;
	t336 = pkin(1) * t267;
	t275 = -t279 * t277 + t338 * t331;
	t273 = t275 * qJD(3);
	t342 = pkin(1) * pkin(6);
	t314 = t273 * t342;
	t341 = (-pkin(2) - pkin(13));
	t263 = ((pkin(1) - t341) * (pkin(1) + t341)) + t317;
	t340 = (-pkin(2) + pkin(13));
	t264 = ((pkin(1) - t340) * (pkin(1) + t340)) + t317;
	t318 = t263 + t264;
	t258 = t318 * t314;
	t323 = t264 * t263;
	t285 = sqrt(-t323);
	t261 = 0.1e1 / t285;
	t348 = t258 * t261;
	t303 = t318 * t342;
	t259 = t275 * t303;
	t346 = t261 * t259;
	t265 = pkin(2) ^ 2 - pkin(13) ^ 2 + t269;
	t272 = t274 * qJD(3);
	t295 = t272 * t265 - t273 * t285;
	t321 = t275 * t282;
	t309 = t273 * t321;
	t270 = -pkin(1) - t334;
	t324 = t261 * t270;
	t241 = t295 * pkin(6) - t258 * t324 - t309 * t343;
	t320 = t275 * t285;
	t256 = -pkin(6) * t320 - t270 * t265;
	t253 = 0.1e1 / t256 ^ 2;
	t333 = pkin(6) * t275;
	t257 = t265 * t333 - t270 * t285;
	t255 = t257 ^ 2;
	t249 = t255 * t253 + 0.1e1;
	t325 = t253 * t257;
	t250 = t333 * t348;
	t322 = t272 * t285;
	t332 = t270 * pkin(1);
	t240 = -t250 + (-t322 - (t265 - 0.2e1 * t332) * t273) * pkin(6);
	t252 = 0.1e1 / t256;
	t326 = t240 * t252 * t253;
	t347 = (t241 * t325 - t255 * t326) / t249 ^ 2;
	t283 = 0.1e1 / pkin(2);
	t247 = 0.1e1 / t249;
	t335 = pkin(2) * t269;
	t312 = t247 * t335;
	t304 = t253 * t312;
	t345 = t283 * t257 * t304;
	t344 = -t261 * (t272 * t303 + t309 * t349) - 0.1e1 / t323 * t258 * t346;
	t266 = 0.1e1 / t269;
	t339 = t266 / 0.2e1;
	t337 = pkin(1) * t266;
	t311 = t252 * t335;
	t298 = t247 * t283 * t311;
	t306 = t267 * t314;
	t235 = qJD(2) + 0.2e1 * (t241 * t339 + t257 * t306) * t298 - 0.2e1 * (t240 * t339 + t256 * t306) * t345;
	t305 = t265 + t346;
	t242 = (-t274 * t285 + (-t305 + 0.2e1 * t332) * t275) * pkin(6);
	t307 = t333 * t336;
	t238 = (t242 * t339 + t256 * t307) * t283;
	t310 = t238 * t325;
	t243 = -t259 * t324 - 0.2e1 * t282 * t275 ^ 2 * pkin(1) + (t274 * t265 - t320) * pkin(6);
	t239 = (t243 * t339 + t257 * t307) * t283;
	t327 = t239 * t252;
	t236 = 0.2e1 * (-t310 + t327) * t312;
	t330 = t235 * t236;
	t278 = sin(qJ(1));
	t329 = t235 * t278;
	t280 = cos(qJ(1));
	t328 = t235 * t280;
	t316 = qJD(1) * t278;
	t315 = qJD(1) * t280;
	t313 = t266 * t267 * t349;
	t308 = t283 * t339;
	t246 = qJ(2) + atan2(t257 * t308, t256 * t308);
	t244 = sin(t246);
	t245 = cos(t246);
	t299 = r_i_i_C(1) * t245 - r_i_i_C(2) * t244;
	t294 = r_i_i_C(1) * t244 + r_i_i_C(2) * t245 - pkin(16);
	t293 = t299 * t280;
	t292 = (t244 * t315 + t245 * t329) * r_i_i_C(2) + (t244 * t329 - t245 * t315) * r_i_i_C(1);
	t291 = (-t244 * t316 + t245 * t328) * r_i_i_C(2) + (t244 * t328 + t245 * t316) * r_i_i_C(1);
	t234 = 0.2e1 * ((-0.4e1 * pkin(1) * t272 * t321 + t344 * t270 - t250) * t339 - (t257 * t275 * t313 + t274 * t337) * t282 * t273 + ((-t305 * t273 - t322) * t339 + (t241 * t275 + t243 * t273 + t257 * t272) * t336) * pkin(6)) * t298 - 0.2e1 * (-(t256 * t313 - 0.2e1 * t337) * t309 + ((-t274 * t348 + t344 * t275 - t295) * t339 + (t240 * t275 + t242 * t273) * t336 + (-t339 * t346 + (t256 * t267 + t270 * t266) * pkin(1)) * t272) * pkin(6)) * t345 - 0.2e1 * (0.2e1 * t327 - 0.2e1 * t310) * pkin(2) * t247 * t314 + 0.2e1 * (-t240 * t304 - 0.2e1 * t311 * t347) * t239 + 0.2e1 * (-t241 * t304 + 0.2e1 * (t247 * t326 + t253 * t347) * t257 * t335) * t238;
	t1 = [t299 * t329 + (-r_i_i_C(3) * t278 + t294 * t280) * qJD(1), t291, -t234 * t293 + t291 * t236, 0; -t235 * t293 + (r_i_i_C(3) * t280 + t294 * t278) * qJD(1), t292, -t299 * t278 * t234 + t292 * t236, 0; 0, -t299 * t235, (-t234 * t245 + t244 * t330) * r_i_i_C(2) + (-t234 * t244 - t245 * t330) * r_i_i_C(1), 0;];
	JaD_transl = t1;
elseif link_index == 9
	%% Symbolic Calculation
	% From jacobiaD_transl_9_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:49:43
	% EndTime: 2020-04-15 18:49:54
	% DurationCPUTime: 3.23s
	% Computational Cost: add. (48859->113), mult. (75043->245), div. (1933->14), fcn. (45818->14), ass. (0->130)
	t476 = -2 * pkin(1);
	t381 = cos(pkin(20));
	t383 = cos(qJ(3));
	t458 = sin(pkin(20));
	t465 = sin(qJ(3));
	t379 = -t383 * t381 + t465 * t458;
	t377 = t379 * qJD(3);
	t470 = pkin(1) * pkin(6);
	t436 = t377 * t470;
	t378 = t465 * t381 + t383 * t458;
	t460 = pkin(6) * t378;
	t435 = pkin(1) * t460;
	t375 = 0.2e1 * t435;
	t388 = pkin(6) ^ 2;
	t442 = t375 + t388;
	t469 = (-pkin(2) - pkin(13));
	t363 = ((pkin(1) - t469) * (pkin(1) + t469)) + t442;
	t468 = (-pkin(2) + pkin(13));
	t364 = ((pkin(1) - t468) * (pkin(1) + t468)) + t442;
	t443 = t363 + t364;
	t355 = t443 * t436;
	t389 = pkin(2) ^ 2;
	t391 = pkin(1) ^ 2;
	t441 = t388 + t391;
	t428 = -pkin(13) ^ 2 + t441;
	t369 = t375 + t389 + t428;
	t376 = t378 * qJD(3);
	t449 = t364 * t363;
	t392 = sqrt(-t449);
	t409 = t376 * t369 - t377 * t392;
	t446 = t379 * t388;
	t429 = t377 * t446;
	t361 = 0.1e1 / t392;
	t374 = -pkin(1) - t460;
	t450 = t361 * t374;
	t335 = pkin(6) * t409 - t355 * t450 + t429 * t476;
	t445 = t379 * t392;
	t353 = -pkin(6) * t445 - t374 * t369;
	t350 = 0.1e1 / t353 ^ 2;
	t354 = pkin(6) * t379 * t369 - t374 * t392;
	t352 = t354 ^ 2;
	t346 = t352 * t350 + 0.1e1;
	t453 = t350 * t354;
	t452 = t355 * t379;
	t347 = t361 * pkin(6) * t452;
	t447 = t376 * t392;
	t459 = t374 * pkin(1);
	t334 = -t347 + (-t447 - (t369 - 0.2e1 * t459) * t377) * pkin(6);
	t349 = 0.1e1 / t353;
	t454 = t334 * t349 * t350;
	t475 = (t335 * t453 - t352 * t454) / t346 ^ 2;
	t421 = t443 * t470;
	t356 = t379 * t421;
	t474 = t361 * t356;
	t390 = 0.1e1 / pkin(2);
	t344 = 0.1e1 / t346;
	t373 = t375 + t441;
	t461 = pkin(2) * t373;
	t415 = -0.2e1 * t344 * t350 * t461;
	t407 = t354 * t415;
	t473 = t390 * t407;
	t431 = t349 * t461;
	t416 = 0.2e1 * t344 * t431;
	t408 = t390 * t416;
	t371 = 0.1e1 / t373 ^ 2;
	t463 = pkin(1) * t371;
	t437 = pkin(6) * t463;
	t423 = t354 * t437;
	t425 = t353 * t437;
	t370 = 0.1e1 / t373;
	t467 = t370 / 0.2e1;
	t317 = qJD(2) + (t335 * t467 + t377 * t423) * t408 + (t334 * t467 + t377 * t425) * t473;
	t368 = t389 - t428 - 0.2e1 * t435;
	t366 = 0.1e1 / t368 ^ 2;
	t448 = t364 * t366;
	t359 = -t363 * t448 + 0.1e1;
	t357 = 0.1e1 / t359;
	t438 = t366 * t470;
	t424 = t392 * t438;
	t365 = 0.1e1 / t368;
	t451 = t361 * t365;
	t313 = (t355 * t451 - 0.2e1 * t377 * t424) * t357 + t317;
	t466 = t390 / 0.2e1;
	t427 = t370 * t466;
	t341 = qJ(2) + atan2(t354 * t427, t353 * t427);
	t426 = 0.1e1 / pkin(13) * t466;
	t333 = atan2(t392 * t426, t368 * t426) + t341;
	t331 = sin(t333);
	t332 = cos(t333);
	t412 = r_i_i_C(1) * t332 - r_i_i_C(2) * t331;
	t340 = cos(t341);
	t462 = pkin(2) * t340;
	t401 = t313 * t412 - t317 * t462;
	t422 = t369 + t474;
	t336 = (-t378 * t392 + (-t422 + 0.2e1 * t459) * t379) * pkin(6);
	t329 = (t336 * t467 + t379 * t425) * t390;
	t337 = -t356 * t450 + t388 * t379 ^ 2 * t476 + (t378 * t369 - t445) * pkin(6);
	t330 = (t337 * t467 + t379 * t423) * t390;
	t318 = t329 * t407 + t330 * t416;
	t414 = t379 * t424;
	t430 = t356 * t451;
	t314 = (-0.2e1 * t414 + t430) * t357 + t318;
	t455 = t318 * t340;
	t472 = -pkin(2) * t455 + t314 * t412;
	t471 = 0.2e1 * t361;
	t464 = pkin(1) * t370;
	t457 = t313 * t314;
	t339 = sin(t341);
	t456 = t317 * t339;
	t382 = sin(qJ(1));
	t440 = qJD(1) * t382;
	t384 = cos(qJ(1));
	t439 = qJD(1) * t384;
	t434 = -0.4e1 * t370 * t371 * t391;
	t420 = 0.4e1 / t449 * t355 * t474;
	t419 = t391 * t429;
	t418 = pkin(2) * t344 * t436;
	t411 = -r_i_i_C(1) * t331 - r_i_i_C(2) * t332;
	t410 = -t420 / 0.4e1;
	t406 = pkin(2) * t339 - pkin(16) + t411;
	t348 = t376 * t421 - 0.4e1 * t419;
	t310 = ((-0.4e1 * pkin(1) * t376 * t446 - t347 + (-t361 * t348 + t410) * t374) * t467 - (t354 * t379 * t434 + t378 * t464) * t388 * t377 + ((-t377 * t422 - t447) * t467 + (t335 * t379 + t337 * t377 + t354 * t376) * t463) * pkin(6)) * t408 + (-(t353 * t434 - 0.2e1 * t464) * t429 + ((t379 * t410 + (-t378 * t355 / 0.2e1 - t376 * t356 / 0.2e1 - t379 * t348 / 0.2e1) * t471 - t409) * t467 + (t374 * t376 * t370 + (t334 * t379 + t336 * t377 + t353 * t376) * t371) * pkin(1)) * pkin(6)) * t473 + (t334 * t415 - 0.4e1 * t349 * t418 - 0.4e1 * t431 * t475) * t330 + (0.4e1 * (t344 * t454 + t350 * t475) * t354 * t461 + t335 * t415 + 0.4e1 * t418 * t453) * t329;
	t367 = t365 * t366;
	t309 = -(-0.2e1 * t430 + 0.4e1 * t414) / t359 ^ 2 * (-t448 + (-0.2e1 * t364 * t367 - t366) * t363) * t436 + (t365 * t420 / 0.4e1 + (0.8e1 * t367 * t419 - 0.2e1 * t376 * t438) * t392 + (t348 * t365 / 0.2e1 + (-t356 * t377 - t452) * t438) * t471) * t357 + t310;
	t405 = t309 * t331 + t332 * t457;
	t404 = t309 * t332 - t331 * t457;
	t403 = -t412 + t462;
	t402 = pkin(2) * t456 + t313 * t411;
	t400 = -t405 * r_i_i_C(2) + t404 * r_i_i_C(1) + (-t310 * t340 + t318 * t456) * pkin(2);
	t1 = [-t401 * t382 + (-r_i_i_C(3) * t382 + t384 * t406) * qJD(1), t384 * t402 + t403 * t440, t400 * t384 - t472 * t440, 0; t401 * t384 + (r_i_i_C(3) * t384 + t382 * t406) * qJD(1), t382 * t402 - t403 * t439, t400 * t382 + t472 * t439, 0; 0, t401, t404 * r_i_i_C(2) + t405 * r_i_i_C(1) + (-t310 * t339 - t317 * t455) * pkin(2), 0;];
	JaD_transl = t1;
elseif link_index == 10
	%% Symbolic Calculation
	% From jacobiaD_transl_10_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-15 18:50:55
	% EndTime: 2020-04-15 18:52:59
	% DurationCPUTime: 73.49s
	% Computational Cost: add. (2041495->263), mult. (3177788->557), div. (119757->18), fcn. (1988155->22), ass. (0->256)
	t808 = pkin(7) ^ 2;
	t812 = pkin(1) ^ 2;
	t801 = sin(qJ(2));
	t804 = cos(qJ(2));
	t806 = cos(pkin(19));
	t946 = sin(pkin(19));
	t834 = -t801 * t806 + t804 * t946;
	t939 = pkin(7) * t834;
	t965 = -2 * pkin(1);
	t898 = -t939 * t965 + t812;
	t787 = t808 + t898;
	t784 = 0.1e1 / t787;
	t793 = t801 * t946 + t804 * t806;
	t791 = t793 * qJD(2);
	t811 = 0.1e1 / pkin(3);
	t783 = pkin(3) ^ 2 - pkin(8) ^ 2 + t787;
	t788 = pkin(1) + t939;
	t962 = -pkin(8) - pkin(3);
	t781 = (pkin(7) - t962) * (pkin(7) + t962) + t898;
	t961 = -pkin(8) + pkin(3);
	t782 = (pkin(7) - t961) * (pkin(7) + t961) + t898;
	t919 = t782 * t781;
	t814 = sqrt(-t919);
	t915 = t793 * t814;
	t774 = -pkin(7) * t915 + t783 * t788;
	t803 = cos(qJ(3));
	t901 = t803 * t774;
	t938 = pkin(7) * t793;
	t775 = t783 * t938 + t788 * t814;
	t800 = sin(qJ(3));
	t906 = t800 * t775;
	t851 = -t901 + t906;
	t785 = 0.1e1 / t787 ^ 2;
	t963 = pkin(1) * pkin(7);
	t893 = t785 * t963;
	t827 = t851 * t893;
	t900 = t803 * t775;
	t907 = t800 * t774;
	t837 = t907 / 0.2e1 + t900 / 0.2e1;
	t847 = 0.2e1 * (t781 + t782) * t963;
	t776 = t791 * t847;
	t779 = 0.1e1 / t814;
	t952 = -t779 / 0.2e1;
	t768 = t776 * t938 * t952;
	t894 = t788 * t965;
	t876 = -t783 + t894;
	t790 = t834 * qJD(2);
	t917 = t790 * t814;
	t755 = t768 + (t876 * t791 - t917) * pkin(7);
	t905 = t803 * t755;
	t972 = t791 * t808;
	t884 = t793 * t972;
	t866 = pkin(1) * t884;
	t951 = t779 / 0.2e1;
	t879 = t788 * t951;
	t916 = t791 * t814;
	t756 = t776 * t879 - 0.2e1 * t866 + (t790 * t783 - t916) * pkin(7);
	t910 = t800 * t756;
	t719 = (t791 * t827 + (-t905 / 0.2e1 + t910 / 0.2e1 + t837 * qJD(3)) * t784) * t811;
	t835 = t901 / 0.2e1 - t906 / 0.2e1;
	t850 = t900 + t907;
	t904 = t803 * t756;
	t911 = t800 * t755;
	t720 = (t850 * t791 * t893 + (t911 / 0.2e1 + t904 / 0.2e1 + t835 * qJD(3)) * t784) * t811;
	t797 = pkin(23) + pkin(22);
	t795 = sin(t797);
	t796 = cos(t797);
	t712 = t719 * t795 - t720 * t796;
	t810 = pkin(4) ^ 2;
	t809 = pkin(5) ^ 2;
	t918 = t784 * t811;
	t766 = t837 * t918;
	t767 = t835 * t918;
	t742 = t766 * t796 + t767 * t795;
	t942 = pkin(5) * t742;
	t964 = -2 * pkin(4);
	t899 = -t942 * t964 + t809;
	t738 = t810 + t899;
	t734 = pkin(9) ^ 2 - pkin(11) ^ 2 + t738;
	t960 = -pkin(9) - pkin(11);
	t732 = (pkin(4) - t960) * (pkin(4) + t960) + t899;
	t959 = -pkin(9) + pkin(11);
	t733 = (pkin(4) - t959) * (pkin(4) + t959) + t899;
	t925 = t733 * t732;
	t813 = sqrt(-t925);
	t870 = t796 * t719 + t720 * t795;
	t974 = -t712 * t813 + t870 * t734;
	t895 = 2 * pkin(4);
	t846 = pkin(5) * (t732 + t733) * t895;
	t685 = t712 * t846;
	t869 = t766 * t795 - t796 * t767;
	t877 = t869 * t809 * t964;
	t739 = -pkin(4) - t942;
	t722 = 0.1e1 / t813;
	t955 = -t722 / 0.2e1;
	t882 = t739 * t955;
	t672 = t974 * pkin(5) + t685 * t882 + t712 * t877;
	t941 = pkin(5) * t869;
	t705 = -t734 * t739 - t813 * t941;
	t702 = 0.1e1 / t705 ^ 2;
	t706 = t734 * t941 - t739 * t813;
	t704 = t706 ^ 2;
	t688 = t702 * t704 + 0.1e1;
	t928 = t702 * t706;
	t875 = t739 * t895 - t734;
	t953 = -t869 / 0.2e1;
	t881 = t722 * t953;
	t970 = t870 * t813;
	t671 = (t685 * t881 + t875 * t712 - t970) * pkin(5);
	t701 = 0.1e1 / t705;
	t931 = t671 * t701 * t702;
	t973 = 0.2e1 * (t672 * t928 - t704 * t931) / t688 ^ 2;
	t686 = 0.1e1 / t688;
	t864 = pkin(4) * pkin(5) * pkin(9) * t686 * t712;
	t937 = pkin(9) * t738;
	t890 = t686 * t937;
	t868 = t702 * t890;
	t889 = t701 * t937;
	t969 = t671 * t868 + 0.2e1 * t701 * t864 + t889 * t973;
	t799 = cos(pkin(23));
	t913 = t799 * t774;
	t798 = sin(pkin(23));
	t914 = t798 * t775;
	t853 = -t913 + t914;
	t829 = t853 * t893;
	t949 = -t799 / 0.2e1;
	t950 = t798 / 0.2e1;
	t724 = ((t755 * t949 + t756 * t950) * t784 + t791 * t829) * t811;
	t912 = t799 * t775;
	t920 = t774 * t798;
	t852 = t912 + t920;
	t828 = t852 * t893;
	t948 = t799 / 0.2e1;
	t725 = ((t755 * t950 + t756 * t948) * t784 + t791 * t828) * t811;
	t764 = (-t913 / 0.2e1 + t914 / 0.2e1) * t918;
	t761 = 0.1e1 / t764 ^ 2;
	t765 = (t912 / 0.2e1 + t920 / 0.2e1) * t918;
	t763 = t765 ^ 2;
	t751 = t761 * t763 + 0.1e1;
	t749 = 0.1e1 / t751;
	t921 = t761 * t765;
	t886 = t749 * t921;
	t760 = 0.1e1 / t764;
	t923 = t749 * t760;
	t697 = t724 * t886 - t725 * t923 - qJD(2);
	t807 = 0.1e1 / pkin(9);
	t888 = t706 * t937;
	t867 = t702 * t888;
	t858 = t686 * t867;
	t848 = 0.2e1 * t858;
	t859 = t686 * t807 * t889;
	t849 = -0.2e1 * t859;
	t736 = 0.1e1 / t738 ^ 2;
	t943 = pkin(4) * t736;
	t892 = pkin(5) * t943;
	t873 = t706 * t892;
	t874 = t705 * t892;
	t735 = 0.1e1 / t738;
	t954 = t735 / 0.2e1;
	t662 = (t672 * t954 + t712 * t873) * t849 + (t671 * t954 + t712 * t874) * t807 * t848 + t697;
	t748 = pkin(22) - atan2(t765, t764) - qJ(2);
	t747 = cos(t748);
	t880 = t807 * t954;
	t684 = -atan2(t706 * t880, t705 * t880) + t748;
	t682 = sin(t684);
	t683 = cos(t684);
	t860 = r_i_i_C(1) * t683 + r_i_i_C(2) * t682;
	t936 = pkin(1) * qJD(2);
	t887 = t804 * t936;
	t968 = -pkin(4) * t697 * t747 + t860 * t662 + t887;
	t832 = t850 * t793;
	t777 = t793 * t847;
	t945 = pkin(1) * t808;
	t758 = t777 * t879 - 0.2e1 * t793 ^ 2 * t945 + (t783 * t834 - t915) * pkin(7);
	t902 = t803 * t758;
	t862 = t777 * t952 - t783;
	t757 = (-t834 * t814 + (t862 + t894) * t793) * pkin(7);
	t909 = t800 * t757;
	t838 = t909 / 0.2e1 + t902 / 0.2e1;
	t730 = (-t838 * t784 - t832 * t893) * t811;
	t903 = t803 * t757;
	t908 = t800 * t758;
	t836 = -t903 / 0.2e1 + t908 / 0.2e1;
	t731 = (t836 * t784 + t793 * t827) * t811;
	t716 = t730 * t796 + t731 * t795;
	t690 = t716 * t846;
	t717 = -t730 * t795 + t731 * t796;
	t673 = (t690 * t881 + t875 * t716 - t717 * t813) * pkin(5);
	t669 = (t673 * t954 + t716 * t874) * t807;
	t674 = t690 * t882 + t716 * t877 + (-t716 * t813 + t717 * t734) * pkin(5);
	t670 = (t674 * t954 + t716 * t873) * t807;
	t728 = ((t757 * t949 + t758 * t950) * t784 + t793 * t829) * t811;
	t729 = ((t757 * t950 + t758 * t948) * t784 + t793 * t828) * t811;
	t698 = t728 * t886 - t729 * t923 - 0.1e1;
	t861 = 0.2e1 * t890;
	t663 = (t669 * t928 - t670 * t701) * t861 + t698;
	t930 = t698 * t747;
	t967 = pkin(1) * t804 - pkin(4) * t930 + t860 * t663;
	t966 = -0.2e1 * t686 * t888 * t931 + t672 * t868 - 0.2e1 * t864 * t928 - t867 * t973;
	t958 = -t685 / 0.2e1;
	t957 = -t690 / 0.2e1;
	t713 = t869 * t846;
	t956 = -t713 / 0.2e1;
	t947 = -t803 / 0.2e1;
	t944 = pkin(4) * t735;
	t940 = pkin(5) * t807;
	t935 = t662 * t682;
	t934 = t662 * t683;
	t802 = sin(qJ(1));
	t933 = t662 * t802;
	t805 = cos(qJ(1));
	t932 = t662 * t805;
	t926 = t724 * t760 * t761;
	t929 = 0.2e1 * (t725 * t921 - t763 * t926) / t751 ^ 2;
	t927 = t712 * t809;
	t924 = t735 * t739;
	t922 = t749 * t761;
	t897 = qJD(1) * t802;
	t896 = qJD(1) * t805;
	t891 = 0.4e1 * t735 * t736 * t810;
	t885 = t779 / t919 * t777 * t776;
	t883 = -t685 * t722 / t925 / 0.4e1;
	t878 = t809 * t895;
	t872 = t706 * t891;
	t871 = -0.8e1 * t810 * t927;
	t865 = t812 * t884;
	t863 = t869 * t883;
	t746 = sin(t748);
	t845 = pkin(1) * t801 - pkin(4) * t746 + r_i_i_C(1) * t682 - r_i_i_C(2) * t683 - pkin(16);
	t680 = (t713 * t881 - t742 * t813 + t869 * t875) * pkin(5);
	t675 = (t680 * t954 + t869 * t874) * t807;
	t681 = t713 * t882 + t869 * t877 + (t734 * t742 - t813 * t869) * pkin(5);
	t676 = (t681 * t954 + t869 * t873) * t807;
	t679 = t846 * t870 + t869 * t871;
	t826 = t807 * (t705 * t891 + 0.2e1 * t944) * t927;
	t661 = -0.2e1 * (((t679 * t955 + t713 * t883) * t739 - 0.2e1 * t869 * t870 * t878) * t954 + (-t742 * t944 + t869 * t872) * t927 + ((-t970 - t712 * t734 + (t712 * t956 + t869 * t958) * t722) * t954 + (t672 * t869 + t681 * t712 + t706 * t870) * t943) * pkin(5)) * t859 + 0.2e1 * (t869 * t826 + ((t713 * t863 + (t679 * t953 + t742 * t958 + t870 * t956) * t722 - t974) * t954 + (t870 * t924 + (t671 * t869 + t680 * t712 + t705 * t870) * t736) * pkin(4)) * t940) * t858 + 0.2e1 * t969 * t676 + 0.2e1 * t966 * t675;
	t842 = t661 * t860;
	t773 = t790 * t847 - 0.8e1 * t865;
	t726 = t768 + (t885 / 0.4e1 + t773 * t951) * t788 + (-0.4e1 * t790 * t793 - 0.2e1 * t791 * t834) * t945 + (t862 * t791 - t917) * pkin(7);
	t727 = 0.4e1 * t866 + (t916 - t793 * t885 / 0.4e1 + t876 * t790 + (-t834 * t776 / 0.2e1 - t790 * t777 / 0.2e1 - t793 * t773 / 0.2e1) * t779) * pkin(7);
	t830 = t756 * t793 + t758 * t791 + t775 * t790;
	t831 = t755 * t793 + t757 * t791 + t774 * t790;
	t786 = t784 * t785;
	t833 = 0.4e1 * t786 * t865;
	t667 = (-(t852 * t833 + (t726 * t948 + t727 * t950) * t784 + (t831 * t798 + t830 * t799) * t893) * t923 + (t853 * t833 + (t726 * t950 + t727 * t949) * t784 + (t830 * t798 - t831 * t799) * t893) * t886) * t811 + (t724 * t922 + t760 * t929) * t729 + (-0.2e1 * t749 * t765 * t926 + t725 * t922 - t921 * t929) * t728;
	t691 = (t851 * t833 + (t727 * t947 + t800 * t726 / 0.2e1 + t838 * qJD(3)) * t784 + ((-t903 + t908) * t791 + t851 * t790 + (t850 * qJD(3) - t905 + t910) * t793) * t893) * t811;
	t692 = (-0.4e1 * t812 * t786 * t832 * t972 + (-t800 * t727 / 0.2e1 + t726 * t947 + t836 * qJD(3)) * t784 + ((-t902 - t909) * t791 - t850 * t790 + (t851 * qJD(3) - t904 - t911) * t793) * t893) * t811;
	t678 = t691 * t795 + t692 * t796;
	t668 = t678 * t846 + t716 * t871;
	t677 = t691 * t796 - t692 * t795;
	t660 = (((t668 * t955 + t690 * t883) * t739 + (-t678 * t869 - t716 * t870) * t878) * t954 + (t716 * t872 - t717 * t944) * t927 + ((t677 * t734 - t678 * t813 + (t712 * t957 + t716 * t958) * t722) * t954 + (t672 * t716 + t674 * t712 + t678 * t706) * t943) * pkin(5)) * t849 + (t716 * t826 + ((-t677 * t813 + t690 * t863 - t678 * t734 + (t668 * t953 + t717 * t958 + t870 * t957) * t722) * t954 + (t678 * t924 + (t671 * t716 + t673 * t712 + t678 * t705) * t736) * pkin(4)) * t940) * t848 + t667 + 0.2e1 * t669 * t966 + 0.2e1 * t670 * t969;
	t840 = t660 * t682 + t663 * t934;
	t839 = -t660 * t683 + t663 * t935;
	t825 = t839 * r_i_i_C(1) - t840 * r_i_i_C(2) + t801 * t936 + (-t697 * t698 * t746 + t667 * t747) * pkin(4);
	t665 = (t675 * t928 - t676 * t701) * t861;
	t1 = [t968 * t802 + (-r_i_i_C(3) * t802 + t845 * t805) * qJD(1), t825 * t805 + t897 * t967, -t805 * t842 + ((t682 * t897 - t683 * t932) * r_i_i_C(2) + (t682 * t932 + t683 * t897) * r_i_i_C(1)) * t665, 0; -t968 * t805 + (r_i_i_C(3) * t805 + t845 * t802) * qJD(1), t825 * t802 - t896 * t967, -t802 * t842 + ((-t682 * t896 - t683 * t933) * r_i_i_C(2) + (t682 * t933 - t683 * t896) * r_i_i_C(1)) * t665, 0; 0, -t887 + t839 * r_i_i_C(2) + t840 * r_i_i_C(1) + (-t667 * t746 - t697 * t930) * pkin(4), (-t661 * t683 + t665 * t935) * r_i_i_C(2) + (t661 * t682 + t665 * t934) * r_i_i_C(1), 0;];
	JaD_transl = t1;
end