% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% hybBKspatial
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED,L1,L2]';
% 
% Output:
% T_c_mdh [4x4x(10+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   9:  mdh base (link 0) -> mdh frame (9-1), link (9-1)
%   ...
%   10+1:  mdh base (link 0) -> mdh frame (10)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-11 19:31
% Revision: 6ae2d958c5b90587a0d08029b131cb7b66342a68 (2020-04-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = hybBKspatial_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'hybBKspatial_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'hybBKspatial_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-11 19:21:12
% EndTime: 2020-04-11 19:21:19
% DurationCPUTime: 6.61s
% Computational Cost: add. (68233->449), mult. (192277->570), div. (810->5), fcn. (26012->14), ass. (0->260)
t329 = 4 * pkin(3);
t135 = cos(qJ(3));
t168 = 0.1e1 / pkin(4);
t172 = pkin(3) ^ 2;
t176 = (pkin(2) ^ 2);
t178 = (pkin(1) ^ 2);
t268 = (t176 + t178);
t228 = t172 + t268;
t83 = pkin(3) * t135;
t264 = 0.2e1 * t83;
t129 = sin(qJ(3));
t130 = sin(qJ(2));
t294 = t129 * t130;
t249 = pkin(2) * t294;
t216 = pkin(3) * t249;
t56 = -0.2e1 * t216;
t136 = cos(qJ(2));
t315 = pkin(2) * t136;
t65 = pkin(1) - t315;
t263 = pkin(1) * t315;
t68 = -0.2e1 * t263;
t37 = 0.1e1 / (t264 * t65 + t228 + t56 + t68);
t307 = t168 * t37;
t317 = t129 / 0.2e1;
t154 = 3 * t176;
t151 = 3 * t172;
t167 = (pkin(4) ^ 2);
t164 = (pkin(5) ^ 2);
t226 = -t164 + t268;
t201 = t151 + t167 + t226;
t205 = -pkin(3) + t249;
t209 = -0.4e1 * t216;
t96 = t136 ^ 2;
t304 = t176 * t96;
t258 = 0.2e1 * t304;
t293 = t130 * t135;
t308 = t135 * t65;
t93 = t135 ^ 2;
t325 = -0.2e1 * t93;
t155 = -3 * t176;
t170 = t172 ^ 2;
t206 = t172 + t226;
t200 = -t167 + t206;
t199 = t68 + t200;
t272 = t164 - t178;
t229 = t167 + t272;
t305 = t172 * t93;
t260 = -0.4e1 * t305;
t270 = t172 - t178;
t318 = -pkin(4) + pkin(5);
t319 = -pkin(4) - pkin(5);
t323 = 2 * t172;
t269 = -t176 + t178;
t44 = t68 + t258 + t269;
t34 = sqrt(t44 * t260 + 0.4e1 * t270 * t304 + 0.4e1 * t200 * t263 - t170 + ((t155 + t229) * t323) - (t178 + (pkin(2) - t319) * (pkin(2) + t319)) * (t178 + (pkin(2) - t318) * (pkin(2) + t318)) + (-(t56 + t199) * t308 + t199 * t249) * t329);
t86 = t172 + t178;
t227 = -t164 + t86;
t59 = t167 + t227;
t32 = (pkin(2) * t293 + t129 * t65) * t34 - (t201 + t68 + t209) * t308 + t205 * t68 + t201 * t249 + (t44 * t325 - t154 + t258 - t59) * pkin(3);
t43 = t167 + t68 + t206;
t84 = pkin(2) * t130;
t33 = (-t205 + t308) * t34 + (t264 * t44 + t43 * t65) * t129 + (t135 * t43 + (0.4e1 * t93 - 0.2e1) * t65 * pkin(3)) * t84;
t328 = (t135 * t33 / 0.2e1 + t32 * t317) * t307;
t107 = -t164 / 0.3e1;
t327 = t107 - t167 / 0.3e1;
t163 = t164 ^ 2;
t166 = t167 ^ 2;
t326 = -t163 / 0.6e1 + t166 / 0.6e1;
t324 = 4 * t170;
t150 = 6 * t172;
t322 = 2 * t176;
t161 = 2 * t178;
t183 = t176 ^ 2;
t153 = 5 * t183;
t321 = -t34 / 0.2e1;
t320 = t34 / 0.2e1;
t316 = pkin(1) * t135;
t82 = pkin(3) * t129;
t105 = -t164 / 0.6e1;
t106 = -t164 / 0.4e1;
t120 = 0.4e1 / 0.3e1 * t172;
t121 = t172 / 0.3e1;
t122 = t172 / 0.2e1;
t142 = 15 * t170;
t143 = 15 * t172;
t144 = 10 * t172;
t145 = -2 * t164;
t146 = -5 * t164;
t147 = 7 * t170;
t148 = 5 * t170;
t149 = 7 * t172;
t177 = t178 ^ 2;
t157 = 3 * t177;
t158 = 8 * t178;
t159 = 4 * t178;
t182 = pkin(2) * t176;
t173 = t182 ^ 2;
t179 = pkin(1) * t178;
t186 = pkin(3) * t172;
t271 = t170 + t177;
t276 = t161 - t164;
t285 = t178 * t164;
t42 = (t276 * t172) + t271 - t285 - t326;
t196 = t183 + t42;
t124 = t176 / 0.2e1;
t279 = t124 + t178;
t197 = -t216 + t279;
t108 = -t164 / 0.2e1;
t58 = t108 + t228;
t202 = t58 * t209;
t210 = -0.6e1 * t216;
t283 = t163 / 0.2e1 - t166 / 0.2e1;
t212 = t157 - (3 * t285) + t283;
t110 = -0.3e1 / 0.2e1 * t164;
t160 = 3 * t178;
t280 = t110 + t160;
t296 = t173 + t86 * ((t110 + t161) * t172 - 0.3e1 / 0.2e1 * t285 + t271 + t283);
t80 = 0.10e2 / 0.3e1 * t172;
t203 = ((t80 + t276) * t176 + t196) * t210 + (t142 + ((-9 * t164 + 18 * t178) * t172) + t212) * t176 + (t143 + t280) * t183 + t296;
t119 = -0.2e1 / 0.3e1 * t167;
t109 = -0.2e1 / 0.3e1 * t164;
t232 = t109 + t86;
t277 = t144 + t161;
t281 = t109 + t119;
t273 = t164 + t167;
t73 = t160 - t273;
t297 = t73 * t172;
t204 = -(t153 + ((5 * t172 + t73) * t322) + t86 * (t119 + t232)) * t82 + (t183 + (t277 + t281) * t176 + t148 + (2 * t297) + t178 * (t178 + t281)) * t84;
t235 = t178 + t327;
t207 = t172 + t235;
t282 = t105 - t167 / 0.6e1;
t236 = t178 + t282;
t208 = t124 + t236;
t275 = t163 - t166;
t211 = 6 * t177 - 6 * t285 + t275;
t114 = 0.2e1 / 0.3e1 * t167;
t233 = t109 + t114 + t161;
t295 = t183 + t86 * (t114 + t232);
t115 = t167 / 0.3e1;
t49 = t107 + t115 + t228;
t213 = t49 * t209 + t295 + (t150 + t233) * t176;
t247 = t186 * t84;
t92 = t135 * t93;
t214 = t92 * t247;
t306 = t170 * t93 ^ 2;
t215 = t306 * t84;
t300 = t186 * t92;
t250 = 0.16e2 * t300;
t221 = pkin(1) * t250;
t222 = 0.20e2 / 0.3e1 * t172;
t252 = pkin(1) * t300;
t225 = 0.8e1 * t252;
t274 = -t164 + t167;
t230 = t160 + t274;
t231 = t151 + t268;
t234 = t108 - t167 / 0.2e1 + t178;
t237 = t164 / 0.3e1 + t115 + t161;
t238 = 0.2e1 / 0.3e1 * t164 + t114 + t159;
t239 = 0.4e1 / 0.3e1 * t164 + 0.4e1 / 0.3e1 * t167 - (2 * t178);
t262 = pkin(1) * t83;
t240 = 0.6e1 * t262;
t241 = 0.4e1 * t262;
t287 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t242 = t129 * t287;
t245 = -t82 / 0.2e1;
t248 = t172 * t84;
t251 = 0.12e2 * t305;
t302 = t182 * t136 * t96;
t257 = 0.8e1 * t302;
t259 = 0.4e1 * t305;
t261 = 0.8e1 * t306;
t265 = 0.4e1 * pkin(1);
t266 = t177 + t183;
t267 = t177 - t170;
t278 = 0.4e1 / 0.7e1 * t178 - t164 / 0.7e1;
t284 = t178 * t172;
t288 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t301 = t183 * t96 ^ 2;
t303 = t178 * t273;
t309 = t129 * (t154 + t86);
t79 = t86 ^ 2;
t310 = t79 * (-t167 + t227);
t311 = (-t129 * t186 + t248) * t93;
t78 = t178 - t176 / 0.3e1;
t45 = t78 * t56;
t50 = t65 + t83;
t89 = t155 + t178;
t53 = t89 * t225;
t54 = t231 * t84;
t55 = 10 * t297;
t66 = pkin(1) + t83;
t67 = 0.2e1 * t262;
t75 = (t159 + t164) * t172;
t77 = -t172 / 0.3e1 + t178;
t81 = -30 * t164 + 60 * t178;
t88 = -3 * t172 + t178;
t314 = ((-0.24e2 * (0.4e1 / 0.3e1 * t305 + t67 + t77) * t301 * t82 - 0.12e2 * (-0.8e1 / 0.3e1 * t215 + ((t120 + t208) * t84 - (0.4e1 / 0.3e1 * t176 + t122 + t236) * t82) * t259 + (-(t176 * t270) - 0.5e1 / 0.3e1 * t170 + t237 * t172 + t178 * t235) * t84 + (-t183 + (-t222 + t238) * t176 - (3 * t170) + t239 * t172 + t177) * t245 + (-t129 * t170 * t92 + ((t172 + t208) * t84 + (t322 - t270) * t245) * t83) * t265) * t304 + 0.24e2 * t78 * t215 + ((t154 + 0.3e1 / 0.2e1 * t172 + t234) * t84 + t89 * t82 / 0.2e1) * t221 - 0.6e1 * ((-(3 * t183) + (-t222 + t239) * t176 + t238 * t172 + t267) * t84 - 0.2e1 * (-0.5e1 / 0.3e1 * t183 + (-t172 + t237) * t176 + t178 * t207) * t82) * t305 - 0.6e1 * t204 * t262 - (t173 + ((21 * t172 + t73) * t183) + ((t157 + 35 * t170 + t55 - 2 * t303) * t176) + (t86 * (t147 + (t146 + t158 - 5 * t167) * t172 - t178 * t229))) * t84 + (0.7e1 * t173 + ((t149 + t73) * t153) + ((21 * t170 + 9 * t177 + t55 - 6 * t303) * t176) + t310) * t82) * t34 + t50 * (0.16e2 * (t261 + t221 + (-8 * t170 + 12 * t284) * t93 + (-0.12e2 * pkin(1) * t186 + t179 * t329) * t135 - (6 * t284) + t271) * t301 + 0.24e2 * ((t178 - 0.2e1 / 0.3e1 * t176) * t261 + 0.14e2 * (-0.32e2 / 0.21e2 * (t178 + t176 / 0.4e1 + t172 / 0.4e1 - t164 / 0.8e1) * t216 + t183 / 0.7e1 + (0.16e2 / 0.21e2 * t172 + t278) * t176 + t170 / 0.7e1 + t278 * t172 + t177 - 0.3e1 / 0.7e1 * t285 + t163 / 0.42e2 - t166 / 0.42e2) * t305 + t77 * t202 - (t270 * t183) + (-0.10e2 / 0.3e1 * t170 + (2 * t177) - t285 + t75) * t176 + t42 * t288 + ((-0.2e1 / 0.3e1 * t216 + t178 + t122 + t106) * t250 + 0.6e1 * (-0.8e1 / 0.3e1 * (t106 + t121 + t279) * t216 + t183 / 0.3e1 + (0.4e1 / 0.3e1 * t178 + t120 + t107) * t176 + t177 + 0.2e1 / 0.3e1 * t284 - 0.2e1 / 0.3e1 * t285 - t170 / 0.3e1 + t163 / 0.18e2 - t166 / 0.18e2) * t83) * pkin(1)) * t304 + 0.16e2 * (-6 * t178 * t176 + t266) * t306 + 0.32e2 * (t287 * t56 + t58 * t89) * t252 + 0.24e2 * (t78 * t202 - t173 + (-t80 + t272) * t183 + (t75 + t267 + t326) * t176 + t42 * t178) * t305 + 0.8e1 * t203 * t262 - 0.8e1 * ((t149 + t280) * t183 + (t147 + ((t146 + 10 * t178) * t172) + t212) * t176 + t296) * t216 + (t183 ^ 2) + (t145 + t159 + 28 * t172) * t173 + ((t172 * t81 + 70 * t170 + t211) * t183) + ((t211 * t150) + (t275 * t161) - (6 * t177 * t164) + (t81 * t170) + 0.4e1 * t179 ^ 2 + (28 * t186 ^ 2)) * t176 + (t59 * t310)) + (((t88 * t84 + 0.4e1 * t311 + 0.2e1 * ((t84 + 0.2e1 * t82) * t316 + t129 * (0.3e1 / 0.2e1 * t176 + t151 + t234)) * pkin(3)) * t257 + 0.6e1 * ((0.2e1 * (t122 + t176 + t282) * t84 + pkin(3) * t242) * t260 + (-0.8e1 * t214 + 0.4e1 * ((t231 + t327) * t84 - (t154 + t207) * t82) * t83) * pkin(1) + t204) * t315) * t34 + t50 * (-0.32e2 * (t225 + (-0.4e1 * t129 * t247 + t324 + ((4 * t176 + t145 + t158) * t172)) * t93 + (t106 - t172 + t197) * t241 + t56 * t288 + t88 * t58) * t302 - 0.8e1 * (t53 + (t287 * t58 + t45) * t251 + (t202 + ((t150 + t276) * t176) + t196) * t240 + t203) * t315)) * t66) / ((-0.4e1 * (0.2e1 * t311 + (t323 + t176) * t82 + (-t270 + t67) * t84) * t304 + 0.8e1 * pkin(1) * t214 + ((pkin(2) * t324 + 0.8e1 * t172 * t182) * t130 + 0.4e1 * t186 * t242) * t93 - 0.4e1 * (-pkin(3) * t309 + t54) * t262 - (t277 * t176 + t148 + t266 + 6 * t284) * t84 + (t153 + (t144 + 6 * t178) * t176 + t79) * t82) * t34 + t50 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t216 + t178 + t176 / 0.3e1 + t121 + t167 / 0.9e1 - t164 / 0.9e1) * t305 + t77 * t56 + t49 * t288 + (t300 + (t167 / 0.6e1 + t105 + t197) * t83) * t265) * t304 + t53 + (t287 * t49 + t45) * t251 + t213 * t240 + ((t80 + t233) * t176 + t295) * t210 + t173 + ((t143 + t230) * t183) + ((t230 * t150 + t274 * t161 + t142 + t157) * t176) + (t79 * t59)) + ((t257 * t82 + 0.4e1 * (t248 * t325 + t54 + (0.2e1 * (-t82 + t84) * t316 - t309) * pkin(3)) * t315) * t34 + t50 * (-0.8e1 * (t67 + t259 + t88) * t302 - 0.6e1 * (t269 * t259 + (t56 + t49) * t241 + t213) * t315)) * t66);
t131 = sin(qJ(1));
t313 = t131 * pkin(1);
t137 = cos(qJ(1));
t312 = t137 * pkin(1);
t127 = sin(qJ(5));
t128 = sin(qJ(4));
t134 = cos(qJ(4));
t31 = (t33 * t317 - t135 * t32 / 0.2e1) * t307;
t21 = t128 * t31 - t134 * t328;
t299 = t21 * t127;
t133 = cos(qJ(5));
t298 = t21 * t133;
t292 = t131 * t135;
t291 = t131 * t136;
t290 = t137 * t135;
t289 = t137 * t136;
t165 = 0.1e1 / pkin(5);
t286 = t165 * t168;
t90 = pkin(6) + 0;
t256 = t313 / 0.2e1 + 0;
t255 = -t313 / 0.2e1 + 0;
t254 = t312 / 0.2e1 + 0;
t253 = -t312 / 0.2e1 + 0;
t246 = t165 / pkin(4) ^ 2 * t37;
t244 = t314 / 0.2e1;
t243 = t314 / 0.4e1;
t224 = t82 + t90;
t223 = t84 + t90;
t220 = pkin(3) * t292 + t256;
t219 = pkin(2) * t291 + t255;
t218 = pkin(3) * t290 + t254;
t217 = pkin(2) * t289 + t253;
t10 = (t32 * t34 / 0.4e1 + t33 * t243) * t246;
t47 = t129 * t136 - t293;
t48 = t135 * t136 + t294;
t9 = (t32 * t243 - t33 * t34 / 0.4e1) * t246;
t7 = t10 * t48 + t47 * t9;
t8 = t10 * t47 - t48 * t9;
t6 = t130 * t8 - t136 * t7;
t5 = t130 * t7 + t136 * t8;
t132 = cos(qJ(6));
t126 = sin(qJ(6));
t29 = t137 * t328;
t28 = t137 * t31;
t27 = t131 * t328;
t26 = t131 * t31;
t25 = -pkin(7) * t328 + t224;
t24 = pkin(7) * t28 + t218;
t23 = pkin(7) * t26 + t220;
t20 = t128 * t328 + t134 * t31;
t19 = t128 * t29 + t134 * t28;
t18 = -t128 * t28 + t134 * t29;
t17 = t128 * t27 + t134 * t26;
t16 = -t128 * t26 + t134 * t27;
t15 = -t127 * t131 + t133 * t19;
t14 = -t127 * t19 - t131 * t133;
t13 = t127 * t137 + t133 * t17;
t12 = -t127 * t17 + t133 * t137;
t4 = t5 * t137;
t3 = t6 * t137;
t2 = t5 * t131;
t1 = t6 * t131;
t11 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t137, -t131, 0, 0; t131, t137, 0, 0; 0, 0, 1, t90; 0, 0, 0, 1; t289, -t137 * t130, t131, t253; t291, -t131 * t130, -t137, t255; t130, t136, 0, t90; 0, 0, 0, 1; t4, -t3, t131, t217; t2, -t1, -t137, t219; t6, t5, 0, t223; 0, 0, 0, 1; t290, -t137 * t129, t131, t254; t292, -t131 * t129, -t137, t256; t129, t135, 0, t90; 0, 0, 0, 1; t28, t29, t131, t218; t26, t27, -t137, t220; -t328, t31, 0, t224; 0, 0, 0, 1; t19, t18, t131, t24; t17, t16, -t137, t23; t21, t20, 0, t25; 0, 0, 0, 1; t15, t14, t18, t24; t13, t12, t16, t23; t298, -t299, t20, t25; 0, 0, 0, 1; t126 * t18 - t132 * t14, t126 * t14 + t132 * t18, -t15, t24; -t12 * t132 + t126 * t16, t12 * t126 + t132 * t16, -t13, t23; t126 * t20 + t132 * t299, -t126 * t299 + t132 * t20, -t298, t25; 0, 0, 0, 1; (t244 * t28 + t29 * t320) * t286, (t244 * t29 + t28 * t321) * t286, t131, -pkin(4) * t28 + t218; (t244 * t26 + t27 * t320) * t286, (t244 * t27 + t26 * t321) * t286, -t137, -pkin(4) * t26 + t220; (-t244 * t328 + t31 * t320) * t286, (t244 * t31 - t321 * t328) * t286, 0, pkin(4) * t328 + t224; 0, 0, 0, 1; t4, -t3, t131, pkin(5) * t4 + t217; t2, -t1, -t137, pkin(5) * t2 + t219; t6, t5, 0, pkin(5) * t6 + t223; 0, 0, 0, 1;];
T_ges = t11;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,10+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,10+1]); end % symbolisch
for i = 1:10+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
