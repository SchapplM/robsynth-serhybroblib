% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% hybBKspatial
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in hybBKspatial_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED,L1,L2]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-11 19:31
% Revision: 6ae2d958c5b90587a0d08029b131cb7b66342a68 (2020-04-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = hybBKspatial_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'hybBKspatial_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'hybBKspatial_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'hybBKspatial_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'hybBKspatial_jacobiaD_rot_sym_varpar: pkin has to be [7x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:22:50
	% EndTime: 2020-04-11 19:22:50
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:22:49
	% EndTime: 2020-04-11 19:22:49
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:22:49
	% EndTime: 2020-04-11 19:22:49
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:26:07
	% EndTime: 2020-04-11 19:26:07
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:22:50
	% EndTime: 2020-04-11 19:22:50
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:23:03
	% EndTime: 2020-04-11 19:23:03
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:23:05
	% EndTime: 2020-04-11 19:23:05
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:23:23
	% EndTime: 2020-04-11 19:24:33
	% DurationCPUTime: 57.03s
	% Computational Cost: add. (1321374->554), mult. (2966623->993), div. (31382->17), fcn. (766859->15), ass. (0->426)
	t1123 = sin(qJ(3));
	t1407 = -t1123 / 0.2e1;
	t1127 = cos(qJ(3));
	t1404 = t1127 / 0.2e1;
	t1124 = sin(qJ(2));
	t1342 = t1124 * t1127;
	t1297 = qJD(3) * t1342;
	t1128 = cos(qJ(2));
	t1344 = t1123 * t1128;
	t1302 = qJD(2) * t1344;
	t1086 = (t1297 + t1302) * pkin(2);
	t1400 = pkin(2) * t1128;
	t1113 = pkin(1) - t1400;
	t1119 = t1127 ^ 2;
	t1320 = (0.4e1 * t1119 - 0.2e1) * pkin(3);
	t1325 = pkin(1) * t1400;
	t1115 = -0.2e1 * t1325;
	t1132 = pkin(4) ^ 2;
	t1134 = pkin(3) ^ 2;
	t1135 = pkin(2) ^ 2;
	t1136 = pkin(1) ^ 2;
	t1328 = -pkin(5) ^ 2 + t1136;
	t1267 = t1135 + t1328;
	t1228 = t1134 + t1267;
	t1092 = t1115 + t1132 + t1228;
	t1358 = t1092 * t1127;
	t1071 = t1113 * t1320 + t1358;
	t1102 = t1113 * t1127;
	t1346 = t1123 * t1124;
	t1112 = pkin(2) * t1346;
	t1087 = -t1112 + t1102;
	t1085 = pkin(3) + t1087;
	t1104 = -t1132 + t1228;
	t1093 = t1115 + t1104;
	t1263 = pkin(3) * t1112;
	t1106 = -0.2e1 * t1263;
	t1079 = t1106 + t1093;
	t1322 = 0.4e1 * t1135;
	t1116 = (t1134 - t1136) * t1322;
	t1120 = t1128 ^ 2;
	t1330 = t1115 + t1136;
	t1425 = 0.2e1 * t1120;
	t1096 = t1135 * t1425 - t1135 + t1330;
	t1426 = -0.2e1 * t1119;
	t1223 = t1096 * t1426 - t1328;
	t1264 = t1104 * t1325;
	t1293 = t1093 * t1346;
	t1382 = 0.4e1 * pkin(3);
	t1421 = -pkin(4) + pkin(5);
	t1422 = -pkin(4) - pkin(5);
	t1060 = t1116 * t1120 + 0.4e1 * t1264 - (t1136 + (pkin(2) - t1422) * (pkin(2) + t1422)) * (t1136 + (pkin(2) - t1421) * (pkin(2) + t1421)) + (pkin(2) * t1293 - t1079 * t1102) * t1382 + (0.2e1 * t1132 - 0.6e1 * t1135 + 0.2e1 * t1223 - t1134) * t1134;
	t1137 = sqrt(t1060);
	t1357 = t1096 * t1127;
	t1315 = pkin(3) * t1357;
	t1068 = t1092 * t1113 + 0.2e1 * t1315;
	t1370 = t1068 * t1123;
	t1401 = pkin(2) * t1124;
	t1054 = t1071 * t1401 + t1085 * t1137 + t1370;
	t1336 = t1127 * t1054;
	t1273 = -t1336 / 0.2e1;
	t1103 = 0.3e1 * t1134 + t1132 + t1267;
	t1105 = t1112 - pkin(3);
	t1080 = t1103 + t1115 - 0.4e1 * t1263;
	t1292 = t1080 * t1102;
	t1424 = -0.2e1 * t1128;
	t1327 = pkin(1) * t1424;
	t1316 = pkin(2) * t1342;
	t1356 = t1113 * t1123;
	t1088 = t1316 + t1356;
	t1360 = t1088 * t1137;
	t1052 = -t1292 + t1360 + (t1103 * t1346 + t1105 * t1327) * pkin(2) + (-t1132 - t1134 + (t1425 - 0.3e1) * t1135 + t1223) * pkin(3);
	t1348 = t1123 * t1052;
	t1470 = t1273 - t1348 / 0.2e1;
	t1337 = t1127 * t1052;
	t1274 = t1337 / 0.2e1;
	t1347 = t1123 * t1054;
	t1277 = -t1347 / 0.2e1;
	t1200 = t1274 + t1277;
	t1314 = pkin(3) * t1102;
	t1076 = t1106 + t1134 + t1135 + 0.2e1 * t1314 + t1330;
	t1073 = 0.1e1 / t1076;
	t1460 = 0.2e1 * pkin(3);
	t1084 = t1088 * t1460;
	t1074 = 0.1e1 / t1076 ^ 2;
	t1278 = t1348 / 0.2e1;
	t1199 = t1336 / 0.2e1 + t1278;
	t1450 = t1074 * t1199;
	t1177 = t1084 * t1450;
	t1323 = 0.4e1 * t1113;
	t1326 = pkin(3) * t1323;
	t1354 = t1119 * t1134;
	t1399 = pkin(3) * t1127;
	t1459 = 0.4e1 * t1093;
	t1467 = 0.8e1 * t1134;
	t1061 = (t1079 * t1326 + t1357 * t1467) * t1123 + (0.8e1 * t1113 * t1354 + t1399 * t1459) * t1401;
	t1058 = 0.1e1 / t1137;
	t1408 = t1088 / 0.2e1;
	t1288 = t1058 * t1408;
	t1332 = t1128 * t1135;
	t1318 = pkin(1) * t1332;
	t1027 = t1087 * t1137 + t1061 * t1288 + (t1080 * t1113 + 0.4e1 * t1315) * t1123 + (-0.2e1 * t1127 * t1318 + (t1103 * t1127 + t1119 * t1326) * pkin(2)) * t1124;
	t1418 = -t1027 / 0.2e1;
	t1269 = t1054 / 0.2e1 + t1418;
	t1072 = (-t1092 - 0.8e1 * t1314) * t1123;
	t1409 = t1085 / 0.2e1;
	t1289 = t1058 * t1409;
	t1369 = t1068 * t1127;
	t1117 = t1123 ^ 2;
	t1428 = -0.2e1 * t1117;
	t1026 = pkin(3) * t1096 * t1428 + t1061 * t1289 + t1072 * t1401 - t1360 + t1369;
	t1417 = t1052 / 0.2e1;
	t1270 = t1026 / 0.2e1 + t1417;
	t1436 = t1269 * t1123 - t1270 * t1127;
	t1469 = t1073 * t1436 - t1177;
	t1437 = t1270 * t1123 + t1269 * t1127;
	t1449 = t1074 * t1200;
	t1468 = t1073 * t1437 - t1084 * t1449;
	t1423 = pkin(2) * pkin(3);
	t1262 = t1344 * t1423;
	t1107 = -0.2e1 * t1262;
	t1430 = 0.2e1 * pkin(1);
	t1114 = t1401 * t1430;
	t1110 = qJD(2) * t1114;
	t1376 = qJD(3) * t1127;
	t1321 = -0.2e1 * t1376;
	t1252 = t1321 * t1423;
	t1077 = qJD(2) * t1107 + t1124 * t1252 + t1110;
	t1184 = qJD(2) * t1316 - qJD(3) * t1356;
	t1065 = t1184 * t1460 + t1077;
	t1179 = t1065 * t1450;
	t1122 = sin(qJ(4));
	t1133 = 0.1e1 / pkin(4);
	t1365 = t1073 * t1133;
	t1447 = t1199 * t1365;
	t1173 = t1122 * t1447;
	t1094 = t1107 + t1114;
	t1082 = t1316 * t1460 + t1094;
	t1257 = -0.4e1 * t1124 * t1332;
	t1097 = t1114 + t1257;
	t1176 = -0.4e1 * t1079 * t1342 + 0.4e1 * t1093 * t1344;
	t1195 = (-0.4e1 * pkin(1) * pkin(2) * t1104 + t1116 * t1424) * t1124;
	t1402 = pkin(1) * t1135;
	t1319 = t1123 * t1402;
	t1118 = t1124 ^ 2;
	t1427 = 0.8e1 * t1118;
	t1227 = t1319 * t1427;
	t1056 = -0.4e1 * t1097 * t1354 + t1195 + (pkin(2) * t1176 - 0.4e1 * t1094 * t1102 + t1227) * pkin(3);
	t1265 = t1113 * t1430 + t1092;
	t1213 = t1265 * t1401;
	t1064 = 0.2e1 * t1097 * t1399 + t1213;
	t1403 = pkin(1) * t1127;
	t1081 = (t1320 + 0.2e1 * t1403) * t1401;
	t1090 = (t1342 - t1344) * pkin(2);
	t1367 = t1071 * t1128;
	t1024 = t1090 * t1137 + t1056 * t1289 + t1064 * t1123 + (t1081 * t1124 + t1367) * pkin(2);
	t1334 = t1127 * t1128;
	t1091 = pkin(2) * t1334 + t1112;
	t1095 = t1114 - 0.4e1 * t1262;
	t1221 = -t1080 * t1127 + t1105 * t1430;
	t1170 = t1103 * t1344 + t1221 * t1124;
	t1025 = t1091 * t1137 + t1056 * t1288 - t1095 * t1102 - 0.2e1 * t1120 * t1319 + (t1097 * t1426 + t1257) * pkin(3) + t1170 * pkin(2);
	t1405 = -t1127 / 0.2e1;
	t1202 = t1024 * t1405 + t1025 * t1407;
	t1153 = t1073 * t1202 + t1082 * t1450;
	t986 = t1153 * t1133;
	t1420 = cos(qJ(4));
	t1169 = t1420 * t1447;
	t1335 = t1127 * t1073;
	t1272 = -t1335 / 0.2e1;
	t1240 = t1133 * t1272;
	t1366 = t1073 * t1123;
	t1285 = t1366 / 0.2e1;
	t1241 = t1133 * t1285;
	t1023 = t1052 * t1240 + t1054 * t1241;
	t1271 = t1335 / 0.2e1;
	t1465 = t1054 * t1271 + t1073 * t1278;
	t1345 = t1123 * t1127;
	t1298 = qJD(3) * t1345;
	t1246 = t1096 * t1298;
	t1377 = qJD(3) * t1123;
	t1301 = t1079 * t1377;
	t1225 = qJD(2) * t1257;
	t1089 = t1110 + t1225;
	t1359 = t1089 * t1119;
	t1362 = t1077 * t1127;
	t1053 = (0.8e1 * t1246 - 0.4e1 * t1359) * t1134 + qJD(2) * t1195 + (qJD(2) * t1227 + (t1301 - t1362) * t1323 + (qJD(2) * t1176 + t1297 * t1459) * pkin(2)) * pkin(3);
	t1069 = t1184 - t1086;
	t1055 = t1069 * t1137;
	t1062 = (t1089 * t1127 - t1096 * t1377) * t1460 + qJD(2) * t1213;
	t1063 = qJD(2) * t1081 + qJD(3) * t1072;
	t1016 = t1055 + t1053 * t1289 + t1062 * t1123 + qJD(3) * t1369 + (qJD(2) * t1367 + t1063 * t1124) * pkin(2);
	t1078 = -t1382 * t1086 + t1110;
	t1198 = -t1078 * t1127 + t1080 * t1377;
	t1299 = qJD(3) * t1346;
	t1070 = pkin(2) * (qJD(2) * (t1334 + t1346) - t1299) + qJD(3) * t1102;
	t1368 = t1070 * t1137;
	t1017 = t1368 + t1053 * t1288 + t1198 * t1113 + (t1225 + 0.4e1 * t1246 - 0.2e1 * t1359) * pkin(3) + (qJD(2) * t1170 + t1086 * t1327 + t1103 * t1297) * pkin(2);
	t1406 = t1123 / 0.2e1;
	t1203 = t1016 * t1404 + t1017 * t1406;
	t1463 = t1016 * t1407 + t1017 * t1404;
	t1121 = sin(qJ(5));
	t1126 = cos(qJ(5));
	t1129 = cos(qJ(1));
	t1187 = t1129 * t1200;
	t1021 = t1365 * t1187;
	t1004 = -t1021 * t1420 + t1129 * t1173;
	t1125 = sin(qJ(1));
	t1353 = t1121 * t1125;
	t995 = t1004 * t1126 - t1353;
	t990 = 0.1e1 / t995 ^ 2;
	t1341 = t1125 * t1126;
	t994 = t1004 * t1121 + t1341;
	t1390 = t990 * t994;
	t989 = 0.1e1 / t995;
	t1210 = -t1121 * t989 + t1126 * t1390;
	t1352 = t1121 * t1129;
	t1389 = qJD(5) * t994;
	t1158 = qJD(3) * t1200 + t1203;
	t1381 = qJD(1) * t1125;
	t1148 = t1133 * (-t1129 * t1179 + (t1129 * t1158 - t1199 * t1381) * t1073);
	t1444 = t1021 * t1122 + t1129 * t1169;
	t1188 = t1125 * t1200;
	t1438 = t1199 * qJD(3) - t1463;
	t1455 = t1065 * t1074;
	t959 = (t1187 * t1455 + (qJD(1) * t1188 + t1129 * t1438) * t1073) * t1133;
	t936 = qJD(4) * t1444 + t1122 * t1148 + t959 * t1420;
	t934 = -qJD(1) * t1352 + t1126 * t936 - t1389;
	t1394 = t934 * t989 * t990;
	t1266 = 0.2e1 * t994 * t1394;
	t1340 = t1126 * t1129;
	t933 = qJD(1) * t1340 + qJD(5) * t995 + t1121 * t936;
	t988 = t994 ^ 2;
	t965 = t988 * t990 + 0.1e1;
	t1391 = 0.2e1 / t965 ^ 2 * (t933 * t1390 - t988 * t1394);
	t1395 = t933 * t990;
	t963 = 0.1e1 / t965;
	t1150 = (t1126 * (qJD(5) * t989 + t1266 - t1395) + (-t934 + t1389) * t1121 * t990) * t963 + t1210 * t1391;
	t1350 = t1123 * t1024;
	t1283 = t1350 / 0.2e1;
	t1462 = t1074 * (t1200 * t1122 - t1470 * t1420) * t1082 - (t1024 * t1271 + t1025 * t1285) * t1420 + (t1025 * t1272 + t1073 * t1283) * t1122;
	t1201 = t1025 * t1405 + t1283;
	t1461 = t1073 * t1201 + t1082 * t1449;
	t1205 = -t1023 * t1420 - t1173;
	t1006 = 0.1e1 / t1205 ^ 2;
	t1009 = -t1023 * t1122 + t1169;
	t961 = (-t1158 * t1073 + t1179) * t1133;
	t1287 = t1065 * t1404;
	t1219 = t1074 * t1133 * t1287;
	t1363 = t1074 * t1123;
	t1249 = t1065 * t1133 * t1363;
	t1415 = -t1054 / 0.2e1;
	t1456 = qJD(3) * t1133;
	t962 = t1016 * t1241 + t1017 * t1240 + t1052 * t1219 + t1249 * t1415 + t1465 * t1456;
	t943 = t1009 * qJD(4) - t961 * t1122 + t962 * t1420;
	t1458 = t1006 * t943;
	t1194 = t1210 * t963;
	t1454 = t1065 * t1202;
	t1317 = qJD(2) * t1400;
	t1111 = t1317 * t1430;
	t1255 = qJD(2) * t1112;
	t1268 = t1128 * t1252 + t1255 * t1460 + t1111;
	t1066 = (qJD(2) * t1334 - t1299) * pkin(2) * t1460 + t1268;
	t1453 = t1066 * t1200;
	t1448 = t1125 * t1420;
	t1445 = t1117 - t1119;
	t1020 = t1188 * t1365;
	t1373 = t1020 * t1122;
	t1443 = t1125 * t1169 + t1373;
	t1349 = t1123 * t1027;
	t1442 = t1277 + t1349 / 0.2e1;
	t1306 = t1020 * t1420;
	t1001 = t1125 * t1173 - t1306;
	t971 = atan2(-t1443, -t1205);
	t966 = sin(t971);
	t967 = cos(t971);
	t948 = -t1205 * t967 - t1443 * t966;
	t946 = 0.1e1 / t948 ^ 2;
	t997 = t1444 ^ 2;
	t942 = t946 * t997 + 0.1e1;
	t940 = 0.1e1 / t942;
	t1392 = t940 * t946;
	t1388 = t1444 * t946;
	t1220 = t1205 * t966 - t1443 * t967;
	t1005 = 0.1e1 / t1205;
	t1374 = t1443 * t1006;
	t1380 = qJD(1) * t1129;
	t1149 = t1133 * (-t1125 * t1179 + (t1125 * t1158 + t1199 * t1380) * t1073);
	t960 = (-t1125 * t1065 * t1449 + (qJD(1) * t1187 - t1125 * t1438) * t1073) * t1133;
	t1385 = t960 * t1122;
	t938 = qJD(4) * t1001 - t1420 * t1149 - t1385;
	t1209 = -t1005 * t938 + t943 * t1374;
	t996 = t1443 ^ 2;
	t970 = t1006 * t996 + 0.1e1;
	t968 = 0.1e1 / t970;
	t923 = t1209 * t968;
	t912 = t1220 * t923 + t966 * t938 + t967 * t943;
	t945 = 0.1e1 / t948;
	t1397 = t912 * t945 * t946;
	t935 = qJD(4) * t1004 + t959 * t1122 - t1420 * t1148;
	t1398 = 0.2e1 * (-t935 * t1388 - t997 * t1397) / t942 ^ 2;
	t1441 = -t912 * t1392 - t945 * t1398;
	t1261 = 0.2e1 * t1444 * t1397;
	t1440 = t940 * t1261 + t1388 * t1398 + t935 * t1392;
	t1067 = 0.2e1 * t1070 * pkin(3);
	t1413 = t1065 / 0.2e1;
	t1419 = t1017 / 0.2e1;
	t1174 = t1027 * t1413 - t1067 * t1417 - t1084 * t1419;
	t1379 = qJD(3) * t1084;
	t1291 = -t1379 / 0.2e1;
	t1224 = t1413 + t1291;
	t1156 = t1054 * t1224 - t1174;
	t1254 = t1127 * t1112;
	t1355 = t1118 * t1135;
	t1434 = qJD(2) * t1119 * (t1113 * t1400 + t1355) + t1089 * t1345 + (-t1096 * t1445 - 0.2e1 * t1113 * t1254) * qJD(3);
	t1431 = -0.2e1 * pkin(1);
	t1416 = t1053 / 0.2e1;
	t1414 = -t1065 / 0.2e1;
	t1412 = t1069 / 0.2e1;
	t1411 = t1070 / 0.2e1;
	t1410 = t1084 / 0.2e1;
	t1387 = t1005 * t1458;
	t1396 = 0.2e1 * (-t938 * t1374 + t996 * t1387) / t970 ^ 2;
	t1393 = t940 * t945;
	t1384 = t962 * t1122;
	t1375 = t1443 * t1005;
	t1371 = t1073 * t1455;
	t1364 = t1074 * t1084;
	t1329 = t1118 - t1120;
	t1206 = t1329 * qJD(2) * t1322;
	t1083 = t1111 + t1206;
	t1361 = t1083 * t1119;
	t1343 = t1123 * t1137;
	t1338 = t1127 * t1026;
	t1333 = t1127 * t1137;
	t1217 = t1054 * t1240;
	t1286 = -t1366 / 0.2e1;
	t1242 = t1133 * t1286;
	t1218 = t1125 * t1242;
	t1331 = t1052 * t1218 + t1125 * t1217;
	t1324 = 0.4e1 * qJD(2);
	t1310 = t960 * t1420;
	t1309 = t940 * t1388;
	t1308 = t1005 * t1396;
	t1307 = qJD(4) * t1420;
	t1256 = pkin(1) * qJD(2) * t1355;
	t1051 = t1434 * t1467 + (0.8e1 * t1127 * t1256 + (t1077 * t1123 + t1079 * t1376) * t1323 + (-0.4e1 * qJD(3) * t1293 + (t1079 * t1346 + t1093 * t1334) * t1324) * pkin(2)) * pkin(3);
	t1290 = -t1053 * t1058 / t1060 / 0.4e1;
	t1243 = t1088 * t1290;
	t1251 = 0.2e1 * t1329;
	t981 = t1055 + t1061 * t1243 + t1078 * t1356 + (t1051 * t1408 + t1061 * t1411 + t1087 * t1416) * t1058 + (t1292 + (-pkin(2) * t1103 + 0.2e1 * t1318) * t1346) * qJD(3) + (t1080 * t1112 + (t1103 * t1400 + t1251 * t1402) * t1127) * qJD(2) + t1434 * t1382;
	t1304 = t1016 / 0.2e1 - t981 / 0.2e1;
	t1244 = t1085 * t1290;
	t980 = -t1368 + t1061 * t1244 + t1062 * t1127 - qJD(3) * t1370 + (-qJD(3) * t1358 + t1255 * t1431) * t1401 + t1072 * t1317 + (-t1088 * t1053 / 0.2e1 + t1061 * t1412 + t1051 * t1409) * t1058 + (t1089 * t1428 - 0.4e1 * t1246 + 0.8e1 * (qJD(3) * t1113 * t1445 - qJD(2) * t1254) * t1401) * pkin(3);
	t1303 = t980 / 0.2e1 + t1419;
	t1296 = t1082 * t1371;
	t1295 = t1084 * t1371;
	t1281 = t1026 * t1406;
	t1259 = 0.2e1 * t1443 * t1387;
	t1250 = t1124 * t1302;
	t1248 = t1123 * t1296;
	t1247 = t1127 * t1296;
	t1245 = t1097 * t1298;
	t1234 = t1363 * t1410;
	t999 = t1331 * t1122 + t1306;
	t992 = t1121 * t999 + t1340;
	t993 = t1126 * t999 - t1352;
	t1216 = -t1337 + t1347;
	t1215 = t1336 + t1348;
	t979 = t1468 * t1133;
	t974 = t1129 * t979;
	t1151 = t1133 * t1469;
	t975 = t1129 * t1151;
	t950 = -t974 * t1122 - t975 * t1420;
	t1212 = -t975 * t1122 + t974 * t1420;
	t987 = t1461 * t1133;
	t984 = t1129 * t987;
	t985 = t1129 * t986;
	t954 = -t984 * t1122 - t985 * t1420;
	t1211 = -t985 * t1122 + t984 * t1420;
	t973 = t1125 * t979;
	t949 = t1122 * t973 + t1151 * t1448;
	t978 = (-t1177 + (-t1349 / 0.2e1 - t1338 / 0.2e1) * t1073) * t1133 + t1023;
	t952 = -t978 * t1122 + t979 * t1420;
	t1208 = t1005 * t949 - t952 * t1374;
	t983 = t1125 * t987;
	t953 = t1122 * t983 + t1448 * t986;
	t956 = -t986 * t1122 + t987 * t1420;
	t1207 = t1005 * t953 - t956 * t1374;
	t1197 = t1001 * t1005 - t1009 * t1374;
	t1196 = t1414 - (-qJD(3) / 0.2e1 - qJD(4) / 0.2e1) * t1084;
	t1193 = t966 + (t967 * t1375 - t966) * t968;
	t998 = t1331 * t1420 - t1373;
	t1186 = t1216 * t1371;
	t1185 = t1215 * t1371;
	t1182 = -t1269 * qJD(3) + t1303;
	t1181 = t1017 * t1218 + (t1052 * t1242 + t1217) * t1380 + (t1023 * qJD(3) + t1016 * t1240 + t1054 * t1219 + t1249 * t1417) * t1125;
	t1175 = t1016 * t1410 + t1026 * t1414 - t1067 * t1415;
	t1164 = -t1379 * t1415 + t1174;
	t1163 = t1052 * t1291 - t1175;
	t1028 = (0.8e1 * t1245 - 0.4e1 * t1361) * t1134 + (t1116 * t1251 - 0.4e1 * t1264) * qJD(2) + ((t1094 * t1377 - t1127 * t1268) * t1323 + (t1376 * t1427 + 0.24e2 * t1250) * t1402 + (0.4e1 * (-qJD(2) * t1079 + qJD(3) * t1093) * t1334 + (0.4e1 * t1301 - 0.4e1 * t1362 + (-t1093 * t1123 - t1094 * t1127) * t1324) * t1124) * pkin(2)) * pkin(3);
	t976 = t1086 * t1137 + t1056 * t1243 + (t1095 * t1377 - t1111 * t1127) * t1113 + (t1120 * t1321 + 0.4e1 * t1250) * t1402 + (t1028 * t1408 + t1056 * t1411 + t1091 * t1416) * t1058 + (t1206 + 0.4e1 * t1245 - 0.2e1 * t1361) * pkin(3) + ((t1221 * qJD(2) + (-t1343 + (t1103 + 0.4e1 * t1314) * t1127) * qJD(3)) * t1128 + (t1086 * t1430 + (-t1103 * t1123 + (-0.4e1 * pkin(3) * t1356 - t1095 - t1137) * t1127) * qJD(2) + t1198) * t1124) * pkin(2);
	t977 = t1056 * t1244 + 0.2e1 * (-pkin(3) * t1097 * t1377 + t1083 * t1399 + 0.2e1 * t1256) * t1123 + t1064 * t1376 + (t1028 * t1409 + t1056 * t1412 + t1090 * t1416) * t1058 + (t1063 * t1128 + (-t1128 * t1333 + (-t1137 + (t1431 - 0.8e1 * t1399) * t1401) * t1346) * qJD(3) + ((-t1071 + t1343) * t1124 + (t1333 + t1265 * t1123 + t1081 + 0.2e1 * (t1119 * t1460 - pkin(3) + t1403) * t1401) * t1128) * qJD(2)) * pkin(2);
	t1162 = -t1202 * qJD(3) + t976 * t1405 + t977 * t1406;
	t1161 = -t1201 * qJD(3) + t977 * t1404 + t976 * t1406;
	t1157 = -t1052 * t1224 + t1175;
	t1155 = t1025 * t1287 + t1350 * t1414 + t1453;
	t1154 = t1470 * t1066 + t1454;
	t944 = t1205 * qJD(4) - t961 * t1420 - t1384;
	t939 = qJD(4) * t1443 + t1122 * t1149 - t1310;
	t937 = qJD(4) * t998 + t1122 * t1181 + t1310;
	t932 = t1197 * t968;
	t931 = (t1153 * t1381 + (t1082 * t1185 + t1161 * t1073 + (-t1066 * t1199 - t1082 * t1158 + t1454) * t1074) * t1129) * t1133;
	t930 = (-t1461 * t1381 + (t1082 * t1186 + t1162 * t1073 + (-t1065 * t1201 - t1082 * t1438 + t1453) * t1074) * t1129) * t1133;
	t929 = t1207 * t968;
	t928 = (-t1468 * t1381 + (-t1084 * t1186 + (-qJD(3) * t1436 + t1123 * t1303 + t1127 * t1304) * t1073 + (t1157 * t1123 - t1127 * t1156) * t1074) * t1129) * t1133;
	t927 = (t1469 * t1381 + (-t1084 * t1185 + (-qJD(3) * t1437 - t1123 * t1304 + t1127 * t1303) * t1073 + (t1123 * t1156 + t1127 * t1157) * t1074) * t1129) * t1133;
	t926 = t1208 * t968;
	t921 = (-t987 * t1122 - t986 * t1420) * qJD(4) + (-(-t1052 * t1248 - t1054 * t1247 + t1272 * t977 + t1286 * t976) * t1122 + (-t1052 * t1247 + t1054 * t1248 + t1272 * t976 + t1285 * t977) * t1420 + (t1154 * t1122 + t1155 * t1420 + (-t1203 * t1122 + t1463 * t1420) * t1082) * t1074) * t1133 - t1462 * t1456;
	t920 = t983 * t1307 + (t1462 * t1380 + ((t1216 * t1122 - t1215 * t1420) * t1296 + (-t1161 * t1420 + (-qJD(4) * t1202 + t1162) * t1122) * t1073 + (t1155 * t1122 - t1154 * t1420 + (t1158 * t1420 + (-qJD(4) * t1199 - t1438) * t1122) * t1082) * t1074) * t1125) * t1133;
	t918 = -t1384 + (-t979 * t1122 - t978 * t1420) * qJD(4) + (-(t1215 * t1122 + t1216 * t1420) * t1295 + (-(t1376 * t1418 + t980 * t1405 + t981 * t1407) * t1122 + (t981 * t1405 + t980 * t1406 + t1203) * t1420 + (-t1281 * t1122 + (t1338 / 0.2e1 + t1274 + t1442) * t1420) * qJD(3)) * t1073 + ((-t1163 * t1122 + (t1054 * t1414 + t1164) * t1420) * t1127 + (-t1164 * t1122 + (t1052 * t1414 - t1163) * t1420) * t1123) * t1074) * t1133;
	t917 = t1001 * t966 + t1009 * t967 - t1220 * t932;
	t915 = t973 * t1307 + (((t1027 * t1272 + t1054 * t1234 + t1073 * t1281 - t1274 * t1364 + t1465) * t1122 - (t1026 * t1271 - t1273 * t1364 + t1442 * t1073 + (t1234 + t1271) * t1052) * t1420) * t1380 + ((-(-t1052 * t1122 - t1054 * t1420) * t1295 + (-t1182 * t1420 + (t1304 + (qJD(3) + qJD(4)) * t1270) * t1122) * t1073 + (-t1157 * t1420 + (t1054 * t1196 + t1174) * t1122) * t1074) * t1127 + (-(-t1052 * t1420 + t1054 * t1122) * t1295 + (-(-qJD(3) * t1270 - t1304) * t1420 + (-qJD(4) * t1269 + t1182) * t1122) * t1073 + (-t1156 * t1420 + (t1052 * t1196 + t1175) * t1122) * t1074) * t1123) * t1125) * t1133;
	t910 = t1197 * t1396 + (t1009 * t1259 - t1005 * t939 + (-t1001 * t943 - t1009 * t938 + t1443 * t944) * t1006) * t968;
	t909 = t1207 * t1396 + (t956 * t1259 - t1005 * t920 + (t1443 * t921 - t938 * t956 - t943 * t953) * t1006) * t968;
	t908 = t1208 * t1396 + (t952 * t1259 - t1005 * t915 + (t1443 * t918 - t938 * t952 - t943 * t949) * t1006) * t968;
	t1 = [-t1005 * t935 * t968 - (-t1458 * t968 + t1308) * t1444, t909, t908, t910, 0, 0; (-t999 * qJD(4) + t1181 * t1420 - t1385) * t1393 - (t1193 * t935 - ((-t923 * t968 * t1375 + t1396) * t966 + (-t1443 * t1308 + t923 + (t1209 - t923) * t968) * t967) * t1444) * t1309 + t1441 * t998 - t1440 * t1193 * t1444, (-t1211 * qJD(4) - t930 * t1122 + t931 * t1420) * t1393 - ((-t1443 * t909 - t929 * t938 + t921 + (-t1205 * t929 + t953) * t923) * t967 + (t1205 * t909 + t929 * t943 + t920 + (-t1443 * t929 - t956) * t923) * t966) * t1309 + t1441 * t954 + t1440 * (-t1220 * t929 + t966 * t953 + t967 * t956), (-t1212 * qJD(4) - t928 * t1122 + t927 * t1420) * t1393 - ((-t1443 * t908 - t926 * t938 + t918 + (-t1205 * t926 + t949) * t923) * t967 + (t1205 * t908 + t926 * t943 + t915 + (-t1443 * t926 - t952) * t923) * t966) * t1309 + t1441 * t950 + t1440 * (-t1220 * t926 + t966 * t949 + t967 * t952), (t1004 * t945 + t917 * t1388) * t1398 + (t917 * t1261 - t936 * t945 + (t1004 * t912 + t917 * t935 - ((-t1443 * t910 - t932 * t938 + t944 + (-t1205 * t932 + t1001) * t923) * t967 + (t1205 * t910 + t932 * t943 + t939 + (-t1443 * t932 - t1009) * t923) * t966) * t1444) * t946) * t940, 0, 0; (t993 * t1390 - t989 * t992) * t1391 + ((-qJD(1) * t1341 + qJD(5) * t993 + t1121 * t937) * t989 + t993 * t1266 + (-t992 * t934 - (qJD(1) * t1353 - qJD(5) * t992 + t1126 * t937) * t994 - t993 * t933) * t990) * t963, -(t954 * qJD(4) + t931 * t1122 + t930 * t1420) * t1194 + t1150 * t1211, -(t950 * qJD(4) + t927 * t1122 + t928 * t1420) * t1194 + t1150 * t1212, t1150 * t1444 + t935 * t1194, -t1391 + (0.2e1 * t963 * t1395 + (-t990 * t1391 - 0.2e1 * t963 * t1394) * t994) * t994, 0;];
	JaD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-11 19:23:31
	% EndTime: 2020-04-11 19:24:59
	% DurationCPUTime: 77.72s
	% Computational Cost: add. (1985559->631), mult. (4434131->1154), div. (48577->19), fcn. (1150773->17), ass. (0->472)
	t1243 = sin(qJ(2));
	t1248 = cos(qJ(3));
	t1449 = t1243 * t1248;
	t1411 = qJD(3) * t1449;
	t1242 = sin(qJ(3));
	t1249 = cos(qJ(2));
	t1451 = t1242 * t1249;
	t1415 = qJD(2) * t1451;
	t1195 = (t1411 + t1415) * pkin(2);
	t1453 = t1242 * t1243;
	t1225 = pkin(2) * t1453;
	t1381 = pkin(3) * t1225;
	t1215 = -0.2e1 * t1381;
	t1255 = pkin(3) ^ 2;
	t1256 = pkin(2) ^ 2;
	t1522 = pkin(2) * t1249;
	t1228 = pkin(1) - t1522;
	t1211 = t1228 * t1248;
	t1421 = pkin(3) * t1211;
	t1434 = pkin(1) * t1522;
	t1230 = -0.2e1 * t1434;
	t1257 = pkin(1) ^ 2;
	t1439 = t1230 + t1257;
	t1185 = t1215 + t1255 + t1256 + 0.2e1 * t1421 + t1439;
	t1182 = 0.1e1 / t1185;
	t1423 = pkin(2) * t1449;
	t1462 = t1228 * t1242;
	t1197 = t1423 + t1462;
	t1576 = 0.2e1 * pkin(3);
	t1193 = t1197 * t1576;
	t1183 = 0.1e1 / t1185 ^ 2;
	t1237 = t1248 ^ 2;
	t1427 = (0.4e1 * t1237 - 0.2e1) * pkin(3);
	t1253 = pkin(4) ^ 2;
	t1437 = -pkin(5) ^ 2 + t1257;
	t1384 = t1256 + t1437;
	t1357 = t1255 + t1384;
	t1201 = t1230 + t1253 + t1357;
	t1464 = t1201 * t1248;
	t1180 = t1228 * t1427 + t1464;
	t1196 = -t1225 + t1211;
	t1194 = pkin(3) + t1196;
	t1213 = -t1253 + t1357;
	t1202 = t1230 + t1213;
	t1188 = t1215 + t1202;
	t1431 = 0.4e1 * t1256;
	t1231 = (t1255 - t1257) * t1431;
	t1238 = t1249 ^ 2;
	t1547 = 0.2e1 * t1238;
	t1205 = t1256 * t1547 - t1256 + t1439;
	t1548 = -0.2e1 * t1237;
	t1346 = t1205 * t1548 - t1437;
	t1382 = t1213 * t1434;
	t1399 = t1202 * t1453;
	t1516 = 0.4e1 * pkin(3);
	t1543 = -pkin(4) + pkin(5);
	t1544 = -pkin(4) - pkin(5);
	t1169 = t1231 * t1238 + 0.4e1 * t1382 - (t1257 + (pkin(2) - t1544) * (pkin(2) + t1544)) * (t1257 + (pkin(2) - t1543) * (pkin(2) + t1543)) + (pkin(2) * t1399 - t1188 * t1211) * t1516 + (0.2e1 * t1253 - 0.6e1 * t1256 + 0.2e1 * t1346 - t1255) * t1255;
	t1258 = sqrt(t1169);
	t1463 = t1205 * t1248;
	t1422 = pkin(3) * t1463;
	t1177 = t1201 * t1228 + 0.2e1 * t1422;
	t1473 = t1177 * t1242;
	t1523 = pkin(2) * t1243;
	t1163 = t1180 * t1523 + t1194 * t1258 + t1473;
	t1454 = t1242 * t1163;
	t1391 = -t1454 / 0.2e1;
	t1212 = 0.3e1 * t1255 + t1253 + t1384;
	t1214 = t1225 - pkin(3);
	t1189 = t1212 + t1230 - 0.4e1 * t1381;
	t1397 = t1189 * t1211;
	t1546 = -0.2e1 * t1249;
	t1436 = pkin(1) * t1546;
	t1466 = t1197 * t1258;
	t1161 = -t1397 + t1466 + (t1212 * t1453 + t1214 * t1436) * pkin(2) + (-t1253 - t1255 + (t1547 - 0.3e1) * t1256 + t1346) * pkin(3);
	t1446 = t1248 * t1161;
	t1317 = t1446 / 0.2e1 + t1391;
	t1568 = t1183 * t1317;
	t1290 = t1193 * t1568;
	t1432 = 0.4e1 * t1228;
	t1435 = pkin(3) * t1432;
	t1459 = t1237 * t1255;
	t1521 = pkin(3) * t1248;
	t1575 = 0.4e1 * t1202;
	t1583 = 0.8e1 * t1255;
	t1170 = (t1188 * t1435 + t1463 * t1583) * t1242 + (0.8e1 * t1228 * t1459 + t1521 * t1575) * t1523;
	t1181 = (-t1201 - 0.8e1 * t1421) * t1242;
	t1167 = 0.1e1 / t1258;
	t1532 = t1194 / 0.2e1;
	t1395 = t1167 * t1532;
	t1472 = t1177 * t1248;
	t1232 = t1242 ^ 2;
	t1550 = -0.2e1 * t1232;
	t1127 = pkin(3) * t1205 * t1550 + t1170 * t1395 + t1181 * t1523 - t1466 + t1472;
	t1531 = t1197 / 0.2e1;
	t1394 = t1167 * t1531;
	t1442 = t1249 * t1256;
	t1425 = pkin(1) * t1442;
	t1128 = t1196 * t1258 + t1170 * t1394 + (t1189 * t1228 + 0.4e1 * t1422) * t1242 + (-0.2e1 * t1248 * t1425 + (t1212 * t1248 + t1237 * t1435) * pkin(2)) * t1243;
	t1527 = -t1248 / 0.2e1;
	t1528 = t1242 / 0.2e1;
	t1318 = t1127 * t1528 + t1128 * t1527;
	t1586 = -t1182 * t1318 + t1290;
	t1445 = t1248 * t1163;
	t1455 = t1242 * t1161;
	t1316 = t1445 / 0.2e1 + t1455 / 0.2e1;
	t1569 = t1183 * t1316;
	t1289 = t1193 * t1569;
	t1538 = t1163 / 0.2e1;
	t1386 = t1538 - t1128 / 0.2e1;
	t1541 = t1161 / 0.2e1;
	t1387 = t1127 / 0.2e1 + t1541;
	t1585 = -(t1242 * t1386 - t1248 * t1387) * t1182 + t1289;
	t1244 = sin(qJ(1));
	t1254 = 0.1e1 / pkin(4);
	t1250 = cos(qJ(1));
	t1299 = t1250 * t1317;
	t1287 = -0.4e1 * t1188 * t1449 + 0.4e1 * t1202 * t1451;
	t1309 = (-0.4e1 * pkin(1) * pkin(2) * t1213 + t1231 * t1546) * t1243;
	t1233 = t1243 ^ 2;
	t1461 = t1233 * t1256;
	t1371 = pkin(1) * qJD(2) * t1461;
	t1356 = 0.8e1 * t1371;
	t1452 = t1242 * t1248;
	t1412 = qJD(3) * t1452;
	t1365 = t1205 * t1412;
	t1511 = qJD(3) * t1242;
	t1414 = t1188 * t1511;
	t1552 = 0.2e1 * pkin(1);
	t1229 = t1523 * t1552;
	t1223 = qJD(2) * t1229;
	t1376 = -0.4e1 * t1243 * t1442;
	t1352 = qJD(2) * t1376;
	t1198 = t1223 + t1352;
	t1465 = t1198 * t1237;
	t1545 = pkin(2) * pkin(3);
	t1380 = t1451 * t1545;
	t1216 = -0.2e1 * t1380;
	t1510 = qJD(3) * t1248;
	t1429 = -0.2e1 * t1510;
	t1370 = t1429 * t1545;
	t1186 = qJD(2) * t1216 + t1243 * t1370 + t1223;
	t1468 = t1186 * t1248;
	t1162 = (0.8e1 * t1365 - 0.4e1 * t1465) * t1255 + qJD(2) * t1309 + (t1242 * t1356 + (t1414 - t1468) * t1432 + (qJD(2) * t1287 + t1411 * t1575) * pkin(2)) * pkin(3);
	t1296 = qJD(2) * t1423 - qJD(3) * t1462;
	t1178 = t1296 - t1195;
	t1164 = t1178 * t1258;
	t1383 = t1228 * t1552 + t1201;
	t1330 = t1383 * t1523;
	t1171 = (t1198 * t1248 - t1205 * t1511) * t1576 + qJD(2) * t1330;
	t1525 = pkin(1) * t1248;
	t1190 = (t1427 + 0.2e1 * t1525) * t1523;
	t1172 = qJD(2) * t1190 + qJD(3) * t1181;
	t1470 = t1180 * t1249;
	t1116 = t1164 + t1162 * t1395 + t1171 * t1242 + qJD(3) * t1472 + (qJD(2) * t1470 + t1172 * t1243) * pkin(2);
	t1344 = -t1189 * t1248 + t1214 * t1552;
	t1284 = t1212 * t1451 + t1243 * t1344;
	t1187 = -t1516 * t1195 + t1223;
	t1315 = -t1187 * t1248 + t1189 * t1511;
	t1413 = qJD(3) * t1453;
	t1444 = t1248 * t1249;
	t1179 = (qJD(2) * (t1444 + t1453) - t1413) * pkin(2) + qJD(3) * t1211;
	t1471 = t1179 * t1258;
	t1117 = t1471 + t1162 * t1394 + t1315 * t1228 + (t1352 + 0.4e1 * t1365 - 0.2e1 * t1465) * pkin(3) + (qJD(2) * t1284 + t1195 * t1436 + t1212 * t1411) * pkin(2);
	t1526 = t1248 / 0.2e1;
	t1529 = -t1242 / 0.2e1;
	t1325 = t1116 * t1529 + t1117 * t1526;
	t1563 = qJD(3) * t1316 - t1325;
	t1174 = t1296 * t1576 + t1186;
	t1573 = t1174 * t1244;
	t1050 = (-t1568 * t1573 + (qJD(1) * t1299 - t1244 * t1563) * t1182) * t1254;
	t1514 = qJD(1) * t1250;
	t1456 = t1242 * t1117;
	t1321 = t1116 * t1527 - t1456 / 0.2e1;
	t1562 = qJD(3) * t1317 - t1321;
	t1051 = (-t1569 * t1573 + (t1562 * t1244 + t1316 * t1514) * t1182) * t1254;
	t1300 = t1244 * t1317;
	t1469 = t1182 * t1254;
	t1119 = t1300 * t1469;
	t1123 = t1316 * t1469;
	t1120 = t1244 * t1123;
	t1241 = sin(qJ(4));
	t1247 = cos(qJ(4));
	t1101 = t1119 * t1241 + t1120 * t1247;
	t1025 = qJD(4) * t1101 - t1050 * t1247 + t1051 * t1241;
	t1240 = sin(qJ(5));
	t1100 = t1119 * t1247 - t1120 * t1241;
	t1246 = cos(qJ(5));
	t1441 = t1250 * t1240;
	t1335 = -t1100 * t1246 + t1441;
	t1447 = t1244 * t1246;
	t1584 = qJD(1) * t1447 + qJD(5) * t1335 + t1025 * t1240;
	t1393 = -t1469 / 0.2e1;
	t1361 = t1248 * t1393;
	t1392 = t1469 / 0.2e1;
	t1362 = t1242 * t1392;
	t1124 = t1161 * t1361 + t1163 * t1362;
	t1107 = -t1123 * t1247 + t1124 * t1241;
	t1477 = t1107 * t1246;
	t1067 = atan2(t1335, -t1477);
	t1066 = cos(t1067);
	t1065 = sin(t1067);
	t1490 = t1065 * t1335;
	t1036 = -t1066 * t1477 + t1490;
	t1034 = 0.1e1 / t1036 ^ 2;
	t1440 = t1250 * t1254;
	t1121 = t1317 * t1182 * t1440;
	t1390 = t1254 * t1526;
	t1579 = t1163 * t1182 * t1390 + t1161 * t1362;
	t1122 = t1579 * t1250;
	t1334 = -t1121 * t1247 + t1122 * t1241;
	t1448 = t1244 * t1240;
	t1094 = t1246 * t1334 - t1448;
	t1500 = t1034 * t1094;
	t1203 = t1216 + t1229;
	t1191 = t1423 * t1576 + t1203;
	t1206 = t1229 + t1376;
	t1524 = pkin(1) * t1256;
	t1426 = t1242 * t1524;
	t1549 = 0.8e1 * t1233;
	t1165 = -0.4e1 * t1206 * t1459 + t1309 + (pkin(2) * t1287 - 0.4e1 * t1203 * t1211 + t1426 * t1549) * pkin(3);
	t1173 = 0.2e1 * t1206 * t1521 + t1330;
	t1199 = (t1449 - t1451) * pkin(2);
	t1125 = t1199 * t1258 + t1165 * t1395 + t1173 * t1242 + (t1190 * t1243 + t1470) * pkin(2);
	t1200 = pkin(2) * t1444 + t1225;
	t1204 = t1229 - 0.4e1 * t1380;
	t1126 = t1200 * t1258 + t1165 * t1394 - t1204 * t1211 - 0.2e1 * t1238 * t1426 + (t1206 * t1548 + t1376) * pkin(3) + t1284 * pkin(2);
	t1320 = t1125 * t1526 + t1126 * t1528;
	t1274 = -t1182 * t1320 + t1191 * t1569;
	t1085 = t1274 * t1254;
	t1348 = qJD(3) * t1538 - t1117 / 0.2e1;
	t1513 = qJD(3) * t1161;
	t1542 = t1116 / 0.2e1;
	t1349 = t1513 / 0.2e1 + t1542;
	t1581 = (t1241 * t1348 - t1247 * t1349) * t1193;
	t1506 = qJD(6) * t1240;
	t1580 = qJD(4) + t1506;
	t1483 = t1100 * t1240;
	t1567 = t1250 * t1246 + t1483;
	t1332 = t1445 + t1455;
	t1319 = t1125 * t1528 + t1126 * t1527;
	t1577 = t1182 * t1319 + t1191 * t1568;
	t1052 = (t1174 * t1569 - t1182 * t1562) * t1254;
	t1358 = t1254 * t1391;
	t1475 = t1174 * t1183;
	t1053 = t1116 * t1362 + t1117 * t1361 + (t1161 * t1390 + t1358) * t1475 + t1579 * qJD(3);
	t1106 = t1123 * t1241 + t1124 * t1247;
	t1032 = qJD(4) * t1106 + t1052 * t1247 + t1053 * t1241;
	t1104 = 0.1e1 / t1107 ^ 2;
	t1574 = t1032 * t1104;
	t1048 = (t1299 * t1475 + (qJD(1) * t1300 + t1563 * t1250) * t1182) * t1254;
	t1515 = qJD(1) * t1244;
	t1049 = (t1393 * t1515 - t1440 * t1475 / 0.2e1) * t1332 + (qJD(3) * t1182 * t1358 + (t1456 + (t1116 + t1513) * t1248) * t1392) * t1250;
	t1476 = t1121 * t1241;
	t1021 = t1049 * t1241 + qJD(4) * t1476 + (qJD(4) * t1122 + t1048) * t1247;
	t1093 = t1334 * t1240 + t1447;
	t1013 = -qJD(1) * t1441 - t1093 * qJD(5) + t1021 * t1246;
	t1088 = t1094 ^ 2;
	t1028 = t1034 * t1088 + 0.1e1;
	t1033 = 0.1e1 / t1036;
	t1478 = t1107 * t1240;
	t1314 = qJD(5) * t1478 - t1032 * t1246;
	t1087 = t1335 ^ 2;
	t1235 = 0.1e1 / t1246 ^ 2;
	t1479 = t1104 * t1235;
	t1070 = t1087 * t1479 + 0.1e1;
	t1068 = 0.1e1 / t1070;
	t1402 = t1335 * t1479;
	t1221 = qJD(1) * t1448;
	t1016 = qJD(5) * t1483 - t1221 + (qJD(5) * t1250 + t1025) * t1246;
	t1103 = 0.1e1 / t1107;
	t1234 = 0.1e1 / t1246;
	t1481 = t1103 * t1234;
	t1407 = t1016 * t1481;
	t999 = (-t1314 * t1402 - t1407) * t1068;
	t1291 = t1335 * t999 + t1314;
	t1353 = t999 * t1477 + t1016;
	t986 = t1065 * t1353 + t1066 * t1291;
	t1519 = t1033 * t1034 * t986;
	t1520 = 0.2e1 / t1028 ^ 2 * (t1013 * t1500 - t1088 * t1519);
	t1368 = t1500 * t1520;
	t1566 = t1232 - t1237;
	t1565 = t1016 * t1066 - t999 * t1490;
	t1024 = qJD(4) * t1100 + t1050 * t1241 + t1051 * t1247;
	t1560 = t1241 * t1317 + t1247 * t1316;
	t1278 = t1241 * t1320 + t1247 * t1319;
	t1558 = t1241 * t1387 + t1247 * t1386;
	t1557 = t1241 * t1386 - t1247 * t1387;
	t1556 = t1242 * t1387 + t1248 * t1386;
	t1554 = qJD(2) * t1237 * (t1228 * t1522 + t1461) + t1198 * t1452 + (-t1205 * t1566 - 0.2e1 * t1225 * t1211) * qJD(3);
	t1553 = -0.2e1 * pkin(1);
	t1245 = cos(qJ(6));
	t1102 = t1122 * t1247 + t1476;
	t1239 = sin(qJ(6));
	t1482 = t1102 * t1239;
	t1062 = t1093 * t1245 + t1482;
	t1055 = 0.1e1 / t1062;
	t1056 = 0.1e1 / t1062 ^ 2;
	t1540 = t1162 / 0.2e1;
	t1539 = -t1163 / 0.2e1;
	t1537 = -t1174 / 0.2e1;
	t1536 = t1174 / 0.2e1;
	t1535 = t1178 / 0.2e1;
	t1534 = t1179 / 0.2e1;
	t1533 = t1193 / 0.2e1;
	t1530 = -t1241 / 0.2e1;
	t1012 = t1021 * t1240 - qJD(5) * t1448 + (qJD(5) * t1334 + t1514) * t1246;
	t1020 = -qJD(4) * t1334 - t1048 * t1241 + t1049 * t1247;
	t1002 = -t1012 * t1239 - qJD(6) * t1482 + (-qJD(6) * t1093 + t1020) * t1245;
	t1060 = -t1093 * t1239 + t1102 * t1245;
	t1054 = t1060 ^ 2;
	t1039 = t1054 * t1056 + 0.1e1;
	t1493 = t1056 * t1060;
	t1507 = qJD(6) * t1060;
	t1003 = t1012 * t1245 + t1020 * t1239 + t1507;
	t1504 = t1003 * t1055 * t1056;
	t1518 = 0.2e1 / t1039 ^ 2 * (t1002 * t1493 - t1054 * t1504);
	t1509 = qJD(5) * t1240;
	t1508 = qJD(5) * t1246;
	t1236 = t1234 * t1235;
	t1501 = t1103 * t1574;
	t1505 = 0.2e1 * (t1016 * t1402 + (t1104 * t1236 * t1509 - t1235 * t1501) * t1087) / t1070 ^ 2;
	t1502 = t1016 * t1234;
	t1037 = 0.1e1 / t1039;
	t1499 = t1037 * t1056;
	t1324 = t1127 * t1526 + t1128 * t1528;
	t1077 = (-t1182 * t1324 - t1289) * t1254 + t1124;
	t1078 = (t1556 * t1182 - t1290) * t1254;
	t1043 = t1077 * t1247 + t1078 * t1241;
	t1498 = t1043 * t1066;
	t1086 = t1577 * t1254;
	t1047 = t1085 * t1247 + t1086 * t1241;
	t1497 = t1047 * t1066;
	t1496 = t1053 * t1247;
	t1495 = t1055 * t1239;
	t1494 = t1055 * t1245;
	t1492 = t1060 * t1239;
	t1491 = t1060 * t1245;
	t1489 = t1065 * t1094;
	t1488 = t1065 * t1107;
	t1487 = t1066 * t1335;
	t1486 = t1066 * t1094;
	t1485 = t1066 * t1106;
	t1484 = t1335 * t1234;
	t1480 = t1104 * t1234;
	t1474 = t1182 * t1475;
	t1424 = qJD(2) * t1522;
	t1224 = t1424 * t1552;
	t1438 = t1233 - t1238;
	t1329 = t1438 * qJD(2) * t1431;
	t1192 = t1224 + t1329;
	t1467 = t1192 * t1237;
	t1460 = t1235 * t1240;
	t1458 = t1239 * t1240;
	t1457 = t1240 * t1245;
	t1450 = t1242 * t1258;
	t1443 = t1248 * t1258;
	t1433 = 0.4e1 * qJD(2);
	t1430 = -0.2e1 * t1519;
	t1428 = -0.2e1 * t1504;
	t1420 = t1033 * t1520;
	t1418 = t1056 * t1518;
	t1410 = qJD(5) * t1460;
	t1409 = t1103 * t1505;
	t1408 = t1002 * t1499;
	t1406 = t1034 * t1489;
	t1405 = t1034 * t1486;
	t1404 = t1335 * t1481;
	t1403 = t1335 * t1480;
	t1401 = t1335 * t1460;
	t1396 = -t1162 * t1167 / t1169 / 0.4e1;
	t1160 = t1554 * t1583 + (t1248 * t1356 + (t1186 * t1242 + t1188 * t1510) * t1432 + (-0.4e1 * qJD(3) * t1399 + (t1188 * t1453 + t1202 * t1444) * t1433) * pkin(2)) * pkin(3);
	t1363 = t1194 * t1396;
	t1372 = qJD(2) * t1225;
	t1079 = -t1471 + t1170 * t1363 + t1171 * t1248 - qJD(3) * t1473 + (-qJD(3) * t1464 + t1372 * t1553) * t1523 + t1181 * t1424 + (-t1197 * t1162 / 0.2e1 + t1170 * t1535 + t1160 * t1532) * t1167 + (t1198 * t1550 - 0.4e1 * t1365 + 0.8e1 * (t1566 * qJD(3) * t1228 - t1248 * t1372) * t1523) * pkin(3);
	t1389 = t1079 / 0.2e1 + t1117 / 0.2e1;
	t1359 = t1197 * t1396;
	t1369 = 0.2e1 * t1438;
	t1080 = t1164 + t1170 * t1359 + t1187 * t1462 + (t1160 * t1531 + t1170 * t1534 + t1196 * t1540) * t1167 + (t1397 + (-pkin(2) * t1212 + 0.2e1 * t1425) * t1453) * qJD(3) + (t1189 * t1225 + (t1212 * t1522 + t1369 * t1524) * t1248) * qJD(2) + t1554 * t1516;
	t1388 = t1542 - t1080 / 0.2e1;
	t1385 = t1249 * t1370 + t1372 * t1576 + t1224;
	t1379 = t1094 * t1430;
	t1377 = t1060 * t1428;
	t1071 = t1244 * t1078;
	t1271 = t1254 * t1585;
	t1072 = t1244 * t1271;
	t1040 = t1071 * t1247 + t1072 * t1241;
	t1307 = -t1040 * t1103 + t1043 * t1403;
	t1005 = t1307 * t1068;
	t1375 = t1005 * t1107 + t1040;
	t1081 = t1244 * t1086;
	t1082 = t1244 * t1085;
	t1044 = t1081 * t1247 - t1082 * t1241;
	t1306 = -t1044 * t1103 + t1047 * t1403;
	t1006 = t1306 * t1068;
	t1374 = t1006 * t1107 + t1044;
	t1305 = -t1101 * t1103 + t1106 * t1403;
	t1011 = t1305 * t1068;
	t1373 = t1011 * t1107 + t1101;
	t1367 = t1243 * t1415;
	t1366 = t1234 * t1409;
	t1364 = t1206 * t1412;
	t1297 = t1332 * t1474;
	t1176 = 0.2e1 * t1179 * pkin(3);
	t1327 = t1127 * t1537 - t1176 * t1539;
	t1328 = t1128 * t1536 - t1176 * t1541;
	t1350 = t1536 - qJD(3) * t1193 / 0.2e1;
	t1007 = (-t1585 * t1515 + (-t1193 * t1297 + (-t1556 * qJD(3) - t1388 * t1242 + t1389 * t1248) * t1182 + ((t1116 * t1533 - t1350 * t1161 + t1327) * t1248 + (t1117 * t1533 + t1350 * t1163 - t1328) * t1242) * t1183) * t1250) * t1254;
	t1333 = -t1446 + t1454;
	t1298 = t1333 * t1474;
	t1322 = t1079 * t1528 + t1080 * t1527;
	t1008 = (t1586 * t1515 + (-t1193 * t1298 + (qJD(3) * t1324 + t1322) * t1182 + (-t1174 * t1318 - t1176 * t1317 + t1193 * t1563) * t1183) * t1250) * t1254 + t1049;
	t1073 = -t1586 * t1440 + t1122;
	t1074 = t1250 * t1271;
	t1042 = t1073 * t1247 + t1074 * t1241;
	t1355 = -t1007 * t1247 + t1008 * t1241 + t1580 * t1042;
	t1175 = (qJD(2) * t1444 - t1413) * pkin(2) * t1576 + t1385;
	t1129 = (0.8e1 * t1364 - 0.4e1 * t1467) * t1255 + (t1231 * t1369 - 0.4e1 * t1382) * qJD(2) + ((t1203 * t1511 - t1248 * t1385) * t1432 + (t1510 * t1549 + 0.24e2 * t1367) * t1524 + (0.4e1 * (-qJD(2) * t1188 + qJD(3) * t1202) * t1444 + (0.4e1 * t1414 - 0.4e1 * t1468 + (-t1202 * t1242 - t1203 * t1248) * t1433) * t1243) * pkin(2)) * pkin(3);
	t1075 = t1195 * t1258 + t1165 * t1359 + (t1204 * t1511 - t1224 * t1248) * t1228 + (t1238 * t1429 + 0.4e1 * t1367) * t1524 + (t1129 * t1531 + t1165 * t1534 + t1200 * t1540) * t1167 + (t1329 + 0.4e1 * t1364 - 0.2e1 * t1467) * pkin(3) + ((t1344 * qJD(2) + (-t1450 + (t1212 + 0.4e1 * t1421) * t1248) * qJD(3)) * t1249 + (t1195 * t1552 + (-t1212 * t1242 + (-0.4e1 * pkin(3) * t1462 - t1204 - t1258) * t1248) * qJD(2) + t1315) * t1243) * pkin(2);
	t1076 = t1165 * t1363 + 0.2e1 * (-pkin(3) * t1206 * t1511 + t1192 * t1521 + 0.2e1 * t1371) * t1242 + t1173 * t1510 + (t1129 * t1532 + t1165 * t1535 + t1199 * t1540) * t1167 + (t1172 * t1249 + (-t1249 * t1443 + (-t1258 + (t1553 - 0.8e1 * t1521) * t1523) * t1453) * qJD(3) + ((-t1180 + t1450) * t1243 + (t1443 + t1383 * t1242 + t1190 + 0.2e1 * (t1237 * t1576 - pkin(3) + t1525) * t1523) * t1249) * qJD(2)) * pkin(2);
	t1326 = t1075 * t1527 + t1076 * t1528;
	t1009 = (-t1577 * t1515 + (t1191 * t1298 + (qJD(3) * t1320 + t1326) * t1182 + (-t1174 * t1319 + t1175 * t1317 - t1191 * t1563) * t1183) * t1250) * t1254;
	t1323 = t1075 * t1528 + t1076 * t1526;
	t1010 = (t1274 * t1515 + (t1191 * t1297 + (-qJD(3) * t1319 + t1323) * t1182 + (-t1174 * t1320 - t1175 * t1316 - t1191 * t1562) * t1183) * t1250) * t1254;
	t1083 = t1250 * t1086;
	t1084 = t1250 * t1085;
	t1046 = t1083 * t1247 - t1084 * t1241;
	t1354 = t1009 * t1241 - t1010 * t1247 + t1580 * t1046;
	t1351 = -0.2e1 * t1484 * t1501;
	t1347 = t1102 * t1506 + t1021;
	t1041 = -t1073 * t1241 + t1074 * t1247;
	t1045 = -t1083 * t1241 - t1084 * t1247;
	t1059 = -t1101 * t1239 + t1245 * t1567;
	t1336 = -t1101 * t1245 - t1239 * t1567;
	t1313 = t1056 * t1491 + t1495;
	t1312 = t1234 * t1567 + t1401;
	t1308 = qJD(5) * t1401 + t1502;
	t1295 = t1032 * t1480 - t1103 * t1410;
	t991 = qJD(4) * t1041 + t1007 * t1241 + t1008 * t1247;
	t1293 = qJD(6) * t1041 + t1042 * t1508 + t1240 * t991;
	t997 = qJD(4) * t1045 + t1009 * t1247 + t1010 * t1241;
	t1292 = qJD(6) * t1045 + t1046 * t1508 + t1240 * t997;
	t1288 = t1065 + (-t1066 * t1404 - t1065) * t1068;
	t1283 = -qJD(6) * t1334 + t1020 * t1240 + t1102 * t1508;
	t1280 = (-t1241 * t1349 - t1247 * t1348) * t1193;
	t1279 = -t1241 * t1319 + t1247 * t1320;
	t1277 = -t1241 * t1316 + t1247 * t1317;
	t1276 = (t1241 * t1332 + t1247 * t1333) * t1474;
	t1275 = (t1241 * t1333 - t1247 * t1332) * t1474;
	t1273 = t1183 * t1277;
	t1064 = t1102 * t1457 - t1239 * t1334;
	t1031 = -qJD(4) * t1107 - t1052 * t1241 + t1496;
	t1030 = t1045 * t1239 + t1046 * t1457;
	t1029 = -t1045 * t1245 + t1046 * t1458;
	t1026 = 0.1e1 / t1028;
	t1019 = t1041 * t1239 + t1042 * t1457;
	t1018 = -t1041 * t1245 + t1042 * t1458;
	t1017 = t1312 * t1103 * t1068;
	t1004 = t1288 * t1094;
	t1000 = (-t1085 * t1241 + t1086 * t1247) * qJD(4) + (t1191 * t1275 + (qJD(3) * t1278 + t1241 * t1326 - t1247 * t1323) * t1182 + (t1560 * t1175 + t1279 * t1174 + (qJD(3) * t1277 + t1241 * t1325 - t1247 * t1321) * t1191) * t1183) * t1254;
	t998 = (-t1081 * t1241 - t1082 * t1247) * qJD(4) + ((t1182 * t1278 + t1191 * t1273) * t1514 + (t1191 * t1276 + (qJD(3) * t1279 + t1241 * t1323 + t1247 * t1326) * t1182 + (t1277 * t1175 - t1278 * t1174 + (-t1560 * qJD(3) + t1321 * t1241 + t1325 * t1247) * t1191) * t1183) * t1244) * t1254;
	t995 = t1496 + (-t1077 * t1241 + t1078 * t1247) * qJD(4) + (-t1193 * t1275 + ((t1079 * t1527 + t1080 * t1529) * t1247 + (-t1321 + t1322) * t1241 + (t1318 * t1247 + (t1317 + t1324) * t1241) * qJD(3)) * t1182 + ((-t1327 * t1247 + (t1163 * t1537 + t1328) * t1241 + t1581) * t1248 + (t1328 * t1247 + (t1161 * t1537 + t1327) * t1241 - t1280) * t1242) * t1183) * t1254;
	t994 = t1066 * t1478 + t1065 * t1567 - (t1065 * t1477 + t1487) * t1017;
	t993 = t1011 * t1487 + (t1065 * t1373 - t1485) * t1246;
	t992 = (-t1071 * t1241 + t1072 * t1247) * qJD(4) + ((-t1193 * t1273 + (-t1557 * t1242 + t1558 * t1248) * t1182) * t1514 + (-t1193 * t1276 + ((t1241 * t1389 + t1247 * t1388) * t1248 + (-t1241 * t1388 + t1247 * t1389) * t1242 + (-t1242 * t1558 - t1248 * t1557) * qJD(3)) * t1182 + ((-(t1163 * t1530 + t1247 * t1541) * t1176 - t1280 - t1558 * t1174) * t1248 + (-(t1161 * t1530 + t1247 * t1539) * t1176 - t1581 + t1557 * t1174) * t1242) * t1183) * t1244) * t1254;
	t988 = t1006 * t1487 + (t1065 * t1374 - t1497) * t1246;
	t987 = t1005 * t1487 + (t1065 * t1375 - t1498) * t1246;
	t984 = t1312 * t1409 + (t1312 * t1574 + (-t1016 * t1460 + t1584 * t1234 + (-t1567 * t1460 + (-0.2e1 * t1236 * t1240 ^ 2 - t1234) * t1335) * qJD(5)) * t1103) * t1068;
	t983 = -t1305 * t1505 + (t1106 * t1351 - t1024 * t1103 + (t1106 * t1502 + t1032 * t1101 + (t1031 * t1234 + t1106 * t1410) * t1335) * t1104) * t1068;
	t982 = -t1306 * t1505 + (t1047 * t1351 - t1103 * t998 + (t1000 * t1484 + t1032 * t1044 + t1047 * t1308) * t1104) * t1068;
	t981 = -t1307 * t1505 + (t1043 * t1351 - t1103 * t992 + (t1032 * t1040 + t1043 * t1308 + t1484 * t995) * t1104) * t1068;
	t1 = [t1094 * t1366 + (-t1013 * t1481 + t1094 * t1295) * t1068, t982, t981, t983, t984, 0; -t1004 * t1368 - t1335 * t1420 + ((t1567 * qJD(5) + t1025 * t1246 - t1221) * t1033 + (t1004 * t1013 - t1335 * t986) * t1034 + ((t1068 * t1404 * t999 + t1505) * t1406 + t1430 * t1004 + (t1335 * t1366 + t999 + (t1295 * t1335 - t1407 - t999) * t1068) * t1405 + t1288 * t1034 * t1013) * t1094) * t1026, -t988 * t1368 + (t988 * t1379 + ((t1565 * t1006 + t1487 * t982) * t1094 + t988 * t1013) * t1034 + (t1046 * t1033 + (-t1006 * t1488 - t1044 * t1065 + t1497) * t1500) * t1509) * t1026 + (t1046 * t1420 + (-t997 * t1033 + (t1046 * t986 + (t1374 * t999 - t1000) * t1486 + (t1006 * t1032 + t1047 * t999 + t1107 * t982 + t998) * t1489) * t1034) * t1026) * t1246, -t987 * t1368 + (t987 * t1379 + ((t1565 * t1005 + t1487 * t981) * t1094 + t987 * t1013) * t1034 + (t1042 * t1033 + (-t1005 * t1488 - t1040 * t1065 + t1498) * t1500) * t1509) * t1026 + (t1042 * t1420 + (-t991 * t1033 + (t1042 * t986 + (t1375 * t999 - t995) * t1486 + (t1005 * t1032 + t1043 * t999 + t1107 * t981 + t992) * t1489) * t1034) * t1026) * t1246, -t993 * t1368 + (t993 * t1379 + ((t1565 * t1011 + t1487 * t983) * t1094 + t993 * t1013) * t1034 + (t1102 * t1033 + (-t1011 * t1488 - t1065 * t1101 + t1485) * t1500) * t1509) * t1026 + (t1102 * t1420 + (-t1020 * t1033 + (t1102 * t986 + (t1373 * t999 - t1031) * t1486 + (t1011 * t1032 + t1106 * t999 + t1107 * t983 + t1024) * t1489) * t1034) * t1026) * t1246, (-t1033 * t1093 - t1500 * t994) * t1520 + (t994 * t1379 + t1012 * t1033 + (t994 * t1013 - t1093 * t986) * t1034 + (qJD(5) * t1477 - t1017 * t1353 + t1032 * t1240 + t1335 * t984 + t1567 * t999) * t1405 + (-t1584 + (-t1240 * t999 + t1246 * t984) * t1107 + t1291 * t1017) * t1406) * t1026, 0; (t1055 * t1336 - t1059 * t1493) * t1518 + ((qJD(6) * t1059 + t1024 * t1245 - t1239 * t1584) * t1055 + t1059 * t1377 + (t1336 * t1003 + (qJD(6) * t1336 - t1024 * t1239 - t1245 * t1584) * t1060 + t1059 * t1002) * t1056) * t1037, (-t1029 * t1055 - t1030 * t1493) * t1518 + (t1030 * t1377 + t1354 * t1494 + t1292 * t1495 + (t1030 * t1002 - t1029 * t1003 + t1292 * t1491 - t1354 * t1492) * t1056) * t1037, (-t1018 * t1055 - t1019 * t1493) * t1518 + (t1019 * t1377 + t1355 * t1494 + t1293 * t1495 + (t1019 * t1002 - t1018 * t1003 + t1293 * t1491 - t1355 * t1492) * t1056) * t1037, (-t1060 * t1418 + t1408) * t1064 + (-t1003 * t1499 - t1055 * t1518) * (t1102 * t1458 + t1245 * t1334) + ((t1239 * t1283 + t1245 * t1347) * t1055 + (-t1239 * t1347 + t1245 * t1283) * t1493 + t1064 * t1377) * t1037, -t1313 * t1094 * t1518 + (t1313 * t1013 + ((qJD(6) * t1055 + t1377) * t1245 + (t1002 * t1245 + (-t1003 - t1507) * t1239) * t1056) * t1094) * t1037, -t1518 + (0.2e1 * t1408 + (t1037 * t1428 - t1418) * t1060) * t1060;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end