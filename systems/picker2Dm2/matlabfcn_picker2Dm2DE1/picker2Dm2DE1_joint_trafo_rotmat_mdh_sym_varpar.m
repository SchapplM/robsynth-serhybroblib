% Calculate homogenous joint transformation matrices for
% picker2Dm2DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_mdh [4x4x15]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-09 18:54
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = picker2Dm2DE1_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm2DE1_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm2DE1_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-09 14:25:35
% EndTime: 2020-05-09 14:25:40
% DurationCPUTime: 4.40s
% Computational Cost: add. (22613->404), mult. (67978->488), div. (404->5), fcn. (11370->31), ass. (0->229)
t618 = 4 * pkin(1);
t485 = pkin(4) ^ 2;
t433 = -t485 / 0.4e1;
t490 = pkin(3) ^ 2;
t617 = t433 + t490 / 0.2e1;
t616 = 2 * pkin(7);
t457 = cos(qJ(1));
t423 = t457 ^ 2;
t615 = -0.2e1 * t423;
t469 = 0.2e1 * t490;
t614 = 0.4e1 * t490;
t495 = pkin(1) ^ 2;
t493 = t495 ^ 2;
t613 = 4 * t493;
t612 = 2 * t495;
t473 = 6 * t495;
t497 = pkin(7) ^ 2;
t481 = 2 * t497;
t502 = t490 ^ 2;
t468 = 0.5e1 * t502;
t450 = sin(pkin(8));
t451 = cos(pkin(8));
t454 = sin(qJ(1));
t378 = t450 * t454 + t451 * t457;
t611 = t378 / 0.2e1;
t411 = pkin(1) * t457;
t398 = t411 + pkin(7);
t453 = sin(qJ(2));
t409 = pkin(3) * t453;
t456 = cos(qJ(2));
t410 = pkin(3) * t456;
t610 = t454 * pkin(1);
t399 = t409 * t616;
t420 = t453 ^ 2;
t596 = t490 * t420;
t562 = 0.2e1 * t596;
t576 = -t490 + t497;
t379 = t399 + t562 + t576;
t600 = t454 * t456;
t558 = pkin(3) * t600;
t530 = pkin(1) * t558;
t391 = -0.2e1 * t530;
t483 = 0.2e1 * pkin(3);
t415 = t495 + t497;
t538 = -t485 + t415;
t524 = t399 + t538;
t594 = t495 * t423;
t560 = -0.4e1 * t594;
t566 = -0.4e1 * t409;
t574 = t495 - t497;
t577 = t485 - t497;
t397 = t409 + pkin(7);
t606 = t397 * t457;
t360 = sqrt(t379 * t560 + 0.4e1 * t574 * t596 + pkin(7) * t538 * t566 - t493 + (-0.2e1 * t490 + t577) * t612 - (t497 - (t483 + pkin(4)) * pkin(4)) * (t497 + (t483 - pkin(4)) * pkin(4)) + (-(t391 + t524) * t606 + t524 * t558) * t618);
t484 = t485 ^ 2;
t496 = t497 ^ 2;
t575 = t493 + t496;
t580 = t481 - t485;
t593 = t497 * t485;
t514 = t580 * t495 + t484 / 0.6e1 + t575 - t593;
t376 = -t502 / 0.6e1 + t514;
t444 = -t490 / 0.3e1;
t405 = t444 + t497;
t380 = t405 * t391;
t386 = t409 + t398;
t414 = -0.3e1 * t490 + t497;
t422 = t457 * t423;
t498 = pkin(1) * t495;
t591 = t498 * t422;
t564 = pkin(7) * t591;
t533 = 0.8e1 * t564;
t389 = t414 * t533;
t413 = -t485 - t490;
t480 = 3 * t497;
t401 = t480 + t413;
t605 = t401 * t495;
t390 = 0.10e2 * t605;
t440 = 0.4e1 / 0.3e1 * t490;
t434 = -t485 / 0.3e1;
t543 = t434 + t415;
t392 = t440 + t543;
t435 = -t485 / 0.2e1;
t537 = t490 + t415;
t394 = t435 + t537;
t395 = -t485 + t537;
t569 = 0.2e1 * t411;
t400 = pkin(7) * t569;
t479 = 4 * t497;
t403 = (t479 + t485) * t495;
t406 = -t495 / 0.3e1 + t497;
t407 = 0.10e2 / 0.3e1 * t495;
t408 = t415 ^ 2;
t412 = -0.30e2 * t485 + (60 * t497);
t417 = -3 * t495 + t497;
t432 = -t485 / 0.6e1;
t441 = 0.2e1 / 0.3e1 * t490;
t446 = 0.4e1 / 0.3e1 * t495;
t448 = t495 / 0.2e1;
t459 = 15 * t493;
t460 = 15 * t495;
t461 = 10 * t495;
t466 = -0.2e1 * t485;
t467 = -0.5e1 * t485;
t470 = 7 * t493;
t471 = 5 * t493;
t472 = 7 * t495;
t477 = 3 * t496;
t478 = 8 * t497;
t501 = pkin(3) * t490;
t487 = t501 ^ 2;
t506 = pkin(7) * t497;
t513 = 0.5e1 / 0.6e1 * t502 + t514;
t515 = t497 - t530;
t588 = t484 / 0.2e1 - t502 / 0.2e1;
t523 = -0.3e1 * t593 + t477 + t588;
t527 = -0.6e1 * t530;
t437 = -0.3e1 / 0.2e1 * t485;
t587 = t437 + t480;
t590 = t415 * ((t437 + t481) * t495 - 0.3e1 / 0.2e1 * t593 + t575 + t588) + t487;
t516 = ((t407 + t580) * t490 + t513) * t527 + (t459 + (-0.9e1 * t485 + (18 * t497)) * t495 + t523) * t490 + (t460 + t587) * t502 + t590;
t526 = -0.4e1 * t530;
t517 = t394 * t526;
t474 = 3 * t495;
t581 = t474 + t497;
t540 = t490 + t581;
t518 = -(0.3e1 * t490 + t415) * t610 + t540 * t410;
t436 = -0.2e1 / 0.3e1 * t485;
t445 = -0.2e1 / 0.3e1 * t490;
t541 = t436 + t415;
t582 = t461 + t481;
t586 = t445 + t497;
t519 = -(t468 + ((5 * t495) + t401) * t469 + (t445 + t541) * t415) * t610 + (t502 + (t436 + t445 + t582) * t490 + t471 + 0.2e1 * t605 + t497 * (t436 + t586)) * t410;
t579 = t484 - t502;
t522 = -0.6e1 * t593 + (6 * t496) + t579;
t542 = t436 + t441 + t481;
t589 = (t441 + t541) * t415 + t502;
t525 = t392 * t526 + (t473 + t542) * t490 + t589;
t556 = t498 * t410;
t528 = t422 * t556;
t595 = t493 * t423 ^ 2;
t529 = t595 * t410;
t553 = 0.16e2 * t591;
t531 = pkin(7) * t553;
t532 = 0.20e2 / 0.3e1 * t495;
t578 = -t485 + t490;
t539 = t480 + t578;
t442 = t490 / 0.3e1;
t544 = t432 + t442 + t497;
t545 = t485 / 0.3e1 + t442 + t481;
t546 = 0.2e1 / 0.3e1 * t485 + t441 + t479;
t547 = 0.4e1 / 0.3e1 * t485 + t440 - (2 * t497);
t598 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t548 = t454 * t598;
t567 = 0.6e1 * t411;
t550 = pkin(7) * t567;
t568 = 0.4e1 * t411;
t551 = pkin(7) * t568;
t552 = -t610 / 0.2e1;
t554 = 0.12e2 * t594;
t555 = t495 * t410;
t599 = t456 * t457;
t557 = pkin(3) * t599;
t559 = 0.4e1 * t594;
t561 = 0.8e1 * t595;
t601 = t453 * t420 * t501;
t563 = -0.8e1 * t601;
t565 = 0.2e1 * t610;
t570 = pkin(7) * t411;
t571 = 4 * pkin(7);
t572 = t496 + t502;
t573 = t496 - t493;
t583 = 0.4e1 / 0.7e1 * t497 - t485 / 0.7e1;
t584 = t448 + t497;
t585 = t495 / 0.3e1 + t497;
t592 = t497 * t495;
t597 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t602 = t420 ^ 2 * t502;
t603 = t413 * t497;
t604 = t408 * (-t490 + t538);
t607 = (-t454 * t498 + t555) * t423;
t609 = ((-0.24e2 * (0.4e1 / 0.3e1 * t594 + t400 + t406) * t602 * t610 - 0.12e2 * (-0.8e1 / 0.3e1 * t529 + ((t446 + t544) * t410 - (0.7e1 / 0.6e1 * t490 + t432 + t584) * t610) * t559 + (-t490 * t574 - 0.5e1 / 0.3e1 * t493 + t545 * t495 + t497 * (t434 + t405)) * t410 + (-t502 + (-t532 + t546) * t490 - (3 * t493) + t547 * t495 + t496) * t552 + (-t454 * t493 * t422 + ((t495 + t544) * t410 + (t469 - t574) * t552) * t411) * t571) * t596 + 0.24e2 * t405 * t529 + ((t497 + 0.5e1 / 0.2e1 * t490 + 0.3e1 / 0.2e1 * t495 + t435) * t410 + t414 * t610 / 0.2e1) * t531 - 0.6e1 * ((-0.3e1 * t502 + (-t532 + t547) * t490 + t546 * t495 + t573) * t410 - 0.2e1 * (-0.5e1 / 0.3e1 * t502 + (-t495 + t545) * t490 + t497 * (t444 + t543)) * t610) * t594 - 0.6e1 * t519 * t570 - (t487 + ((21 * t495) + t401) * t502 + (t390 + t477 + (35 * t493) + 0.2e1 * t603) * t490 + (t470 + (t467 + t478 - 0.5e1 * t490) * t495 + t497 * (-t485 + t576)) * t415) * t410 + (0.7e1 * t487 + (t472 + t401) * t468 + (t390 + (21 * t493) + (9 * t496) + 0.6e1 * t603) * t490 + t604) * t610) * t360 + (0.16e2 * (t561 + t531 + (-8 * t493 + 12 * t592) * t423 + (-12 * pkin(7) * t498 + t506 * t618) * t457 - (6 * t592) + t575) * t602 + 0.24e2 * (t586 * t561 + 0.14e2 * (-0.32e2 / 0.21e2 * (t497 + t490 / 0.4e1 + t495 / 0.4e1 - t485 / 0.8e1) * t530 + 0.5e1 / 0.42e2 * t502 + (0.16e2 / 0.21e2 * t495 + t583) * t490 + t493 / 0.7e1 + t583 * t495 + t496 - 0.3e1 / 0.7e1 * t593 + t484 / 0.42e2) * t594 + t406 * t517 - t574 * t502 + (t403 - 0.10e2 / 0.3e1 * t493 + (2 * t496) - t593) * t490 + t376 * t597 + ((-0.2e1 / 0.3e1 * t530 + t433 + t584) * t553 + (-0.8e1 / 0.3e1 * (t585 + t617) * t530 + 0.5e1 / 0.18e2 * t502 + (0.4e1 / 0.3e1 * t497 + t446 + t434) * t490 + t496 + 0.2e1 / 0.3e1 * t592 - 0.2e1 / 0.3e1 * t593 - t493 / 0.3e1 + t484 / 0.18e2) * t567) * pkin(7)) * t596 + 0.16e2 * (-0.6e1 * t497 * t490 + t572) * t595 + 0.32e2 * (t391 * t598 + t394 * t414) * t564 + 0.24e2 * (t405 * t517 - t487 + (-t407 + t577) * t502 + (t403 + t502 / 0.6e1 - t484 / 0.6e1 + t573) * t490 + t376 * t497) * t594 + 0.8e1 * t516 * t570 - 0.8e1 * ((t472 + t587) * t502 + (t470 + (t467 + (10 * t497)) * t495 + t523) * t490 + t590) * t530 + t502 ^ 2 + (t466 + t479 + (28 * t495)) * t487 + (t412 * t495 + (70 * t493) + t522) * t502 + (t412 * t493 + t522 * t473 + t579 * t481 - 0.6e1 * t496 * t485 + (28 * t498 ^ 2) + (4 * t506 ^ 2)) * t490 + t395 * t604) * t386 + (((0.4e1 * t607 + (t410 + t565) * t400 + t417 * t410 + (t435 + t540) * t565) * t563 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t490 + t448 + t432) * t410 + pkin(1) * t548) * t560 + (-0.8e1 * t528 + ((t434 + t441 + t581) * t410 - (0.8e1 / 0.3e1 * t490 + t543) * t610) * t568) * pkin(7) + t519) * t409) * t360 + (0.32e2 * (t533 + (-0.4e1 * t454 * t556 + t613 + (t614 + t466 + t478) * t495) * t423 + (-t495 + t515 + t617) * t551 + t391 * t597 + t417 * t394) * t601 + 0.8e1 * (t389 + (t394 * t598 + t380) * t554 + (t517 + (t473 + t580) * t490 + t513) * t550 + t516) * t409) * t386) * t398) / ((-0.4e1 * (-t574 * t410 + 0.2e1 * t607 + (t557 * t616 + t454 * (t490 + t612)) * pkin(1)) * t596 + 0.8e1 * pkin(7) * t528 + ((pkin(3) * t613 + 0.8e1 * t495 * t501) * t456 + 0.4e1 * t498 * t548) * t423 - 0.4e1 * t518 * t570 - (t582 * t490 + t471 + t572 + (6 * t592)) * t410 + (t468 + (t461 + 6 * t497) * t490 + t408) * t610) * t360 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t530 + 0.4e1 / 0.9e1 * t490 - t485 / 0.9e1 + t585) * t594 + t406 * t391 + t392 * t597 + (t591 + (t432 + t441 + t515) * t411) * t571) * t596 + t389 + (t392 * t598 + t380) * t554 + t525 * t550 + ((t407 + t542) * t490 + t589) * t527 + t487 + (t460 + t539) * t502 + (t539 * t473 + t578 * t481 + t459 + t477) * t490 + t408 * t395) * t386 + ((t563 * t610 + (t555 * t615 + (t410 - t610) * t400 + t518) * t566) * t360 + (0.8e1 * (t400 + t559 + t417) * t601 + 0.6e1 * (t576 * t559 + (t391 + t392) * t551 + t525) * t409) * t386) * t398);
t369 = 0.1e1 / (t397 * t569 + t391 + t399 + t537);
t491 = 0.1e1 / pkin(3);
t608 = t369 * t491;
t486 = 0.1e1 / pkin(4);
t549 = t369 * t486 / pkin(3) ^ 2;
t536 = t609 / 0.4e1;
t535 = t608 / 0.2e1;
t534 = t486 * t491 / 0.2e1;
t521 = t469 + t474 - t577;
t520 = -pkin(1) + t558;
t458 = cos(pkin(9));
t455 = sin(pkin(9));
t384 = t469 + t524;
t382 = -t453 * t457 + t600;
t381 = -t453 * t454 - t599;
t377 = t450 * t457 - t451 * t454;
t371 = atan2(t377, -t378);
t370 = atan2(t377, t378);
t368 = cos(t371);
t367 = cos(t370);
t366 = sin(t371);
t365 = sin(t370);
t362 = -t366 * t450 + t368 * t451;
t361 = t366 * t451 + t368 * t450;
t359 = (-t520 + t606) * t360 + (t379 * t569 + t384 * t397) * t454 + (t384 * t457 + (0.4e1 * t423 - 0.2e1) * t397 * pkin(1)) * t410;
t358 = (t397 * t454 + t557) * t360 - (t399 + t521 + t526) * t606 + t520 * t399 + t521 * t558 + (t379 * t615 - t538 + t562 - t614) * pkin(1);
t357 = atan2(t359 * t535, t358 * t535);
t356 = cos(t357);
t355 = sin(t357);
t354 = (t358 * t611 + t359 * t377 / 0.2e1) * t608;
t353 = (-t358 * t377 / 0.2e1 + t359 * t611) * t608;
t351 = t353 * t455 + t354 * t458;
t350 = -t353 * t458 + t354 * t455;
t348 = atan2(t350, -t351);
t347 = atan2(t350, t351);
t346 = cos(t348);
t345 = cos(t347);
t344 = sin(t348);
t343 = sin(t347);
t342 = atan2(t360 * t534, t534 * t609);
t341 = cos(t342);
t340 = sin(t342);
t339 = (t358 * t360 / 0.4e1 + t359 * t536) * t549;
t338 = (t358 * t536 - t359 * t360 / 0.4e1) * t549;
t337 = atan2(t338 * t381 + t339 * t382, -t338 * t382 + t339 * t381);
t336 = cos(t337);
t335 = sin(t337);
t1 = [-t457, t454, 0, 0; -t454, -t457, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t356, -t355, 0, pkin(1); t355, t356, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t345, t343, 0, pkin(2); -t343, -t345, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t341, -t340, 0, pkin(3); t340, t341, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t362, -t361, 0, t451 * pkin(5); t361, t362, 0, t450 * pkin(5); 0, 0, 1, 0; 0, 0, 0, 1; -t345, t343, 0, 0; -t343, -t345, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t453, t456, 0, pkin(7); -t456, t453, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t367, t365, 0, pkin(1); -t365, -t367, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t346, t344, 0, pkin(6); -t344, -t346, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t336, t335, 0, pkin(4); -t335, -t336, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t368, -t366, 0, pkin(5); t366, t368, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t346, t344, 0, pkin(6); -t344, -t346, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(3); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(1); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(2); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,15);             % numerisch
else,                         T_mdh = sym('xx', [4,4,15]); end % symbolisch

for i = 1:15
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
