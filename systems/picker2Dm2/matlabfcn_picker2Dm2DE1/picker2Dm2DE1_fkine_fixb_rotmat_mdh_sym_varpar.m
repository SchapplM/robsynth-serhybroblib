% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% picker2Dm2DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   11:  mdh base (link 0) -> mdh frame (11-1), link (11-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-09 18:54
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_c_mdh = picker2Dm2DE1_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm2DE1_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm2DE1_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-09 14:25:23
% EndTime: 2020-05-09 14:25:35
% DurationCPUTime: 10.66s
% Computational Cost: add. (122669->432), mult. (344874->528), div. (3164->6), fcn. (72866->31), ass. (0->255)
t172 = 0.1e1 / pkin(4);
t325 = 0.1e1 / pkin(3);
t314 = t325 / 0.2e1;
t258 = t172 * t314;
t176 = (pkin(3) ^ 2);
t182 = (pkin(7) ^ 2);
t101 = -3 * t176 + t182;
t180 = (pkin(1) ^ 2);
t102 = t180 + t182;
t104 = -3 * t180 + t182;
t144 = cos(qJ(1));
t110 = t144 ^ 2;
t109 = t144 * t110;
t171 = pkin(4) ^ 2;
t119 = -t171 / 0.6e1;
t120 = -t171 / 0.4e1;
t121 = -t171 / 0.3e1;
t122 = -t171 / 0.2e1;
t128 = 0.2e1 / 0.3e1 * t176;
t131 = -t176 / 0.3e1;
t133 = 0.4e1 / 0.3e1 * t180;
t135 = t180 / 0.2e1;
t141 = sin(qJ(1));
t143 = cos(qJ(2));
t178 = t180 ^ 2;
t146 = 15 * t178;
t147 = 15 * t180;
t148 = 10 * t180;
t153 = -0.2e1 * t171;
t154 = -0.5e1 * t171;
t187 = t176 ^ 2;
t155 = 5 * t187;
t156 = 7 * t178;
t157 = 5 * t178;
t158 = 7 * t180;
t159 = 6 * t180;
t181 = t182 ^ 2;
t163 = 3 * t181;
t164 = 8 * t182;
t165 = 4 * t182;
t167 = 2 * t182;
t169 = 0.1e1 / t314;
t170 = t171 ^ 2;
t186 = pkin(3) * t176;
t173 = t186 ^ 2;
t183 = pkin(1) * t180;
t191 = pkin(7) * t182;
t284 = t178 + t181;
t289 = t167 - t171;
t300 = t182 * t171;
t210 = t289 * t180 + t170 / 0.6e1 + t284 - t300;
t208 = 0.5e1 / 0.6e1 * t187 + t210;
t307 = t141 * t143;
t263 = pkin(3) * t307;
t234 = pkin(1) * t263;
t213 = t182 - t234;
t228 = -0.4e1 * t234;
t242 = t176 + t102;
t78 = t122 + t242;
t215 = t78 * t228;
t297 = t170 / 0.2e1 - t187 / 0.2e1;
t227 = -0.3e1 * t300 + t163 + t297;
t229 = -0.6e1 * t234;
t124 = -0.3e1 / 0.2e1 * t171;
t166 = 3 * t182;
t296 = t124 + t166;
t313 = t173 + t102 * ((t124 + t167) * t180 - 0.3e1 / 0.2e1 * t300 + t284 + t297);
t94 = 0.10e2 / 0.3e1 * t180;
t220 = ((t94 + t289) * t176 + t208) * t229 + (t146 + (-0.9e1 * t171 + (18 * t182)) * t180 + t227) * t176 + (t147 + t296) * t187 + t313;
t160 = 3 * t180;
t290 = t160 + t182;
t246 = t176 + t290;
t319 = pkin(1) * t141;
t97 = pkin(3) * t143;
t222 = t246 * t97 - t319 * (3 * t176 + t102);
t123 = -0.2e1 / 0.3e1 * t171;
t132 = -0.2e1 / 0.3e1 * t176;
t247 = t123 + t102;
t291 = t148 + t167;
t295 = t132 + t182;
t100 = -t171 - t176;
t86 = t166 + t100;
t315 = t86 * t180;
t324 = 2 * t176;
t223 = -t319 * (t155 + ((5 * t180) + t86) * t324 + (t132 + t247) * t102) + (t187 + (t123 + t132 + t291) * t176 + t157 + 0.2e1 * t315 + t182 * (t123 + t295)) * t97;
t288 = t170 - t187;
t226 = -0.6e1 * t300 + (6 * t181) + t288;
t298 = t183 * t109;
t231 = t298 * t97;
t302 = t178 * t110 ^ 2;
t232 = t302 * t97;
t248 = t123 + t128 + t167;
t312 = t187 + (t128 + t247) * t102;
t127 = 0.4e1 / 0.3e1 * t176;
t249 = t121 + t102;
t76 = t127 + t249;
t233 = t76 * t228 + t312 + (t159 + t248) * t176;
t260 = 0.16e2 * t298;
t237 = pkin(7) * t260;
t238 = 0.20e2 / 0.3e1 * t180;
t270 = pkin(7) * t298;
t241 = 0.8e1 * t270;
t287 = -t171 + t176;
t245 = t166 + t287;
t129 = t176 / 0.3e1;
t250 = t119 + t129 + t182;
t251 = t171 / 0.3e1 + t129 + t167;
t252 = 0.2e1 / 0.3e1 * t171 + t128 + t165;
t253 = 0.4e1 / 0.3e1 * t171 + t127 - (2 * t182);
t305 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t254 = t141 * t305;
t98 = pkin(1) * t144;
t274 = 0.6e1 * t98;
t256 = pkin(7) * t274;
t275 = 0.4e1 * t98;
t257 = pkin(7) * t275;
t259 = -t319 / 0.2e1;
t301 = t180 * t110;
t261 = 0.12e2 * t301;
t306 = t143 * t144;
t262 = pkin(3) * t306;
t264 = t180 * t97;
t266 = 0.4e1 * t301;
t267 = 0.8e1 * t302;
t140 = sin(qJ(2));
t107 = t140 ^ 2;
t309 = t140 * t107 * t186;
t269 = -0.8e1 * t309;
t96 = pkin(3) * t140;
t273 = -0.4e1 * t96;
t277 = 0.2e1 * t319;
t278 = pkin(7) * t98;
t280 = 4 * pkin(7);
t281 = t181 + t187;
t282 = t181 - t178;
t283 = t180 - t182;
t285 = -t176 + t182;
t286 = t171 - t182;
t292 = 0.4e1 / 0.7e1 * t182 - t171 / 0.7e1;
t293 = t135 + t182;
t294 = t180 / 0.3e1 + t182;
t299 = t182 * t180;
t304 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t308 = t107 * t176;
t310 = t107 ^ 2 * t187;
t311 = t100 * t182;
t316 = (-t141 * t183 + t264) * t110;
t244 = -t171 + t102;
t95 = t102 ^ 2;
t317 = t95 * (-t176 + t244);
t321 = 2 * t180;
t322 = 4 * t178;
t323 = 4 * t176;
t326 = t120 + t176 / 0.2e1;
t331 = 4 * pkin(1);
t268 = 0.2e1 * t308;
t84 = pkin(7) * t140 * t169;
t212 = t84 + t268 + t285;
t209 = t212 * t110;
t230 = t84 + t244;
t243 = -(2 * t176) + t286;
t320 = t96 + pkin(7);
t255 = t320 * t144;
t75 = -0.2e1 * t234;
t44 = sqrt(-0.4e1 * t180 * t209 + 0.4e1 * t283 * t308 + pkin(7) * t244 * t273 - t178 + t243 * t321 - (t182 - (t169 + pkin(4)) * pkin(4)) * (t182 + (t169 - pkin(4)) * pkin(4)) + (-(t75 + t230) * t255 + t230 * t263) * t331);
t62 = -t187 / 0.6e1 + t210;
t90 = t131 + t182;
t65 = t90 * t75;
t83 = t98 + pkin(7);
t70 = t96 + t83;
t73 = t101 * t241;
t74 = 0.10e2 * t315;
t79 = -t171 + t242;
t276 = 0.2e1 * t98;
t85 = pkin(7) * t276;
t88 = (t165 + t171) * t180;
t91 = -t180 / 0.3e1 + t182;
t99 = -0.30e2 * t171 + (60 * t182);
t318 = ((-0.24e2 * (0.4e1 / 0.3e1 * t301 + t85 + t91) * t310 * t319 - 0.12e2 * (-0.8e1 / 0.3e1 * t232 + ((t133 + t250) * t97 - (0.7e1 / 0.6e1 * t176 + t119 + t293) * t319) * t266 + (-(t176 * t283) - 0.5e1 / 0.3e1 * t178 + t251 * t180 + t182 * (t121 + t90)) * t97 + (-t187 + (-t238 + t252) * t176 - (3 * t178) + t253 * t180 + t181) * t259 + (-t141 * t178 * t109 + ((t180 + t250) * t97 + (t324 - t283) * t259) * t98) * t280) * t308 + 0.24e2 * t90 * t232 + ((t182 + 0.5e1 / 0.2e1 * t176 + 0.3e1 / 0.2e1 * t180 + t122) * t97 + t101 * t319 / 0.2e1) * t237 - 0.6e1 * ((-(3 * t187) + (-t238 + t253) * t176 + t252 * t180 + t282) * t97 - 0.2e1 * (-0.5e1 / 0.3e1 * t187 + (-t180 + t251) * t176 + t182 * (t131 + t249)) * t319) * t301 - 0.6e1 * t223 * t278 - (t173 + ((21 * t180) + t86) * t187 + (t163 + (35 * t178) + t74 + 0.2e1 * t311) * t176 + (t156 + (t154 + t164 - (5 * t176)) * t180 + t182 * (-t171 + t285)) * t102) * t97 + ((7 * t173) + (t158 + t86) * t155 + ((21 * t178) + (9 * t181) + t74 + 0.6e1 * t311) * t176 + t317) * t319) * t44 + (0.16e2 * (t267 + t237 + (-8 * t178 + 12 * t299) * t110 + (-12 * pkin(7) * t183 + t191 * t331) * t144 - (6 * t299) + t284) * t310 + 0.24e2 * (t295 * t267 + 0.14e2 * (-0.32e2 / 0.21e2 * (t182 + t176 / 0.4e1 + t180 / 0.4e1 - t171 / 0.8e1) * t234 + 0.5e1 / 0.42e2 * t187 + (0.16e2 / 0.21e2 * t180 + t292) * t176 + t178 / 0.7e1 + t292 * t180 + t181 - 0.3e1 / 0.7e1 * t300 + t170 / 0.42e2) * t301 + t91 * t215 - (t283 * t187) + (-0.10e2 / 0.3e1 * t178 + (2 * t181) - t300 + t88) * t176 + t62 * t304 + ((-0.2e1 / 0.3e1 * t234 + t120 + t293) * t260 + (-0.8e1 / 0.3e1 * (t294 + t326) * t234 + 0.5e1 / 0.18e2 * t187 + (0.4e1 / 0.3e1 * t182 + t133 + t121) * t176 + t181 + 0.2e1 / 0.3e1 * t299 - 0.2e1 / 0.3e1 * t300 - t178 / 0.3e1 + t170 / 0.18e2) * t274) * pkin(7)) * t308 + 0.16e2 * (-6 * t182 * t176 + t281) * t302 + 0.32e2 * (t101 * t78 + t305 * t75) * t270 + 0.24e2 * (t90 * t215 - t173 + (-t94 + t286) * t187 + (t88 + t187 / 0.6e1 - t170 / 0.6e1 + t282) * t176 + t62 * t182) * t301 + 0.8e1 * t220 * t278 - 0.8e1 * ((t158 + t296) * t187 + (t156 + (t154 + (10 * t182)) * t180 + t227) * t176 + t313) * t234 + (t187 ^ 2) + (t153 + t165 + (28 * t180)) * t173 + (t180 * t99 + (70 * t178) + t226) * t187 + (t159 * t226 + t167 * t288 - 0.6e1 * t181 * t171 + t99 * t178 + (28 * t183 ^ 2) + (4 * t191 ^ 2)) * t176 + t79 * t317) * t70 + (((0.4e1 * t316 + (t97 + t277) * t85 + t104 * t97 + (t122 + t246) * t277) * t269 - 0.6e1 * (-0.4e1 * ((0.5e1 / 0.6e1 * t176 + t135 + t119) * t143 * t169 + pkin(1) * t254) * t301 + (-0.8e1 * t231 + ((t121 + t128 + t290) * t97 - (0.8e1 / 0.3e1 * t176 + t249) * t319) * t275) * pkin(7) + t223) * t96) * t44 + (0.32e2 * (t241 + (-0.4e1 * t183 * t263 + t322 + (t323 + t153 + t164) * t180) * t110 + (-t180 + t213 + t326) * t257 + t75 * t304 + t104 * t78) * t309 + 0.8e1 * (t73 + (t305 * t78 + t65) * t261 + (t215 + (t159 + t289) * t176 + t208) * t256 + t220) * t96) * t70) * t83) / ((-0.4e1 * (-t283 * t97 + 0.2e1 * t316 + (0.2e1 * pkin(7) * t262 + t141 * (t176 + t321)) * pkin(1)) * t308 + 0.8e1 * pkin(7) * t231 + ((pkin(3) * t322 + 8 * t180 * t186) * t143 + 0.4e1 * t183 * t254) * t110 - 0.4e1 * t222 * t278 - (t176 * t291 + t157 + t281 + 6 * t299) * t97 + (t155 + (t148 + 6 * t182) * t176 + t95) * t319) * t44 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t234 + 0.4e1 / 0.9e1 * t176 - t171 / 0.9e1 + t294) * t301 + t91 * t75 + t76 * t304 + (t298 + (t119 + t128 + t213) * t98) * t280) * t308 + t73 + (t305 * t76 + t65) * t261 + t233 * t256 + ((t94 + t248) * t176 + t312) * t229 + t173 + (t147 + t245) * t187 + (t245 * t159 + t287 * t167 + t146 + t163) * t176 + t95 * t79) * t70 + ((t269 * t319 + (-0.2e1 * t110 * t264 + (t97 - t319) * t85 + t222) * t273) * t44 + (0.8e1 * (t85 + t266 + t104) * t309 + 0.6e1 * (t285 * t266 + (t75 + t76) * t257 + t233) * t96) * t70) * t83);
t23 = atan2(t44 * t258, t258 * t318);
t21 = sin(t23);
t22 = cos(t23);
t207 = 0.1e1 / (0.2e1 * pkin(1) * t255 + t242 + t75 + t84);
t224 = -pkin(1) + t263;
t225 = t160 - t243;
t204 = t207 * ((t141 * t320 + t262) * t44 - (t225 + t84 + t228) * t255 + t224 * t84 + t225 * t263 + (-0.2e1 * t209 + t268 - t323 - t244) * pkin(1));
t203 = t325 * t204;
t201 = t203 / 0.2e1;
t214 = t324 + t230;
t206 = t207 * ((t255 - t224) * t44 + (t212 * t276 + t214 * t320) * t141 + (t144 * t214 + (0.4e1 * t110 - 0.2e1) * pkin(1) * t320) * t97);
t205 = t206 * t314;
t200 = atan2(t205, t201);
t198 = sin(t200);
t199 = cos(t200);
t37 = -t141 * t199 - t144 * t198;
t38 = t141 * t198 - t144 * t199;
t240 = -t21 * t37 + t38 * t22;
t202 = t204 / 0.4e1;
t303 = t172 / (pkin(3) ^ 2);
t19 = (t202 * t318 - t44 * t206 / 0.4e1) * t303;
t20 = (t44 * t202 + t206 * t318 / 0.4e1) * t303;
t66 = -t140 * t141 - t306;
t67 = -t140 * t144 + t307;
t7 = atan2(t19 * t66 + t20 * t67, -t19 * t67 + t20 * t66);
t5 = sin(t7);
t6 = cos(t7);
t9 = t21 * t38 + t22 * t37;
t334 = -t240 * t6 + t5 * t9;
t333 = t240 * t5 + t6 * t9;
t142 = sin(pkin(9));
t145 = cos(pkin(9));
t137 = sin(pkin(8));
t138 = cos(pkin(8));
t63 = t137 * t144 - t138 * t141;
t64 = t137 * t141 + t138 * t144;
t40 = -t63 * t203 / 0.2e1 + t64 * t205;
t41 = t201 * t64 + t205 * t63;
t31 = t142 * t41 - t145 * t40;
t32 = t142 * t40 + t145 * t41;
t28 = atan2(t31, t32);
t24 = sin(t28);
t26 = cos(t28);
t16 = t24 * t38 + t26 * t37;
t219 = t24 * t37 - t26 * t38;
t29 = atan2(t31, -t32);
t25 = sin(t29);
t27 = cos(t29);
t332 = -t16 * t25 - t219 * t27;
t2 = t16 * t27 - t219 * t25;
t279 = pkin(7) + 0;
t272 = t137 * pkin(5) + 0;
t271 = t138 * pkin(5) + 0;
t82 = -t98 + 0;
t56 = atan2(t63, t64);
t52 = sin(t56);
t54 = cos(t56);
t48 = t141 * t54 + t144 * t52;
t49 = -t141 * t52 + t144 * t54;
t57 = atan2(t63, -t64);
t53 = sin(t57);
t55 = cos(t57);
t239 = -t48 * t53 + t49 * t55;
t236 = t38 * pkin(3) + t82;
t235 = t38 * pkin(2) + t82;
t81 = 0 - t319;
t13 = t219 * pkin(6);
t221 = t13 + t235;
t218 = t48 * t55 + t49 * t53;
t217 = t37 * pkin(3) + t81;
t216 = t37 * pkin(2) + t81;
t12 = t16 * pkin(6);
t211 = -t12 + t216;
t47 = -t137 * t53 + t138 * t55;
t46 = t137 * t55 + t138 * t53;
t1 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t144, t141, 0, 0; -t141, -t144, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t38, -t37, 0, t82; t37, t38, 0, t81; 0, 0, 1, 0; 0, 0, 0, 1; t219, t16, 0, t235; -t16, t219, 0, t216; 0, 0, 1, 0; 0, 0, 0, 1; t240, -t9, 0, t236; t9, t240, 0, t217; 0, 0, 1, 0; 0, 0, 0, 1; t47, -t46, 0, t271; t46, t47, 0, t272; 0, 0, 1, 0; 0, 0, 0, 1; t219, t16, 0, t82; -t16, t219, 0, t81; 0, 0, 1, 0; 0, 0, 0, 1; t140, t143, 0, t279; -t143, t140, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t49, -t48, 0, t82; t48, t49, 0, t81; 0, 0, 1, 0; 0, 0, 0, 1; t332, -t2, 0, t221; t2, t332, 0, t211; 0, 0, 1, 0; 0, 0, 0, 1; t334, t333, 0, pkin(4) * t240 + t236; -t333, t334, 0, pkin(4) * t9 + t217; 0, 0, 1, 0; 0, 0, 0, 1; t239, -t218, 0, pkin(5) * t49 + t82; t218, t239, 0, pkin(5) * t48 + t81; 0, 0, 1, 0; 0, 0, 0, 1; t332, -t2, 0, t13 + t82; t2, t332, 0, -t12 + t81; 0, 0, 1, 0; 0, 0, 0, 1; t140, t143, 0, t96 + t279; -t143, t140, 0, -t97 + 0; 0, 0, 1, 0; 0, 0, 0, 1; t47, -t46, 0, pkin(1) * t47 + t271; t46, t47, 0, pkin(1) * t46 + t272; 0, 0, 1, 0; 0, 0, 0, 1; t332, -t2, 0, pkin(2) * t332 + t221; t2, t332, 0, pkin(2) * t2 + t211; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
