% Calculate homogenous joint transformation matrices for
% picker2Dm2TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_mdh [4x4x15]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-09 14:06
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = picker2Dm2TE_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm2TE_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm2TE_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-09 10:31:47
% EndTime: 2020-05-09 10:31:52
% DurationCPUTime: 3.74s
% Computational Cost: add. (11300->396), mult. (33994->492), div. (202->5), fcn. (5650->10), ass. (0->214)
t597 = 4 * pkin(1);
t460 = pkin(4) ^ 2;
t409 = -t460 / 0.4e1;
t465 = pkin(3) ^ 2;
t596 = t409 + t465 / 0.2e1;
t595 = 2 * pkin(7);
t432 = cos(qJ(1));
t399 = t432 ^ 2;
t594 = -0.2e1 * t399;
t444 = 0.2e1 * t465;
t593 = 0.4e1 * t465;
t470 = pkin(1) ^ 2;
t468 = t470 ^ 2;
t592 = 4 * t468;
t591 = 2 * t470;
t448 = 6 * t470;
t472 = pkin(7) ^ 2;
t456 = 2 * t472;
t477 = t465 ^ 2;
t443 = 0.5e1 * t477;
t429 = sin(qJ(2));
t385 = pkin(3) * t429;
t375 = t385 * t595;
t396 = t429 ^ 2;
t577 = t396 * t465;
t538 = 0.2e1 * t577;
t552 = -t465 + t472;
t354 = t375 + t538 + t552;
t430 = sin(qJ(1));
t431 = cos(qJ(2));
t576 = t430 * t431;
t534 = pkin(3) * t576;
t506 = pkin(1) * t534;
t366 = -0.2e1 * t506;
t458 = 0.2e1 * pkin(3);
t391 = t470 + t472;
t514 = -t460 + t391;
t500 = t375 + t514;
t570 = t470 * t399;
t536 = -0.4e1 * t570;
t541 = -0.4e1 * t385;
t550 = t470 - t472;
t553 = t460 - t472;
t373 = t385 + pkin(7);
t583 = t373 * t432;
t341 = sqrt(t354 * t536 + 0.4e1 * t550 * t577 + pkin(7) * t514 * t541 - t468 + (-0.2e1 * t465 + t553) * t591 - (t472 - (t458 + pkin(4)) * pkin(4)) * (t472 + (t458 - pkin(4)) * pkin(4)) + (-(t366 + t500) * t583 + t500 * t534) * t597);
t359 = t444 + t500;
t386 = pkin(3) * t431;
t496 = -pkin(1) + t534;
t387 = pkin(1) * t432;
t544 = 0.2e1 * t387;
t340 = (-t496 + t583) * t341 + (t354 * t544 + t359 * t373) * t430 + (t359 * t432 + (0.4e1 * t399 - 0.2e1) * t373 * pkin(1)) * t386;
t590 = -t340 / 0.2e1;
t426 = sin(pkin(8));
t427 = cos(pkin(8));
t353 = t426 * t430 + t427 * t432;
t589 = t353 / 0.2e1;
t374 = t387 + pkin(7);
t588 = sin(pkin(9));
t587 = pkin(1) * t430;
t459 = t460 ^ 2;
t471 = t472 ^ 2;
t551 = t468 + t471;
t556 = t456 - t460;
t569 = t472 * t460;
t490 = t556 * t470 + t459 / 0.6e1 + t551 - t569;
t351 = -t477 / 0.6e1 + t490;
t420 = -t465 / 0.3e1;
t381 = t420 + t472;
t355 = t381 * t366;
t361 = t385 + t374;
t390 = -0.3e1 * t465 + t472;
t398 = t432 * t399;
t473 = pkin(1) * t470;
t567 = t473 * t398;
t540 = pkin(7) * t567;
t509 = 0.8e1 * t540;
t364 = t390 * t509;
t389 = -t460 - t465;
t455 = 3 * t472;
t377 = t455 + t389;
t582 = t377 * t470;
t365 = 0.10e2 * t582;
t416 = 0.4e1 / 0.3e1 * t465;
t410 = -t460 / 0.3e1;
t519 = t410 + t391;
t367 = t416 + t519;
t411 = -t460 / 0.2e1;
t513 = t465 + t391;
t369 = t411 + t513;
t370 = -t460 + t513;
t376 = pkin(7) * t544;
t454 = 4 * t472;
t379 = (t454 + t460) * t470;
t382 = -t470 / 0.3e1 + t472;
t383 = 0.10e2 / 0.3e1 * t470;
t384 = t391 ^ 2;
t388 = -0.30e2 * t460 + (60 * t472);
t393 = -3 * t470 + t472;
t408 = -t460 / 0.6e1;
t417 = 0.2e1 / 0.3e1 * t465;
t422 = 0.4e1 / 0.3e1 * t470;
t424 = t470 / 0.2e1;
t434 = 15 * t468;
t435 = 15 * t470;
t436 = 10 * t470;
t441 = -0.2e1 * t460;
t442 = -0.5e1 * t460;
t445 = 7 * t468;
t446 = 5 * t468;
t447 = 7 * t470;
t452 = 3 * t471;
t453 = 8 * t472;
t476 = pkin(3) * t465;
t462 = t476 ^ 2;
t481 = pkin(7) * t472;
t489 = 0.5e1 / 0.6e1 * t477 + t490;
t491 = t472 - t506;
t564 = t459 / 0.2e1 - t477 / 0.2e1;
t499 = -0.3e1 * t569 + t452 + t564;
t503 = -0.6e1 * t506;
t413 = -0.3e1 / 0.2e1 * t460;
t563 = t413 + t455;
t566 = t391 * ((t413 + t456) * t470 - 0.3e1 / 0.2e1 * t569 + t551 + t564) + t462;
t492 = ((t383 + t556) * t465 + t489) * t503 + (t434 + (-0.9e1 * t460 + (18 * t472)) * t470 + t499) * t465 + (t435 + t563) * t477 + t566;
t502 = -0.4e1 * t506;
t493 = t369 * t502;
t449 = 3 * t470;
t557 = t449 + t472;
t516 = t465 + t557;
t494 = -(0.3e1 * t465 + t391) * t587 + t516 * t386;
t412 = -0.2e1 / 0.3e1 * t460;
t421 = -0.2e1 / 0.3e1 * t465;
t517 = t412 + t391;
t558 = t436 + t456;
t562 = t421 + t472;
t495 = -(t443 + ((5 * t470) + t377) * t444 + (t421 + t517) * t391) * t587 + (t477 + (t412 + t421 + t558) * t465 + t446 + 0.2e1 * t582 + t472 * (t412 + t562)) * t386;
t555 = t459 - t477;
t498 = -0.6e1 * t569 + (6 * t471) + t555;
t518 = t412 + t417 + t456;
t565 = (t417 + t517) * t391 + t477;
t501 = t367 * t502 + (t448 + t518) * t465 + t565;
t532 = t473 * t386;
t504 = t398 * t532;
t571 = t468 * t399 ^ 2;
t505 = t571 * t386;
t529 = 0.16e2 * t567;
t507 = pkin(7) * t529;
t508 = 0.20e2 / 0.3e1 * t470;
t554 = -t460 + t465;
t515 = t455 + t554;
t418 = t465 / 0.3e1;
t520 = t408 + t418 + t472;
t521 = t460 / 0.3e1 + t418 + t456;
t522 = 0.2e1 / 0.3e1 * t460 + t417 + t454;
t523 = 0.4e1 / 0.3e1 * t460 + t416 - (2 * t472);
t574 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t524 = t430 * t574;
t542 = 0.6e1 * t387;
t526 = pkin(7) * t542;
t543 = 0.4e1 * t387;
t527 = pkin(7) * t543;
t528 = -t587 / 0.2e1;
t530 = 0.12e2 * t570;
t531 = t470 * t386;
t575 = t431 * t432;
t533 = pkin(3) * t575;
t535 = 0.4e1 * t570;
t537 = 0.8e1 * t571;
t578 = t429 * t396 * t476;
t539 = -0.8e1 * t578;
t545 = 0.2e1 * t587;
t546 = pkin(7) * t387;
t547 = 4 * pkin(7);
t548 = t471 + t477;
t549 = t471 - t468;
t559 = 0.4e1 / 0.7e1 * t472 - t460 / 0.7e1;
t560 = t424 + t472;
t561 = t470 / 0.3e1 + t472;
t568 = t472 * t470;
t573 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t579 = t396 ^ 2 * t477;
t580 = t389 * t472;
t581 = t384 * (-t465 + t514);
t584 = (-t430 * t473 + t531) * t399;
t586 = ((-0.24e2 * (0.4e1 / 0.3e1 * t570 + t376 + t382) * t579 * t587 - 0.12e2 * (-0.8e1 / 0.3e1 * t505 + ((t422 + t520) * t386 - (0.7e1 / 0.6e1 * t465 + t408 + t560) * t587) * t535 + (-t465 * t550 - 0.5e1 / 0.3e1 * t468 + t521 * t470 + t472 * (t410 + t381)) * t386 + (-t477 + (-t508 + t522) * t465 - (3 * t468) + t523 * t470 + t471) * t528 + (-t430 * t468 * t398 + ((t470 + t520) * t386 + (t444 - t550) * t528) * t387) * t547) * t577 + 0.24e2 * t381 * t505 + ((t472 + 0.5e1 / 0.2e1 * t465 + 0.3e1 / 0.2e1 * t470 + t411) * t386 + t390 * t587 / 0.2e1) * t507 - 0.6e1 * ((-0.3e1 * t477 + (-t508 + t523) * t465 + t522 * t470 + t549) * t386 - 0.2e1 * (-0.5e1 / 0.3e1 * t477 + (-t470 + t521) * t465 + t472 * (t420 + t519)) * t587) * t570 - 0.6e1 * t495 * t546 - (t462 + ((21 * t470) + t377) * t477 + (t365 + t452 + (35 * t468) + 0.2e1 * t580) * t465 + (t445 + (t442 + t453 - 0.5e1 * t465) * t470 + t472 * (-t460 + t552)) * t391) * t386 + (0.7e1 * t462 + (t447 + t377) * t443 + (t365 + (21 * t468) + (9 * t471) + 0.6e1 * t580) * t465 + t581) * t587) * t341 + (0.16e2 * (t537 + t507 + (-8 * t468 + 12 * t568) * t399 + (-12 * pkin(7) * t473 + t481 * t597) * t432 - (6 * t568) + t551) * t579 + 0.24e2 * (t562 * t537 + 0.14e2 * (-0.32e2 / 0.21e2 * (t472 + t465 / 0.4e1 + t470 / 0.4e1 - t460 / 0.8e1) * t506 + 0.5e1 / 0.42e2 * t477 + (0.16e2 / 0.21e2 * t470 + t559) * t465 + t468 / 0.7e1 + t559 * t470 + t471 - 0.3e1 / 0.7e1 * t569 + t459 / 0.42e2) * t570 + t382 * t493 - t550 * t477 + (t379 - 0.10e2 / 0.3e1 * t468 + (2 * t471) - t569) * t465 + t351 * t573 + ((-0.2e1 / 0.3e1 * t506 + t409 + t560) * t529 + (-0.8e1 / 0.3e1 * (t561 + t596) * t506 + 0.5e1 / 0.18e2 * t477 + (0.4e1 / 0.3e1 * t472 + t422 + t410) * t465 + t471 + 0.2e1 / 0.3e1 * t568 - 0.2e1 / 0.3e1 * t569 - t468 / 0.3e1 + t459 / 0.18e2) * t542) * pkin(7)) * t577 + 0.16e2 * (-0.6e1 * t472 * t465 + t548) * t571 + 0.32e2 * (t366 * t574 + t369 * t390) * t540 + 0.24e2 * (t381 * t493 - t462 + (-t383 + t553) * t477 + (t379 + t477 / 0.6e1 - t459 / 0.6e1 + t549) * t465 + t351 * t472) * t570 + 0.8e1 * t492 * t546 - 0.8e1 * ((t447 + t563) * t477 + (t445 + (t442 + (10 * t472)) * t470 + t499) * t465 + t566) * t506 + t477 ^ 2 + (t441 + t454 + (28 * t470)) * t462 + (t388 * t470 + (70 * t468) + t498) * t477 + (t388 * t468 + t498 * t448 + t555 * t456 - 0.6e1 * t471 * t460 + (28 * t473 ^ 2) + (4 * t481 ^ 2)) * t465 + t370 * t581) * t361 + (((0.4e1 * t584 + (t386 + t545) * t376 + t393 * t386 + (t411 + t516) * t545) * t539 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t465 + t424 + t408) * t386 + pkin(1) * t524) * t536 + (-0.8e1 * t504 + ((t410 + t417 + t557) * t386 - (0.8e1 / 0.3e1 * t465 + t519) * t587) * t543) * pkin(7) + t495) * t385) * t341 + (0.32e2 * (t509 + (-0.4e1 * t430 * t532 + t592 + (t593 + t441 + t453) * t470) * t399 + (-t470 + t491 + t596) * t527 + t366 * t573 + t393 * t369) * t578 + 0.8e1 * (t364 + (t369 * t574 + t355) * t530 + (t493 + (t448 + t556) * t465 + t489) * t526 + t492) * t385) * t361) * t374) / ((-0.4e1 * (-t550 * t386 + 0.2e1 * t584 + (t533 * t595 + t430 * (t465 + t591)) * pkin(1)) * t577 + 0.8e1 * pkin(7) * t504 + ((pkin(3) * t592 + 0.8e1 * t470 * t476) * t431 + 0.4e1 * t473 * t524) * t399 - 0.4e1 * t494 * t546 - (t558 * t465 + t446 + t548 + (6 * t568)) * t386 + (t443 + (t436 + 6 * t472) * t465 + t384) * t587) * t341 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t506 + 0.4e1 / 0.9e1 * t465 - t460 / 0.9e1 + t561) * t570 + t382 * t366 + t367 * t573 + (t567 + (t408 + t417 + t491) * t387) * t547) * t577 + t364 + (t367 * t574 + t355) * t530 + t501 * t526 + ((t383 + t518) * t465 + t565) * t503 + t462 + (t435 + t515) * t477 + (t515 * t448 + t554 * t456 + t434 + t452) * t465 + t384 * t370) * t361 + ((t539 * t587 + (t531 * t594 + (t386 - t587) * t376 + t494) * t541) * t341 + (0.8e1 * (t376 + t535 + t393) * t578 + 0.6e1 * (t552 * t535 + (t366 + t367) * t527 + t501) * t385) * t361) * t374);
t346 = 0.1e1 / (t373 * t544 + t366 + t375 + t513);
t466 = 0.1e1 / pkin(3);
t585 = t346 * t466;
t461 = 0.1e1 / pkin(4);
t572 = t461 * t466;
t525 = t346 * t461 / pkin(3) ^ 2;
t512 = t586 / 0.4e1;
t511 = t585 / 0.2e1;
t510 = t572 / 0.2e1;
t497 = t444 + t449 - t553;
t339 = (t373 * t430 + t533) * t341 - (t375 + t497 + t502) * t583 + t496 * t375 + t497 * t534 + (t354 * t594 - t514 + t538 - t593) * pkin(1);
t352 = -t426 * t432 + t427 * t430;
t488 = (t339 * t589 + t352 * t590) * t585;
t433 = cos(pkin(9));
t357 = -t429 * t432 + t576;
t356 = -t429 * t430 - t575;
t345 = t352 * t426 - t353 * t427;
t344 = -t352 * t427 - t353 * t426;
t338 = t339 * t511;
t337 = (t339 * t352 / 0.2e1 + t340 * t589) * t585;
t334 = t588 * t337 + t433 * t488;
t333 = t337 * t433 - t588 * t488;
t331 = t510 * t586;
t330 = (t339 * t341 / 0.4e1 + t340 * t512) * t525;
t329 = (t339 * t512 - t340 * t341 / 0.4e1) * t525;
t328 = t329 * t357 - t330 * t356;
t327 = t329 * t356 + t330 * t357;
t1 = [-t432, t430, 0, 0; -t430, -t432, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t338, t585 * t590, 0, pkin(1); t340 * t511, t338, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t334, -t333, 0, pkin(2); t333, -t334, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t331, -t341 * t572 / 0.2e1, 0, pkin(3); t341 * t510, t331, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t345, -t344, 0, t427 * pkin(5); t344, t345, 0, t426 * pkin(5); 0, 0, 1, 0; 0, 0, 0, 1; -t334, -t333, 0, 0; t333, -t334, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t429, t431, 0, pkin(7); -t431, t429, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t353, -t352, 0, pkin(1); t352, -t353, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t334, -t333, 0, pkin(6); t333, t334, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t328, t327, 0, pkin(4); -t327, t328, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t353, t352, 0, pkin(5); -t352, -t353, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t334, -t333, 0, pkin(6); t333, t334, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(3); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(1); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(2); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,15);             % numerisch
else,                         T_mdh = sym('xx', [4,4,15]); end % symbolisch

for i = 1:15
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
