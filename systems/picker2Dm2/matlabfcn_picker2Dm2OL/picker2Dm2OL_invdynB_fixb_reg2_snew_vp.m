% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% picker2Dm2OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [12x1]
%   Generalized joint coordinates (joint angles)
% qJD [12x1]
%   Generalized joint velocities
% qJDD [12x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05]';
% 
% Output:
% tauB_reg [6x(11*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-09 23:20
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = picker2Dm2OL_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(12,1),zeros(12,1),zeros(12,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [12 1]), ...
  'picker2Dm2OL_invdynB_fixb_reg2_snew_vp: qJ has to be [12x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [12 1]), ...
  'picker2Dm2OL_invdynB_fixb_reg2_snew_vp: qJD has to be [12x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [12 1]), ...
  'picker2Dm2OL_invdynB_fixb_reg2_snew_vp: qJDD has to be [12x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'picker2Dm2OL_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'picker2Dm2OL_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-09 23:19:23
% EndTime: 2020-05-09 23:19:53
% DurationCPUTime: 6.70s
% Computational Cost: add. (10341->311), mult. (13837->423), div. (0->0), fcn. (9046->22), ass. (0->231)
t446 = sin(qJ(1));
t455 = cos(qJ(1));
t387 = g(1) * t446 - g(2) * t455;
t376 = qJDD(1) * pkin(1) - t387;
t389 = g(1) * t455 + g(2) * t446;
t501 = qJD(1) ^ 2;
t377 = -pkin(1) * t501 + t389;
t445 = sin(qJ(2));
t454 = cos(qJ(2));
t307 = -t376 * t454 + t377 * t445;
t431 = qJDD(1) + qJDD(2);
t288 = pkin(3) * t431 - t307;
t309 = t376 * t445 + t377 * t454;
t433 = qJD(1) + qJD(2);
t429 = t433 ^ 2;
t290 = -pkin(3) * t429 + t309;
t443 = sin(qJ(4));
t452 = cos(qJ(4));
t239 = -t288 * t452 + t290 * t443;
t415 = qJDD(4) + t431;
t232 = pkin(4) * t415 - t239;
t241 = t288 * t443 + t290 * t452;
t419 = qJD(4) + t433;
t412 = t419 ^ 2;
t234 = -pkin(4) * t412 + t241;
t434 = sin(qJ(10));
t436 = cos(qJ(10));
t196 = -t232 * t436 + t234 * t434;
t197 = -t232 * t434 - t234 * t436;
t174 = t196 * t436 + t197 * t434;
t474 = t196 * t434 - t197 * t436;
t166 = t174 * t452 - t443 * t474;
t546 = t174 * t443 + t452 * t474;
t158 = t166 * t454 - t445 * t546;
t574 = t166 * t445 + t454 * t546;
t585 = -t158 * t446 - t455 * t574;
t584 = t158 * t455 - t446 * t574;
t289 = pkin(2) * t431 - t307;
t291 = -pkin(2) * t429 + t309;
t444 = sin(qJ(3));
t453 = cos(qJ(3));
t240 = -t289 * t453 + t291 * t444;
t416 = qJDD(3) + t431;
t233 = pkin(6) * t416 + t240;
t242 = -t289 * t444 - t291 * t453;
t420 = qJD(3) + t433;
t413 = t420 ^ 2;
t235 = -pkin(6) * t413 + t242;
t438 = sin(qJ(9));
t447 = cos(qJ(9));
t198 = -t233 * t447 + t235 * t438;
t199 = -t233 * t438 - t235 * t447;
t178 = t198 * t447 + t199 * t438;
t473 = t198 * t438 - t199 * t447;
t169 = t178 * t453 - t444 * t473;
t545 = -t178 * t444 - t453 * t473;
t161 = t169 * t454 + t445 * t545;
t573 = -t169 * t445 + t454 * t545;
t583 = t161 * t446 - t455 * t573;
t582 = t161 * t455 + t446 * t573;
t401 = qJDD(9) + t416;
t410 = qJD(9) + t420;
t403 = t410 ^ 2;
t328 = t401 * t438 + t403 * t447;
t330 = t401 * t447 - t403 * t438;
t263 = t328 * t444 - t330 * t453;
t531 = -t328 * t453 - t330 * t444;
t222 = t263 * t454 - t445 * t531;
t565 = t263 * t445 + t454 * t531;
t566 = t222 * t446 + t455 * t565;
t194 = t222 * t455 - t446 * t565;
t398 = qJDD(10) + t415;
t409 = qJD(10) + t419;
t400 = t409 ^ 2;
t321 = t398 * t434 + t400 * t436;
t323 = t398 * t436 - t400 * t434;
t254 = t321 * t452 + t323 * t443;
t481 = t321 * t443 - t323 * t452;
t213 = t254 * t454 - t445 * t481;
t537 = t254 * t445 + t454 * t481;
t193 = -t213 * t455 + t446 * t537;
t581 = t213 * t446 + t455 * t537;
t204 = t239 * t452 - t241 * t443;
t483 = t239 * t443 + t241 * t452;
t184 = t204 * t454 - t445 * t483;
t544 = t204 * t445 + t454 * t483;
t572 = -t184 * t446 - t455 * t544;
t571 = t184 * t455 - t446 * t544;
t206 = t240 * t453 + t242 * t444;
t472 = t240 * t444 - t242 * t453;
t186 = t206 * t454 - t445 * t472;
t543 = t206 * t445 + t454 * t472;
t570 = -t186 * t446 - t455 * t543;
t569 = t186 * t455 - t446 * t543;
t441 = sin(qJ(6));
t450 = cos(qJ(6));
t245 = t307 * t450 + t309 * t441;
t250 = t307 * t441 - t309 * t450;
t210 = t245 * t450 + t250 * t441;
t471 = t245 * t441 - t250 * t450;
t190 = t210 * t454 - t445 * t471;
t542 = t210 * t445 + t454 * t471;
t568 = -t190 * t446 - t455 * t542;
t567 = t190 * t455 - t446 * t542;
t337 = t412 * t452 + t415 * t443;
t344 = t412 * t443 - t415 * t452;
t267 = t337 * t454 - t344 * t445;
t280 = t337 * t445 + t344 * t454;
t228 = t267 * t455 - t280 * t446;
t225 = t267 * t446 + t280 * t455;
t418 = qJD(6) + t433;
t411 = t418 ^ 2;
t414 = qJDD(6) + t431;
t335 = t411 * t450 + t414 * t441;
t336 = t411 * t441 - t414 * t450;
t269 = t335 * t454 - t336 * t445;
t480 = t335 * t445 + t336 * t454;
t227 = -t269 * t455 + t446 * t480;
t564 = t269 * t446 + t455 * t480;
t341 = t413 * t453 + t416 * t444;
t342 = t413 * t444 - t416 * t453;
t273 = t341 * t454 - t342 * t445;
t478 = t341 * t445 + t342 * t454;
t229 = -t273 * t455 + t446 * t478;
t563 = t273 * t446 + t455 * t478;
t439 = sin(qJ(8));
t448 = cos(qJ(8));
t306 = -t376 * t448 + t377 * t439;
t308 = -t376 * t439 - t377 * t448;
t248 = t306 * t448 + t308 * t439;
t470 = t306 * t439 - t308 * t448;
t541 = -t248 * t446 - t455 * t470;
t540 = t248 * t455 - t446 * t470;
t251 = t307 * t454 - t309 * t445;
t482 = t307 * t445 + t309 * t454;
t539 = -t251 * t446 - t455 * t482;
t538 = t251 * t455 - t446 * t482;
t351 = (t434 * t443 - t436 * t452) * g(3);
t352 = (t434 * t452 + t436 * t443) * g(3);
t292 = t351 * t454 + t352 * t445;
t477 = -t351 * t445 + t352 * t454;
t535 = t292 * t446 - t455 * t477;
t534 = t292 * t455 + t446 * t477;
t361 = (-t438 * t444 + t447 * t453) * g(3);
t367 = (-t438 * t453 - t444 * t447) * g(3);
t300 = t361 * t454 + t367 * t445;
t476 = -t361 * t445 + t367 * t454;
t533 = t300 * t446 - t455 * t476;
t532 = t300 * t455 + t446 * t476;
t432 = qJD(1) + qJD(8);
t428 = t432 ^ 2;
t430 = qJDD(1) + qJDD(8);
t354 = t428 * t448 + t430 * t439;
t355 = t428 * t439 - t430 * t448;
t298 = -t354 * t455 + t355 * t446;
t530 = t354 * t446 + t355 * t455;
t356 = t429 * t454 + t431 * t445;
t360 = t429 * t445 - t431 * t454;
t299 = t356 * t455 - t360 * t446;
t295 = t356 * t446 + t360 * t455;
t500 = qJD(7) ^ 2;
t499 = pkin(5) * g(3);
t498 = g(3) * t445;
t497 = g(3) * t454;
t435 = sin(pkin(8));
t437 = cos(pkin(8));
t442 = sin(qJ(5));
t451 = cos(qJ(5));
t373 = t435 * t451 + t437 * t442;
t496 = t373 * g(3);
t374 = -t435 * t442 + t437 * t451;
t495 = t374 * g(3);
t440 = sin(qJ(7));
t494 = t440 * g(3);
t425 = t446 * g(3);
t493 = t455 * g(3);
t492 = t443 * t454;
t491 = t444 * t454;
t490 = t445 * t446;
t489 = t445 * t455;
t488 = pkin(1) * t493;
t487 = g(3) * t490;
t486 = g(3) * t489;
t485 = t443 * t498;
t484 = t444 * t498;
t314 = -t373 * g(1) + t374 * g(2);
t315 = -t374 * g(1) - t373 * g(2);
t237 = t314 * t373 + t315 * t374;
t449 = cos(qJ(7));
t386 = -g(1) * t440 + g(2) * t449;
t388 = g(1) * t449 + g(2) * t440;
t475 = t386 * t440 - t388 * t449;
t469 = t314 * t374 - t315 * t373;
t362 = t441 * t498 - t450 * t497;
t368 = (t441 * t454 + t445 * t450) * g(3);
t467 = t362 * t455 + t368 * t446;
t466 = t362 * t446 - t368 * t455;
t363 = t452 * t497 - t485;
t369 = (-t445 * t452 - t492) * g(3);
t465 = t363 * t455 + t369 * t446;
t464 = t363 * t446 - t369 * t455;
t364 = -t453 * t497 + t484;
t370 = (t445 * t453 + t491) * g(3);
t463 = t364 * t455 + t370 * t446;
t462 = t364 * t446 - t370 * t455;
t461 = t386 * t449 + t388 * t440;
t460 = t387 * t455 - t389 * t446;
t459 = -t387 * t446 - t389 * t455;
t457 = qJD(5) ^ 2;
t458 = qJDD(5) * t374 - t373 * t457;
t310 = qJDD(5) * t373 + t374 * t457;
t456 = pkin(1) * g(3);
t426 = t449 * g(3);
t417 = pkin(1) * t425;
t395 = pkin(2) * t497 + t456;
t394 = pkin(3) * t497 + t456;
t393 = (-pkin(6) * t453 + pkin(2)) * g(3);
t392 = (pkin(4) * t452 + pkin(3)) * g(3);
t382 = -qJDD(1) * t455 + t446 * t501;
t381 = -qJDD(1) * t446 - t455 * t501;
t380 = qJDD(7) * t449 - t440 * t500;
t379 = -qJDD(7) * t440 - t449 * t500;
t372 = (t446 * t454 + t489) * g(3);
t371 = (-t439 * t455 - t446 * t448) * g(3);
t366 = (-t454 * t455 + t490) * g(3);
t365 = (-t439 * t446 + t448 * t455) * g(3);
t332 = pkin(6) * g(3) * t491 - t393 * t445;
t331 = -pkin(4) * g(3) * t492 - t392 * t445;
t319 = pkin(6) * t484 + t393 * t454 + t456;
t318 = -pkin(4) * t485 + t392 * t454 + t456;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t381, -t382, 0, t459, 0, 0, 0, 0, 0, 0, t299, -t295, 0, t539, 0, 0, 0, 0, 0, 0, t229, t563, 0, t570, 0, 0, 0, 0, 0, 0, t228, -t225, 0, t572, 0, 0, 0, 0, 0, 0, -t310, -t458, 0, t237, 0, 0, 0, 0, 0, 0, t227, t564, 0, t568, 0, 0, 0, 0, 0, 0, t380, t379, 0, t475, 0, 0, 0, 0, 0, 0, t298, t530, 0, t541, 0, 0, 0, 0, 0, 0, -t566, -t194, 0, t583, 0, 0, 0, 0, 0, 0, t193, t581, 0, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t382, -t381, 0, t460, 0, 0, 0, 0, 0, 0, t295, t299, 0, t538, 0, 0, 0, 0, 0, 0, -t563, t229, 0, t569, 0, 0, 0, 0, 0, 0, t225, t228, 0, t571, 0, 0, 0, 0, 0, 0, t458, -t310, 0, -t469, 0, 0, 0, 0, 0, 0, -t564, t227, 0, t567, 0, 0, 0, 0, 0, 0, -t379, t380, 0, -t461, 0, 0, 0, 0, 0, 0, -t530, t298, 0, t540, 0, 0, 0, 0, 0, 0, t194, -t566, 0, -t582, 0, 0, 0, 0, 0, 0, -t581, t193, 0, t584; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3); 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t382, 0, -t381, 0, t425, t493, -t460, 0, 0, 0, t295, 0, t299, 0, t372, -t366, -t538, t417, 0, 0, -t563, 0, t229, 0, t462, t463, -t569, pkin(2) * t486 + t395 * t446, 0, 0, t225, 0, t228, 0, t464, t465, -t571, pkin(3) * t486 + t394 * t446, 0, 0, t458, 0, -t310, 0, -t496, -t495, t469, -t435 * t499, 0, 0, -t564, 0, t227, 0, t466, t467, -t567, t417, 0, 0, -t379, 0, t380, 0, t426, -t494, t461, 0, 0, 0, -t530, 0, t298, 0, t371, -t365, -t540, t417, 0, 0, t194, 0, -t566, 0, t533, t532, t582, t319 * t446 - t332 * t455, 0, 0, -t581, 0, t193, 0, t535, t534, -t584, t318 * t446 - t331 * t455; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t381, 0, t382, 0, -t493, t425, t459, 0, 0, 0, -t299, 0, t295, 0, t366, t372, t539, -t488, 0, 0, -t229, 0, -t563, 0, -t463, t462, t570, pkin(2) * t487 - t395 * t455, 0, 0, -t228, 0, t225, 0, -t465, t464, t572, pkin(3) * t487 - t394 * t455, 0, 0, t310, 0, t458, 0, t495, -t496, t237, t437 * t499, 0, 0, -t227, 0, -t564, 0, -t467, t466, t568, -t488, 0, 0, -t380, 0, -t379, 0, t494, t426, t475, pkin(7) * g(3), 0, 0, -t298, 0, -t530, 0, t365, t371, t541, -t488, 0, 0, t566, 0, t194, 0, -t532, t533, t583, -t319 * t455 - t332 * t446, 0, 0, -t193, 0, -t581, 0, -t534, t535, t585, -t318 * t455 - t331 * t446; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t387, -t389, 0, 0, 0, 0, 0, 0, 0, t431, -pkin(1) * t360 - t307, -pkin(1) * t356 - t309, 0, -pkin(1) * t251, 0, 0, 0, 0, 0, t416, pkin(1) * t478 + pkin(2) * t342 + t240, pkin(1) * t273 + pkin(2) * t341 - t242, 0, -pkin(1) * t186 - pkin(2) * t206, 0, 0, 0, 0, 0, t415, -pkin(1) * t280 - pkin(3) * t344 - t239, -pkin(1) * t267 - pkin(3) * t337 - t241, 0, -pkin(1) * t184 - pkin(3) * t204, 0, 0, 0, 0, 0, qJDD(5), (t310 * t435 + t437 * t458) * pkin(5) - t314, (-t310 * t437 + t435 * t458) * pkin(5) - t315, 0, (-t237 * t435 - t437 * t469) * pkin(5), 0, 0, 0, 0, 0, t414, pkin(1) * t480 + t245, pkin(1) * t269 - t250, 0, -pkin(1) * t190, 0, 0, 0, 0, 0, qJDD(7), -pkin(7) * t379 - t388, pkin(7) * t380 - t386, 0, -pkin(7) * t461, 0, 0, 0, 0, 0, t430, pkin(1) * t355 + t306, pkin(1) * t354 - t308, 0, -pkin(1) * t248, 0, 0, 0, 0, 0, t401, -pkin(1) * t222 - pkin(2) * t263 - pkin(6) * t330 + t198, pkin(1) * t565 + pkin(2) * t531 + pkin(6) * t328 - t199, 0, pkin(1) * t161 + pkin(2) * t169 - pkin(6) * t178, 0, 0, 0, 0, 0, t398, pkin(1) * t537 + pkin(3) * t481 - pkin(4) * t323 + t196, pkin(1) * t213 + pkin(3) * t254 + pkin(4) * t321 - t197, 0, -pkin(1) * t158 - pkin(3) * t166 - pkin(4) * t174;];
tauB_reg = t1;
