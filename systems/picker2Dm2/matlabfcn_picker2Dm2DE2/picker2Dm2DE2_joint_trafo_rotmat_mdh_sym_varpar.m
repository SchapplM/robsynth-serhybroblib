% Calculate homogenous joint transformation matrices for
% picker2Dm2DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_mdh [4x4x15]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-09 23:02
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = picker2Dm2DE2_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm2DE2_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm2DE2_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-09 19:13:25
% EndTime: 2020-05-09 19:13:30
% DurationCPUTime: 4.50s
% Computational Cost: add. (22613->404), mult. (67978->488), div. (404->5), fcn. (11370->31), ass. (0->229)
t589 = 4 * pkin(1);
t456 = pkin(4) ^ 2;
t404 = -t456 / 0.4e1;
t461 = pkin(3) ^ 2;
t588 = t404 + t461 / 0.2e1;
t587 = 2 * pkin(7);
t428 = cos(qJ(1));
t394 = t428 ^ 2;
t586 = -0.2e1 * t394;
t440 = 0.2e1 * t461;
t585 = 0.4e1 * t461;
t466 = pkin(1) ^ 2;
t464 = t466 ^ 2;
t584 = 4 * t464;
t583 = 2 * t466;
t444 = 6 * t466;
t468 = pkin(7) ^ 2;
t452 = 2 * t468;
t473 = t461 ^ 2;
t439 = 0.5e1 * t473;
t421 = sin(pkin(8));
t422 = cos(pkin(8));
t425 = sin(qJ(1));
t349 = t421 * t425 + t422 * t428;
t582 = t349 / 0.2e1;
t382 = pkin(1) * t428;
t369 = t382 + pkin(7);
t581 = pkin(1) * t425;
t424 = sin(qJ(2));
t380 = pkin(3) * t424;
t427 = cos(qJ(2));
t381 = pkin(3) * t427;
t370 = t380 * t587;
t391 = t424 ^ 2;
t571 = t391 * t461;
t533 = 0.2e1 * t571;
t547 = -t461 + t468;
t350 = t370 + t533 + t547;
t570 = t425 * t427;
t529 = pkin(3) * t570;
t501 = pkin(1) * t529;
t362 = -0.2e1 * t501;
t454 = 0.2e1 * pkin(3);
t386 = t466 + t468;
t509 = -t456 + t386;
t495 = t370 + t509;
t565 = t466 * t394;
t531 = -0.4e1 * t565;
t536 = -0.4e1 * t380;
t545 = t466 - t468;
t548 = t456 - t468;
t368 = t380 + pkin(7);
t577 = t368 * t428;
t331 = sqrt(t350 * t531 + 0.4e1 * t545 * t571 + pkin(7) * t509 * t536 - t464 + (-0.2e1 * t461 + t548) * t583 - (t468 - (t454 + pkin(4)) * pkin(4)) * (t468 + (t454 - pkin(4)) * pkin(4)) + (-(t362 + t495) * t577 + t495 * t529) * t589);
t455 = t456 ^ 2;
t467 = t468 ^ 2;
t546 = t464 + t467;
t551 = t452 - t456;
t564 = t468 * t456;
t485 = t551 * t466 + t455 / 0.6e1 + t546 - t564;
t347 = -t473 / 0.6e1 + t485;
t415 = -t461 / 0.3e1;
t376 = t415 + t468;
t351 = t376 * t362;
t357 = t380 + t369;
t385 = -0.3e1 * t461 + t468;
t393 = t428 * t394;
t469 = pkin(1) * t466;
t562 = t469 * t393;
t535 = pkin(7) * t562;
t504 = 0.8e1 * t535;
t360 = t385 * t504;
t384 = -t456 - t461;
t451 = 3 * t468;
t372 = t451 + t384;
t576 = t372 * t466;
t361 = 0.10e2 * t576;
t411 = 0.4e1 / 0.3e1 * t461;
t405 = -t456 / 0.3e1;
t514 = t405 + t386;
t363 = t411 + t514;
t406 = -t456 / 0.2e1;
t508 = t461 + t386;
t365 = t406 + t508;
t366 = -t456 + t508;
t539 = 0.2e1 * t382;
t371 = pkin(7) * t539;
t450 = 4 * t468;
t374 = (t450 + t456) * t466;
t377 = -t466 / 0.3e1 + t468;
t378 = 0.10e2 / 0.3e1 * t466;
t379 = t386 ^ 2;
t383 = -0.30e2 * t456 + (60 * t468);
t388 = -3 * t466 + t468;
t403 = -t456 / 0.6e1;
t412 = 0.2e1 / 0.3e1 * t461;
t417 = 0.4e1 / 0.3e1 * t466;
t419 = t466 / 0.2e1;
t430 = 15 * t464;
t431 = 15 * t466;
t432 = 10 * t466;
t437 = -0.2e1 * t456;
t438 = -0.5e1 * t456;
t441 = 7 * t464;
t442 = 5 * t464;
t443 = 7 * t466;
t448 = 3 * t467;
t449 = 8 * t468;
t472 = pkin(3) * t461;
t458 = t472 ^ 2;
t477 = pkin(7) * t468;
t484 = 0.5e1 / 0.6e1 * t473 + t485;
t486 = t468 - t501;
t559 = t455 / 0.2e1 - t473 / 0.2e1;
t494 = -0.3e1 * t564 + t448 + t559;
t498 = -0.6e1 * t501;
t408 = -0.3e1 / 0.2e1 * t456;
t558 = t408 + t451;
t561 = t386 * ((t408 + t452) * t466 - 0.3e1 / 0.2e1 * t564 + t546 + t559) + t458;
t487 = ((t378 + t551) * t461 + t484) * t498 + (t430 + (-0.9e1 * t456 + (18 * t468)) * t466 + t494) * t461 + (t431 + t558) * t473 + t561;
t497 = -0.4e1 * t501;
t488 = t365 * t497;
t445 = 3 * t466;
t552 = t445 + t468;
t511 = t461 + t552;
t489 = -(0.3e1 * t461 + t386) * t581 + t511 * t381;
t407 = -0.2e1 / 0.3e1 * t456;
t416 = -0.2e1 / 0.3e1 * t461;
t512 = t407 + t386;
t553 = t432 + t452;
t557 = t416 + t468;
t490 = -(t439 + ((5 * t466) + t372) * t440 + (t416 + t512) * t386) * t581 + (t473 + (t407 + t416 + t553) * t461 + t442 + 0.2e1 * t576 + t468 * (t407 + t557)) * t381;
t550 = t455 - t473;
t493 = -0.6e1 * t564 + (6 * t467) + t550;
t513 = t407 + t412 + t452;
t560 = (t412 + t512) * t386 + t473;
t496 = t363 * t497 + (t444 + t513) * t461 + t560;
t526 = t469 * t381;
t499 = t393 * t526;
t566 = t464 * t394 ^ 2;
t500 = t566 * t381;
t524 = 0.16e2 * t562;
t502 = pkin(7) * t524;
t503 = 0.20e2 / 0.3e1 * t466;
t549 = -t456 + t461;
t510 = t451 + t549;
t413 = t461 / 0.3e1;
t515 = t403 + t413 + t468;
t516 = t456 / 0.3e1 + t413 + t452;
t517 = 0.2e1 / 0.3e1 * t456 + t412 + t450;
t518 = 0.4e1 / 0.3e1 * t456 + t411 - (2 * t468);
t568 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t519 = t425 * t568;
t537 = 0.6e1 * t382;
t521 = pkin(7) * t537;
t538 = 0.4e1 * t382;
t522 = pkin(7) * t538;
t523 = -t581 / 0.2e1;
t525 = 0.12e2 * t565;
t527 = t466 * t381;
t569 = t427 * t428;
t528 = pkin(3) * t569;
t530 = 0.4e1 * t565;
t532 = 0.8e1 * t566;
t572 = t424 * t391 * t472;
t534 = -0.8e1 * t572;
t540 = 0.2e1 * t581;
t541 = pkin(7) * t382;
t542 = 4 * pkin(7);
t543 = t467 + t473;
t544 = t467 - t464;
t554 = 0.4e1 / 0.7e1 * t468 - t456 / 0.7e1;
t555 = t419 + t468;
t556 = t466 / 0.3e1 + t468;
t563 = t468 * t466;
t567 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t573 = t391 ^ 2 * t473;
t574 = t384 * t468;
t575 = t379 * (-t461 + t509);
t578 = (-t425 * t469 + t527) * t394;
t580 = ((-0.24e2 * (0.4e1 / 0.3e1 * t565 + t371 + t377) * t573 * t581 - 0.12e2 * (-0.8e1 / 0.3e1 * t500 + ((t417 + t515) * t381 - (0.7e1 / 0.6e1 * t461 + t403 + t555) * t581) * t530 + (-t461 * t545 - 0.5e1 / 0.3e1 * t464 + t516 * t466 + t468 * (t405 + t376)) * t381 + (-t473 + (-t503 + t517) * t461 - (3 * t464) + t518 * t466 + t467) * t523 + (-t425 * t464 * t393 + ((t466 + t515) * t381 + (t440 - t545) * t523) * t382) * t542) * t571 + 0.24e2 * t376 * t500 + ((t468 + 0.5e1 / 0.2e1 * t461 + 0.3e1 / 0.2e1 * t466 + t406) * t381 + t385 * t581 / 0.2e1) * t502 - 0.6e1 * ((-0.3e1 * t473 + (-t503 + t518) * t461 + t517 * t466 + t544) * t381 - 0.2e1 * (-0.5e1 / 0.3e1 * t473 + (-t466 + t516) * t461 + t468 * (t415 + t514)) * t581) * t565 - 0.6e1 * t490 * t541 - (t458 + ((21 * t466) + t372) * t473 + (t361 + t448 + (35 * t464) + 0.2e1 * t574) * t461 + (t441 + (t438 + t449 - 0.5e1 * t461) * t466 + t468 * (-t456 + t547)) * t386) * t381 + (0.7e1 * t458 + (t443 + t372) * t439 + (t361 + (21 * t464) + (9 * t467) + 0.6e1 * t574) * t461 + t575) * t581) * t331 + (0.16e2 * (t532 + t502 + (-8 * t464 + 12 * t563) * t394 + (-12 * pkin(7) * t469 + t477 * t589) * t428 - (6 * t563) + t546) * t573 + 0.24e2 * (t557 * t532 + 0.14e2 * (-0.32e2 / 0.21e2 * (t468 + t461 / 0.4e1 + t466 / 0.4e1 - t456 / 0.8e1) * t501 + 0.5e1 / 0.42e2 * t473 + (0.16e2 / 0.21e2 * t466 + t554) * t461 + t464 / 0.7e1 + t554 * t466 + t467 - 0.3e1 / 0.7e1 * t564 + t455 / 0.42e2) * t565 + t377 * t488 - t545 * t473 + (t374 - 0.10e2 / 0.3e1 * t464 + (2 * t467) - t564) * t461 + t347 * t567 + ((-0.2e1 / 0.3e1 * t501 + t404 + t555) * t524 + (-0.8e1 / 0.3e1 * (t556 + t588) * t501 + 0.5e1 / 0.18e2 * t473 + (0.4e1 / 0.3e1 * t468 + t417 + t405) * t461 + t467 + 0.2e1 / 0.3e1 * t563 - 0.2e1 / 0.3e1 * t564 - t464 / 0.3e1 + t455 / 0.18e2) * t537) * pkin(7)) * t571 + 0.16e2 * (-0.6e1 * t461 * t468 + t543) * t566 + 0.32e2 * (t362 * t568 + t365 * t385) * t535 + 0.24e2 * (t376 * t488 - t458 + (-t378 + t548) * t473 + (t374 + t473 / 0.6e1 - t455 / 0.6e1 + t544) * t461 + t347 * t468) * t565 + 0.8e1 * t487 * t541 - 0.8e1 * ((t443 + t558) * t473 + (t441 + (t438 + (10 * t468)) * t466 + t494) * t461 + t561) * t501 + t473 ^ 2 + (t437 + t450 + (28 * t466)) * t458 + (t383 * t466 + (70 * t464) + t493) * t473 + (t383 * t464 + t493 * t444 + t550 * t452 - 0.6e1 * t467 * t456 + (28 * t469 ^ 2) + (4 * t477 ^ 2)) * t461 + t366 * t575) * t357 + (((0.4e1 * t578 + (t381 + t540) * t371 + t388 * t381 + (t406 + t511) * t540) * t534 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t461 + t419 + t403) * t381 + pkin(1) * t519) * t531 + (-0.8e1 * t499 + ((t405 + t412 + t552) * t381 - (0.8e1 / 0.3e1 * t461 + t514) * t581) * t538) * pkin(7) + t490) * t380) * t331 + (0.32e2 * (t504 + (-0.4e1 * t425 * t526 + t584 + (t585 + t437 + t449) * t466) * t394 + (-t466 + t486 + t588) * t522 + t362 * t567 + t388 * t365) * t572 + 0.8e1 * (t360 + (t365 * t568 + t351) * t525 + (t488 + (t444 + t551) * t461 + t484) * t521 + t487) * t380) * t357) * t369) / ((-0.4e1 * (-t545 * t381 + 0.2e1 * t578 + (t528 * t587 + t425 * (t461 + t583)) * pkin(1)) * t571 + 0.8e1 * pkin(7) * t499 + ((pkin(3) * t584 + 0.8e1 * t466 * t472) * t427 + 0.4e1 * t469 * t519) * t394 - 0.4e1 * t489 * t541 - (t553 * t461 + t442 + t543 + (6 * t563)) * t381 + (t439 + (t432 + 6 * t468) * t461 + t379) * t581) * t331 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t501 + 0.4e1 / 0.9e1 * t461 - t456 / 0.9e1 + t556) * t565 + t377 * t362 + t363 * t567 + (t562 + (t403 + t412 + t486) * t382) * t542) * t571 + t360 + (t363 * t568 + t351) * t525 + t496 * t521 + ((t378 + t513) * t461 + t560) * t498 + t458 + (t431 + t510) * t473 + (t510 * t444 + t549 * t452 + t430 + t448) * t461 + t379 * t366) * t357 + ((t534 * t581 + (t527 * t586 + (t381 - t581) * t371 + t489) * t536) * t331 + (0.8e1 * (t371 + t530 + t388) * t572 + 0.6e1 * (t547 * t530 + (t362 + t363) * t522 + t496) * t380) * t357) * t369);
t340 = 0.1e1 / (t368 * t539 + t362 + t370 + t508);
t462 = 0.1e1 / pkin(3);
t579 = t340 * t462;
t457 = 0.1e1 / pkin(4);
t520 = t340 * t457 / pkin(3) ^ 2;
t507 = t580 / 0.4e1;
t506 = t579 / 0.2e1;
t505 = t457 * t462 / 0.2e1;
t492 = t440 + t445 - t548;
t491 = -pkin(1) + t529;
t429 = cos(pkin(9));
t426 = sin(pkin(9));
t355 = t440 + t495;
t353 = -t424 * t428 + t570;
t352 = -t424 * t425 - t569;
t348 = t421 * t428 - t422 * t425;
t342 = atan2(t348, -t349);
t341 = atan2(t348, t349);
t339 = cos(t342);
t338 = cos(t341);
t337 = sin(t342);
t336 = sin(t341);
t333 = -t337 * t421 + t339 * t422;
t332 = t337 * t422 + t339 * t421;
t330 = (-t491 + t577) * t331 + (t350 * t539 + t355 * t368) * t425 + (t355 * t428 + (0.4e1 * t394 - 0.2e1) * t368 * pkin(1)) * t381;
t329 = (t368 * t425 + t528) * t331 - (t370 + t492 + t497) * t577 + t491 * t370 + t492 * t529 + (t350 * t586 - t509 + t533 - t585) * pkin(1);
t328 = atan2(t330 * t506, t329 * t506);
t327 = cos(t328);
t326 = sin(t328);
t325 = (t329 * t582 + t330 * t348 / 0.2e1) * t579;
t324 = (-t329 * t348 / 0.2e1 + t330 * t582) * t579;
t322 = t324 * t426 + t325 * t429;
t321 = -t324 * t429 + t325 * t426;
t319 = atan2(t321, -t322);
t318 = atan2(t321, t322);
t317 = cos(t319);
t316 = cos(t318);
t315 = sin(t319);
t314 = sin(t318);
t313 = atan2(t331 * t505, t505 * t580);
t312 = cos(t313);
t311 = sin(t313);
t310 = (t329 * t331 / 0.4e1 + t330 * t507) * t520;
t309 = (t329 * t507 - t330 * t331 / 0.4e1) * t520;
t308 = atan2(t309 * t352 + t310 * t353, -t309 * t353 + t310 * t352);
t307 = cos(t308);
t306 = sin(t308);
t1 = [-t428, t425, 0, 0; -t425, -t428, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t327, -t326, 0, pkin(1); t326, t327, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t316, t314, 0, pkin(2); -t314, -t316, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t312, -t311, 0, pkin(3); t311, t312, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t333, -t332, 0, t422 * pkin(5); t332, t333, 0, t421 * pkin(5); 0, 0, 1, 0; 0, 0, 0, 1; -t316, t314, 0, 0; -t314, -t316, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t424, t427, 0, pkin(7); -t427, t424, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t338, t336, 0, pkin(1); -t336, -t338, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t317, t315, 0, pkin(6); -t315, -t317, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t307, t306, 0, pkin(4); -t306, -t307, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t339, -t337, 0, pkin(5); t337, t339, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t317, t315, 0, pkin(6); -t315, -t317, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(3); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(1); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(2); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,15);             % numerisch
else,                         T_mdh = sym('xx', [4,4,15]); end % symbolisch

for i = 1:15
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
