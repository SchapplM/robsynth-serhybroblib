% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% picker2Dm2DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   11:  mdh base (link 0) -> mdh frame (11-1), link (11-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-09 23:02
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = picker2Dm2DE2_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm2DE2_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm2DE2_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-09 19:13:19
% EndTime: 2020-05-09 19:13:25
% DurationCPUTime: 5.71s
% Computational Cost: add. (44063->436), mult. (125636->498), div. (1042->5), fcn. (25038->33), ass. (0->244)
t305 = 4 * pkin(1);
t163 = pkin(4) ^ 2;
t111 = -t163 / 0.4e1;
t168 = pkin(3) ^ 2;
t304 = t111 + t168 / 0.2e1;
t303 = 2 * pkin(7);
t135 = cos(qJ(1));
t101 = t135 ^ 2;
t302 = -0.2e1 * t101;
t147 = 0.2e1 * t168;
t301 = 0.4e1 * t168;
t173 = pkin(1) ^ 2;
t171 = t173 ^ 2;
t300 = 4 * t171;
t299 = 2 * t173;
t151 = 6 * t173;
t175 = pkin(7) ^ 2;
t159 = 2 * t175;
t180 = t168 ^ 2;
t146 = 0.5e1 * t180;
t128 = sin(pkin(8));
t129 = cos(pkin(8));
t132 = sin(qJ(1));
t52 = t128 * t132 + t129 * t135;
t298 = t52 / 0.2e1;
t89 = pkin(1) * t135;
t74 = t89 + pkin(7);
t297 = pkin(1) * t132;
t131 = sin(qJ(2));
t87 = pkin(3) * t131;
t134 = cos(qJ(2));
t88 = pkin(3) * t134;
t100 = t135 * t101;
t110 = -t163 / 0.6e1;
t112 = -t163 / 0.3e1;
t113 = -t163 / 0.2e1;
t119 = 0.2e1 / 0.3e1 * t168;
t122 = -t168 / 0.3e1;
t124 = 0.4e1 / 0.3e1 * t173;
t126 = t173 / 0.2e1;
t137 = 15 * t171;
t138 = 15 * t173;
t139 = 10 * t173;
t144 = -0.2e1 * t163;
t145 = -0.5e1 * t163;
t148 = 7 * t171;
t149 = 5 * t171;
t150 = 7 * t173;
t174 = t175 ^ 2;
t155 = 3 * t174;
t156 = 8 * t175;
t157 = 4 * t175;
t162 = t163 ^ 2;
t179 = pkin(3) * t168;
t165 = t179 ^ 2;
t176 = pkin(1) * t173;
t184 = pkin(7) * t175;
t262 = t171 + t174;
t267 = t159 - t163;
t278 = t175 * t163;
t192 = t267 * t173 + t162 / 0.6e1 + t262 - t278;
t191 = 0.5e1 / 0.6e1 * t180 + t192;
t283 = t132 * t134;
t242 = pkin(3) * t283;
t213 = pkin(1) * t242;
t195 = t175 - t213;
t207 = -0.4e1 * t213;
t93 = t173 + t175;
t219 = t168 + t93;
t68 = t113 + t219;
t196 = t68 * t207;
t275 = t162 / 0.2e1 - t180 / 0.2e1;
t206 = -0.3e1 * t278 + t155 + t275;
t208 = -0.6e1 * t213;
t115 = -0.3e1 / 0.2e1 * t163;
t158 = 3 * t175;
t274 = t115 + t158;
t285 = t165 + t93 * ((t115 + t159) * t173 - 0.3e1 / 0.2e1 * t278 + t262 + t275);
t85 = 0.10e2 / 0.3e1 * t173;
t200 = ((t85 + t267) * t168 + t191) * t208 + (t137 + (-0.9e1 * t163 + (18 * t175)) * t173 + t206) * t168 + (t138 + t274) * t180 + t285;
t152 = 3 * t173;
t268 = t152 + t175;
t222 = t168 + t268;
t201 = t222 * t88 - (0.3e1 * t168 + t93) * t297;
t114 = -0.2e1 / 0.3e1 * t163;
t123 = -0.2e1 / 0.3e1 * t168;
t223 = t114 + t93;
t269 = t139 + t159;
t273 = t123 + t175;
t91 = -t163 - t168;
t77 = t158 + t91;
t286 = t77 * t173;
t202 = -(t146 + ((5 * t173) + t77) * t147 + (t123 + t223) * t93) * t297 + (t180 + (t114 + t123 + t269) * t168 + t149 + 0.2e1 * t286 + t175 * (t114 + t273)) * t88;
t266 = t162 - t180;
t205 = -0.6e1 * t278 + (6 * t174) + t266;
t239 = t176 * t88;
t210 = t100 * t239;
t224 = t114 + t119 + t159;
t284 = t180 + (t119 + t223) * t93;
t118 = 0.4e1 / 0.3e1 * t168;
t225 = t112 + t93;
t66 = t118 + t225;
t211 = t66 * t207 + t284 + (t151 + t224) * t168;
t291 = t171 * t101 ^ 2;
t212 = t291 * t88;
t276 = t176 * t100;
t237 = 0.16e2 * t276;
t215 = pkin(7) * t237;
t216 = 0.20e2 / 0.3e1 * t173;
t245 = pkin(7) * t276;
t217 = 0.8e1 * t245;
t265 = -t163 + t168;
t221 = t158 + t265;
t120 = t168 / 0.3e1;
t226 = t110 + t120 + t175;
t227 = t163 / 0.3e1 + t120 + t159;
t228 = 0.2e1 / 0.3e1 * t163 + t119 + t157;
t229 = 0.4e1 / 0.3e1 * t163 + t118 - (2 * t175);
t281 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t231 = t132 * t281;
t252 = 0.6e1 * t89;
t232 = pkin(7) * t252;
t253 = 0.4e1 * t89;
t233 = pkin(7) * t253;
t235 = -t297 / 0.2e1;
t279 = t173 * t101;
t238 = 0.12e2 * t279;
t240 = t173 * t88;
t282 = t134 * t135;
t241 = pkin(3) * t282;
t243 = 0.4e1 * t279;
t244 = -0.4e1 * t279;
t98 = t131 ^ 2;
t289 = t179 * t131 * t98;
t248 = -0.8e1 * t289;
t249 = 0.8e1 * t291;
t251 = -0.4e1 * t87;
t255 = 0.2e1 * t297;
t256 = pkin(7) * t89;
t258 = 4 * pkin(7);
t259 = t174 + t180;
t260 = t174 - t171;
t261 = t173 - t175;
t263 = -t168 + t175;
t264 = t163 - t175;
t270 = 0.4e1 / 0.7e1 * t175 - t163 / 0.7e1;
t271 = t126 + t175;
t272 = t173 / 0.3e1 + t175;
t277 = t175 * t173;
t280 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t287 = (-t132 * t176 + t240) * t101;
t288 = t180 * t98 ^ 2;
t290 = t175 * t91;
t293 = t168 * t98;
t220 = -t163 + t93;
t86 = t93 ^ 2;
t295 = t86 * (-t168 + t220);
t161 = 0.2e1 * pkin(3);
t75 = t87 * t303;
t209 = t75 + t220;
t73 = t87 + pkin(7);
t294 = t135 * t73;
t250 = 0.2e1 * t293;
t53 = t75 + t250 + t263;
t65 = -0.2e1 * t213;
t31 = sqrt(t53 * t244 + 0.4e1 * t261 * t293 + pkin(7) * t220 * t251 - t171 + (-0.2e1 * t168 + t264) * t299 - (t175 - (t161 + pkin(4)) * pkin(4)) * (t175 + (t161 - pkin(4)) * pkin(4)) + (-(t65 + t209) * t294 + t209 * t242) * t305);
t50 = -t180 / 0.6e1 + t192;
t81 = t122 + t175;
t54 = t81 * t65;
t60 = t87 + t74;
t92 = -0.3e1 * t168 + t175;
t63 = t92 * t217;
t64 = 0.10e2 * t286;
t69 = -t163 + t219;
t254 = 0.2e1 * t89;
t76 = pkin(7) * t254;
t79 = (t157 + t163) * t173;
t82 = -t173 / 0.3e1 + t175;
t90 = -0.30e2 * t163 + (60 * t175);
t95 = -3 * t173 + t175;
t296 = ((-0.24e2 * (0.4e1 / 0.3e1 * t279 + t76 + t82) * t288 * t297 - 0.12e2 * (-0.8e1 / 0.3e1 * t212 + ((t124 + t226) * t88 - (0.7e1 / 0.6e1 * t168 + t110 + t271) * t297) * t243 + (-t168 * t261 - 0.5e1 / 0.3e1 * t171 + t227 * t173 + t175 * (t112 + t81)) * t88 + (-t180 + (-t216 + t228) * t168 - (3 * t171) + t229 * t173 + t174) * t235 + (-t132 * t171 * t100 + ((t173 + t226) * t88 + (t147 - t261) * t235) * t89) * t258) * t293 + 0.24e2 * t81 * t212 + ((t175 + 0.5e1 / 0.2e1 * t168 + 0.3e1 / 0.2e1 * t173 + t113) * t88 + t92 * t297 / 0.2e1) * t215 - 0.6e1 * ((-0.3e1 * t180 + (-t216 + t229) * t168 + t228 * t173 + t260) * t88 - 0.2e1 * (-0.5e1 / 0.3e1 * t180 + (-t173 + t227) * t168 + t175 * (t122 + t225)) * t297) * t279 - 0.6e1 * t202 * t256 - (t165 + ((21 * t173) + t77) * t180 + (t155 + (35 * t171) + t64 + 0.2e1 * t290) * t168 + (t148 + (t145 + t156 - 0.5e1 * t168) * t173 + t175 * (-t163 + t263)) * t93) * t88 + (0.7e1 * t165 + (t150 + t77) * t146 + ((21 * t171) + (9 * t174) + t64 + 0.6e1 * t290) * t168 + t295) * t297) * t31 + (0.16e2 * (t249 + t215 + (-8 * t171 + 12 * t277) * t101 + (-12 * pkin(7) * t176 + t184 * t305) * t135 - (6 * t277) + t262) * t288 + 0.24e2 * (t273 * t249 + 0.14e2 * (-0.32e2 / 0.21e2 * (t175 + t168 / 0.4e1 + t173 / 0.4e1 - t163 / 0.8e1) * t213 + 0.5e1 / 0.42e2 * t180 + (0.16e2 / 0.21e2 * t173 + t270) * t168 + t171 / 0.7e1 + t270 * t173 + t174 - 0.3e1 / 0.7e1 * t278 + t162 / 0.42e2) * t279 + t82 * t196 - t261 * t180 + (-0.10e2 / 0.3e1 * t171 + (2 * t174) - t278 + t79) * t168 + t50 * t280 + ((-0.2e1 / 0.3e1 * t213 + t111 + t271) * t237 + (-0.8e1 / 0.3e1 * (t272 + t304) * t213 + 0.5e1 / 0.18e2 * t180 + (0.4e1 / 0.3e1 * t175 + t124 + t112) * t168 + t174 + 0.2e1 / 0.3e1 * t277 - 0.2e1 / 0.3e1 * t278 - t171 / 0.3e1 + t162 / 0.18e2) * t252) * pkin(7)) * t293 + 0.16e2 * (-0.6e1 * t175 * t168 + t259) * t291 + 0.32e2 * (t65 * t281 + t68 * t92) * t245 + 0.24e2 * (t81 * t196 - t165 + (-t85 + t264) * t180 + (t79 + t180 / 0.6e1 - t162 / 0.6e1 + t260) * t168 + t50 * t175) * t279 + 0.8e1 * t200 * t256 - 0.8e1 * ((t150 + t274) * t180 + (t148 + (t145 + (10 * t175)) * t173 + t206) * t168 + t285) * t213 + t180 ^ 2 + (t144 + t157 + (28 * t173)) * t165 + (t173 * t90 + (70 * t171) + t205) * t180 + (t205 * t151 + t266 * t159 - 0.6e1 * t174 * t163 + t90 * t171 + (28 * t176 ^ 2) + (4 * t184 ^ 2)) * t168 + t69 * t295) * t60 + (((0.4e1 * t287 + (t88 + t255) * t76 + t95 * t88 + (t113 + t222) * t255) * t248 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t168 + t126 + t110) * t88 + pkin(1) * t231) * t244 + (-0.8e1 * t210 + ((t112 + t119 + t268) * t88 - (0.8e1 / 0.3e1 * t168 + t225) * t297) * t253) * pkin(7) + t202) * t87) * t31 + (0.32e2 * (t217 + (-0.4e1 * t132 * t239 + t300 + (t301 + t144 + t156) * t173) * t101 + (-t173 + t195 + t304) * t233 + t65 * t280 + t95 * t68) * t289 + 0.8e1 * (t63 + (t68 * t281 + t54) * t238 + (t196 + (t151 + t267) * t168 + t191) * t232 + t200) * t87) * t60) * t74) / ((-0.4e1 * (-t261 * t88 + 0.2e1 * t287 + (t241 * t303 + t132 * (t168 + t299)) * pkin(1)) * t293 + 0.8e1 * pkin(7) * t210 + ((pkin(3) * t300 + 0.8e1 * t173 * t179) * t134 + 0.4e1 * t176 * t231) * t101 - 0.4e1 * t201 * t256 - (t269 * t168 + t149 + t259 + (6 * t277)) * t88 + (t146 + (t139 + 6 * t175) * t168 + t86) * t297) * t31 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t213 + 0.4e1 / 0.9e1 * t168 - t163 / 0.9e1 + t272) * t279 + t82 * t65 + t66 * t280 + (t276 + (t110 + t119 + t195) * t89) * t258) * t293 + t63 + (t66 * t281 + t54) * t238 + t211 * t232 + ((t85 + t224) * t168 + t284) * t208 + t165 + (t138 + t221) * t180 + (t221 * t151 + t265 * t159 + t137 + t155) * t168 + t86 * t69) * t60 + ((t248 * t297 + (t240 * t302 + (t88 - t297) * t76 + t201) * t251) * t31 + (0.8e1 * (t76 + t243 + t95) * t289 + 0.6e1 * (t263 * t243 + (t65 + t66) * t233 + t211) * t87) * t60) * t74);
t169 = 0.1e1 / pkin(3);
t43 = 0.1e1 / (t254 * t73 + t219 + t65 + t75);
t292 = t169 * t43;
t230 = t292 / 0.2e1;
t203 = -pkin(1) + t242;
t204 = t147 + t152 - t264;
t29 = (t132 * t73 + t241) * t31 - (t204 + t75 + t207) * t294 + t203 * t75 + t204 * t242 + (t53 * t302 - t220 + t250 - t301) * pkin(1);
t58 = t147 + t209;
t30 = (-t203 + t294) * t31 + (t254 * t53 + t58 * t73) * t132 + (t135 * t58 + (0.4e1 * t101 - 0.2e1) * t73 * pkin(1)) * t88;
t27 = qJ(1) + atan2(t30 * t230, t29 * t230);
t51 = t128 * t135 - t129 * t132;
t42 = qJ(1) + atan2(t51, t52);
t257 = pkin(7) + 0;
t247 = t128 * pkin(5) + 0;
t246 = t129 * pkin(5) + 0;
t72 = -t89 + 0;
t164 = 0.1e1 / pkin(4);
t218 = t164 * t169 / 0.2e1;
t9 = atan2(t31 * t218, t218 * t296) + t27;
t133 = sin(pkin(9));
t136 = cos(pkin(9));
t23 = (-t29 * t51 / 0.2e1 + t30 * t298) * t292;
t24 = (t29 * t298 + t30 * t51 / 0.2e1) * t292;
t20 = t133 * t24 - t136 * t23;
t21 = t133 * t23 + t136 * t24;
t16 = atan2(t20, t21) + t27;
t236 = t164 / pkin(3) ^ 2 * t43;
t234 = t296 / 0.4e1;
t15 = cos(t16);
t13 = pkin(6) * t15;
t214 = t13 + t72;
t71 = 0 - t297;
t26 = cos(t27);
t199 = -pkin(2) * t26 + t72;
t198 = -pkin(3) * t26 + t72;
t14 = sin(t16);
t12 = pkin(6) * t14;
t197 = t12 + t71;
t25 = sin(t27);
t194 = -pkin(2) * t25 + t71;
t193 = -pkin(3) * t25 + t71;
t56 = -t131 * t135 + t283;
t55 = -t131 * t132 - t282;
t45 = atan2(t51, -t52);
t41 = pkin(8) + t45;
t40 = cos(t42);
t39 = sin(t42);
t38 = cos(t41);
t37 = sin(t41);
t34 = t45 + t42;
t33 = cos(t34);
t32 = sin(t34);
t11 = (t29 * t31 / 0.4e1 + t30 * t234) * t236;
t10 = (t29 * t234 - t30 * t31 / 0.4e1) * t236;
t8 = cos(t9);
t7 = sin(t9);
t6 = atan2(t20, -t21) + t16;
t5 = cos(t6);
t4 = sin(t6);
t3 = atan2(t10 * t55 + t11 * t56, -t10 * t56 + t11 * t55) + t9;
t2 = cos(t3);
t1 = sin(t3);
t17 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t135, t132, 0, 0; -t132, -t135, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t26, t25, 0, t72; -t25, -t26, 0, t71; 0, 0, 1, 0; 0, 0, 0, 1; t15, -t14, 0, t199; t14, t15, 0, t194; 0, 0, 1, 0; 0, 0, 0, 1; -t8, t7, 0, t198; -t7, -t8, 0, t193; 0, 0, 1, 0; 0, 0, 0, 1; t38, -t37, 0, t246; t37, t38, 0, t247; 0, 0, 1, 0; 0, 0, 0, 1; t15, -t14, 0, t72; t14, t15, 0, t71; 0, 0, 1, 0; 0, 0, 0, 1; t131, t134, 0, t257; -t134, t131, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t40, -t39, 0, t72; t39, t40, 0, t71; 0, 0, 1, 0; 0, 0, 0, 1; -t5, t4, 0, t13 + t199; -t4, -t5, 0, t12 + t194; 0, 0, 1, 0; 0, 0, 0, 1; t2, -t1, 0, -pkin(4) * t8 + t198; t1, t2, 0, -pkin(4) * t7 + t193; 0, 0, 1, 0; 0, 0, 0, 1; t33, -t32, 0, pkin(5) * t40 + t72; t32, t33, 0, pkin(5) * t39 + t71; 0, 0, 1, 0; 0, 0, 0, 1; -t5, t4, 0, t214; -t4, -t5, 0, t197; 0, 0, 1, 0; 0, 0, 0, 1; t131, t134, 0, t87 + t257; -t134, t131, 0, -t88 + 0; 0, 0, 1, 0; 0, 0, 0, 1; t38, -t37, 0, pkin(1) * t38 + t246; t37, t38, 0, pkin(1) * t37 + t247; 0, 0, 1, 0; 0, 0, 0, 1; -t5, t4, 0, (-t26 - t5) * pkin(2) + t214; -t4, -t5, 0, (-t25 - t4) * pkin(2) + t197; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t17;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
