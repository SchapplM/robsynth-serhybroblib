% Calculate inertial parameters regressor of joint inertia matrix for
% palh3m1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% MM_reg [((4+1)*4/2)x(4*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-18 10:11
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = palh3m1TE_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1TE_inertiaJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1TE_inertiaJ_reg2_slag_vp: pkin has to be [19x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t281 = 2 * pkin(3);
t125 = pkin(18) + pkin(19);
t123 = sin(t125);
t124 = cos(t125);
t149 = pkin(5) ^ 2;
t154 = pkin(1) ^ 2;
t136 = sin(qJ(2));
t137 = sin(pkin(16));
t141 = cos(qJ(2));
t243 = cos(pkin(16));
t116 = t136 * t137 - t141 * t243;
t242 = pkin(5) * t116;
t276 = -2 * pkin(1);
t208 = t242 * t276 + t154;
t110 = t149 + t208;
t108 = 0.1e1 / t110;
t153 = 0.1e1 / pkin(2);
t212 = t108 * t153;
t135 = sin(qJ(3));
t205 = pkin(2) ^ 2 - pkin(6) ^ 2;
t106 = t110 + t205;
t111 = pkin(1) - t242;
t262 = -pkin(6) - pkin(2);
t103 = (pkin(5) - t262) * (pkin(5) + t262) + t208;
t261 = -pkin(6) + pkin(2);
t104 = (pkin(5) - t261) * (pkin(5) + t261) + t208;
t155 = sqrt(-t104 * t103);
t118 = t136 * t243 + t141 * t137;
t241 = pkin(5) * t118;
t98 = t106 * t241 + t111 * t155;
t218 = t98 * t135;
t140 = cos(qJ(3));
t210 = t118 * t155;
t97 = -pkin(5) * t210 + t111 * t106;
t221 = t97 * t140;
t91 = (-t221 / 0.2e1 + t218 / 0.2e1) * t212;
t217 = t98 * t140;
t222 = t97 * t135;
t92 = (t217 / 0.2e1 + t222 / 0.2e1) * t212;
t171 = t123 * t91 - t124 * t92;
t206 = pkin(8) ^ 2 - pkin(10) ^ 2;
t151 = pkin(3) ^ 2;
t150 = pkin(4) ^ 2;
t72 = t123 * t92 + t124 * t91;
t253 = t72 * pkin(4);
t216 = t253 * t281 + t150;
t67 = t151 + t216;
t64 = t67 - t206;
t279 = t171 * t64;
t260 = (-pkin(8) - pkin(10));
t61 = ((pkin(3) - t260) * (pkin(3) + t260)) + t216;
t259 = (-pkin(8) + pkin(10));
t62 = ((pkin(3) - t259) * (pkin(3) + t259)) + t216;
t156 = sqrt(-t62 * t61);
t278 = t156 * t171;
t144 = 0.1e1 / pkin(10);
t129 = cos(pkin(17));
t65 = 0.1e1 / t67;
t232 = t144 * t65;
t174 = -pkin(3) * t129 * t232 / 0.2e1;
t128 = sin(pkin(17));
t69 = pkin(3) * t72 + pkin(4);
t50 = pkin(3) * t279 + t156 * t69;
t226 = t50 * t128;
t48 = -pkin(3) * t278 + t64 * t69;
t227 = t48 * t129;
t66 = 0.1e1 / t67 ^ 2;
t255 = pkin(4) * t66;
t277 = (-0.2e1 * t69 * pkin(4) - t64) * t174 + (t226 - t227) * pkin(3) * t144 * t255;
t115 = t136 * t135 - t141 * t140;
t117 = -t141 * t135 - t136 * t140;
t31 = (-t227 / 0.2e1 + t226 / 0.2e1) * t232;
t225 = t50 * t129;
t249 = t128 / 0.2e1;
t32 = (t225 / 0.2e1 + t48 * t249) * t232;
t23 = t115 * t31 - t117 * t32;
t275 = t23 ^ 2;
t131 = sin(pkin(18));
t146 = 0.1e1 / pkin(8);
t231 = t146 * t65;
t133 = cos(pkin(18));
t246 = -t133 / 0.2e1;
t63 = t67 + t206;
t68 = -pkin(3) - t253;
t47 = -pkin(4) * t278 - t63 * t68;
t254 = pkin(4) * t171;
t49 = -t156 * t68 + t63 * t254;
t33 = (t131 * t47 / 0.2e1 + t49 * t246) * t231;
t34 = (t47 * t246 - t131 * t49 / 0.2e1) * t231;
t130 = sin(pkin(19));
t220 = t98 * t130;
t132 = cos(pkin(19));
t223 = t97 * t132;
t88 = (-t223 / 0.2e1 + t220 / 0.2e1) * t212;
t219 = t98 * t132;
t224 = t97 * t130;
t89 = (t219 / 0.2e1 + t224 / 0.2e1) * t212;
t75 = t136 * t88 + t141 * t89;
t76 = -t136 * t89 + t141 * t88;
t19 = t33 * t76 + t34 * t75;
t274 = 0.2e1 * t19;
t22 = t115 * t32 + t117 * t31;
t273 = 0.2e1 * t22;
t138 = sin(pkin(15));
t148 = 0.1e1 / pkin(6);
t213 = t108 * t148;
t142 = cos(pkin(15));
t244 = t142 / 0.2e1;
t105 = t110 - t205;
t112 = pkin(1) * t116 - pkin(5);
t96 = -pkin(1) * t210 - t112 * t105;
t99 = pkin(1) * t118 * t105 - t112 * t155;
t93 = (t99 * t244 - t96 * t138 / 0.2e1) * t213;
t272 = 0.2e1 * t93;
t157 = t31 ^ 2;
t271 = 0.1e1 / t157;
t270 = -0.2e1 * t118 ^ 2;
t120 = -t141 * pkin(1) - pkin(13);
t269 = -0.2e1 * t120;
t268 = 0.2e1 * t120;
t267 = 0.2e1 * t141;
t56 = 0.1e1 / t156;
t266 = -t56 / 0.2e1;
t265 = t65 / 0.2e1;
t204 = pkin(1) * t241;
t215 = 0.2e1 / t155 * (t103 + t104) * t204;
t192 = -t215 / 0.2e1;
t211 = t116 * t155;
t80 = (t211 + (t111 * t276 - t106 + t192) * t118) * pkin(5);
t264 = -t80 / 0.2e1;
t82 = t111 * t215 / 0.2e1 + t149 * pkin(1) * t270 + (-t116 * t106 - t210) * pkin(5);
t263 = t82 / 0.2e1;
t186 = 0.1e1 / t110 ^ 2 * t204;
t247 = t130 / 0.2e1;
t158 = t88 ^ 2;
t84 = 0.1e1 / t158;
t85 = t89 ^ 2;
t39 = 0.1e1 + (((t132 * t263 + t80 * t247) * t108 + (t219 + t224) * t186) / t88 - ((t132 * t264 + t82 * t247) * t108 + (t220 - t223) * t186) * t89 * t84) * t153 / (t85 * t84 + 0.1e1);
t258 = pkin(3) * t39;
t257 = pkin(4) * t31;
t256 = pkin(4) * t32;
t160 = pkin(4) * (t66 * t225 + (t48 * t66 - t65 * t69) * t128);
t190 = -0.2e1 * t151 * t254;
t196 = t56 * t69 / 0.2e1;
t168 = pkin(4) * (t61 + t62) * t281;
t51 = t171 * t168;
t161 = t171 * t190 + t51 * t196;
t195 = t171 * t266;
t164 = -t72 * t156 + t51 * t195;
t172 = t72 * t64 - t278;
t182 = t232 * t249;
t248 = t129 / 0.2e1;
t194 = t65 * t248;
t30 = t32 ^ 2;
t27 = 0.1e1 / (t30 * t271 + 0.1e1);
t199 = t27 * t32 * t271;
t200 = t144 * t27 / t31;
t10 = 0.1e1 - (t164 * t174 + (t172 * pkin(3) + t161) * t182 + t277 * t171) * t199 + (t161 * t194 + ((t172 * t248 + (t164 - t279) * t249) * t65 + t171 * t160) * pkin(3)) * t200;
t245 = t135 / 0.2e1;
t59 = ((t140 * t263 + t80 * t245) * t108 + (t217 + t222) * t186) * t153;
t60 = ((t140 * t264 + t82 * t245) * t108 + (t218 - t221) * t186) * t153;
t54 = -t123 * t59 - t124 * t60;
t36 = t54 * t168;
t162 = t54 * t190 + t36 * t196;
t53 = t123 * t60 - t124 * t59;
t165 = -t53 * t156 + t36 * t195;
t230 = t156 * t54;
t173 = t53 * t64 - t230;
t5 = 0.1e1 - (t165 * t174 + (t173 * pkin(3) + t162) * t182 + t277 * t54) * t199 + (t162 * t194 + ((t173 * t248 + (-t54 * t64 + t165) * t249) * t65 + t54 * t160) * pkin(3)) * t200;
t252 = t5 * t10;
t251 = t88 * pkin(1);
t250 = t89 * pkin(1);
t134 = sin(qJ(4));
t240 = t134 * t5;
t239 = t135 * pkin(1);
t139 = cos(qJ(4));
t238 = t139 * t5;
t237 = t140 * pkin(1);
t236 = t134 * t10;
t235 = t134 * t23;
t234 = t139 * t10;
t233 = t139 * t23;
t214 = t108 * t138;
t209 = t134 * t139;
t126 = t134 ^ 2;
t127 = t139 ^ 2;
t207 = t126 + t127;
t203 = 0.2e1 * t235;
t202 = -0.2e1 * t233;
t201 = 0.2e1 * t209;
t198 = t22 * t209;
t197 = t68 * t266;
t191 = t108 * t244;
t8 = pkin(11) * t10 + t256;
t189 = t207 * t8;
t187 = (-t126 + t127) * t22;
t46 = 0.1e1 / t47 ^ 2;
t185 = pkin(8) * t146 / (t46 * t49 ^ 2 + 0.1e1) * t67;
t184 = t5 * t198;
t183 = t10 * t198;
t122 = pkin(4) - t237;
t25 = t32 * t122 - t31 * t239;
t181 = 0.2e1 * t207;
t26 = t31 * t122 + t32 * t239;
t3 = -t5 * pkin(9) - t26;
t7 = -pkin(9) * t10 - t257;
t180 = t10 * t3 + t5 * t7;
t179 = 0.1e1 / t47 * t185;
t2 = t5 * pkin(11) + t25;
t178 = t2 * t23 + t22 * t3;
t177 = t22 * t7 + t23 * t8;
t176 = t138 * t186;
t175 = t142 * t186;
t107 = -t115 * pkin(4) + t120;
t167 = pkin(3) * (t47 * t66 + t65 * t68);
t166 = pkin(4) * t46 * t49 * t185;
t163 = pkin(3) * (-t150 * t171 * t65 + t49 * t255);
t90 = (t96 * t244 + t99 * t138 / 0.2e1) * t213;
t159 = t90 ^ 2;
t119 = t120 ^ 2;
t87 = t93 ^ 2;
t86 = 0.1e1 / t159;
t81 = t112 * t192 + t154 * pkin(5) * t270 + (-t116 * t105 - t210) * pkin(1);
t79 = (t211 + (0.2e1 * t112 * pkin(5) - t105 + t192) * t118) * pkin(1);
t57 = (-t131 * t75 - t133 * t76) * pkin(3) + t120;
t40 = ((t81 * t191 + t99 * t175 - t79 * t214 / 0.2e1 - t96 * t176) / t90 - (t79 * t191 + t96 * t175 + t81 * t214 / 0.2e1 + t99 * t176) * t93 * t86) / (t87 * t86 + 0.1e1) * t148;
t38 = t131 * t258 + t250;
t37 = t133 * t258 + t251;
t21 = t22 ^ 2;
t20 = -t33 * t75 + t34 * t76;
t18 = -t33 * t38 + t34 * t37;
t17 = t33 * t37 + t34 * t38;
t16 = -t23 * pkin(9) - t22 * pkin(11) + t107;
t14 = 0.2e1 * ((t51 * t197 + (t72 * t63 - t278) * pkin(4)) * t265 + t171 * t163) * t179 - 0.2e1 * ((-t171 * t63 + t164) * t265 + t171 * t167) * t166;
t12 = 0.2e1 * ((t36 * t197 + (t53 * t63 - t230) * pkin(4)) * t265 + t54 * t163) * t179 - 0.2e1 * ((-t54 * t63 + t165) * t265 + t54 * t167) * t166 + t39;
t9 = t10 ^ 2;
t4 = t5 ^ 2;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t136 ^ 2, t136 * t267, 0, t141 ^ 2, 0, 0, pkin(13) * t267, -0.2e1 * pkin(13) * t136, 0, pkin(13) ^ 2, t117 ^ 2, 0.2e1 * t117 * t115, 0, t115 ^ 2, 0, 0, t115 * t269, t117 * t268, 0, t119, t21, t23 * t273, 0, t275, 0, 0, -0.2e1 * t107 * t23, t107 * t273, 0, t107 ^ 2, t127 * t21, -0.2e1 * t21 * t209, t22 * t202, t126 * t21, t22 * t203, t275, t16 * t202, t16 * t203, -0.2e1 * t207 * t22 * t16, t207 * t16 ^ 2, t87, t90 * t272, 0, t159, 0, 0, -0.2e1 * pkin(7) * t90, pkin(7) * t272, 0, pkin(7) ^ 2, t75 ^ 2, 0.2e1 * t76 * t75, 0, t76 ^ 2, 0, 0, t76 * t269, t75 * t268, 0, t119, t19 ^ 2, t20 * t274, 0, t20 ^ 2, 0, 0, -0.2e1 * t57 * t20, t57 * t274, 0, t57 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, t141, 0, 0, 0, 0, 0, 0, 0, t117, 0, t115, 0, 0, 0, (-t115 * t135 + t117 * t140) * pkin(1), 0, 0, 0, t5 * t22, 0, t23 * t5, 0, 0, 0, -t22 * t26 + t23 * t25, 0, t184, t5 * t187, -t5 * t235, -t184, -t5 * t233, 0, t178 * t134, t178 * t139, 0, 0, 0, 0, t40 * t93, 0, t40 * t90, 0, 0, 0, 0, 0, 0, 0, t39 * t75, 0, t39 * t76, 0, 0, 0, (-t75 * t88 + t76 * t89) * pkin(1), 0, 0, 0, t19 * t12, 0, t20 * t12, 0, 0, 0, t17 * t20 - t18 * t19, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.2e1 * t237, 0.2e1 * t239, 0, (t135 ^ 2 + t140 ^ 2) * t154, 0, 0, 0, 0, 0, t4, 0.2e1 * t26 * t5, -0.2e1 * t25 * t5, 0, t25 ^ 2 + t26 ^ 2, t126 * t4, t4 * t201, 0, t127 * t4, 0, 0, -0.2e1 * t3 * t238, 0.2e1 * t3 * t240, t5 * t2 * t181, t2 ^ 2 * t207 + t3 ^ 2, 0, 0, 0, 0, 0, t40 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39 ^ 2, 0.2e1 * t39 * t251, -0.2e1 * t39 * t250, 0, (t158 + t85) * t154, 0, 0, 0, 0, 0, t12 ^ 2, 0.2e1 * t18 * t12, -0.2e1 * t17 * t12, 0, t17 ^ 2 + t18 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, t115, 0, 0, 0, 0, 0, 0, 0, t10 * t22, 0, t23 * t10, 0, 0, 0, (-t22 * t31 + t23 * t32) * pkin(4), 0, t183, t10 * t187, -t10 * t235, -t183, -t10 * t233, 0, t177 * t134, t177 * t139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 * t14, 0, t20 * t14, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t237, t239, 0, 0, 0, 0, 0, 0, 0, t252, t10 * t26 + t5 * t257, -t10 * t25 - t5 * t256, 0, (t25 * t32 + t26 * t31) * pkin(4), t126 * t252, t201 * t252, 0, t127 * t252, 0, 0, -t180 * t139, t180 * t134, t10 * t2 * t207 + t189 * t5, t189 * t2 + t3 * t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * t14, t18 * t14, -t17 * t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0.2e1 * t10 * t257, -0.2e1 * t10 * t256, 0, (t157 + t30) * t150, t126 * t9, t9 * t201, 0, t127 * t9, 0, 0, -0.2e1 * t7 * t234, 0.2e1 * t7 * t236, t8 * t10 * t181, t207 * t8 ^ 2 + t7 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 ^ 2, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139 * t22, 0, -t134 * t22, -t23, t139 * t16, -t134 * t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, 0, t238, 0, -t134 * t2, -t139 * t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236, 0, t234, 0, -t134 * t8, -t139 * t8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MM_reg = t1;
