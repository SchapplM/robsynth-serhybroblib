% Calculate inertial parameters regressor of gravitation load for
% palh3m1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% g_base [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% taug_reg [4x(4*10)]
%   inertial parameter regressor of gravitation joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-18 10:11
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taug_reg = palh3m1TE_gravloadJ_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1TE_gravloadJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh3m1TE_gravloadJ_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1TE_gravloadJ_reg2_slag_vp: pkin has to be [19x1] (double)');

%% Symbolic Calculation
% From gravload_joint_fixb_regressor_matlab.m
t288 = sin(qJ(2));
t289 = sin(pkin(16));
t291 = cos(qJ(2));
t292 = cos(pkin(16));
t223 = t288 * t289 - t291 * t292;
t217 = pkin(5) * t223;
t212 = (-0.2e1 * t217 + pkin(1)) * pkin(1);
t306 = pkin(5) ^ 2;
t104 = t212 + t306;
t136 = pkin(2) ^ 2;
t265 = pkin(6) ^ 2 - t136;
t208 = t104 - t265;
t214 = -t217 + pkin(1);
t114 = t288 * t292 + t291 * t289;
t299 = pkin(5) + pkin(6);
t300 = pkin(5) - pkin(6);
t135 = sqrt(-((-pkin(2) + t299) * (pkin(2) + t300) + t212) * ((pkin(2) + t299) * (-pkin(2) + t300) + t212));
t271 = t114 * t135;
t256 = pkin(5) * t271;
t308 = 0.1e1 / pkin(2);
t202 = t308 * (t208 * t214 - t256);
t302 = 0.1e1 / t104;
t201 = t302 * t202;
t199 = -t201 / 0.2e1;
t206 = pkin(5) * t208;
t203 = t308 * (t114 * t206 + t135 * t214);
t262 = t302 / 0.2e1;
t200 = t203 * t262;
t287 = sin(qJ(3));
t290 = cos(qJ(3));
t194 = t290 * t199 + t287 * t200;
t198 = t201 / 0.2e1;
t195 = t287 * t198 + t290 * t200;
t259 = pkin(18) + pkin(19);
t241 = sin(t259);
t242 = cos(t259);
t310 = t242 * t194 + t241 * t195;
t186 = pkin(3) * t310;
t178 = (0.2e1 * t186 + pkin(4)) * pkin(4);
t297 = -pkin(8) + pkin(10);
t298 = -pkin(8) - pkin(10);
t134 = sqrt(-((pkin(3) - t297) * (pkin(3) + t297) + t178) * ((pkin(3) - t298) * (pkin(3) + t298) + t178));
t309 = t241 * t194 - t242 * t195;
t330 = t309 * t134;
t333 = pkin(3) * t330;
t332 = pkin(4) * t330;
t138 = pkin(8) ^ 2;
t264 = pkin(10) ^ 2 - t138;
t185 = pkin(4) * t310;
t307 = pkin(4) ^ 2;
t66 = t307 + (0.2e1 * t185 + pkin(3)) * pkin(3);
t175 = t66 + t264;
t180 = t186 + pkin(4);
t304 = 0.1e1 / pkin(10);
t160 = t304 * (t175 * t180 - t333);
t173 = pkin(3) * t175;
t161 = t304 * (t134 * t180 + t173 * t309);
t272 = sin(pkin(17));
t273 = cos(pkin(17));
t331 = t272 * t160 + t273 * t161;
t276 = sin(pkin(19));
t277 = cos(pkin(19));
t83 = t277 * t199 + t276 * t200;
t84 = t276 * t198 + t277 * t200;
t73 = -t288 * t84 + t291 * t83;
t127 = sin(qJ(4));
t130 = cos(qJ(4));
t131 = cos(qJ(1));
t113 = -t291 * t287 - t288 * t290;
t128 = sin(qJ(1));
t105 = t113 * t128;
t112 = t288 * t287 - t291 * t290;
t106 = t112 * t128;
t155 = t273 * t160;
t156 = t272 * t161;
t303 = 0.1e1 / t66;
t268 = t303 / 0.2e1;
t269 = -t303 / 0.2e1;
t43 = t155 * t269 + t156 * t268;
t44 = t331 * t268;
t29 = -t105 * t44 + t106 * t43;
t329 = -t131 * t127 + t130 * t29;
t328 = t127 * t29 + t130 * t131;
t327 = -0.2e1 * t309;
t216 = t223 * t135;
t286 = pkin(1) * t114;
t258 = pkin(5) * t286;
t284 = 0.4e1 / t135 * (t299 * t300 - t136 + t212) * t258;
t252 = -t284 / 0.2e1;
t78 = (t216 + (t252 + t265 - t306) * t114) * pkin(5) + (-0.3e1 * pkin(1) + 0.4e1 * t217) * t258;
t326 = -t78 / 0.2e1;
t260 = -0.2e1 * pkin(1) * t114 ^ 2;
t79 = -t256 + t214 * t284 / 0.2e1 - t223 * t206 + t306 * t260;
t325 = t79 / 0.2e1;
t125 = sin(pkin(18));
t324 = t125 / 0.2e1;
t126 = cos(pkin(18));
t323 = -t126 / 0.2e1;
t322 = -t309 / 0.2e1;
t321 = t272 / 0.2e1;
t320 = -t273 / 0.2e1;
t196 = t202 * t258;
t197 = t203 * t258;
t253 = t308 * t262;
t229 = t276 * t253;
t285 = t308 * t302;
t238 = t277 * t285;
t99 = 0.1e1 / t104 ^ 2;
t61 = t238 * t325 + t78 * t229 + (t276 * t196 + t277 * t197) * t99;
t62 = t238 * t326 + t79 * t229 + (-t277 * t196 + t276 * t197) * t99;
t58 = t288 * t62 + t291 * t61 + t73;
t301 = pkin(3) * pkin(4);
t261 = 0.1e1 / t66 ^ 2 * t301;
t319 = (-t155 + t156) * t261;
t318 = t331 * t261;
t311 = 0.4e1 / t134 * ((pkin(3) + pkin(10)) * (pkin(3) - pkin(10)) + t178 - t138) * t301;
t169 = t309 * t311;
t317 = -t134 * t310 + t169 * t322;
t230 = t287 * t253;
t240 = t290 * t285;
t190 = t240 * t325 + t78 * t230 + (t287 * t196 + t290 * t197) * t99;
t191 = t240 * t326 + t79 * t230 + (-t290 * t196 + t287 * t197) * t99;
t166 = -t242 * t190 + t241 * t191;
t60 = -t241 * t190 - t242 * t191;
t170 = t60 * t311;
t316 = -t134 * t166 + t170 * t322;
t174 = t66 - t264;
t172 = pkin(4) * t174;
t179 = -t185 - pkin(3);
t315 = 0.2e1 * t179 * t301 - t172;
t314 = -0.2e1 * t180 * t301 - t173;
t305 = 0.1e1 / pkin(8);
t162 = t305 * (-t134 * t179 + t172 * t309);
t158 = t162 * t261;
t53 = -t174 * t179 - t332;
t293 = t53 * t305;
t239 = t261 * t293;
t313 = -t125 * t158 - t126 * t239;
t312 = t125 * t239 - t126 * t158;
t296 = t305 * t303;
t295 = t304 * t303;
t294 = g(3) * (t112 * t44 + t113 * t43);
t168 = t170 / 0.2e1;
t181 = pkin(4) * pkin(3) ^ 2 * t327;
t254 = t304 * t268;
t275 = t60 * t134;
t140 = (-pkin(3) * t275 + t166 * t173 + t168 * t180 + t181 * t60) * t254;
t142 = (pkin(3) * t316 + t314 * t60) * t295;
t13 = t272 * t140 + t142 * t320 + t319 * t60;
t283 = t13 - t44;
t14 = t273 * t140 + t142 * t321 + t318 * t60;
t282 = t14 + t43;
t167 = t169 / 0.2e1;
t144 = (t167 * t180 + t173 * t310 + t181 * t309 - t333) * t254;
t146 = (pkin(3) * t317 + t309 * t314) * t295;
t17 = t272 * t144 + t146 * t320 + t309 * t319;
t281 = t17 - t44;
t18 = t273 * t144 + t146 * t321 + t309 * t318;
t280 = t18 + t43;
t279 = -t105 * t43 - t106 * t44;
t107 = t112 * t131;
t108 = t113 * t131;
t31 = -t107 * t44 - t108 * t43;
t278 = t112 * t43 - t113 * t44;
t110 = t112 * pkin(4);
t124 = t291 * pkin(1);
t267 = t110 + t124;
t245 = t131 * t291;
t266 = pkin(1) * t245 + t131 * pkin(13);
t255 = t305 * t269;
t251 = t291 * t84;
t250 = t288 * t83;
t248 = t107 * pkin(4) + t266;
t247 = t128 * t291;
t246 = t128 * t288;
t244 = t131 * t288;
t129 = sin(pkin(15));
t243 = t129 * t262;
t133 = 0.1e1 / pkin(6);
t235 = t133 * t99 * t258;
t234 = -g(1) * t279 + g(2) * t31;
t115 = g(1) * t131 + g(2) * t128;
t233 = g(1) * t128 - g(2) * t131;
t228 = t129 * t235;
t132 = cos(pkin(15));
t227 = t132 * t235;
t100 = t105 * pkin(4);
t226 = -pkin(1) * t246 - t100;
t102 = t108 * pkin(4);
t225 = -pkin(1) * t244 - t102;
t224 = (-pkin(13) - t124) * t128;
t1 = -t105 * t14 + t106 * t13 + t279;
t3 = t107 * t13 - t108 * t14 + t31;
t5 = t112 * t14 + t113 * t13 + t278;
t222 = g(1) * t3 + g(2) * t1 + g(3) * t5;
t2 = -t283 * t105 - t282 * t106;
t4 = -t282 * t107 - t283 * t108;
t6 = t283 * t112 - t282 * t113;
t221 = g(1) * t4 + g(2) * t2 + g(3) * t6;
t220 = t133 * t233;
t11 = t112 * t18 + t113 * t17 + t278;
t7 = -t105 * t18 + t106 * t17 + t279;
t9 = t107 * t17 - t108 * t18 + t31;
t219 = g(1) * t9 + g(2) * t7 + g(3) * t11;
t10 = -t280 * t107 - t281 * t108;
t12 = t281 * t112 - t280 * t113;
t8 = -t281 * t105 - t280 * t106;
t218 = g(1) * t10 + g(2) * t8 + g(3) * t12;
t93 = g(1) * t108 + g(2) * t105 - g(3) * t112;
t72 = t250 + t251;
t215 = -t106 * pkin(4) + t224;
t213 = g(1) * t244 + g(2) * t246;
t210 = -t288 * t61 + t291 * t62 - t251;
t96 = -g(1) * t224 - g(2) * t266;
t209 = -g(3) * t291 + t213;
t59 = -t250 + t210;
t109 = pkin(1) * t223 - pkin(5);
t97 = t104 + t265;
t205 = pkin(1) * t133 * t302 * (t216 + (0.2e1 * t109 * pkin(5) + t252 - t97) * t114);
t204 = t133 * (t109 * t252 + (pkin(5) * t260 - t223 * t97 - t271) * pkin(1)) * t262;
t182 = pkin(3) * t307 * t327;
t159 = t162 * t269;
t147 = (pkin(4) * t317 + t309 * t315) * t296;
t145 = (-t167 * t179 + t172 * t310 + t182 * t309 - t332) * t255;
t143 = (pkin(4) * t316 + t315 * t60) * t296;
t141 = (-pkin(4) * t275 + t166 * t172 - t168 * t179 + t182 * t60) * t255;
t98 = t209 * pkin(1);
t94 = g(1) * t107 + g(2) * t106 + g(3) * t113;
t91 = -t109 * t135 + t97 * t286;
t90 = -pkin(1) * t271 - t109 * t97;
t80 = t83 * t246;
t70 = t72 * t131;
t69 = t73 * t131;
t68 = -t84 * t247 - t80;
t67 = -t84 * t246 + t83 * t247;
t64 = t132 * t205 / 0.2e1 + t90 * t227 + t129 * t204 + t91 * t228;
t63 = t132 * t204 + t91 * t227 - t129 * t205 / 0.2e1 - t90 * t228;
t57 = t58 * t131;
t56 = t59 * t131;
t55 = t58 * t128;
t54 = t128 * t210 - t80;
t46 = t126 * t53 * t255 + t125 * t159;
t45 = t125 * t268 * t293 + t126 * t159;
t30 = t107 * t43 - t108 * t44;
t26 = t127 * t128 + t130 * t30;
t25 = -t127 * t30 + t128 * t130;
t20 = t125 * t145 + t147 * t323 + t309 * t313;
t19 = t126 * t145 + t147 * t324 + t309 * t312;
t16 = t125 * t141 + t143 * t323 + t313 * t60;
t15 = t126 * t141 + t143 * t324 + t312 * t60;
t21 = [0, 0, 0, 0, 0, 0, t233, t115, 0, 0, 0, 0, 0, 0, 0, 0, g(1) * t247 - g(2) * t245, -g(1) * t246 + g(2) * t244, -t115, t233 * pkin(13), 0, 0, 0, 0, 0, 0, g(1) * t106 - g(2) * t107, -g(1) * t105 + g(2) * t108, -t115, t96, 0, 0, 0, 0, 0, 0, g(1) * t29 - g(2) * t30, -t234, -t115, -g(1) * t215 - g(2) * t248, 0, 0, 0, 0, 0, 0, g(1) * t329 - g(2) * t26, -g(1) * t328 - g(2) * t25, t234, -g(2) * (pkin(9) * t30 - pkin(11) * t31 + t248) - g(1) * (-pkin(9) * t29 + pkin(11) * t279 + t215), 0, 0, 0, 0, 0, 0, (t90 * t132 * t262 + t91 * t243) * t220, (-t91 * t302 * t132 / 0.2e1 + t90 * t243) * t220, -t115, -t233 * pkin(7), 0, 0, 0, 0, 0, 0, g(1) * t67 - g(2) * t69, g(1) * t68 + g(2) * t70, -t115, t96, 0, 0, 0, 0, 0, 0, -g(2) * (-t45 * t70 + t46 * t69) - g(1) * (-t45 * t68 - t46 * t67), -g(2) * (-t45 * t69 - t46 * t70) - g(1) * (t45 * t67 - t46 * t68), -t115, (-g(2) * (t125 * t70 + t126 * t69) - g(1) * (t125 * t68 - t126 * t67)) * pkin(3) + t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209, g(1) * t245 + g(2) * t247 + g(3) * t288, 0, 0, 0, 0, 0, 0, 0, 0, t93, t94, 0, t98, 0, 0, 0, 0, 0, 0, -t222, -t221, 0, -g(1) * t225 - g(2) * t226 - g(3) * t267, 0, 0, 0, 0, 0, 0, -t222 * t130, t222 * t127, t221, -g(3) * (pkin(9) * t5 - pkin(11) * t6 + t267) - g(2) * (t1 * pkin(9) - t2 * pkin(11) + t226) - g(1) * (t3 * pkin(9) - t4 * pkin(11) + t225), 0, 0, 0, 0, 0, 0, -g(3) * t63 - t115 * t64, -g(3) * t64 + t115 * t63, 0, 0, 0, 0, 0, 0, 0, 0, -g(1) * t56 - g(2) * t54 - g(3) * t58, g(1) * t57 + g(2) * t55 - g(3) * t59, 0, t98, 0, 0, 0, 0, 0, 0, -g(3) * (t15 * t73 + t16 * t72 + t45 * t59 + t46 * t58) - g(2) * (t15 * t68 + t16 * t67 - t45 * t55 + t46 * t54) - g(1) * (-t15 * t70 + t16 * t69 - t45 * t57 + t46 * t56), -g(3) * (-t15 * t72 + t16 * t73 - t45 * t58 + t46 * t59) - g(2) * (-t15 * t67 + t16 * t68 - t45 * t54 - t46 * t55) - g(1) * (-t15 * t69 - t16 * t70 - t45 * t56 - t46 * t57), 0, -g(3) * t124 + t213 * pkin(1) + (-g(3) * (-t125 * t59 + t126 * t58) - g(2) * (t125 * t55 + t126 * t54) - g(1) * (t125 * t57 + t126 * t56)) * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, t94, 0, 0, 0, 0, 0, 0, 0, 0, -t219, -t218, 0, t93 * pkin(4), 0, 0, 0, 0, 0, 0, -t219 * t130, t219 * t127, t218, -g(3) * (pkin(9) * t11 - pkin(11) * t12 + t110) - g(2) * (pkin(9) * t7 - pkin(11) * t8 - t100) - g(1) * (pkin(9) * t9 - pkin(11) * t10 - t102), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3) * (t19 * t73 + t20 * t72) - g(2) * (t19 * t68 + t20 * t67) - g(1) * (-t19 * t70 + t20 * t69), -g(3) * (-t19 * t72 + t20 * t73) - g(2) * (-t19 * t67 + t20 * t68) - g(1) * (-t19 * t69 - t20 * t70), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1) * t25 + g(2) * t328 + t127 * t294, g(1) * t26 + g(2) * t329 + t130 * t294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
taug_reg = t21;
