% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% palh3m1TE
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JaD_transl [3x4]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-18 10:11
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = palh3m1TE_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(3,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1TE_jacobiaD_transl_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1TE_jacobiaD_transl_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'palh3m1TE_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1TE_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1TE_jacobiaD_transl_sym_varpar: pkin has to be [19x1] (double)');
JaD_transl=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:02
	% EndTime: 2020-04-18 09:52:02
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:02
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:02
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.07s
	% Computational Cost: add. (17->14), mult. (60->29), div. (0->0), fcn. (38->4), ass. (0->12)
	t17 = sin(qJ(1));
	t26 = qJD(1) * t17;
	t19 = cos(qJ(1));
	t25 = qJD(1) * t19;
	t24 = qJD(2) * t17;
	t23 = qJD(2) * t19;
	t16 = sin(qJ(2));
	t18 = cos(qJ(2));
	t22 = r_i_i_C(1) * t16 + r_i_i_C(2) * t18;
	t21 = -r_i_i_C(1) * t18 + r_i_i_C(2) * t16 - pkin(13);
	t20 = t22 * qJD(2);
	t1 = [t22 * t24 + (-r_i_i_C(3) * t17 + t21 * t19) * qJD(1), (t16 * t23 + t18 * t26) * r_i_i_C(2) + (t16 * t26 - t18 * t23) * r_i_i_C(1), 0, 0; -t19 * t20 + (r_i_i_C(3) * t19 + t21 * t17) * qJD(1), (t16 * t24 - t18 * t25) * r_i_i_C(2) + (-t16 * t25 - t18 * t24) * r_i_i_C(1), 0, 0; 0, -t20, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:03
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.08s
	% Computational Cost: add. (93->24), mult. (298->43), div. (0->0), fcn. (269->6), ass. (0->24)
	t51 = sin(qJ(3));
	t52 = sin(qJ(2));
	t54 = cos(qJ(3));
	t55 = cos(qJ(2));
	t60 = t51 * t55 + t52 * t54;
	t69 = qJD(2) + qJD(3);
	t58 = t69 * t60;
	t56 = cos(qJ(1));
	t59 = t51 * t52 - t54 * t55;
	t53 = sin(qJ(1));
	t65 = qJD(1) * t53;
	t45 = -t58 * t56 + t59 * t65;
	t57 = t69 * t59;
	t46 = -t57 * t56 - t60 * t65;
	t68 = t46 * r_i_i_C(1) + t45 * r_i_i_C(2);
	t64 = qJD(1) * t56;
	t47 = -t57 * t53 + t60 * t64;
	t48 = -t58 * t53 - t59 * t64;
	t67 = t47 * r_i_i_C(1) + t48 * r_i_i_C(2);
	t66 = r_i_i_C(1) * t58 - t57 * r_i_i_C(2);
	t63 = qJD(2) * t55;
	t62 = qJD(2) * t52 * pkin(1);
	t61 = -pkin(1) * t55 - pkin(13);
	t1 = [t53 * t62 + t48 * r_i_i_C(1) - t47 * r_i_i_C(2) + (-r_i_i_C(3) * t53 + t61 * t56) * qJD(1), (t52 * t65 - t56 * t63) * pkin(1) + t68, t68, 0; -t56 * t62 - t45 * r_i_i_C(1) + t46 * r_i_i_C(2) + (r_i_i_C(3) * t56 + t61 * t53) * qJD(1), (-t52 * t64 - t53 * t63) * pkin(1) + t67, t67, 0; 0, -t62 + t66, t66, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:53:57
	% EndTime: 2020-04-18 09:55:40
	% DurationCPUTime: 64.93s
	% Computational Cost: add. (1690937->317), mult. (2678206->559), div. (89600->10), fcn. (1667249->16), ass. (0->247)
	t874 = pkin(5) ^ 2;
	t1036 = sin(qJ(2));
	t1038 = sin(pkin(16));
	t1039 = cos(qJ(2));
	t1041 = cos(pkin(16));
	t842 = t1036 * t1038 - t1039 * t1041;
	t1030 = pkin(5) * t842;
	t878 = pkin(1) ^ 2;
	t998 = -0.2e1 * pkin(1) * t1030 + t878;
	t832 = t874 + t998;
	t829 = 0.1e1 / t832;
	t877 = 0.1e1 / pkin(2);
	t1008 = t829 * t877;
	t844 = t1036 * t1041 + t1039 * t1038;
	t1029 = pkin(5) * t844;
	t828 = pkin(2) ^ 2 - pkin(6) ^ 2 + t832;
	t837 = pkin(1) - t1030;
	t1049 = pkin(5) + pkin(6);
	t1050 = pkin(5) - pkin(6);
	t826 = (pkin(2) + t1049) * (-pkin(2) + t1050) + t998;
	t827 = (-pkin(2) + t1049) * (pkin(2) + t1050) + t998;
	t1009 = t827 * t826;
	t880 = sqrt(-t1009);
	t811 = t828 * t1029 + t837 * t880;
	t871 = sin(qJ(3));
	t1011 = t811 * t871;
	t1005 = t844 * t880;
	t810 = -pkin(5) * t1005 + t837 * t828;
	t872 = cos(qJ(3));
	t1012 = t810 * t872;
	t907 = -t1011 / 0.2e1 + t1012 / 0.2e1;
	t801 = t907 * t1008;
	t1010 = t811 * t872;
	t1013 = t810 * t871;
	t906 = t1010 / 0.2e1 + t1013 / 0.2e1;
	t802 = t906 * t1008;
	t868 = pkin(18) + pkin(19);
	t866 = sin(t868);
	t867 = cos(t868);
	t792 = -t801 * t867 + t802 * t866;
	t1032 = pkin(3) * t792;
	t1053 = -2 * pkin(4);
	t875 = pkin(4) ^ 2;
	t1000 = -t1032 * t1053 + t875;
	t876 = pkin(3) ^ 2;
	t788 = t876 + t1000;
	t1052 = 0.1e1 / t788;
	t873 = 0.1e1 / pkin(10);
	t1004 = t873 * t1052;
	t1072 = t1004 / 0.2e1;
	t1037 = sin(qJ(1));
	t954 = t1039 * t1037;
	t1040 = cos(qJ(1));
	t956 = t1040 * t1036;
	t893 = -qJD(1) * t956 - qJD(2) * t954;
	t1071 = qJD(3) * t954 - t893;
	t1048 = -pkin(8) - pkin(10);
	t784 = (pkin(3) - t1048) * (pkin(3) + t1048) + t1000;
	t1047 = -pkin(8) + pkin(10);
	t785 = (pkin(3) - t1047) * (pkin(3) + t1047) + t1000;
	t1022 = t785 * t784;
	t879 = sqrt(-t1022);
	t779 = 0.1e1 / t879;
	t1070 = 0.1e1 / t788 ^ 2;
	t940 = -t801 * t866 - t802 * t867;
	t1033 = pkin(3) * t940;
	t1069 = -t1033 / 0.2e1;
	t839 = t844 * qJD(2);
	t1051 = pkin(1) * pkin(5);
	t914 = 0.2e1 * (t826 + t827) * t1051;
	t812 = t839 * t914;
	t821 = 0.1e1 / t880;
	t1068 = t812 * t821;
	t1067 = t875 * t940;
	t789 = pkin(4) + t1032;
	t1028 = t789 * pkin(4);
	t786 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t788;
	t975 = -t786 - 0.2e1 * t1028;
	t869 = sin(pkin(17));
	t1007 = t839 * t880;
	t840 = t842 * qJD(2);
	t988 = t839 * t844 * t874;
	t970 = pkin(1) * t988;
	t1043 = t821 / 0.2e1;
	t982 = t837 * t1043;
	t798 = t812 * t982 - 0.2e1 * t970 + (-t840 * t828 - t1007) * pkin(5);
	t1019 = t798 * t871;
	t1006 = t840 * t880;
	t803 = -t1029 * t1068 / 0.2e1;
	t1027 = t837 * pkin(1);
	t976 = t828 + 0.2e1 * t1027;
	t797 = t803 + (-t976 * t839 + t1006) * pkin(5);
	t1020 = t797 * t872;
	t1062 = t1011 - t1012;
	t830 = 0.1e1 / t832 ^ 2;
	t993 = t830 * t1051;
	t974 = t839 * t993;
	t776 = ((-t1019 / 0.2e1 + t1020 / 0.2e1 - t906 * qJD(3)) * t829 - t1062 * t974) * t877;
	t1018 = t798 * t872;
	t1021 = t797 * t871;
	t938 = t1010 + t1013;
	t777 = (t938 * t974 + (t1018 / 0.2e1 + t1021 / 0.2e1 + t907 * qJD(3)) * t829) * t877;
	t772 = t776 * t867 - t777 * t866;
	t1025 = t772 * t876;
	t948 = t875 * t1070 * t1025 * t1004;
	t905 = 0.4e1 * t869 * t948;
	t945 = -t776 * t866 - t777 * t867;
	t992 = pkin(3) * pkin(4) * t1070;
	t972 = t873 * t992;
	t950 = t869 * t972;
	t1066 = t940 * t905 + t945 * t950;
	t953 = t1037 * t1036;
	t957 = t1040 * t1039;
	t894 = qJD(1) * t953 - qJD(2) * t957;
	t1065 = qJD(3) * t957 - t894;
	t1064 = t1039 * t872;
	t1063 = qJD(2) + qJD(3);
	t1024 = t772 * t879;
	t1001 = t784 + t785;
	t996 = 2 * pkin(4);
	t913 = pkin(3) * t1001 * t996;
	t773 = t940 * t913;
	t1045 = -t773 / 0.2e1;
	t764 = t772 * t913;
	t1046 = -t764 / 0.2e1;
	t1044 = -t779 / 0.2e1;
	t984 = t940 * t1044;
	t744 = (t773 * t984 - t792 * t879 + t940 * t975) * pkin(3);
	t946 = 0.2e1 * t779 * t1001;
	t951 = t772 * t972;
	t1026 = t764 * t779 / t1022;
	t959 = -t940 * t1026 / 0.4e1;
	t971 = 0.4e1 * t940 * t1025;
	t1061 = (pkin(4) * t971 + (t1024 + t773 * t959 + (t1045 * t945 + t792 * t1046 + t971 * t1067) * t779 + (-t786 + (t946 * t1069 - 0.2e1 * t789) * pkin(4)) * t945) * pkin(3)) * t1072 + t744 * t951;
	t735 = (t764 * t984 + t975 * t772 - t879 * t945) * pkin(3);
	t995 = t876 * t1053;
	t977 = t940 * t995;
	t1023 = t779 * t789;
	t985 = t1023 / 0.2e1;
	t736 = t764 * t985 + t772 * t977 + (t786 * t945 - t1024) * pkin(3);
	t769 = t786 * t1033 + t789 * t879;
	t870 = cos(pkin(17));
	t912 = t870 * t948;
	t949 = t870 * t972;
	t1060 = t735 * t950 + t736 * t949 + 0.4e1 * t769 * t912;
	t1031 = pkin(3) * t879;
	t768 = -t1031 * t940 + t786 * t789;
	t1059 = -t735 * t949 + t736 * t950 - 0.4e1 * t768 * t912;
	t927 = qJD(2) * t956;
	t1058 = -qJD(1) * t954 - qJD(3) * t956 - t927;
	t934 = qJD(2) * t953;
	t1057 = qJD(1) * t957 - qJD(3) * t953 - t934;
	t896 = (-t768 * t870 + t769 * t869) * t992;
	t981 = -t870 * t1052 / 0.2e1;
	t997 = t1052 / 0.2e1;
	t983 = t869 * t997;
	t726 = (t735 * t981 + t736 * t983 + t772 * t896) * t873;
	t895 = (t768 * t869 + t769 * t870) * t992;
	t980 = t870 * t997;
	t727 = (t735 * t983 + t736 * t980 + t772 * t895) * t873;
	t760 = (t768 * t981 + t769 * t983) * t873;
	t761 = (t768 * t983 + t769 * t980) * t873;
	t818 = t1057 * t871 + t1071 * t872;
	t819 = t1057 * t872 - t1071 * t871;
	t833 = t871 * t954 + t872 * t953;
	t834 = -t871 * t953 + t872 * t954;
	t965 = t834 * t726 - t833 * t727 + t819 * t760 - t818 * t761;
	t816 = t1058 * t872 - t1065 * t871;
	t817 = t1058 * t871 + t1065 * t872;
	t835 = -t871 * t956 + t872 * t957;
	t836 = t871 * t957 + t872 * t956;
	t963 = t836 * t726 + t835 * t727 + t817 * t760 + t816 * t761;
	t1035 = pkin(1) * t874;
	t813 = t844 * t914;
	t800 = t813 * t982 - 0.2e1 * t844 ^ 2 * t1035 + (-t828 * t842 - t1005) * pkin(5);
	t1014 = t800 * t872;
	t958 = t813 * t1043 + t828;
	t799 = (t842 * t880 + (-t958 - 0.2e1 * t1027) * t844) * pkin(5);
	t1017 = t799 * t871;
	t909 = t1017 / 0.2e1 + t1014 / 0.2e1;
	t973 = t844 * t993;
	t782 = (t909 * t829 + t938 * t973) * t877;
	t1015 = t800 * t871;
	t1016 = t799 * t872;
	t908 = -t1015 / 0.2e1 + t1016 / 0.2e1;
	t783 = (t1062 * t973 - t908 * t829) * t877;
	t775 = -t782 * t866 - t783 * t867;
	t765 = t775 * t913;
	t774 = -t782 * t867 + t783 * t866;
	t739 = (t765 * t984 - t774 * t879 + t975 * t775) * pkin(3);
	t1054 = -t1062 * t867 - t866 * t938;
	t1055 = t1062 * t866 - t867 * t938;
	t901 = 0.4e1 * t938;
	t902 = -0.4e1 * t1062;
	t1042 = t871 / 0.2e1;
	t967 = t878 * t988;
	t809 = -t840 * t914 - 0.8e1 * t967;
	t989 = 0.1e1 / t1009 * t813 * t1068;
	t780 = t803 + (t989 / 0.4e1 + t809 * t1043) * t837 + (0.2e1 * t839 * t842 + 0.4e1 * t840 * t844) * t1035 + (-t958 * t839 + t1006) * pkin(5);
	t781 = 0.4e1 * t970 + (t1007 - t844 * t989 / 0.4e1 + t976 * t840 + (t842 * t812 / 0.2e1 + t840 * t813 / 0.2e1 - t844 * t809 / 0.2e1) * t821) * pkin(5);
	t910 = -t781 * t872 / 0.2e1 + t780 * t1042;
	t911 = t780 * t872 / 0.2e1 + t781 * t1042;
	t941 = t1014 + t1017;
	t942 = -t1015 + t1016;
	t943 = t1018 + t1021;
	t944 = t1019 - t1020;
	t947 = t829 * t830 * t967;
	t741 = (-(t866 * t901 - t867 * t902) * t947 + (-t867 * t910 - t866 * t911 + (-t866 * t908 - t867 * t909) * qJD(3)) * t829 + (-t1054 * t840 - (t866 * t941 - t867 * t942) * t839 + (t1055 * qJD(3) - t866 * t943 - t867 * t944) * t844) * t993) * t877;
	t889 = pkin(3) * t877 * (-(t866 * t902 + t867 * t901) * t947 + (t866 * t910 - t867 * t911 + (t866 * t909 - t867 * t908) * qJD(3)) * t829 + (-t1055 * t840 - (t866 * t942 + t867 * t941) * t839 + (-t1054 * qJD(3) + t866 * t944 - t867 * t943) * t844) * t993);
	t987 = t775 * t1025;
	t892 = t779 * (t741 * t913 - 0.8e1 * t875 * t987);
	t991 = pkin(3) * t1044;
	t968 = t764 * t991;
	t969 = t765 * t991;
	t1056 = (0.4e1 * pkin(4) * t987 + t892 * t1069 + t774 * t968 - t879 * t889 + t945 * t969 + (t741 * t975 + t765 * t959) * pkin(3)) * t1072 + t739 * t951 + t768 * t741 * t972;
	t966 = t833 * t726 + t834 * t727 + t818 * t760 + t819 * t761;
	t964 = t835 * t726 - t836 * t727 + t816 * t760 - t817 * t761;
	t986 = t1036 * t871;
	t979 = t873 * t997;
	t978 = qJD(2) * t1036;
	t824 = -qJD(3) * t986 + t1063 * t1064 - t871 * t978;
	t843 = -t1036 * t872 - t1039 * t871;
	t825 = t1063 * t843;
	t841 = t986 - t1064;
	t962 = t841 * t726 - t843 * t727 - t825 * t760 + t824 * t761;
	t961 = -t843 * t726 - t841 * t727 + t824 * t760 + t825 * t761;
	t960 = t789 * t1026 / 0.4e1;
	t923 = t772 * t950;
	t922 = t772 * t949;
	t916 = t769 * t949;
	t898 = t775 * t905;
	t890 = (t773 * t960 + (-0.4e1 * t772 * t1023 * t1067 + (-t772 * t792 - 0.2e1 * t940 * t945) * t996) * t876 + (-t772 * t786 + (t772 * t1045 + t1046 * t940) * t779 + (-t879 + t946 * t1028 / 0.2e1) * t945) * pkin(3)) * t979;
	t887 = (t765 * t960 + t789 * t892 / 0.2e1 + t786 * t889 + (t945 * t995 + t968) * t775 + (t774 * t995 + t969) * t772 + (-t1031 + t977) * t741) * t979;
	t823 = t825 * pkin(4);
	t815 = t818 * pkin(4);
	t814 = t817 * pkin(4);
	t745 = t773 * t985 + t940 * t977 + (t786 * t792 - t879 * t940) * pkin(3);
	t740 = t765 * t985 + t775 * t977 + (t774 * t786 - t775 * t879) * pkin(3);
	t732 = (t744 * t983 + t745 * t980 + t895 * t940) * t873;
	t731 = (t744 * t981 + t745 * t983 + t896 * t940) * t873;
	t730 = (t739 * t983 + t740 * t980 + t775 * t895) * t873;
	t729 = (t739 * t981 + t740 * t983 + t775 * t896) * t873;
	t710 = -t768 * t945 * t949 + t1059 * t940 - t1061 * t870 + t1066 * t769 + t745 * t923 + t869 * t890;
	t709 = t1060 * t940 + t1061 * t869 + t1066 * t768 + t745 * t922 + t870 * t890 + t945 * t916;
	t708 = t740 * t923 + t869 * t887 + (t741 * t950 + t898) * t769 - t1056 * t870 + t1059 * t775;
	t707 = t1056 * t869 + t1060 * t775 + t740 * t922 + t741 * t916 + t768 * t898 + t870 * t887;
	t1 = [t965 * r_i_i_C(1) - t966 * r_i_i_C(2) + t819 * pkin(4) + pkin(1) * t934 + (-pkin(1) * t957 - t1040 * pkin(13) - t1037 * r_i_i_C(3)) * qJD(1), (t707 * t836 - t708 * t835 - t729 * t816 + t730 * t817 + t963) * r_i_i_C(1) + (t707 * t835 + t708 * t836 + t729 * t817 + t730 * t816 + t964) * r_i_i_C(2) + t814 + t894 * pkin(1), (t709 * t836 - t710 * t835 - t731 * t816 + t732 * t817 + t963) * r_i_i_C(1) + (t709 * t835 + t710 * t836 + t731 * t817 + t732 * t816 + t964) * r_i_i_C(2) + t814, 0; -t964 * r_i_i_C(1) + t963 * r_i_i_C(2) - t816 * pkin(4) - pkin(1) * t927 + (-pkin(1) * t954 - t1037 * pkin(13) + t1040 * r_i_i_C(3)) * qJD(1), (t707 * t833 - t708 * t834 - t729 * t819 + t730 * t818 + t966) * r_i_i_C(1) + (t707 * t834 + t708 * t833 + t729 * t818 + t730 * t819 + t965) * r_i_i_C(2) + t815 + t893 * pkin(1), (t709 * t833 - t710 * t834 - t731 * t819 + t732 * t818 + t966) * r_i_i_C(1) + (t709 * t834 + t710 * t833 + t731 * t818 + t732 * t819 + t965) * r_i_i_C(2) + t815, 0; 0, (t707 * t841 + t708 * t843 - t824 * t729 - t825 * t730 + t962) * r_i_i_C(1) + (-t707 * t843 + t708 * t841 - t825 * t729 + t824 * t730 + t961) * r_i_i_C(2) - t823 - pkin(1) * t978, (t709 * t841 + t710 * t843 - t824 * t731 - t825 * t732 + t962) * r_i_i_C(1) + (-t709 * t843 + t710 * t841 - t825 * t731 + t824 * t732 + t961) * r_i_i_C(2) - t823, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 10:06:46
	% EndTime: 2020-04-18 10:09:47
	% DurationCPUTime: 184.51s
	% Computational Cost: add. (4581860->363), mult. (7241056->624), div. (246016->10), fcn. (4511547->18), ass. (0->282)
	t1634 = pkin(4) ^ 2;
	t1633 = pkin(5) ^ 2;
	t1637 = pkin(1) ^ 2;
	t1838 = sin(qJ(2));
	t1840 = sin(pkin(16));
	t1841 = cos(qJ(2));
	t1843 = cos(pkin(16));
	t1599 = t1838 * t1840 - t1841 * t1843;
	t1828 = pkin(5) * t1599;
	t1795 = -0.2e1 * pkin(1) * t1828 + t1637;
	t1589 = t1633 + t1795;
	t1585 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1589;
	t1594 = pkin(1) - t1828;
	t1848 = -pkin(6) - pkin(2);
	t1583 = (pkin(5) - t1848) * (pkin(5) + t1848) + t1795;
	t1847 = -pkin(6) + pkin(2);
	t1584 = (pkin(5) - t1847) * (pkin(5) + t1847) + t1795;
	t1816 = t1584 * t1583;
	t1639 = sqrt(-t1816);
	t1601 = t1838 * t1843 + t1841 * t1840;
	t1827 = pkin(5) * t1601;
	t1568 = t1585 * t1827 + t1594 * t1639;
	t1837 = sin(qJ(3));
	t1776 = t1837 * t1568;
	t1812 = t1601 * t1639;
	t1567 = -pkin(5) * t1812 + t1585 * t1594;
	t1631 = cos(qJ(3));
	t1818 = t1567 * t1631;
	t1695 = -t1776 / 0.2e1 + t1818 / 0.2e1;
	t1586 = 0.1e1 / t1589;
	t1636 = 0.1e1 / pkin(2);
	t1815 = t1586 * t1636;
	t1561 = t1695 * t1815;
	t1777 = t1837 * t1567;
	t1817 = t1568 * t1631;
	t1696 = t1777 / 0.2e1 + t1817 / 0.2e1;
	t1562 = t1696 * t1815;
	t1626 = pkin(18) + pkin(19);
	t1624 = sin(t1626);
	t1625 = cos(t1626);
	t1554 = -t1561 * t1625 + t1562 * t1624;
	t1831 = pkin(3) * t1554;
	t1852 = -2 * pkin(4);
	t1797 = -t1831 * t1852 + t1634;
	t1846 = -pkin(8) - pkin(10);
	t1546 = (pkin(3) - t1846) * (pkin(3) + t1846) + t1797;
	t1845 = -pkin(8) + pkin(10);
	t1547 = (pkin(3) - t1845) * (pkin(3) + t1845) + t1797;
	t1823 = t1547 * t1546;
	t1638 = sqrt(-t1823);
	t1541 = 0.1e1 / t1638;
	t1836 = -t1541 / 0.2e1;
	t1635 = pkin(3) ^ 2;
	t1550 = t1635 + t1797;
	t1548 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1550;
	t1551 = pkin(4) + t1831;
	t1761 = t1551 * t1852 - t1548;
	t1596 = t1601 * qJD(2);
	t1849 = pkin(1) * pkin(5);
	t1729 = 0.2e1 * (t1583 + t1584) * t1849;
	t1569 = t1596 * t1729;
	t1597 = t1599 * qJD(2);
	t1773 = t1596 * t1601 * t1633;
	t1756 = pkin(1) * t1773;
	t1578 = 0.1e1 / t1639;
	t1835 = t1578 / 0.2e1;
	t1770 = t1594 * t1835;
	t1814 = t1596 * t1639;
	t1558 = t1569 * t1770 - 0.2e1 * t1756 + (-t1597 * t1585 - t1814) * pkin(5);
	t1783 = t1558 * t1837;
	t1874 = t1569 * t1578;
	t1563 = -t1827 * t1874 / 0.2e1;
	t1826 = t1594 * pkin(1);
	t1762 = t1585 + 0.2e1 * t1826;
	t1813 = t1597 * t1639;
	t1557 = t1563 + (-t1762 * t1596 + t1813) * pkin(5);
	t1822 = t1557 * t1631;
	t1699 = -t1783 / 0.2e1 + t1822 / 0.2e1;
	t1784 = t1557 * t1837;
	t1821 = t1558 * t1631;
	t1700 = t1821 / 0.2e1 + t1784 / 0.2e1;
	t1587 = 0.1e1 / t1589 ^ 2;
	t1792 = t1587 * t1849;
	t1760 = t1596 * t1792;
	t1706 = t1776 - t1818;
	t1707 = t1777 + t1817;
	t1882 = t1624 * t1707 + t1625 * t1706;
	t1884 = ((t1624 * t1695 + t1625 * t1696) * qJD(3) + t1624 * t1700 - t1625 * t1699) * t1586 + t1882 * t1760;
	t1632 = 0.1e1 / pkin(10);
	t1851 = 0.1e1 / t1550;
	t1811 = t1632 * t1851;
	t1883 = t1811 / 0.2e1;
	t1868 = -qJD(3) - qJD(2);
	t1747 = t1838 * t1837;
	t1598 = -t1841 * t1631 + t1747;
	t1881 = t1624 * t1706 - t1625 * t1707;
	t1879 = (t1881 * t1760 + (-t1625 * t1700 - t1624 * t1699 + (t1624 * t1696 - t1625 * t1695) * qJD(3)) * t1586) * t1636;
	t1878 = 0.1e1 / t1550 ^ 2;
	t1844 = -pkin(11) - r_i_i_C(3);
	t1877 = t1551 / 0.2e1;
	t1628 = cos(pkin(17));
	t1876 = -t1628 / 0.2e1;
	t1730 = -t1561 * t1624 - t1562 * t1625;
	t1832 = pkin(3) * t1730;
	t1875 = -t1832 / 0.2e1;
	t1738 = 0.2e1 * pkin(4) * (t1546 + t1547);
	t1728 = pkin(3) * t1738;
	t1537 = t1730 * t1728;
	t1793 = t1635 * t1852;
	t1763 = t1730 * t1793;
	t1772 = t1541 * t1877;
	t1511 = t1537 * t1772 + t1730 * t1763 + (t1548 * t1554 - t1638 * t1730) * pkin(3);
	t1830 = pkin(3) * t1636;
	t1664 = t1884 * t1830;
	t1536 = t1884 * t1636;
	t1824 = t1536 * t1635;
	t1775 = t1634 * t1824;
	t1757 = 0.8e1 * t1775;
	t1666 = t1541 * (t1728 * t1879 + t1730 * t1757);
	t1791 = pkin(3) * pkin(4) * t1878;
	t1758 = t1632 * t1791;
	t1741 = t1536 * t1758;
	t1788 = pkin(4) * t1824;
	t1765 = 0.2e1 * t1788;
	t1810 = t1851 / 0.2e1;
	t1766 = t1632 * t1810;
	t1829 = pkin(3) * t1638;
	t1861 = -t1829 + t1763;
	t1718 = t1536 * t1738;
	t1694 = pkin(3) * t1551 * t1718;
	t1850 = t1541 / t1823;
	t1862 = -pkin(3) * t1536 * t1836 - t1850 * t1694 / 0.4e1;
	t1704 = t1635 * t1718;
	t1676 = t1704 * t1836;
	t1865 = t1793 * t1879 - t1676;
	t1867 = (t1862 * t1537 + t1548 * t1664 + t1554 * t1765 + t1666 * t1877 + t1865 * t1730 + t1861 * t1879) * t1766 - t1511 * t1741;
	t1663 = pkin(3) * t1879;
	t1866 = t1730 * t1850 * t1704 / 0.4e1 + t1663 * t1836;
	t1627 = sin(pkin(17));
	t1732 = t1878 * t1775 * t1811;
	t1703 = -0.4e1 * t1627 * t1732;
	t1740 = t1627 * t1758;
	t1864 = t1730 * t1703 + t1740 * t1879;
	t1679 = 0.4e1 * t1706;
	t1680 = 0.4e1 * t1707;
	t1570 = t1601 * t1729;
	t1834 = pkin(1) * t1633;
	t1560 = t1570 * t1770 - 0.2e1 * t1601 ^ 2 * t1834 + (-t1585 * t1599 - t1812) * pkin(5);
	t1781 = t1560 * t1837;
	t1745 = t1570 * t1835 + t1585;
	t1559 = (t1599 * t1639 + (-t1745 - 0.2e1 * t1826) * t1601) * pkin(5);
	t1820 = t1559 * t1631;
	t1697 = -t1781 / 0.2e1 + t1820 / 0.2e1;
	t1782 = t1559 * t1837;
	t1819 = t1560 * t1631;
	t1698 = t1782 / 0.2e1 + t1819 / 0.2e1;
	t1746 = t1637 * t1773;
	t1566 = -t1597 * t1729 - 0.8e1 * t1746;
	t1774 = 0.1e1 / t1816 * t1570 * t1874;
	t1542 = t1563 + (t1774 / 0.4e1 + t1566 * t1835) * t1594 + (0.2e1 * t1596 * t1599 + 0.4e1 * t1597 * t1601) * t1834 + (-t1745 * t1596 + t1813) * pkin(5);
	t1543 = 0.4e1 * t1756 + (t1814 - t1601 * t1774 / 0.4e1 + t1762 * t1597 + (t1599 * t1569 / 0.2e1 + t1597 * t1570 / 0.2e1 - t1601 * t1566 / 0.2e1) * t1578) * pkin(5);
	t1790 = t1837 / 0.2e1;
	t1701 = -t1543 * t1631 / 0.2e1 + t1542 * t1790;
	t1702 = t1542 * t1631 / 0.2e1 + t1543 * t1790;
	t1708 = -t1781 + t1820;
	t1709 = t1782 + t1819;
	t1710 = t1783 - t1822;
	t1711 = t1784 + t1821;
	t1731 = t1586 * t1587 * t1746;
	t1507 = (-(t1624 * t1680 + t1625 * t1679) * t1731 + (-t1625 * t1701 - t1624 * t1702 + (-t1624 * t1697 - t1625 * t1698) * qJD(3)) * t1586 + (t1882 * t1597 - (t1624 * t1709 - t1625 * t1708) * t1596 + (t1881 * qJD(3) - t1624 * t1711 - t1625 * t1710) * t1601) * t1792) * t1636;
	t1759 = t1601 * t1792;
	t1544 = (t1586 * t1698 + t1707 * t1759) * t1636;
	t1545 = (-t1586 * t1697 + t1706 * t1759) * t1636;
	t1539 = -t1544 * t1624 - t1545 * t1625;
	t1863 = t1507 * t1740 + t1539 * t1703;
	t1750 = t1841 * t1837;
	t1839 = sin(qJ(1));
	t1715 = t1839 * t1750;
	t1749 = t1839 * t1838;
	t1590 = t1631 * t1749 + t1715;
	t1842 = cos(qJ(1));
	t1716 = t1842 * t1747;
	t1754 = t1842 * t1841;
	t1592 = t1631 * t1754 - t1716;
	t1717 = t1842 * t1750;
	t1753 = t1842 * t1838;
	t1593 = t1631 * t1753 + t1717;
	t1714 = t1839 * t1747;
	t1751 = t1841 * t1839;
	t1591 = t1631 * t1751 - t1714;
	t1860 = t1761 * pkin(3);
	t1530 = t1539 * t1728;
	t1538 = -t1544 * t1625 + t1545 * t1624;
	t1771 = t1730 * t1836;
	t1501 = (t1530 * t1771 - t1538 * t1638 + t1761 * t1539) * pkin(3);
	t1650 = (-(-t1624 * t1679 + t1625 * t1680) * t1731 + (t1624 * t1701 - t1625 * t1702 + (t1624 * t1698 - t1625 * t1697) * qJD(3)) * t1586 + (-t1881 * t1597 - (t1624 * t1708 + t1625 * t1709) * t1596 + (t1882 * qJD(3) + t1624 * t1710 - t1625 * t1711) * t1601) * t1792) * t1830;
	t1667 = t1541 * (t1507 * t1728 + t1539 * t1757);
	t1764 = -0.4e1 * t1788;
	t1859 = (t1860 * t1507 + t1866 * t1530 - t1538 * t1676 + t1539 * t1764 - t1638 * t1650 + t1667 * t1875) * t1883 - t1501 * t1741;
	t1510 = (t1537 * t1771 - t1554 * t1638 + t1730 * t1761) * pkin(3);
	t1858 = (t1866 * t1537 - t1554 * t1676 - t1638 * t1664 + t1666 * t1875 + t1730 * t1764 + t1860 * t1879) * t1883 - t1510 * t1741;
	t1534 = t1548 * t1832 + t1551 * t1638;
	t1659 = t1632 * (-t1861 * t1536 + t1548 * t1663 + t1694 * t1836);
	t1656 = t1659 * t1810;
	t1660 = t1632 * (-t1860 * t1536 - t1638 * t1663 - t1730 * t1676);
	t1658 = t1851 * t1660;
	t1533 = t1548 * t1551 - t1730 * t1829;
	t1739 = t1628 * t1758;
	t1723 = t1533 * t1739;
	t1727 = t1536 * t1740;
	t1490 = -t1534 * t1727 + t1536 * t1723 + t1627 * t1656 + t1658 * t1876;
	t1722 = t1534 * t1739;
	t1491 = t1628 * t1656 - t1536 * t1722 + t1627 * t1658 / 0.2e1 - t1533 * t1727;
	t1768 = t1851 * t1876;
	t1769 = t1627 * t1810;
	t1526 = (t1533 * t1768 + t1534 * t1769) * t1632;
	t1767 = t1628 * t1810;
	t1527 = (t1533 * t1769 + t1534 * t1767) * t1632;
	t1573 = -t1591 * qJD(1) + t1868 * t1593;
	t1669 = qJD(1) * t1749 - qJD(2) * t1754;
	t1574 = -qJD(1) * t1715 + (qJD(3) * t1754 - t1669) * t1631 + t1868 * t1716;
	t1743 = t1593 * t1490 + t1592 * t1491 + t1574 * t1526 + t1573 * t1527;
	t1655 = t1659 * t1791;
	t1657 = t1660 * t1791;
	t1705 = t1628 * t1732;
	t1857 = -0.4e1 * t1534 * t1705 + t1627 * t1657 + t1628 * t1655;
	t1856 = 0.4e1 * t1533 * t1705 + t1627 * t1655 - t1628 * t1657;
	t1503 = t1526 * t1591 - t1527 * t1590;
	t1785 = qJD(1) * t1839;
	t1712 = qJD(4) * t1503 + t1785;
	t1668 = -qJD(1) * t1753 - qJD(2) * t1751;
	t1575 = qJD(1) * t1717 + (qJD(3) * t1751 - t1668) * t1631 + t1868 * t1714;
	t1576 = t1592 * qJD(1) + t1868 * t1590;
	t1744 = t1590 * t1490 + t1591 * t1491 + t1575 * t1526 + t1576 * t1527;
	t1681 = t1838 * t1631 + t1750;
	t1825 = qJD(4) * (-t1526 * t1681 + t1527 * t1598);
	t1502 = t1530 * t1772 + t1539 * t1763 + (t1538 * t1548 - t1539 * t1638) * pkin(3);
	t1646 = (t1861 * t1507 + t1862 * t1530 + t1538 * t1765 + t1865 * t1539 + t1548 * t1650 + t1667 * t1877) * t1766;
	t1463 = -t1502 * t1536 * t1739 + t1507 * t1722 + t1863 * t1533 + t1857 * t1539 + t1859 * t1627 + t1628 * t1646;
	t1809 = t1463 + t1490;
	t1464 = -t1502 * t1727 - t1507 * t1723 + t1863 * t1534 + t1856 * t1539 + t1627 * t1646 - t1859 * t1628;
	t1808 = t1464 - t1491;
	t1719 = t1879 * t1739;
	t1465 = t1864 * t1533 + t1534 * t1719 + t1858 * t1627 + t1867 * t1628 + t1857 * t1730;
	t1807 = t1465 + t1490;
	t1466 = -t1533 * t1719 + t1864 * t1534 + t1867 * t1627 - t1858 * t1628 + t1856 * t1730;
	t1806 = t1466 - t1491;
	t1678 = (-t1533 * t1628 + t1534 * t1627) * t1791;
	t1493 = (t1501 * t1768 + t1502 * t1769 + t1539 * t1678) * t1632;
	t1804 = t1493 - t1527;
	t1677 = (t1533 * t1627 + t1534 * t1628) * t1791;
	t1494 = (t1501 * t1769 + t1502 * t1767 + t1539 * t1677) * t1632;
	t1803 = t1494 + t1526;
	t1495 = (t1510 * t1768 + t1511 * t1769 + t1678 * t1730) * t1632;
	t1802 = t1495 - t1527;
	t1496 = (t1510 * t1769 + t1511 * t1767 + t1677 * t1730) * t1632;
	t1801 = t1496 + t1526;
	t1800 = t1590 * t1526 + t1591 * t1527;
	t1799 = t1593 * t1526 + t1592 * t1527;
	t1798 = t1598 * t1526 + t1527 * t1681;
	t1786 = qJD(1) * t1842;
	t1780 = t1842 * qJD(4);
	t1629 = sin(qJ(4));
	t1779 = t1842 * t1629;
	t1630 = cos(qJ(4));
	t1778 = t1839 * t1630;
	t1581 = t1598 * t1868;
	t1582 = t1868 * t1681;
	t1742 = t1598 * t1490 + t1491 * t1681 - t1582 * t1526 + t1581 * t1527;
	t1733 = r_i_i_C(1) * t1630 - r_i_i_C(2) * t1629 + pkin(9);
	t1713 = qJD(4) * (-r_i_i_C(1) * t1629 - r_i_i_C(2) * t1630);
	t1471 = t1490 * t1591 - t1491 * t1590 + t1576 * t1526 - t1575 * t1527;
	t1617 = t1630 * t1780;
	t1580 = t1582 * pkin(4);
	t1572 = t1575 * pkin(4);
	t1571 = t1574 * pkin(4);
	t1505 = -t1526 * t1592 + t1527 * t1593;
	t1474 = -t1490 * t1681 + t1491 * t1598 - t1581 * t1526 - t1527 * t1582;
	t1469 = -t1490 * t1592 + t1491 * t1593 - t1573 * t1526 + t1574 * t1527;
	t1468 = qJD(1) * t1779 + t1469 * t1630 + (-t1505 * t1629 + t1778) * qJD(4);
	t1467 = t1630 * t1786 - t1469 * t1629 + (-t1505 * t1630 - t1839 * t1629) * qJD(4);
	t1 = [(t1471 * t1630 - t1712 * t1629 + t1617) * r_i_i_C(1) + (-qJD(1) * t1778 - t1471 * t1629 + (-t1503 * t1630 - t1779) * qJD(4)) * r_i_i_C(2) + t1471 * pkin(9) + t1576 * pkin(4) - pkin(13) * t1786 - t1844 * t1744 + (-qJD(1) * t1754 + qJD(2) * t1749) * pkin(1), t1571 + t1844 * (t1803 * t1573 + t1804 * t1574 + t1809 * t1592 + t1808 * t1593) + (-t1493 * t1592 + t1494 * t1593 + t1799) * t1713 + t1669 * pkin(1) + t1733 * (t1463 * t1593 - t1464 * t1592 - t1573 * t1493 + t1574 * t1494 + t1743), t1571 + t1844 * (t1573 * t1801 + t1574 * t1802 + t1592 * t1807 + t1593 * t1806) + (-t1495 * t1592 + t1496 * t1593 + t1799) * t1713 + t1733 * (t1465 * t1593 - t1466 * t1592 - t1573 * t1495 + t1574 * t1496 + t1743), r_i_i_C(1) * t1467 - r_i_i_C(2) * t1468; -pkin(13) * t1785 - t1573 * pkin(4) + t1469 * pkin(9) + t1468 * r_i_i_C(1) + t1467 * r_i_i_C(2) + t1844 * t1743 + (-qJD(1) * t1751 - qJD(2) * t1753) * pkin(1), t1572 + t1844 * (t1575 * t1804 + t1576 * t1803 + t1590 * t1808 + t1591 * t1809) + (-t1493 * t1591 + t1494 * t1590 + t1800) * t1713 + t1668 * pkin(1) + t1733 * (t1463 * t1590 - t1464 * t1591 - t1576 * t1493 + t1575 * t1494 + t1744), t1572 + t1844 * (t1575 * t1802 + t1576 * t1801 + t1590 * t1806 + t1591 * t1807) + (-t1495 * t1591 + t1496 * t1590 + t1800) * t1713 + t1733 * (t1465 * t1590 - t1466 * t1591 - t1576 * t1495 + t1575 * t1496 + t1744), t1617 * r_i_i_C(2) + (r_i_i_C(1) * t1712 + t1471 * r_i_i_C(2)) * t1630 + ((t1780 + t1471) * r_i_i_C(1) - t1712 * r_i_i_C(2)) * t1629; 0, -qJD(2) * t1838 * pkin(1) - t1580 + t1844 * (t1581 * t1803 - t1582 * t1804 + t1598 * t1808 + t1681 * t1809) + (-t1493 * t1681 + t1494 * t1598 + t1798) * t1713 + t1733 * (t1463 * t1598 - t1464 * t1681 - t1581 * t1493 - t1494 * t1582 + t1742), -t1580 + t1844 * (t1581 * t1801 - t1582 * t1802 + t1598 * t1806 + t1681 * t1807) + (-t1495 * t1681 + t1496 * t1598 + t1798) * t1713 + t1733 * (t1465 * t1598 - t1466 * t1681 - t1581 * t1495 - t1496 * t1582 + t1742), (-t1474 * t1630 + t1629 * t1825) * r_i_i_C(2) + (-t1474 * t1629 - t1630 * t1825) * r_i_i_C(1);];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:07
	% EndTime: 2020-04-18 09:52:09
	% DurationCPUTime: 0.90s
	% Computational Cost: add. (6295->81), mult. (10454->159), div. (200->5), fcn. (6424->10), ass. (0->88)
	t324 = pkin(5) ^ 2;
	t380 = sin(qJ(2));
	t381 = sin(pkin(16));
	t382 = cos(qJ(2));
	t383 = cos(pkin(16));
	t314 = t380 * t383 + t382 * t381;
	t311 = t314 * qJD(2);
	t325 = pkin(1) ^ 2;
	t359 = t325 * t314 * t311;
	t398 = -0.4e1 * t324 * t359;
	t313 = t380 * t381 - t382 * t383;
	t379 = pkin(1) * t313;
	t365 = -0.2e1 * pkin(5) * t379 + t325;
	t308 = t324 + t365;
	t306 = 0.1e1 / t308 ^ 2;
	t312 = t313 * qJD(2);
	t323 = 0.1e1 / pkin(6);
	t389 = pkin(1) * pkin(5);
	t361 = t306 * t389;
	t355 = t323 * t361;
	t305 = 0.1e1 / t308;
	t370 = t305 * t323;
	t397 = t306 * t370 * t398 + t312 * t355;
	t360 = t311 * t389;
	t388 = -pkin(6) - pkin(2);
	t302 = (pkin(5) - t388) * (pkin(5) + t388) + t365;
	t387 = -pkin(6) + pkin(2);
	t303 = (pkin(5) - t387) * (pkin(5) + t387) + t365;
	t366 = t302 + t303;
	t297 = t366 * t360;
	t371 = t303 * t302;
	t326 = sqrt(-t371);
	t300 = 0.1e1 / t326;
	t396 = t297 * t300;
	t352 = t366 * t389;
	t298 = t314 * t352;
	t395 = t300 * t298;
	t321 = cos(pkin(15));
	t394 = t397 * t321;
	t319 = sin(pkin(15));
	t393 = t397 * t319;
	t378 = pkin(1) * t314;
	t292 = t378 * t396;
	t304 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t308;
	t309 = -pkin(5) + t379;
	t362 = 0.2e1 * t309 * pkin(5);
	t358 = -t304 + t362;
	t368 = t312 * t326;
	t284 = -t292 + (t311 * t358 + t368) * pkin(1);
	t354 = t304 + t395;
	t286 = (t313 * t326 + (-t354 + t362) * t314) * pkin(1);
	t346 = t314 * t355;
	t348 = t311 * t355;
	t392 = t284 * t346 + t286 * t348;
	t353 = pkin(5) * t359;
	t369 = t311 * t326;
	t372 = t300 * t309;
	t285 = -t297 * t372 - 0.2e1 * t353 + (-t312 * t304 - t369) * pkin(1);
	t367 = t314 * t326;
	t377 = t325 * pkin(5);
	t287 = -t298 * t372 - 0.2e1 * t314 ^ 2 * t377 + (-t313 * t304 - t367) * pkin(1);
	t390 = -t300 * (-t312 * t352 + t398) - 0.1e1 / t371 * t297 * t395;
	t391 = (-t292 + t390 * t309 + (0.2e1 * t311 * t313 + 0.4e1 * t312 * t314) * t377 + (-t354 * t311 + t368) * pkin(1)) * t370 / 0.2e1 + t287 * t348 + t285 * t346;
	t386 = t319 / 0.2e1;
	t385 = -t321 / 0.2e1;
	t384 = t321 / 0.2e1;
	t295 = -pkin(1) * t367 - t309 * t304;
	t376 = t295 * t319;
	t375 = t295 * t321;
	t296 = t304 * t378 - t309 * t326;
	t374 = t296 * t319;
	t373 = t296 * t321;
	t318 = sin(qJ(1));
	t364 = qJD(1) * t318;
	t320 = cos(qJ(1));
	t363 = qJD(1) * t320;
	t357 = t306 * t360;
	t356 = t314 * t361;
	t342 = -t373 + t376;
	t343 = t374 + t375;
	t345 = (r_i_i_C(1) * ((t284 * t384 + t285 * t386) * t305 + t343 * t357) + r_i_i_C(2) * ((t284 * t386 + t285 * t385) * t305 + t342 * t357)) * t323;
	t335 = pkin(7) + (-r_i_i_C(1) * (t375 / 0.2e1 + t374 / 0.2e1) - r_i_i_C(2) * (-t373 / 0.2e1 + t376 / 0.2e1)) * t370;
	t330 = (0.4e1 * t353 + (t313 * t396 + t369 + t390 * t314 - (t358 - t395) * t312) * pkin(1)) * t370;
	t281 = ((t286 * t384 + t287 * t386) * t305 + t343 * t356) * t323;
	t280 = ((t286 * t386 + t287 * t385) * t305 + t342 * t356) * t323;
	t275 = -t394 * t296 + t393 * t295 + t391 * t321 + (-t330 / 0.2e1 - t392) * t319;
	t274 = -t394 * t295 - t393 * t296 + t391 * t319 + t392 * t321 + t330 * t384;
	t1 = [-t345 * t318 + (-r_i_i_C(3) * t318 + t320 * t335) * qJD(1), (-t275 * t320 - t280 * t364) * r_i_i_C(2) + (t274 * t320 - t281 * t364) * r_i_i_C(1), 0, 0; t345 * t320 + (r_i_i_C(3) * t320 + t318 * t335) * qJD(1), (-t275 * t318 + t280 * t363) * r_i_i_C(2) + (t274 * t318 + t281 * t363) * r_i_i_C(1), 0, 0; 0, t275 * r_i_i_C(1) + t274 * r_i_i_C(2), 0, 0;];
	JaD_transl = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_transl_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:09
	% EndTime: 2020-04-18 09:52:15
	% DurationCPUTime: 2.79s
	% Computational Cost: add. (18668->116), mult. (30692->203), div. (704->5), fcn. (19061->10), ass. (0->112)
	t317 = sin(qJ(2));
	t319 = cos(qJ(2));
	t414 = sin(pkin(16));
	t415 = cos(pkin(16));
	t378 = -t317 * t414 + t319 * t415;
	t374 = pkin(5) * t378;
	t372 = (0.2e1 * t374 + pkin(1)) * pkin(1);
	t422 = pkin(5) ^ 2;
	t311 = t372 + t422;
	t421 = 0.1e1 / t311;
	t439 = t421 / 0.2e1;
	t417 = -pkin(6) - pkin(2);
	t365 = (pkin(5) - t417) * (pkin(5) + t417) + t372;
	t416 = -pkin(6) + pkin(2);
	t366 = (pkin(5) - t416) * (pkin(5) + t416) + t372;
	t343 = t366 * t365;
	t321 = sqrt(-t343);
	t314 = t317 * t415 + t319 * t414;
	t322 = pkin(2) ^ 2;
	t369 = -pkin(6) ^ 2 + t311 + t322;
	t368 = pkin(5) * t369;
	t367 = t314 * t368;
	t373 = t374 + pkin(1);
	t423 = 0.1e1 / pkin(2);
	t355 = t423 * (t373 * t321 + t367);
	t352 = t355 * t439;
	t411 = pkin(5) * t321;
	t389 = t314 * t411;
	t354 = t423 * (t373 * t369 - t389);
	t353 = t421 * t354;
	t405 = cos(pkin(19));
	t404 = sin(pkin(19));
	t441 = t404 / 0.2e1;
	t305 = t405 * t352 + t353 * t441;
	t418 = pkin(1) * pkin(5);
	t364 = ((pkin(5) + pkin(6)) * (pkin(5) - pkin(6)) + t372) * t418;
	t407 = t314 * pkin(1);
	t393 = pkin(5) * t407;
	t361 = t314 * t364 - t322 * t393;
	t420 = 0.1e1 / t321;
	t390 = 0.2e1 * t420;
	t359 = t361 * t390;
	t357 = pkin(5) * t359;
	t444 = -0.2e1 * t373 * t418;
	t431 = -t357 + t444;
	t332 = t423 * (t431 * t314 - t378 * t411 - t367);
	t330 = t421 * t332;
	t445 = -0.2e1 * pkin(1);
	t333 = t423 * (t422 * t314 ^ 2 * t445 + t373 * t359 + t378 * t368 - t389);
	t331 = t333 * t439;
	t310 = 0.1e1 / t311 ^ 2;
	t436 = t310 * t418;
	t350 = t354 * t436;
	t351 = t355 * t436;
	t433 = t405 * t350 - t404 * t351;
	t440 = -t405 / 0.2e1;
	t396 = -t433 * t314 + t330 * t440 + t404 * t331 - t305;
	t432 = t404 * t350 + t405 * t351;
	t296 = t432 * t314 + t330 * t441 + t405 * t331;
	t304 = t404 * t352 + t353 * t440;
	t397 = t296 + t304;
	t426 = t396 * r_i_i_C(1) - t397 * r_i_i_C(2);
	t446 = t426 * t319;
	t312 = t314 * qJD(2);
	t409 = t312 * t422;
	t388 = t314 * t409;
	t383 = pkin(1) ^ 2 * t388;
	t443 = 0.4e1 * t383 * t421 * t310;
	t442 = t423 * t439;
	t410 = t312 * pkin(5);
	t392 = pkin(1) * t410;
	t438 = t310 * t392;
	t437 = t310 * t393;
	t360 = t312 * t364 - t322 * t392;
	t313 = t378 * qJD(2);
	t408 = t313 * pkin(5);
	t434 = (0.4e1 / t343 * t361 * t360 - 0.4e1 * t383 + (t365 + t366) * pkin(1) * t408) * t420;
	t430 = t396 * r_i_i_C(2) + pkin(1);
	t401 = t305 * t317;
	t380 = t304 * t319 - t401;
	t429 = -t317 * pkin(1) - t380 * r_i_i_C(2);
	t358 = t360 * t390;
	t362 = t313 * t368 - t321 * t410;
	t384 = pkin(1) * t388;
	t339 = t423 * (t373 * t358 + t362 - 0.2e1 * t384);
	t356 = pkin(5) * t358;
	t341 = -t312 * t368 - t314 * t356 - t321 * t408;
	t428 = (-0.4e1 * t422 * t313 * t407 + t378 * t409 * t445 - t312 * t357 + t434 * t373 + t341) * t442 + t333 * t438 + t339 * t437 + t355 * t443;
	t338 = t423 * (t312 * t444 + t341);
	t427 = (-t434 * pkin(5) * t314 + t431 * t313 - t378 * t356 - t362 + 0.4e1 * t384) * t442 + t332 * t438 + t338 * t437 + t354 * t443;
	t336 = t339 * t439;
	t337 = t421 * t338;
	t293 = -t433 * t312 + t404 * t336 + t337 * t440;
	t398 = t432 * t313 + t427 * t404 + t428 * t405 + t293;
	t292 = t432 * t312 + t405 * t336 + t337 * t441;
	t399 = -t433 * t313 + t428 * t404 - t427 * t405 - t292;
	t425 = t398 * r_i_i_C(1) + t399 * r_i_i_C(2);
	t424 = -(t292 * t317 - t293 * t319) * r_i_i_C(1) - (t292 * t319 + t293 * t317) * r_i_i_C(2) + qJD(1) * r_i_i_C(3);
	t402 = t304 * t317;
	t400 = t305 * t319;
	t318 = sin(qJ(1));
	t395 = qJD(1) * t318;
	t320 = cos(qJ(1));
	t394 = qJD(1) * t320;
	t387 = t318 * t402;
	t379 = t400 + t402;
	t377 = t399 * r_i_i_C(1) - t398 * r_i_i_C(2);
	t375 = -t397 * r_i_i_C(1) - t430;
	t363 = t375 * t317 + t446;
	t303 = qJD(1) * t387;
	t302 = qJD(2) * t387;
	t1 = [t302 * r_i_i_C(1) + (-t319 * pkin(1) - t380 * r_i_i_C(1) + t379 * r_i_i_C(2) - pkin(13)) * t394 + ((r_i_i_C(1) * t400 - t429) * qJD(2) - t424) * t318, t303 * r_i_i_C(1) + (-t446 + (t296 * r_i_i_C(1) + t430) * t317) * t395 + (t377 * t319 - t425 * t317 + (-t317 * t426 + t375 * t319) * qJD(2)) * t320, 0, 0; t303 * r_i_i_C(2) + (r_i_i_C(1) * t401 - pkin(13) + (-r_i_i_C(1) * t304 + r_i_i_C(2) * t305 - pkin(1)) * t319) * t395 + ((-t379 * r_i_i_C(1) + t429) * qJD(2) + t424) * t320, t302 * r_i_i_C(2) + t363 * t394 + (((-t396 * qJD(2) - t398) * r_i_i_C(1) + (qJD(2) * t296 - t399) * r_i_i_C(2)) * t317 + (t375 * qJD(2) + t377) * t319) * t318, 0, 0; 0, t363 * qJD(2) + t377 * t317 + t425 * t319, 0, 0;];
	JaD_transl = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_transl_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:53:32
	% EndTime: 2020-04-18 09:58:08
	% DurationCPUTime: 180.54s
	% Computational Cost: add. (1637065->376), mult. (2596718->644), div. (85136->10), fcn. (1616839->18), ass. (0->327)
	t1095 = pkin(18) + pkin(19);
	t1068 = sin(t1095);
	t1069 = cos(t1095);
	t1115 = sin(qJ(2));
	t1116 = sin(pkin(16));
	t1117 = cos(qJ(2));
	t1118 = cos(pkin(16));
	t1147 = -t1115 * t1116 + t1117 * t1118;
	t1025 = pkin(5) * t1147;
	t1022 = (3 * pkin(1)) + 0.4e1 * t1025;
	t854 = t1115 * t1118 + t1117 * t1116;
	t1110 = pkin(5) * t854;
	t1020 = (0.2e1 * t1025 + pkin(1)) * pkin(1);
	t1122 = pkin(5) + pkin(6);
	t1123 = pkin(5) - pkin(6);
	t1006 = (pkin(2) + t1122) * (-pkin(2) + t1123) + t1020;
	t1007 = (-pkin(2) + t1122) * (pkin(2) + t1123) + t1020;
	t964 = t1007 * t1006;
	t865 = sqrt(-t964);
	t847 = 0.1e1 / t865;
	t1066 = -t847 * t1110 / 0.2e1;
	t1109 = pkin(5) * t865;
	t1125 = pkin(1) * pkin(5);
	t1005 = (t1122 * t1123 + t1020) * t1125;
	t852 = t854 * qJD(2);
	t1112 = pkin(5) * t852;
	t1094 = pkin(1) * t1112;
	t866 = pkin(2) ^ 2;
	t845 = 0.4e1 * t852 * t1005 - 0.4e1 * t866 * t1094;
	t853 = t1147 * qJD(2);
	t1044 = t845 * t1066 - t853 * t1109;
	t1132 = pkin(5) ^ 2;
	t1149 = -pkin(6) ^ 2 + t866;
	t1067 = t1132 + t1149;
	t1135 = 0.1e1 / pkin(2);
	t1004 = t1135 * (-t1022 * t1094 - t1067 * t1112 + t1044);
	t851 = t1020 + t1132;
	t1128 = 0.1e1 / t851;
	t1003 = t1128 * t1004;
	t1002 = -t1003 / 0.2e1;
	t849 = 0.1e1 / t851 ^ 2;
	t1171 = t849 * t852;
	t1012 = t851 + t1149;
	t1009 = pkin(5) * t1012;
	t1008 = t853 * t1009;
	t1021 = t1025 + pkin(1);
	t1119 = t847 / 0.2e1;
	t1019 = t1021 * t1119;
	t1092 = pkin(1) * t1110;
	t1060 = t865 + 0.2e1 * t1092;
	t963 = t1135 * (t845 * t1019 - t1060 * t1112 + t1008);
	t962 = t1128 * t963 / 0.2e1;
	t997 = t1135 * (t1021 * t1012 - t854 * t1109);
	t995 = t1128 * t997;
	t991 = t995 / 0.2e1;
	t998 = t1135 * (t854 * t1009 + t1021 * t865);
	t994 = t998 * t1125;
	t1142 = qJD(3) * t991 + t994 * t1171 + t962;
	t859 = sin(qJ(3));
	t861 = cos(qJ(3));
	t993 = t997 * t1125;
	t979 = t993 * t1171;
	t996 = t1128 * t998;
	t992 = t996 / 0.2e1;
	t982 = t861 * t992;
	t935 = qJD(3) * t982 + (t1002 - t979) * t861 + t1142 * t859;
	t1001 = t1003 / 0.2e1;
	t843 = -t859 * t996 / 0.2e1;
	t936 = qJD(3) * t843 + (t1001 + t979) * t859 + t1142 * t861;
	t1136 = t1068 * t936 + t1069 * t935;
	t1187 = pkin(4) * t1136;
	t1121 = (-pkin(8) - pkin(10));
	t1130 = -2 * pkin(3);
	t959 = t859 * t991 + t982;
	t956 = t1068 * t959;
	t958 = -t861 * t995 / 0.2e1 + t859 * t992;
	t952 = -t1069 * t958 - t956;
	t948 = (t952 * t1130 + pkin(4)) * pkin(4);
	t944 = ((pkin(3) - t1121) * (pkin(3) + t1121)) + t948;
	t1120 = (-pkin(8) + pkin(10));
	t945 = ((pkin(3) - t1120) * (pkin(3) + t1120)) + t948;
	t924 = t945 * t944;
	t864 = sqrt(-t924);
	t1189 = t1187 * t864;
	t1133 = pkin(4) ^ 2;
	t811 = pkin(4) * t952;
	t810 = t1133 + (-0.2e1 * t811 + pkin(3)) * pkin(3);
	t867 = pkin(8) ^ 2;
	t947 = -pkin(10) ^ 2 + t810 + t867;
	t1188 = t1187 * t947;
	t1129 = 0.1e1 / t810;
	t809 = 0.1e1 / t810 ^ 2;
	t1126 = t1129 * t809;
	t1134 = pkin(3) ^ 2;
	t1124 = pkin(3) * pkin(4);
	t1157 = t1124 * t809;
	t1107 = t811 - pkin(3);
	t1173 = -t1107 / 0.2e1;
	t863 = 0.1e1 / pkin(8);
	t1127 = 0.1e1 / t864;
	t1185 = t944 + t945;
	t917 = pkin(3) * t1187;
	t887 = -0.2e1 * t1127 * t1185 * t917;
	t918 = t1133 * t1136;
	t916 = pkin(3) * t918;
	t914 = 0.2e1 * t916;
	t1137 = t1068 * t935 - t1069 * t936;
	t919 = pkin(4) * t1137;
	t957 = t1069 * t959;
	t951 = t1068 * t958 - t957;
	t882 = t863 * (t887 * t1173 + t951 * t914 + t947 * t919 + t1189);
	t946 = pkin(4) * t947;
	t930 = -t1107 * t864 + t951 * t946;
	t929 = t863 * t930;
	t897 = t1136 * t929;
	t1186 = 0.4e1 * t1134 * t1133 * t1126 * t897 - t882 * t1157;
	t1104 = sin(pkin(19));
	t987 = t1104 * t997;
	t1105 = cos(pkin(19));
	t990 = t1105 * t998;
	t1184 = (t987 + t990) * t1125;
	t988 = t1105 * t997;
	t989 = t1104 * t998;
	t1183 = (t988 - t989) * t1125;
	t1182 = 0.1e1 / t924 * t887;
	t846 = 0.4e1 * t854 * t1005 - 0.4e1 * t866 * t1092;
	t1103 = t847 * t846;
	t1077 = -t1103 / 0.2e1;
	t1163 = t1184 * t849;
	t799 = t1104 * t1001 + t1105 * t962 + t1163 * t852;
	t1162 = t1183 * t849;
	t800 = t1105 * t1002 + t1104 * t962 - t1162 * t852;
	t1180 = -t1115 * t799 + t1117 * t800;
	t1078 = t1135 * t1094;
	t1058 = t849 * t1078;
	t1029 = t1104 * t1058;
	t1030 = t1105 * t1058;
	t1114 = t1135 * t1128;
	t1088 = t1114 / 0.2e1;
	t1037 = t1104 * t1088;
	t1062 = t1105 * t1114;
	t1039 = -t1062 / 0.2e1;
	t961 = t963 * t1092;
	t1108 = t854 * t1132;
	t1070 = (pkin(1) ^ 2) * t852 * t1108;
	t1158 = t1070 * t1128 * t849;
	t967 = 0.4e1 * t998 * t1158;
	t1164 = t849 * t961 + t967;
	t1086 = -0.4e1 * pkin(1) * t1108;
	t1087 = t845 / t964 * t1103;
	t1111 = pkin(5) * t853;
	t1093 = pkin(1) * t1111;
	t844 = -0.8e1 * t1070 + 0.2e1 * (t1006 + t1007) * t1093;
	t803 = t1112 * t1077 + t1021 * t1087 / 0.4e1 + t844 * t1019 + t853 * t1086 + t1044 - (0.2e1 * pkin(1) * t1132 * t1147 + t1009) * t852;
	t804 = -t845 * t1119 * t1025 + t1077 * t1111 - t1087 * t1110 / 0.4e1 + t844 * t1066 - t1008 - 0.2e1 * t1021 * t1093 - (-t1109 + t1086) * t852;
	t823 = (-t1147 * t865 + (t1077 - t1067) * t854) * pkin(5) - t1022 * t1092;
	t824 = t1009 * t1147 + t846 * t1019 - t1060 * t1110;
	t972 = t997 * t1158;
	t965 = -0.4e1 * t972;
	t1000 = t1004 * t1092;
	t999 = t849 * t1000;
	t777 = t824 * t1029 - t823 * t1030 + t803 * t1037 + t804 * t1039 - t1162 * t853 + (t965 - t999) * t1105 + t1164 * t1104;
	t1038 = t1062 / 0.2e1;
	t966 = 0.4e1 * t972;
	t778 = t823 * t1029 + t824 * t1030 + t804 * t1037 + t803 * t1038 + t1163 * t853 + t1164 * t1105 + (t966 + t999) * t1104;
	t1010 = -t1115 * t777 - t1117 * t778 - t1180;
	t836 = (t990 / 0.2e1 + t987 / 0.2e1) * t1128;
	t1083 = t1117 * t836;
	t1170 = t849 * t854;
	t805 = t823 * t1037 + t824 * t1038 + t1184 * t1170;
	t806 = t824 * t1037 + t823 * t1039 - t1183 * t1170;
	t1015 = -t1115 * t805 + t1117 * t806 - t1083;
	t835 = (-t988 / 0.2e1 + t989 / 0.2e1) * t1128;
	t1080 = t1115 * t835;
	t794 = -t1080 + t1015;
	t1179 = -t794 * qJD(2) + t1010;
	t1073 = qJD(2) * t1117;
	t1074 = qJD(1) * t1115;
	t860 = sin(qJ(1));
	t862 = cos(qJ(1));
	t1145 = -t860 * t1073 - t862 * t1074;
	t1178 = 0.2e1 * t1107;
	t858 = sin(pkin(18));
	t1177 = t858 / 0.2e1;
	t950 = pkin(4) * t951;
	t1176 = -t950 / 0.2e1;
	t1090 = 0.4e1 * t1127;
	t1175 = -t1090 / 0.2e1;
	t1106 = cos(pkin(18));
	t1174 = -t1106 / 0.2e1;
	t1172 = t809 * t917;
	t1063 = t861 * t1088;
	t1041 = t824 * t1063;
	t1065 = t859 * t1088;
	t1160 = t859 * t993 + t861 * t994;
	t807 = t823 * t1065 + t1160 * t1170 + t1041;
	t1089 = -t1114 / 0.2e1;
	t1064 = t861 * t1089;
	t1161 = t859 * t994 - t861 * t993;
	t808 = t823 * t1064 + t824 * t1065 + t1161 * t1170;
	t1018 = t1068 * t808 - t1069 * t807;
	t1096 = -t1129 / 0.2e1;
	t1075 = t863 * t1096;
	t1165 = t1185 * t1124;
	t1159 = qJD(3) * t854;
	t1138 = -t823 * t1078 + t994 * t1159 - t1000;
	t1139 = -t824 * t1078 - t993 * t1159 - t961;
	t931 = t1138 * t859 + t1139 * t861 - t1160 * t853;
	t932 = t1138 * t861 - t1139 * t859 + t1161 * t853;
	t1153 = t823 * qJD(3) * t1088 + t967;
	t953 = qJD(3) * t1041 + t804 * t1064 + t803 * t1065 + t1153 * t859 + t861 * t965;
	t954 = t803 * t1063 + t804 * t1065 + t1153 * t861 + (qJD(3) * t1089 * t824 + t966) * t859;
	t763 = -t1069 * t953 - t1068 * t954 + (t1068 * t931 - t1069 * t932) * t849;
	t795 = -t1068 * t807 - t1069 * t808;
	t915 = t1134 * t918;
	t911 = 0.4e1 * t915;
	t1151 = (-t867 + (pkin(3) + pkin(10)) * (pkin(3) - pkin(10)) + t948) * t1124;
	t940 = t1151 * t795;
	t1140 = -t940 * t1182 - (t1165 * t763 + t795 * t911) * t1127;
	t1101 = t1133 * t1130;
	t1113 = pkin(4) * t864;
	t1150 = t951 * t1101 - t1113;
	t885 = -pkin(4) * t887 / 0.2e1;
	t1166 = t1101 * t1137 + t885;
	t898 = pkin(4) * (t1068 * t953 - t1069 * t954 + (t1068 * t932 + t1069 * t931) * t849);
	t938 = t940 * t1090;
	t902 = t863 * (t1018 * t946 + t1150 * t795 + t938 * t1173);
	t907 = t1187 * t1175;
	t1169 = (t1018 * t914 + t1140 * t1107 + t1150 * t763 + t1166 * t795 + t947 * t898 - t940 * t907) * t1075 + t902 * t1172;
	t1100 = t861 * t991 + t843;
	t816 = -t1068 * t1100 - t957;
	t939 = t1151 * t816;
	t1141 = -t939 * t1182 - (t1137 * t1165 + t816 * t911) * t1127;
	t937 = t939 * t1090;
	t955 = -t1069 * t1100 + t956;
	t900 = t863 * (t1150 * t816 + t937 * t1173 + t955 * t946);
	t1168 = (t1141 * t1107 + t1137 * t1150 + t1166 * t816 - t939 * t907 + t955 * t914 + t1188) * t1075 + t900 * t1172;
	t1167 = t882 * t1096 + t897 * t1157;
	t1071 = t863 * t1157;
	t1032 = t1106 * t1071;
	t785 = -t1107 * t947 - t864 * t950;
	t927 = t929 * t1157;
	t926 = t858 * t927;
	t1155 = -t785 * t1032 - t926;
	t1043 = t858 * t1071;
	t925 = t1106 * t927;
	t1154 = t785 * t1043 - t925;
	t1079 = t1115 * t836;
	t834 = t1117 * t835;
	t1152 = -t1079 + t834;
	t817 = t1080 + t1083;
	t787 = -t817 * qJD(2) + t1180;
	t1016 = t1115 * t806 + t1117 * t805 - t1079;
	t1148 = t834 + t1016;
	t1146 = t1124 * t1178 - t946;
	t908 = t785 * t863 * t1126 * t915;
	t1144 = 0.4e1 * t1106 * t908 + t1186 * t858;
	t1143 = t1186 * t1106 - 0.4e1 * t858 * t908;
	t1081 = t1115 * t800;
	t1084 = t1117 * t799;
	t786 = qJD(2) * t1152 + t1081 + t1084;
	t1102 = t863 * t1129;
	t1099 = qJD(1) * t860;
	t1098 = qJD(1) * t862;
	t1085 = -t860 * t1081 + t1145 * t835;
	t1076 = t1129 * t1177;
	t1072 = qJD(2) * t1115;
	t1061 = pkin(1) * t1072;
	t1059 = t860 * t1083;
	t1055 = t863 * t1076;
	t1051 = t860 * t1074;
	t1050 = t1117 * t1098;
	t1048 = t860 * t1072;
	t1045 = -t1117 * pkin(1) - pkin(13);
	t1042 = t1106 * t1096;
	t1035 = t795 * t1043;
	t1034 = t816 * t1043;
	t1033 = t863 * t1042;
	t1027 = t795 * t1032;
	t1026 = t816 * t1032;
	t1017 = -t1115 * t778 + t1117 * t777 - t1084;
	t792 = t1148 * t862;
	t761 = -qJD(2) * t1148 + t1017 - t1081;
	t928 = t930 * t1096;
	t913 = -0.4e1 * t916;
	t910 = t863 * t1172;
	t909 = t858 * t910;
	t906 = t919 * t1175;
	t905 = t1106 * t910;
	t901 = t902 * t1096;
	t899 = t900 * t1096;
	t877 = (t1137 * t1146 + t1141 * t950 + t816 * t913 + t955 * t885 + t939 * t906 - t1189) * t1102;
	t876 = (t1018 * t885 + t1140 * t950 + t1146 * t763 + t795 * t913 - t864 * t898 + t940 * t906) * t1102;
	t832 = t860 * t1080;
	t829 = t835 * t1051;
	t825 = t835 * t1048;
	t815 = t817 * t862;
	t814 = t1152 * t862;
	t813 = -t1059 - t832;
	t812 = t1152 * t860;
	t791 = t794 * t862;
	t790 = t1148 * t860;
	t789 = t1015 * t860 - t832;
	t784 = -t860 * t1084 + t1085 + (t1048 - t1050) * t836;
	t783 = t835 * t1050 + t1145 * t836 + t1180 * t860 - t825;
	t782 = qJD(1) * t1059 - t786 * t862 + t829;
	t781 = -t1099 * t1152 + t787 * t862;
	t770 = (t785 * t1042 + t858 * t928) * t863;
	t769 = (t785 * t1076 + t1106 * t928) * t863;
	t766 = -t955 * t1113 + t1146 * t816 + t937 * t1176;
	t758 = -t1018 * t1113 + t1146 * t795 + t938 * t1176;
	t757 = t825 - qJD(1) * t792 + (-t1015 * qJD(2) + t1010) * t860;
	t756 = t1015 * t1098 + (-t1016 * qJD(2) + t1017) * t860 + t1085;
	t755 = t1148 * t1099 + t1179 * t862;
	t754 = -t1015 * t1099 + t761 * t862 + t829;
	t750 = -t917 * t1178 - t864 * t919 + t951 * t885 + t1188;
	t745 = -t785 * t1026 + t766 * t1033 - t816 * t926 + t858 * t899;
	t744 = t785 * t1034 + t766 * t1055 + t1106 * t899 - t816 * t925;
	t743 = -t785 * t1027 + t758 * t1033 - t795 * t926 + t858 * t901;
	t742 = t785 * t1035 + t758 * t1055 + t1106 * t901 - t795 * t925;
	t740 = t750 * t1033 + t1167 * t858 + t785 * t905;
	t739 = t750 * t1055 + t1167 * t1106 - t785 * t909;
	t735 = -t750 * t1026 + t1137 * t1155 + t1144 * t816 + t1168 * t858 + t877 * t1174 + t766 * t905;
	t734 = t750 * t1034 + t1168 * t1106 + t1137 * t1154 + t1143 * t816 + t877 * t1177 - t766 * t909;
	t733 = -t750 * t1027 + t1144 * t795 + t1155 * t763 + t1169 * t858 + t876 * t1174 + t758 * t905;
	t732 = t750 * t1035 + t1169 * t1106 + t1143 * t795 + t1154 * t763 + t876 * t1177 - t758 * t909;
	t1 = [(-t739 * t813 - t740 * t812 - t769 * t784 - t770 * t783) * r_i_i_C(1) + (t739 * t812 - t740 * t813 + t769 * t783 - t770 * t784) * r_i_i_C(2) + pkin(1) * t1048 + (-t783 * t1106 + t784 * t858) * pkin(3) + (-t860 * r_i_i_C(3) + t1045 * t862) * qJD(1), (-t732 * t815 + t733 * t814 - t739 * t792 + t740 * t791 + t742 * t782 + t743 * t781 + t754 * t770 + t755 * t769) * r_i_i_C(1) + (-t732 * t814 - t733 * t815 - t739 * t791 - t740 * t792 - t742 * t781 + t743 * t782 - t754 * t769 + t755 * t770) * r_i_i_C(2) + (t754 * t1106 - t755 * t858) * pkin(3) + (-t862 * t1073 + t1051) * pkin(1), (-t734 * t815 + t735 * t814 + t744 * t782 + t745 * t781) * r_i_i_C(1) + (-t734 * t814 - t735 * t815 - t744 * t781 + t745 * t782) * r_i_i_C(2), 0; (-t739 * t815 + t740 * t814 + t769 * t782 + t770 * t781) * r_i_i_C(1) + (-t739 * t814 - t740 * t815 - t769 * t781 + t770 * t782) * r_i_i_C(2) - t862 * t1061 + (t781 * t1106 - t782 * t858) * pkin(3) + (t862 * r_i_i_C(3) + t1045 * t860) * qJD(1), (t732 * t813 + t733 * t812 - t739 * t790 + t740 * t789 + t742 * t784 + t743 * t783 + t756 * t770 + t757 * t769) * r_i_i_C(1) + (-t732 * t812 + t733 * t813 - t739 * t789 - t740 * t790 - t742 * t783 + t743 * t784 - t756 * t769 + t757 * t770) * r_i_i_C(2) + (t756 * t1106 - t757 * t858) * pkin(3) + t1145 * pkin(1), (t734 * t813 + t735 * t812 + t744 * t784 + t745 * t783) * r_i_i_C(1) + (-t734 * t812 + t735 * t813 - t744 * t783 + t745 * t784) * r_i_i_C(2), 0; 0, (t1148 * t740 + t1152 * t732 - t1179 * t770 + t733 * t817 + t739 * t794 + t742 * t787 + t743 * t786 + t761 * t769) * r_i_i_C(1) + (-t1148 * t739 + t1152 * t733 + t1179 * t769 - t732 * t817 + t740 * t794 - t742 * t786 + t743 * t787 + t761 * t770) * r_i_i_C(2) - t1061 + (-t1106 * t1179 - t761 * t858) * pkin(3), (t1152 * t734 + t735 * t817 + t744 * t787 + t745 * t786) * r_i_i_C(1) + (t1152 * t735 - t734 * t817 - t744 * t786 + t745 * t787) * r_i_i_C(2), 0;];
	JaD_transl = t1;
end