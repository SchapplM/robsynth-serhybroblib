% Jacobian time derivative of explicit kinematic constraints of
% palh3m1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% WD [12x4]
%
% Sources:
% [NakamuraGho1989] Nakamura, Yoshihiko and Ghodoussi, Modjtaba: Dynamics computation of closed-link robot mechanisms with nonredundant and redundant actuators (1989)
% [ParkChoPlo1999] Park, FC and Choi, Jihyeon and Ploen, SR: Symbolic formulation of closed chain dynamics in independent coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-18 10:11
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function WD = palh3m1TE_kinconstr_expl_jacobianD_mdh_sym_varpar(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1TE_kinconstr_expl_jacobianD_mdh_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1TE_kinconstr_expl_jacobianD_mdh_sym_varpar: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1TE_kinconstr_expl_jacobianD_mdh_sym_varpar: pkin has to be [19x1] (double)');

%% Symbolic Calculation
% From kinconstr_expl_jacobianD_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-17 15:16:37
% EndTime: 2020-04-17 15:17:12
% DurationCPUTime: 35.17s
% Computational Cost: add. (784540->385), mult. (1228430->823), div. (44884->36), fcn. (766524->18), ass. (0->391)
t711 = sin(qJ(2));
t712 = sin(pkin(16));
t713 = cos(qJ(2));
t714 = cos(pkin(16));
t455 = t711 * t714 + t713 * t712;
t752 = 0.4e1 * t455;
t454 = t711 * t712 - t713 * t714;
t703 = pkin(5) * t454;
t620 = pkin(1) * t703;
t450 = -0.2e1 * t620;
t476 = pkin(5) ^ 2;
t481 = pkin(1) ^ 2;
t630 = t476 + t481;
t447 = t450 + t630;
t444 = 0.1e1 / t447;
t445 = 0.1e1 / t447 ^ 2;
t446 = t444 * t445;
t451 = t455 * qJD(2);
t638 = t451 * t455;
t612 = t481 * t638;
t575 = t476 * t612;
t559 = t446 * t575;
t543 = 0.4e1 * t559;
t480 = 0.1e1 / pkin(2);
t474 = pkin(6) ^ 2;
t479 = pkin(2) ^ 2;
t443 = -t474 + t479 + t447;
t448 = pkin(1) - t703;
t631 = t450 + t481;
t737 = -pkin(6) - pkin(2);
t436 = (pkin(5) - t737) * (pkin(5) + t737) + t631;
t736 = -pkin(6) + pkin(2);
t437 = (pkin(5) - t736) * (pkin(5) + t736) + t631;
t644 = t437 * t436;
t483 = sqrt(-t644);
t426 = pkin(5) * t455 * t443 + t448 * t483;
t468 = cos(qJ(3));
t648 = t426 * t468;
t634 = t455 * t483;
t618 = pkin(5) * t634;
t425 = t443 * t448 - t618;
t466 = sin(qJ(3));
t653 = t425 * t466;
t534 = t648 / 0.2e1 + t653 / 0.2e1;
t739 = pkin(1) * pkin(5);
t625 = t451 * t739;
t587 = t445 * t625;
t547 = 0.2e1 * (t436 + t437) * t739;
t428 = t451 * t547;
t452 = t454 * qJD(2);
t710 = pkin(1) * t476;
t578 = t638 * t710;
t434 = 0.1e1 / t483;
t725 = t434 / 0.2e1;
t600 = t448 * t725;
t637 = t451 * t483;
t395 = t428 * t600 - 0.2e1 * t578 + (-t452 * t443 - t637) * pkin(5);
t665 = t395 * t466;
t645 = t428 * t455;
t726 = -t434 / 0.2e1;
t571 = t645 * t726;
t417 = pkin(5) * t571;
t700 = t448 * pkin(1);
t591 = t443 + 0.2e1 * t700;
t636 = t452 * t483;
t394 = t417 + (-t591 * t451 + t636) * pkin(5);
t666 = t394 * t468;
t649 = t426 * t466;
t652 = t425 * t468;
t744 = t649 - t652;
t347 = ((-t665 / 0.2e1 + t666 / 0.2e1 - t534 * qJD(3)) * t444 - t744 * t587) * t480;
t549 = t648 + t653;
t527 = t451 * t549;
t535 = -t649 / 0.2e1 + t652 / 0.2e1;
t626 = t445 * t739;
t664 = t395 * t468;
t667 = t394 * t466;
t348 = (t527 * t626 + (t664 / 0.2e1 + t667 / 0.2e1 + t535 * qJD(3)) * t444) * t480;
t461 = pkin(18) + pkin(19);
t459 = sin(t461);
t460 = cos(t461);
t340 = t347 * t460 - t348 * t459;
t639 = t444 * t480;
t412 = t535 * t639;
t413 = t534 * t639;
t382 = -t412 * t460 + t413 * t459;
t705 = pkin(4) * t382;
t621 = pkin(3) * t705;
t380 = 0.2e1 * t621;
t477 = pkin(4) ^ 2;
t633 = t380 + t477;
t735 = -pkin(8) - pkin(10);
t366 = (pkin(3) - t735) * (pkin(3) + t735) + t633;
t734 = -pkin(8) + pkin(10);
t367 = (pkin(3) - t734) * (pkin(3) + t734) + t633;
t675 = t367 * t366;
t482 = sqrt(-t675);
t680 = t340 * t482;
t555 = -t412 * t459 - t413 * t460;
t751 = -0.2e1 * t555;
t628 = 0.2e1 * pkin(4);
t546 = pkin(3) * (t366 + t367) * t628;
t320 = t340 * t546;
t350 = 0.1e1 / t482;
t727 = -t555 / 0.2e1;
t605 = t350 * t727;
t556 = -t347 * t459 - t348 * t460;
t685 = t556 * t482;
t525 = t320 * t605 - t685;
t470 = pkin(10) ^ 2;
t472 = pkin(8) ^ 2;
t478 = pkin(3) ^ 2;
t629 = t477 + t478;
t610 = -t472 + t629;
t373 = t380 + t470 + t610;
t379 = pkin(3) * t382 + pkin(4);
t589 = -0.2e1 * pkin(4) * t379 - t373;
t294 = (t589 * t340 + t525) * pkin(3);
t706 = pkin(4) * t555;
t592 = -0.2e1 * t478 * t706;
t731 = t350 / 0.2e1;
t606 = t379 * t731;
t296 = t320 * t606 + t340 * t592 + (t373 * t556 - t680) * pkin(3);
t377 = t380 + t629;
t374 = 0.1e1 / t377;
t471 = 0.1e1 / pkin(10);
t671 = t374 * t471;
t336 = pkin(3) * t373 * t555 + t379 * t482;
t462 = sin(pkin(17));
t687 = t336 * t462;
t745 = t555 * t482;
t334 = -pkin(3) * t745 + t373 * t379;
t463 = cos(pkin(17));
t688 = t334 * t463;
t318 = (-t688 / 0.2e1 + t687 / 0.2e1) * t671;
t315 = 0.1e1 / t318 ^ 2;
t375 = 0.1e1 / t377 ^ 2;
t708 = pkin(3) * t375;
t622 = pkin(4) * t708;
t511 = (t687 - t688) * t622;
t723 = -t463 / 0.2e1;
t724 = t462 / 0.2e1;
t750 = ((t294 * t723 + t296 * t724) * t374 + t340 * t511) * t471 * t315;
t707 = pkin(3) * t477;
t594 = t707 * t751;
t378 = -pkin(3) - t705;
t607 = -t350 * t378 / 0.2e1;
t372 = -t470 + t472 + t377;
t746 = t372 * t556;
t295 = t320 * t607 + t340 * t594 + (-t680 + t746) * pkin(4);
t333 = -pkin(4) * t745 - t372 * t378;
t330 = 0.1e1 / t333 ^ 2;
t335 = t372 * t706 - t378 * t482;
t332 = t335 ^ 2;
t323 = t330 * t332 + 0.1e1;
t690 = t330 * t335;
t590 = 0.2e1 * t378 * pkin(3) - t372;
t293 = (t590 * t340 + t525) * pkin(4);
t329 = 0.1e1 / t333;
t697 = t293 * t329 * t330;
t749 = 0.2e1 * (t295 * t690 - t332 * t697) / t323 ^ 2;
t464 = sin(pkin(19));
t651 = t426 * t464;
t465 = cos(pkin(19));
t654 = t425 * t465;
t409 = (-t654 / 0.2e1 + t651 / 0.2e1) * t639;
t402 = 0.1e1 / t409 ^ 2;
t552 = -t651 + t654;
t720 = -t465 / 0.2e1;
t721 = t464 / 0.2e1;
t748 = ((t394 * t720 + t395 * t721) * t444 - t552 * t587) * t480 * t402;
t416 = pkin(1) * t571;
t611 = -t479 + t630;
t442 = t450 + t474 + t611;
t449 = pkin(1) * t454 - pkin(5);
t627 = 0.2e1 * t449 * pkin(5);
t588 = -t442 + t627;
t393 = t416 + (t588 * t451 + t636) * pkin(1);
t577 = pkin(5) * t612;
t599 = t449 * t726;
t396 = t428 * t599 - 0.2e1 * t577 + (-t452 * t442 - t637) * pkin(1);
t475 = 0.1e1 / pkin(6);
t640 = t444 * t475;
t427 = pkin(1) * t455 * t442 - t449 * t483;
t467 = sin(pkin(15));
t647 = t427 * t467;
t424 = -pkin(1) * t634 - t442 * t449;
t469 = cos(pkin(15));
t656 = t424 * t469;
t411 = (t656 / 0.2e1 + t647 / 0.2e1) * t640;
t406 = 0.1e1 / t411 ^ 2;
t554 = t647 + t656;
t715 = t469 / 0.2e1;
t716 = t467 / 0.2e1;
t747 = ((t393 * t715 + t396 * t716) * t444 + t554 * t587) * t475 * t406;
t473 = 0.1e1 / pkin(8);
t321 = 0.1e1 / t323;
t738 = pkin(3) * pkin(4);
t624 = t340 * t738;
t573 = pkin(8) * t321 * t624;
t701 = pkin(8) * t377;
t580 = t321 * t330 * t701;
t617 = t329 * t701;
t743 = t473 * (-t293 * t580 - 0.2e1 * t329 * t573 - t617 * t749);
t616 = t335 * t701;
t579 = t330 * t616;
t742 = t473 * (0.2e1 * t321 * t616 * t697 - t295 * t580 + 0.2e1 * t573 * t690 + t579 * t749);
t314 = 0.1e1 / t318;
t371 = t470 - t610 - 0.2e1 * t621;
t368 = 0.1e1 / t371;
t401 = 0.1e1 / t409;
t405 = 0.1e1 / t411;
t441 = t474 - t611 + 0.2e1 * t620;
t438 = 0.1e1 / t441;
t369 = 0.1e1 / t371 ^ 2;
t439 = 0.1e1 / t441 ^ 2;
t741 = -0.2e1 * t439;
t740 = -0.2e1 * t455 ^ 2;
t733 = -t320 / 0.2e1;
t732 = -t556 / 0.2e1;
t566 = -0.8e1 * t575;
t423 = -t452 * t547 + t566;
t429 = t455 * t547;
t613 = t434 / t644 * t429 * t428;
t520 = t613 / 0.4e1 + t423 * t725;
t548 = 0.2e1 * t451 * t454 + t452 * t752;
t601 = t429 * t725;
t569 = t601 + t443;
t357 = t417 + t520 * t448 + t548 * t710 + (-t569 * t451 + t636) * pkin(5);
t730 = t357 / 0.2e1;
t502 = (t454 * t428 / 0.2e1 + t452 * t429 / 0.2e1 - t455 * t423 / 0.2e1) * t434 + t637 - t455 * t613 / 0.4e1;
t359 = 0.4e1 * t578 + (t591 * t452 + t502) * pkin(5);
t729 = -t359 / 0.2e1;
t728 = t374 / 0.2e1;
t722 = t463 / 0.2e1;
t719 = t465 / 0.2e1;
t718 = t466 / 0.2e1;
t717 = -t467 / 0.2e1;
t709 = pkin(3) * t374;
t704 = pkin(4) * t473;
t702 = pkin(5) * t481;
t686 = t336 * t463;
t689 = t334 * t462;
t510 = (t686 + t689) * t622;
t283 = ((t294 * t724 + t296 * t722) * t374 + t340 * t510) * t471;
t319 = (t686 / 0.2e1 + t689 / 0.2e1) * t671;
t317 = t319 ^ 2;
t303 = t315 * t317 + 0.1e1;
t694 = t315 * t319;
t698 = t314 * t750;
t699 = 0.2e1 * (t283 * t694 - t317 * t698) / t303 ^ 2;
t674 = t367 * t369;
t346 = -t366 * t674 + 0.1e1;
t370 = t368 * t369;
t696 = (0.2e1 * t674 + (0.4e1 * t367 * t370 + 0.2e1 * t369) * t366) * t624 / t346 ^ 2;
t400 = t429 * t600 + t710 * t740 + (-t443 * t454 - t634) * pkin(5);
t660 = t400 * t468;
t635 = t454 * t483;
t398 = (t635 + (-t569 - 0.2e1 * t700) * t455) * pkin(5);
t663 = t398 * t466;
t536 = t660 / 0.2e1 + t663 / 0.2e1;
t661 = t400 * t466;
t662 = t398 * t468;
t325 = (t744 * t543 + (t536 * qJD(3) + t357 * t718 + t468 * t729) * t444 + (-t744 * t452 - (-t661 + t662) * t451 + (t549 * qJD(3) + t665 - t666) * t455) * t626) * t480;
t537 = -t661 / 0.2e1 + t662 / 0.2e1;
t326 = (t481 * t476 * t446 * t527 * t752 + (t537 * qJD(3) + t359 * t718 + t468 * t730) * t444 + (-t549 * t452 - (-t660 - t663) * t451 + (-qJD(3) * t744 + t664 + t667) * t455) * t626) * t480;
t308 = -t325 * t460 - t326 * t459;
t695 = t308 * t482;
t693 = t320 * t350 / t675;
t650 = t426 * t465;
t655 = t425 * t464;
t551 = t650 + t655;
t352 = ((t394 * t721 + t395 * t719) * t444 + t551 * t587) * t480;
t410 = (t650 / 0.2e1 + t655 / 0.2e1) * t639;
t404 = t410 ^ 2;
t387 = t402 * t404 + 0.1e1;
t659 = t402 * t410;
t677 = t401 * t748;
t692 = 0.2e1 * (t352 * t659 - t404 * t677) / t387 ^ 2;
t646 = t427 * t469;
t657 = t424 * t467;
t553 = -t646 + t657;
t355 = ((t393 * t717 + t396 * t715) * t444 - t553 * t587) * t475;
t414 = (t646 / 0.2e1 - t657 / 0.2e1) * t640;
t408 = t414 ^ 2;
t390 = t406 * t408 + 0.1e1;
t658 = t406 * t414;
t676 = t405 * t747;
t691 = 0.2e1 * (t355 * t658 - t408 * t676) / t390 ^ 2;
t586 = t455 * t626;
t364 = (t536 * t444 + t549 * t586) * t480;
t365 = (-t537 * t444 + t586 * t744) * t480;
t343 = -t364 * t459 - t365 * t460;
t324 = t343 * t546;
t684 = t340 * t324;
t341 = t555 * t546;
t683 = t340 * t341;
t682 = t340 * t477;
t681 = t340 * t478;
t679 = t343 * t320;
t678 = t343 * t482;
t673 = t374 * t378;
t672 = t374 * t463;
t669 = t555 * t320;
t643 = t437 * t439;
t642 = t444 * t465;
t641 = t444 * t467;
t623 = t369 * t738;
t376 = t374 * t375;
t619 = 0.4e1 * t376 * t478;
t614 = t477 * t681;
t609 = t693 / 0.4e1;
t608 = t368 * t731;
t604 = t374 * t724;
t603 = -t672 / 0.2e1;
t602 = t672 / 0.2e1;
t598 = t444 * t721;
t597 = t444 * t715;
t596 = 0.2e1 * t707;
t595 = t478 * t628;
t593 = 0.4e1 * pkin(4) * t681;
t301 = 0.1e1 / t303;
t585 = t301 * t622;
t584 = t333 * t622;
t583 = t335 * t622;
t582 = t335 * t619;
t581 = -0.8e1 * t614;
t576 = t376 * t614;
t574 = -0.2e1 * t482 * t623;
t572 = -t555 * t693 / 0.4e1;
t570 = t601 + t442;
t562 = t321 * t473 * t617;
t561 = t321 * t579;
t560 = t463 * t576;
t558 = -t308 * t555 - t343 * t556;
t557 = t556 * t751;
t545 = t370 * t482 * t581;
t544 = 0.4e1 * t462 * t576;
t540 = t465 * t559;
t539 = t467 * t559;
t533 = -0.4e1 * t334 * t560;
t532 = 0.4e1 * t336 * t560;
t531 = t343 * t544;
t530 = t555 * t544;
t529 = t464 * t543;
t528 = t469 * t543;
t342 = -t364 * t460 + t365 * t459;
t524 = t324 * t605 - t342 * t482;
t523 = t341 * t605 - t382 * t482;
t288 = t308 * t546 + t343 * t581;
t522 = t288 * t731 + t324 * t609;
t309 = t546 * t556 + t555 * t581;
t521 = t309 * t731 + t341 * t609;
t298 = (t589 * t343 + t524) * pkin(3);
t519 = t294 * t343 + t298 * t340 + t308 * t334;
t311 = (t555 * t589 + t523) * pkin(3);
t518 = t294 * t555 + t311 * t340 + t334 * t556;
t300 = t324 * t606 + t343 * t592 + (t342 * t373 - t678) * pkin(3);
t517 = t296 * t343 + t300 * t340 + t308 * t336;
t313 = t341 * t606 + t555 * t592 + (t373 * t382 - t745) * pkin(3);
t516 = t296 * t555 + t313 * t340 + t336 * t556;
t397 = (t635 + (-t570 + t627) * t455) * pkin(1);
t515 = t393 * t455 + t397 * t451 - t424 * t452;
t514 = t394 * t455 + t398 * t451 - t425 * t452;
t513 = t395 * t455 + t400 * t451 - t426 * t452;
t399 = t429 * t599 + t702 * t740 + (-t442 * t454 - t634) * pkin(1);
t512 = t396 * t455 + t399 * t451 - t427 * t452;
t509 = t471 * (-t301 * t750 - t314 * t699);
t508 = t473 * (t333 * t619 + 0.2e1 * t709) * t682;
t507 = (-t679 / 0.2e1 - t684 / 0.2e1) * t350 - t695;
t506 = (-t669 / 0.2e1 - t683 / 0.2e1) * t350 - t685;
t505 = t471 * (t694 * t699 + (-t283 * t315 + 0.2e1 * t319 * t698) * t301);
t307 = t325 * t459 - t326 * t460;
t504 = (t288 * t727 + t324 * t732 + t342 * t733) * t350 - t307 * t482 + t324 * t572;
t503 = (t309 * t727 + t341 * t732 + t382 * t733) * t350 + t680 + t341 * t572;
t440 = t438 * t439;
t432 = -t436 * t643 + 0.1e1;
t388 = 0.1e1 / t390;
t385 = 0.1e1 / t387;
t358 = 0.4e1 * t577 + (-t588 * t452 + t502) * pkin(1);
t356 = t416 - t520 * t449 + t548 * t702 + (-t570 * t451 + t636) * pkin(1);
t344 = 0.1e1 / t346;
t312 = t341 * t607 + t555 * t594 + (t372 * t382 - t745) * pkin(4);
t310 = (t555 * t590 + t523) * pkin(4);
t299 = t324 * t607 + t343 * t594 + (t342 * t372 - t678) * pkin(4);
t297 = (t590 * t343 + t524) * pkin(4);
t284 = t555 * t593 + (t556 * t589 + t503) * pkin(3);
t281 = t521 * t379 + (-t340 * t382 + t557) * t595 + (-t340 * t373 + t506) * pkin(3);
t280 = t343 * t593 + (t589 * t308 + t504) * pkin(3);
t279 = t522 * t379 + (-t340 * t342 + t558) * t595 + (t307 * t373 + t507) * pkin(3);
t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, ((t298 * t724 + t300 * t722) * t374 + t343 * t510) * t509 + ((t298 * t723 + t300 * t724) * t374 + t343 * t511) * t505 + (((t279 * t602 + t280 * t604 + t334 * t531 + t343 * t532) * t314 - (t279 * t604 + t280 * t603 + t336 * t531 + t343 * t533) * t694) * t301 + ((t517 * t314 + t519 * t694) * t463 + (t519 * t314 - t517 * t694) * t462) * t585) * t471, ((t311 * t724 + t313 * t722) * t374 + t555 * t510) * t509 + ((t311 * t723 + t313 * t724) * t374 + t555 * t511) * t505 + (((t281 * t602 + t284 * t604 + t334 * t530 + t532 * t555) * t314 - (t281 * t604 + t284 * t603 + t336 * t530 + t533 * t555) * t694) * t301 + ((t314 * t516 + t518 * t694) * t463 + (t314 * t518 - t516 * t694) * t462) * t585) * t471, 0; 0, 0, 0, 0; 0, ((-t388 * t747 - t405 * t691) * ((t397 * t717 + t399 * t715) * t444 - t553 * t586) + (t658 * t691 + (-t355 * t406 + 0.2e1 * t414 * t676) * t388) * ((t397 * t715 + t399 * t716) * t444 + t554 * t586) + ((t356 * t597 + t427 * t528 - t358 * t641 / 0.2e1 - 0.4e1 * t424 * t539) * t405 - (t358 * t597 + t424 * t528 + t356 * t641 / 0.2e1 + 0.4e1 * t427 * t539) * t658 + ((t512 * t405 - t515 * t658) * t469 + (-t515 * t405 - t512 * t658) * t467) * t626) * t388) * t475, 0, 0; 0, ((-t385 * t748 - t401 * t692) * ((t398 * t721 + t400 * t719) * t444 + t551 * t586) + (t659 * t692 + (-t352 * t402 + 0.2e1 * t410 * t677) * t385) * ((t398 * t720 + t400 * t721) * t444 - t552 * t586) + ((t359 * t598 + t425 * t529 + 0.4e1 * t426 * t540 + t642 * t730) * t401 - (t357 * t598 - 0.4e1 * t425 * t540 + t426 * t529 + t642 * t729) * t659 + ((t401 * t513 + t514 * t659) * t465 + (t401 * t514 - t513 * t659) * t464) * t626) * t385) * t480, 0, 0; 0, 0.2e1 * ((-t378 * t522 + t558 * t596) * t728 + (-t342 * t709 + t343 * t582) * t682 + ((t307 * t372 + t507) * t728 + (t295 * t343 + t299 * t340 + t308 * t335) * t708) * pkin(4)) * t562 - 0.2e1 * (t343 * t508 + ((-t308 * t372 + t504) * t728 + (t308 * t673 + (t293 * t343 + t297 * t340 + t308 * t333) * t375) * pkin(3)) * t704) * t561 + 0.2e1 * (t299 * t728 + t343 * t583) * t743 + 0.2e1 * (t297 * t728 + t343 * t584) * t742, 0.2e1 * ((-t378 * t521 + t557 * t596) * t728 + (-t382 * t709 + t555 * t582) * t682 + ((-t340 * t372 + t506) * t728 + (t295 * t555 + t312 * t340 + t335 * t556) * t708) * pkin(4)) * t562 - 0.2e1 * (t555 * t508 + ((t503 - t746) * t728 + (t556 * t673 + (t293 * t555 + t310 * t340 + t333 * t556) * t375) * pkin(3)) * t704) * t561 + 0.2e1 * (t312 * t728 + t555 * t583) * t743 + 0.2e1 * (t310 * t728 + t555 * t584) * t742, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, -(pkin(1) * t618 * t741 + t438 * t601) / t432 ^ 2 * (-0.2e1 * t643 + (-0.4e1 * t437 * t440 + t741) * t436) * t625 + (t483 * t440 * t566 - t520 * t438 + (-0.2e1 * t636 + (t429 * t451 + t645) * t434) * t439 * t739) / t432, 0, 0; 0, (t324 * t608 + t343 * t574) * t696 + (t343 * t545 - t522 * t368 + (0.2e1 * t695 + (t679 + t684) * t350) * t623) * t344, (t341 * t608 + t555 * t574) * t696 + (t555 * t545 - t521 * t368 + (0.2e1 * t685 + (t669 + t683) * t350) * t623) * t344, 0;];
WD = t1;
