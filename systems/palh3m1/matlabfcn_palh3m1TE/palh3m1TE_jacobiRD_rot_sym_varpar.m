% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh3m1TE
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JRD_rot [9x4]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-18 10:11
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh3m1TE_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1TE_jacobiRD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1TE_jacobiRD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1TE_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1TE_jacobiRD_rot_sym_varpar: pkin has to be [19x1] (double)');
JRD_rot=NaN(9,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:02
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:03
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0; -t31, 0, 0, 0; 0, 0, 0, 0; t31, 0, 0, 0; -t30, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:03
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (11->9), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t32 = sin(qJ(1));
	t39 = qJD(1) * t32;
	t34 = cos(qJ(1));
	t38 = qJD(1) * t34;
	t31 = sin(qJ(2));
	t37 = qJD(2) * t31;
	t33 = cos(qJ(2));
	t36 = qJD(2) * t33;
	t35 = qJD(2) * t34;
	t30 = t32 * t37 - t33 * t38;
	t29 = t31 * t38 + t32 * t36;
	t28 = t31 * t35 + t33 * t39;
	t27 = t31 * t39 - t33 * t35;
	t1 = [t30, t27, 0, 0; -t28, -t29, 0, 0; 0, -t37, 0, 0; t29, t28, 0, 0; t27, t30, 0, 0; 0, -t36, 0, 0; -t39, 0, 0, 0; t38, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:03
	% EndTime: 2020-04-18 09:52:03
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (73->12), mult. (250->16), div. (0->0), fcn. (250->6), ass. (0->18)
	t76 = sin(qJ(3));
	t77 = sin(qJ(2));
	t79 = cos(qJ(3));
	t80 = cos(qJ(2));
	t84 = t76 * t80 + t77 * t79;
	t87 = qJD(2) + qJD(3);
	t88 = t87 * t84;
	t78 = sin(qJ(1));
	t86 = qJD(1) * t78;
	t81 = cos(qJ(1));
	t85 = qJD(1) * t81;
	t83 = t76 * t77 - t79 * t80;
	t74 = t87 * t83;
	t73 = -t78 * t88 - t83 * t85;
	t72 = -t74 * t78 + t84 * t85;
	t71 = -t74 * t81 - t84 * t86;
	t70 = -t81 * t88 + t83 * t86;
	t1 = [t73, t71, t71, 0; -t70, t72, t72, 0; 0, t88, t88, 0; -t72, t70, t70, 0; t71, t73, t73, 0; 0, -t74, -t74, 0; -t86, 0, 0, 0; t85, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:55:40
	% EndTime: 2020-04-18 09:57:23
	% DurationCPUTime: 65.39s
	% Computational Cost: add. (1690873->287), mult. (2678026->516), div. (89600->10), fcn. (1667106->16), ass. (0->239)
	t1428 = -qJD(3) - qJD(2);
	t1236 = 0.1e1 / pkin(10);
	t1239 = pkin(3) ^ 2;
	t1238 = pkin(4) ^ 2;
	t1237 = pkin(5) ^ 2;
	t1241 = pkin(1) ^ 2;
	t1402 = sin(qJ(2));
	t1404 = sin(pkin(16));
	t1405 = cos(qJ(2));
	t1407 = cos(pkin(16));
	t1205 = t1402 * t1404 - t1405 * t1407;
	t1391 = pkin(5) * t1205;
	t1357 = -0.2e1 * pkin(1) * t1391 + t1241;
	t1195 = t1237 + t1357;
	t1191 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1195;
	t1200 = pkin(1) - t1391;
	t1410 = pkin(5) + pkin(6);
	t1411 = pkin(5) - pkin(6);
	t1189 = (pkin(2) + t1410) * (-pkin(2) + t1411) + t1357;
	t1190 = (-pkin(2) + t1410) * (pkin(2) + t1411) + t1357;
	t1369 = t1190 * t1189;
	t1243 = sqrt(-t1369);
	t1207 = t1402 * t1407 + t1405 * t1404;
	t1390 = pkin(5) * t1207;
	t1177 = t1191 * t1390 + t1200 * t1243;
	t1234 = sin(qJ(3));
	t1371 = t1177 * t1234;
	t1365 = t1207 * t1243;
	t1176 = -pkin(5) * t1365 + t1191 * t1200;
	t1235 = cos(qJ(3));
	t1372 = t1176 * t1235;
	t1268 = -t1371 / 0.2e1 + t1372 / 0.2e1;
	t1192 = 0.1e1 / t1195;
	t1240 = 0.1e1 / pkin(2);
	t1368 = t1192 * t1240;
	t1167 = t1268 * t1368;
	t1370 = t1177 * t1235;
	t1373 = t1176 * t1234;
	t1267 = t1370 / 0.2e1 + t1373 / 0.2e1;
	t1168 = t1267 * t1368;
	t1231 = pkin(18) + pkin(19);
	t1229 = sin(t1231);
	t1230 = cos(t1231);
	t1158 = -t1167 * t1230 + t1168 * t1229;
	t1393 = pkin(3) * t1158;
	t1414 = -2 * pkin(4);
	t1359 = -t1393 * t1414 + t1238;
	t1154 = t1239 + t1359;
	t1413 = 0.1e1 / t1154;
	t1364 = t1236 * t1413;
	t1434 = t1364 / 0.2e1;
	t1204 = t1402 * t1234 - t1405 * t1235;
	t1409 = -pkin(8) - pkin(10);
	t1150 = (pkin(3) - t1409) * (pkin(3) + t1409) + t1359;
	t1408 = -pkin(8) + pkin(10);
	t1151 = (pkin(3) - t1408) * (pkin(3) + t1408) + t1359;
	t1383 = t1151 * t1150;
	t1242 = sqrt(-t1383);
	t1145 = 0.1e1 / t1242;
	t1433 = 0.1e1 / t1154 ^ 2;
	t1290 = -t1167 * t1229 - t1168 * t1230;
	t1394 = pkin(3) * t1290;
	t1432 = -t1394 / 0.2e1;
	t1202 = t1207 * qJD(2);
	t1412 = pkin(1) * pkin(5);
	t1287 = 0.2e1 * (t1189 + t1190) * t1412;
	t1178 = t1202 * t1287;
	t1185 = 0.1e1 / t1243;
	t1431 = t1178 * t1185;
	t1430 = t1238 * t1290;
	t1152 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1154;
	t1155 = pkin(4) + t1393;
	t1389 = t1155 * pkin(4);
	t1337 = -t1152 - 0.2e1 * t1389;
	t1179 = t1207 * t1287;
	t1398 = t1185 / 0.2e1;
	t1341 = t1200 * t1398;
	t1396 = pkin(1) * t1237;
	t1166 = t1179 * t1341 - 0.2e1 * t1207 ^ 2 * t1396 + (-t1191 * t1205 - t1365) * pkin(5);
	t1374 = t1166 * t1235;
	t1320 = t1179 * t1398 + t1191;
	t1388 = t1200 * pkin(1);
	t1165 = (t1205 * t1243 + (-t1320 - 0.2e1 * t1388) * t1207) * pkin(5);
	t1377 = t1165 * t1234;
	t1270 = t1377 / 0.2e1 + t1374 / 0.2e1;
	t1288 = t1370 + t1373;
	t1193 = 0.1e1 / t1195 ^ 2;
	t1354 = t1193 * t1412;
	t1335 = t1207 * t1354;
	t1148 = (t1270 * t1192 + t1288 * t1335) * t1240;
	t1375 = t1166 * t1234;
	t1376 = t1165 * t1235;
	t1269 = -t1375 / 0.2e1 + t1376 / 0.2e1;
	t1422 = t1371 - t1372;
	t1149 = (-t1269 * t1192 + t1335 * t1422) * t1240;
	t1141 = -t1148 * t1229 - t1149 * t1230;
	t1360 = t1150 + t1151;
	t1387 = 2 * pkin(4);
	t1286 = pkin(3) * t1360 * t1387;
	t1131 = t1141 * t1286;
	t1140 = -t1148 * t1230 + t1149 * t1229;
	t1356 = t1239 * t1414;
	t1339 = t1290 * t1356;
	t1382 = t1155 * t1145;
	t1343 = t1382 / 0.2e1;
	t1106 = t1131 * t1343 + t1141 * t1339 + (t1140 * t1152 - t1141 * t1242) * pkin(3);
	t1203 = t1205 * qJD(2);
	t1262 = 0.4e1 * t1288;
	t1263 = -0.4e1 * t1422;
	t1169 = -t1390 * t1431 / 0.2e1;
	t1348 = t1202 * t1207 * t1237;
	t1323 = t1241 * t1348;
	t1175 = -t1203 * t1287 - 0.8e1 * t1323;
	t1349 = 0.1e1 / t1369 * t1179 * t1431;
	t1366 = t1203 * t1243;
	t1146 = t1169 + (t1349 / 0.4e1 + t1175 * t1398) * t1200 + (0.2e1 * t1202 * t1205 + 0.4e1 * t1203 * t1207) * t1396 + (-t1320 * t1202 + t1366) * pkin(5);
	t1332 = pkin(1) * t1348;
	t1338 = t1191 + 0.2e1 * t1388;
	t1367 = t1202 * t1243;
	t1147 = 0.4e1 * t1332 + (t1367 - t1207 * t1349 / 0.4e1 + t1338 * t1203 + (t1205 * t1178 / 0.2e1 + t1203 * t1179 / 0.2e1 - t1207 * t1175 / 0.2e1) * t1185) * pkin(5);
	t1397 = t1234 / 0.2e1;
	t1271 = -t1147 * t1235 / 0.2e1 + t1146 * t1397;
	t1272 = t1146 * t1235 / 0.2e1 + t1147 * t1397;
	t1291 = t1374 + t1377;
	t1292 = -t1375 + t1376;
	t1164 = t1178 * t1341 - 0.2e1 * t1332 + (-t1203 * t1191 - t1367) * pkin(5);
	t1378 = t1164 * t1235;
	t1163 = t1169 + (-t1338 * t1202 + t1366) * pkin(5);
	t1381 = t1163 * t1234;
	t1293 = t1378 + t1381;
	t1379 = t1164 * t1234;
	t1380 = t1163 * t1235;
	t1294 = t1379 - t1380;
	t1296 = t1192 * t1193 * t1323;
	t1415 = -t1229 * t1288 - t1230 * t1422;
	t1416 = t1229 * t1422 - t1230 * t1288;
	t1107 = (-(t1229 * t1262 - t1230 * t1263) * t1296 + (-t1230 * t1271 - t1229 * t1272 + (-t1229 * t1269 - t1230 * t1270) * qJD(3)) * t1192 + (-t1415 * t1203 - (t1229 * t1291 - t1230 * t1292) * t1202 + (t1416 * qJD(3) - t1229 * t1293 - t1230 * t1294) * t1207) * t1354) * t1240;
	t1336 = t1202 * t1354;
	t1142 = ((-t1379 / 0.2e1 + t1380 / 0.2e1 - t1267 * qJD(3)) * t1192 - t1422 * t1336) * t1240;
	t1143 = (t1288 * t1336 + (t1378 / 0.2e1 + t1381 / 0.2e1 + t1268 * qJD(3)) * t1192) * t1240;
	t1138 = t1142 * t1230 - t1143 * t1229;
	t1252 = pkin(3) * t1240 * (-(t1229 * t1263 + t1230 * t1262) * t1296 + (t1229 * t1271 - t1230 * t1272 + (t1229 * t1270 - t1230 * t1269) * qJD(3)) * t1192 + (-t1416 * t1203 - (t1229 * t1292 + t1230 * t1291) * t1202 + (-t1415 * qJD(3) + t1229 * t1294 - t1230 * t1293) * t1207) * t1354);
	t1385 = t1138 * t1239;
	t1347 = t1141 * t1385;
	t1255 = t1145 * (t1107 * t1286 - 0.8e1 * t1238 * t1347);
	t1295 = -t1142 * t1229 - t1143 * t1230;
	t1353 = pkin(3) * pkin(4) * t1433;
	t1334 = t1236 * t1353;
	t1313 = t1138 * t1334;
	t1130 = t1138 * t1286;
	t1386 = t1130 * t1145 / t1383;
	t1322 = t1155 * t1386 / 0.4e1;
	t1399 = -t1145 / 0.2e1;
	t1351 = pkin(3) * t1399;
	t1330 = t1131 * t1351;
	t1331 = t1130 * t1351;
	t1363 = t1413 / 0.2e1;
	t1340 = t1236 * t1363;
	t1392 = pkin(3) * t1242;
	t1427 = (t1131 * t1322 + t1155 * t1255 / 0.2e1 + t1152 * t1252 + (t1295 * t1356 + t1331) * t1141 + (t1140 * t1356 + t1330) * t1138 + (-t1392 + t1339) * t1107) * t1340 + t1106 * t1313;
	t1139 = t1290 * t1286;
	t1111 = t1139 * t1343 + t1290 * t1339 + (t1152 * t1158 - t1242 * t1290) * pkin(3);
	t1298 = 0.2e1 * t1145 * t1360;
	t1400 = -t1139 / 0.2e1;
	t1401 = -t1130 / 0.2e1;
	t1426 = (t1139 * t1322 + (-0.4e1 * t1138 * t1382 * t1430 + (-t1138 * t1158 - 0.2e1 * t1290 * t1295) * t1387) * t1239 + (-t1138 * t1152 + (t1138 * t1400 + t1290 * t1401) * t1145 + (-t1242 + t1298 * t1389 / 0.2e1) * t1295) * pkin(3)) * t1340 + t1111 * t1313;
	t1232 = sin(pkin(17));
	t1297 = t1238 * t1433 * t1385 * t1364;
	t1264 = 0.4e1 * t1232 * t1297;
	t1312 = t1232 * t1334;
	t1425 = t1290 * t1264 + t1295 * t1312;
	t1424 = t1107 * t1312 + t1141 * t1264;
	t1406 = cos(qJ(1));
	t1328 = t1406 * t1402;
	t1423 = t1428 * t1328;
	t1403 = sin(qJ(1));
	t1325 = t1403 * t1402;
	t1326 = t1405 * t1403;
	t1196 = t1234 * t1326 + t1235 * t1325;
	t1342 = t1290 * t1399;
	t1105 = (t1131 * t1342 - t1140 * t1242 + t1337 * t1141) * pkin(3);
	t1321 = -t1290 * t1386 / 0.4e1;
	t1421 = (0.4e1 * pkin(4) * t1347 + t1140 * t1331 - t1242 * t1252 + t1255 * t1432 + t1295 * t1330 + (t1107 * t1337 + t1131 * t1321) * pkin(3)) * t1434 + t1105 * t1313;
	t1110 = (t1139 * t1342 - t1158 * t1242 + t1290 * t1337) * pkin(3);
	t1333 = 0.4e1 * t1290 * t1385;
	t1384 = t1138 * t1242;
	t1420 = (pkin(4) * t1333 + (t1384 + t1139 * t1321 + (t1158 * t1401 + t1295 * t1400 + t1333 * t1430) * t1145 + (-t1152 + (t1298 * t1432 - 0.2e1 * t1155) * pkin(4)) * t1295) * pkin(3)) * t1434 + t1110 * t1313;
	t1101 = (t1130 * t1342 + t1337 * t1138 - t1242 * t1295) * pkin(3);
	t1102 = t1130 * t1343 + t1138 * t1339 + (t1152 * t1295 - t1384) * pkin(3);
	t1134 = t1152 * t1155 - t1290 * t1392;
	t1135 = t1152 * t1394 + t1155 * t1242;
	t1233 = cos(pkin(17));
	t1257 = (-t1134 * t1233 + t1135 * t1232) * t1353;
	t1345 = -t1413 * t1233 / 0.2e1;
	t1346 = t1232 * t1363;
	t1092 = (t1101 * t1345 + t1102 * t1346 + t1138 * t1257) * t1236;
	t1256 = (t1134 * t1232 + t1135 * t1233) * t1353;
	t1344 = t1233 * t1363;
	t1093 = (t1101 * t1346 + t1102 * t1344 + t1138 * t1256) * t1236;
	t1126 = (t1134 * t1345 + t1135 * t1346) * t1236;
	t1127 = (t1134 * t1346 + t1135 * t1344) * t1236;
	t1302 = qJD(1) * t1328;
	t1304 = t1234 * t1325;
	t1329 = t1406 * t1405;
	t1310 = t1234 * t1329;
	t1182 = qJD(1) * t1310 + (-t1428 * t1326 + t1302) * t1235 + t1428 * t1304;
	t1309 = t1235 * t1329;
	t1183 = qJD(1) * t1309 + t1428 * t1196 - t1234 * t1302;
	t1305 = t1235 * t1326;
	t1197 = t1305 - t1304;
	t1318 = t1197 * t1092 - t1196 * t1093 + t1183 * t1126 - t1182 * t1127;
	t1417 = -qJD(1) * t1325 - t1428 * t1329;
	t1180 = -qJD(1) * t1305 - t1417 * t1234 + t1423 * t1235;
	t1181 = t1417 * t1235 + (-qJD(1) * t1326 + t1423) * t1234;
	t1198 = -t1234 * t1328 + t1309;
	t1199 = t1235 * t1328 + t1310;
	t1316 = t1199 * t1092 + t1198 * t1093 + t1181 * t1126 + t1180 * t1127;
	t1273 = t1233 * t1297;
	t1311 = t1233 * t1334;
	t1419 = t1101 * t1312 + t1102 * t1311 + 0.4e1 * t1135 * t1273;
	t1418 = -t1101 * t1311 + t1102 * t1312 - 0.4e1 * t1134 * t1273;
	t1319 = t1196 * t1092 + t1197 * t1093 + t1182 * t1126 + t1183 * t1127;
	t1317 = t1198 * t1092 - t1199 * t1093 + t1180 * t1126 - t1181 * t1127;
	t1187 = t1204 * t1428;
	t1206 = -t1405 * t1234 - t1402 * t1235;
	t1188 = t1428 * t1206;
	t1315 = t1204 * t1092 - t1206 * t1093 + t1188 * t1126 + t1187 * t1127;
	t1314 = -t1206 * t1092 - t1204 * t1093 + t1187 * t1126 - t1188 * t1127;
	t1275 = t1107 * t1311;
	t1274 = t1295 * t1311;
	t1098 = (t1110 * t1346 + t1111 * t1344 + t1256 * t1290) * t1236;
	t1097 = (t1110 * t1345 + t1111 * t1346 + t1257 * t1290) * t1236;
	t1096 = (t1105 * t1346 + t1106 * t1344 + t1141 * t1256) * t1236;
	t1095 = (t1105 * t1345 + t1106 * t1346 + t1141 * t1257) * t1236;
	t1076 = -t1134 * t1274 + t1425 * t1135 + t1426 * t1232 - t1420 * t1233 + t1418 * t1290;
	t1075 = t1425 * t1134 + t1135 * t1274 + t1420 * t1232 + t1426 * t1233 + t1419 * t1290;
	t1074 = -t1134 * t1275 + t1424 * t1135 + t1418 * t1141 + t1427 * t1232 - t1421 * t1233;
	t1073 = t1424 * t1134 + t1135 * t1275 + t1419 * t1141 + t1421 * t1232 + t1427 * t1233;
	t1 = [t1318, t1073 * t1199 - t1074 * t1198 - t1095 * t1180 + t1096 * t1181 + t1316, t1075 * t1199 - t1076 * t1198 - t1097 * t1180 + t1098 * t1181 + t1316, 0; -t1317, t1073 * t1196 - t1074 * t1197 - t1095 * t1183 + t1096 * t1182 + t1319, t1075 * t1196 - t1076 * t1197 - t1097 * t1183 + t1098 * t1182 + t1319, 0; 0, t1073 * t1204 + t1074 * t1206 - t1095 * t1187 + t1096 * t1188 + t1315, t1075 * t1204 + t1076 * t1206 - t1097 * t1187 + t1098 * t1188 + t1315, 0; -t1319, t1073 * t1198 + t1074 * t1199 + t1095 * t1181 + t1096 * t1180 + t1317, t1075 * t1198 + t1076 * t1199 + t1097 * t1181 + t1098 * t1180 + t1317, 0; t1316, t1073 * t1197 + t1074 * t1196 + t1095 * t1182 + t1096 * t1183 + t1318, t1075 * t1197 + t1076 * t1196 + t1097 * t1182 + t1098 * t1183 + t1318, 0; 0, -t1073 * t1206 + t1074 * t1204 + t1095 * t1188 + t1096 * t1187 + t1314, -t1075 * t1206 + t1076 * t1204 + t1097 * t1188 + t1098 * t1187 + t1314, 0; -qJD(1) * t1403, 0, 0, 0; qJD(1) * t1406, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 10:09:47
	% EndTime: 2020-04-18 10:11:46
	% DurationCPUTime: 118.29s
	% Computational Cost: add. (2890898->330), mult. (4562810->585), div. (156416->10), fcn. (2844300->18), ass. (0->287)
	t2057 = pkin(4) ^ 2;
	t2056 = pkin(5) ^ 2;
	t2060 = pkin(1) ^ 2;
	t2258 = sin(qJ(2));
	t2260 = sin(pkin(16));
	t2261 = cos(qJ(2));
	t2263 = cos(pkin(16));
	t2022 = t2258 * t2260 - t2261 * t2263;
	t2248 = pkin(5) * t2022;
	t2214 = -0.2e1 * pkin(1) * t2248 + t2060;
	t2012 = t2056 + t2214;
	t2008 = pkin(2) ^ 2 - pkin(6) ^ 2 + t2012;
	t2017 = pkin(1) - t2248;
	t2267 = -pkin(6) - pkin(2);
	t2006 = (pkin(5) - t2267) * (pkin(5) + t2267) + t2214;
	t2266 = -pkin(6) + pkin(2);
	t2007 = (pkin(5) - t2266) * (pkin(5) + t2266) + t2214;
	t2235 = t2007 * t2006;
	t2062 = sqrt(-t2235);
	t2024 = t2258 * t2263 + t2261 * t2260;
	t2247 = pkin(5) * t2024;
	t1994 = t2008 * t2247 + t2017 * t2062;
	t2257 = sin(qJ(3));
	t2196 = t2257 * t1994;
	t2231 = t2024 * t2062;
	t1993 = -pkin(5) * t2231 + t2008 * t2017;
	t2054 = cos(qJ(3));
	t2237 = t1993 * t2054;
	t2116 = -t2196 / 0.2e1 + t2237 / 0.2e1;
	t2009 = 0.1e1 / t2012;
	t2059 = 0.1e1 / pkin(2);
	t2234 = t2009 * t2059;
	t1987 = t2116 * t2234;
	t2197 = t2257 * t1993;
	t2236 = t1994 * t2054;
	t2117 = t2197 / 0.2e1 + t2236 / 0.2e1;
	t1988 = t2117 * t2234;
	t2049 = pkin(18) + pkin(19);
	t2047 = sin(t2049);
	t2048 = cos(t2049);
	t1980 = -t1987 * t2048 + t1988 * t2047;
	t2251 = pkin(3) * t1980;
	t2271 = -2 * pkin(4);
	t2216 = -t2251 * t2271 + t2057;
	t2265 = -pkin(8) - pkin(10);
	t1972 = (pkin(3) - t2265) * (pkin(3) + t2265) + t2216;
	t2264 = -pkin(8) + pkin(10);
	t1973 = (pkin(3) - t2264) * (pkin(3) + t2264) + t2216;
	t2242 = t1973 * t1972;
	t2061 = sqrt(-t2242);
	t1967 = 0.1e1 / t2061;
	t2256 = -t1967 / 0.2e1;
	t2058 = pkin(3) ^ 2;
	t1976 = t2058 + t2216;
	t1974 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1976;
	t1977 = pkin(4) + t2251;
	t2181 = t1977 * t2271 - t1974;
	t2019 = t2024 * qJD(2);
	t2268 = pkin(1) * pkin(5);
	t2149 = 0.2e1 * (t2006 + t2007) * t2268;
	t1995 = t2019 * t2149;
	t2020 = t2022 * qJD(2);
	t2193 = t2019 * t2024 * t2056;
	t2176 = pkin(1) * t2193;
	t2002 = 0.1e1 / t2062;
	t2255 = t2002 / 0.2e1;
	t2190 = t2017 * t2255;
	t2233 = t2019 * t2062;
	t1984 = t1995 * t2190 - 0.2e1 * t2176 + (-t2020 * t2008 - t2233) * pkin(5);
	t2203 = t1984 * t2257;
	t2293 = t1995 * t2002;
	t1989 = -t2247 * t2293 / 0.2e1;
	t2246 = t2017 * pkin(1);
	t2182 = t2008 + 0.2e1 * t2246;
	t2232 = t2020 * t2062;
	t1983 = t1989 + (-t2182 * t2019 + t2232) * pkin(5);
	t2241 = t1983 * t2054;
	t2120 = -t2203 / 0.2e1 + t2241 / 0.2e1;
	t2204 = t1983 * t2257;
	t2240 = t1984 * t2054;
	t2121 = t2240 / 0.2e1 + t2204 / 0.2e1;
	t2010 = 0.1e1 / t2012 ^ 2;
	t2211 = t2010 * t2268;
	t2180 = t2019 * t2211;
	t2127 = t2196 - t2237;
	t2128 = t2197 + t2236;
	t2304 = t2047 * t2128 + t2048 * t2127;
	t2306 = ((t2047 * t2116 + t2048 * t2117) * qJD(3) + t2047 * t2121 - t2048 * t2120) * t2009 + t2304 * t2180;
	t1962 = t2306 * t2059;
	t2050 = sin(pkin(17));
	t2055 = 0.1e1 / pkin(10);
	t2303 = t2047 * t2127 - t2048 * t2128;
	t2299 = (t2303 * t2180 + (-t2048 * t2121 - t2047 * t2120 + (t2047 * t2117 - t2048 * t2116) * qJD(3)) * t2009) * t2059;
	t2086 = pkin(3) * t2299;
	t2157 = 0.2e1 * pkin(4) * (t1972 + t1973);
	t2137 = t1962 * t2157;
	t2115 = pkin(3) * t1977 * t2137;
	t2150 = -t1987 * t2047 - t1988 * t2048;
	t2213 = t2058 * t2271;
	t2183 = t2150 * t2213;
	t2249 = pkin(3) * t2061;
	t2280 = -t2249 + t2183;
	t2082 = t2055 * (-t2280 * t1962 + t1974 * t2086 + t2115 * t2256);
	t2270 = 0.1e1 / t1976;
	t2229 = t2270 / 0.2e1;
	t2079 = t2082 * t2229;
	t2125 = t2058 * t2137;
	t2097 = t2125 * t2256;
	t2279 = t2181 * pkin(3);
	t2083 = t2055 * (-t2279 * t1962 - t2061 * t2086 - t2150 * t2097);
	t2081 = t2270 * t2083;
	t2252 = pkin(3) * t2150;
	t1960 = t1974 * t2252 + t1977 * t2061;
	t2297 = 0.1e1 / t1976 ^ 2;
	t2210 = pkin(3) * pkin(4) * t2297;
	t2178 = t2055 * t2210;
	t2158 = t2050 * t2178;
	t2146 = t1960 * t2158;
	t1959 = t1974 * t1977 - t2150 * t2249;
	t2051 = cos(pkin(17));
	t2159 = t2051 * t2178;
	t2147 = t1959 * t2159;
	t2295 = -t2051 / 0.2e1;
	t1916 = t2081 * t2295 + t2050 * t2079 - (-t2147 + t2146) * t1962;
	t2140 = t1960 * t2159;
	t2141 = t1959 * t2158;
	t1917 = t2051 * t2079 + t2050 * t2081 / 0.2e1 - (t2140 + t2141) * t1962;
	t2188 = t2270 * t2295;
	t2189 = t2050 * t2229;
	t1952 = (t1959 * t2188 + t1960 * t2189) * t2055;
	t2187 = t2051 * t2229;
	t1953 = (t1959 * t2189 + t1960 * t2187) * t2055;
	t2167 = t2258 * t2257;
	t2259 = sin(qJ(1));
	t2133 = t2259 * t2167;
	t2170 = t2261 * t2257;
	t2262 = cos(qJ(1));
	t2136 = t2262 * t2170;
	t2171 = t2261 * t2259;
	t2173 = t2262 * t2258;
	t2287 = -qJD(3) - qJD(2);
	t1999 = qJD(1) * t2136 + (qJD(1) * t2173 - t2287 * t2171) * t2054 + t2287 * t2133;
	t2134 = t2259 * t2170;
	t2169 = t2259 * t2258;
	t2013 = t2054 * t2169 + t2134;
	t2135 = t2262 * t2167;
	t2174 = t2262 * t2261;
	t2015 = t2054 * t2174 - t2135;
	t2000 = t2015 * qJD(1) + t2287 * t2013;
	t2014 = t2054 * t2171 - t2133;
	t1898 = t1916 * t2014 - t1917 * t2013 + t1952 * t2000 - t1953 * t1999;
	t1929 = t1952 * t2014 - t1953 * t2013;
	t2052 = sin(qJ(4));
	t2053 = cos(qJ(4));
	t2198 = t2259 * t2053;
	t2199 = t2262 * t2052;
	t2307 = (t1929 * t2053 + t2199) * qJD(4) + qJD(1) * t2198 + t1898 * t2052;
	t2230 = t2055 * t2270;
	t2305 = t2230 / 0.2e1;
	t2021 = -t2261 * t2054 + t2167;
	t2200 = t2053 * t2262;
	t2298 = t1898 * t2053 + qJD(4) * t2200 + (-qJD(1) * t2259 - qJD(4) * t1929) * t2052;
	t2296 = t1977 / 0.2e1;
	t2294 = -t2252 / 0.2e1;
	t1996 = t2024 * t2149;
	t2164 = t1996 * t2255 + t2008;
	t1985 = (t2022 * t2062 + (-t2164 - 0.2e1 * t2246) * t2024) * pkin(5);
	t2202 = t1985 * t2257;
	t2254 = pkin(1) * t2056;
	t1986 = t1996 * t2190 - 0.2e1 * t2024 ^ 2 * t2254 + (-t2008 * t2022 - t2231) * pkin(5);
	t2238 = t1986 * t2054;
	t2119 = t2202 / 0.2e1 + t2238 / 0.2e1;
	t2179 = t2024 * t2211;
	t1970 = (t2119 * t2009 + t2128 * t2179) * t2059;
	t2201 = t1986 * t2257;
	t2239 = t1985 * t2054;
	t2118 = -t2201 / 0.2e1 + t2239 / 0.2e1;
	t1971 = (-t2118 * t2009 + t2127 * t2179) * t2059;
	t1965 = -t1970 * t2047 - t1971 * t2048;
	t2148 = pkin(3) * t2157;
	t1956 = t1965 * t2148;
	t1964 = -t1970 * t2048 + t1971 * t2047;
	t2192 = t1967 * t2296;
	t1928 = t1956 * t2192 + t1965 * t2183 + (t1964 * t1974 - t1965 * t2061) * pkin(3);
	t2100 = 0.4e1 * t2127;
	t2101 = 0.4e1 * t2128;
	t2165 = t2060 * t2193;
	t1992 = -t2020 * t2149 - 0.8e1 * t2165;
	t2194 = 0.1e1 / t2235 * t1996 * t2293;
	t1968 = t1989 + (t2194 / 0.4e1 + t1992 * t2255) * t2017 + (0.2e1 * t2019 * t2022 + 0.4e1 * t2020 * t2024) * t2254 + (-t2164 * t2019 + t2232) * pkin(5);
	t1969 = 0.4e1 * t2176 + (t2233 - t2024 * t2194 / 0.4e1 + t2182 * t2020 + (t2022 * t1995 / 0.2e1 + t2020 * t1996 / 0.2e1 - t2024 * t1992 / 0.2e1) * t2002) * pkin(5);
	t2209 = t2257 / 0.2e1;
	t2122 = -t1969 * t2054 / 0.2e1 + t1968 * t2209;
	t2123 = t1968 * t2054 / 0.2e1 + t1969 * t2209;
	t2129 = -t2201 + t2239;
	t2130 = t2202 + t2238;
	t2131 = t2203 - t2241;
	t2132 = t2204 + t2240;
	t2151 = t2009 * t2010 * t2165;
	t1933 = (-(t2047 * t2101 + t2048 * t2100) * t2151 + (-t2048 * t2122 - t2047 * t2123 + (-t2047 * t2118 - t2048 * t2119) * qJD(3)) * t2009 + (t2304 * t2020 - (t2047 * t2130 - t2048 * t2129) * t2019 + (t2303 * qJD(3) - t2047 * t2132 - t2048 * t2131) * t2024) * t2211) * t2059;
	t2250 = pkin(3) * t2059;
	t2073 = (-(-t2047 * t2100 + t2048 * t2101) * t2151 + (t2047 * t2122 - t2048 * t2123 + (t2047 * t2119 - t2048 * t2118) * qJD(3)) * t2009 + (-t2303 * t2020 - (t2047 * t2129 + t2048 * t2130) * t2019 + (t2304 * qJD(3) + t2047 * t2131 - t2048 * t2132) * t2024) * t2211) * t2250;
	t2243 = t1962 * t2058;
	t2195 = t2057 * t2243;
	t2177 = 0.8e1 * t2195;
	t2090 = t1967 * (t1933 * t2148 + t1965 * t2177);
	t2160 = t1962 * t2178;
	t2207 = pkin(4) * t2243;
	t2185 = 0.2e1 * t2207;
	t2186 = t2055 * t2229;
	t2269 = t1967 / t2242;
	t2281 = -pkin(3) * t1962 * t2256 - t2269 * t2115 / 0.4e1;
	t2283 = t2213 * t2299 - t2097;
	t2286 = (t2280 * t1933 + t2281 * t1956 + t1964 * t2185 + t2283 * t1965 + t1974 * t2073 + t2090 * t2296) * t2186 - t1928 * t2160;
	t1963 = t2150 * t2148;
	t1937 = t1963 * t2192 + t2150 * t2183 + (t1974 * t1980 - t2061 * t2150) * pkin(3);
	t2087 = t2306 * t2250;
	t2089 = t1967 * (t2148 * t2299 + t2150 * t2177);
	t2285 = (t2281 * t1963 + t1974 * t2087 + t1980 * t2185 + t2089 * t2296 + t2283 * t2150 + t2280 * t2299) * t2186 - t1937 * t2160;
	t2284 = t2150 * t2269 * t2125 / 0.4e1 + t2086 * t2256;
	t2152 = t2297 * t2195 * t2230;
	t2124 = -0.4e1 * t2050 * t2152;
	t2282 = t1933 * t2158 + t1965 * t2124;
	t2016 = t2054 * t2173 + t2136;
	t2191 = t2150 * t2256;
	t1927 = (t1956 * t2191 - t1964 * t2061 + t2181 * t1965) * pkin(3);
	t2184 = -0.4e1 * t2207;
	t2278 = (t2279 * t1933 + t2284 * t1956 - t1964 * t2097 + t1965 * t2184 - t2061 * t2073 + t2090 * t2294) * t2305 - t1927 * t2160;
	t1936 = (t1963 * t2191 - t1980 * t2061 + t2150 * t2181) * pkin(3);
	t2277 = (t2284 * t1963 - t1980 * t2097 - t2061 * t2087 + t2089 * t2294 + t2150 * t2184 + t2279 * t2299) * t2305 - t1936 * t2160;
	t1997 = -t2014 * qJD(1) + t2287 * t2016;
	t1998 = -qJD(1) * t2134 + (-qJD(1) * t2169 - t2287 * t2174) * t2054 + t2287 * t2135;
	t2162 = t2016 * t1916 + t2015 * t1917 + t1998 * t1952 + t1997 * t1953;
	t2078 = t2082 * t2210;
	t2080 = t2083 * t2210;
	t2126 = t2051 * t2152;
	t2276 = -0.4e1 * t1960 * t2126 + t2050 * t2080 + t2051 * t2078;
	t2275 = 0.4e1 * t1959 * t2126 + t2050 * t2078 - t2051 * t2080;
	t2163 = t2013 * t1916 + t2014 * t1917 + t1999 * t1952 + t2000 * t1953;
	t2245 = qJD(4) * t2052;
	t2244 = qJD(4) * t2053;
	t1891 = t1933 * t2140 + t2282 * t1959 + t2276 * t1965 + t2278 * t2050 + t2286 * t2051;
	t2228 = t1891 + t1916;
	t1892 = -t1933 * t2147 + t2282 * t1960 + t2275 * t1965 + t2286 * t2050 - t2278 * t2051;
	t2227 = -t1892 + t1917;
	t2103 = t2150 * t2124;
	t2138 = t2299 * t2159;
	t1893 = t1959 * t2103 + t1960 * t2138 + t2277 * t2050 + t2285 * t2051 + t2141 * t2299 + t2276 * t2150;
	t2226 = t1893 + t1916;
	t1894 = -t1959 * t2138 + t1960 * t2103 + t2285 * t2050 - t2277 * t2051 + t2146 * t2299 + t2275 * t2150;
	t2225 = -t1894 + t1917;
	t2099 = (-t1959 * t2051 + t1960 * t2050) * t2210;
	t1919 = (t1927 * t2188 + t1928 * t2189 + t1965 * t2099) * t2055;
	t2223 = -t1919 + t1953;
	t2098 = (t1959 * t2050 + t1960 * t2051) * t2210;
	t1920 = (t1927 * t2189 + t1928 * t2187 + t1965 * t2098) * t2055;
	t2222 = -t1920 - t1952;
	t1921 = (t1936 * t2188 + t1937 * t2189 + t2099 * t2150) * t2055;
	t2221 = -t1921 + t1953;
	t1922 = (t1936 * t2189 + t1937 * t2187 + t2098 * t2150) * t2055;
	t2220 = -t1922 - t1952;
	t2219 = t2013 * t1952 + t2014 * t1953;
	t2218 = t2016 * t1952 + t2015 * t1953;
	t2102 = t2258 * t2054 + t2170;
	t2217 = t2021 * t1952 + t1953 * t2102;
	t2004 = t2021 * t2287;
	t2005 = t2287 * t2102;
	t2161 = t2021 * t1916 + t1917 * t2102 - t2005 * t1952 + t2004 * t1953;
	t1932 = -t1952 * t2102 + t1953 * t2021;
	t1931 = -t1952 * t2015 + t1953 * t2016;
	t1908 = -t1921 * t2102 + t1922 * t2021 + t2217;
	t1907 = -t1921 * t2015 + t1922 * t2016 + t2218;
	t1906 = -t1921 * t2014 + t1922 * t2013 + t2219;
	t1904 = -t1919 * t2102 + t1920 * t2021 + t2217;
	t1903 = -t1919 * t2015 + t1920 * t2016 + t2218;
	t1902 = -t1919 * t2014 + t1920 * t2013 + t2219;
	t1900 = -t1916 * t2102 + t1917 * t2021 - t1952 * t2004 - t1953 * t2005;
	t1897 = -t1916 * t2015 + t1917 * t2016 - t1952 * t1997 + t1953 * t1998;
	t1896 = qJD(1) * t2199 + t1897 * t2053 + (-t1931 * t2052 + t2198) * qJD(4);
	t1895 = qJD(1) * t2200 - t1897 * t2052 + (-t1931 * t2053 - t2259 * t2052) * qJD(4);
	t1890 = t1893 * t2021 - t1894 * t2102 - t1921 * t2004 - t1922 * t2005 + t2161;
	t1889 = t1893 * t2013 - t1894 * t2014 - t1921 * t2000 + t1922 * t1999 + t2163;
	t1888 = t1893 * t2016 - t1894 * t2015 - t1921 * t1997 + t1922 * t1998 + t2162;
	t1887 = t1891 * t2021 - t1892 * t2102 - t1919 * t2004 - t1920 * t2005 + t2161;
	t1886 = t1891 * t2013 - t1892 * t2014 - t1919 * t2000 + t1920 * t1999 + t2163;
	t1885 = t1891 * t2016 - t1892 * t2015 - t1919 * t1997 + t1920 * t1998 + t2162;
	t1 = [t2298, t1885 * t2053 - t1903 * t2245, t1888 * t2053 - t1907 * t2245, t1895; t1896, t1886 * t2053 - t1902 * t2245, t1889 * t2053 - t1906 * t2245, t2307; 0, t1887 * t2053 - t1904 * t2245, t1890 * t2053 - t1908 * t2245, -t1900 * t2052 - t1932 * t2244; -t2307, -t1885 * t2052 - t1903 * t2244, -t1888 * t2052 - t1907 * t2244, -t1896; t1895, -t1886 * t2052 - t1902 * t2244, -t1889 * t2052 - t1906 * t2244, t2298; 0, -t1887 * t2052 - t1904 * t2244, -t1890 * t2052 - t1908 * t2244, -t1900 * t2053 + t1932 * t2245; t2163, t2222 * t1997 + t2223 * t1998 - t2228 * t2015 + t2227 * t2016, t2220 * t1997 + t1998 * t2221 - t2015 * t2226 + t2016 * t2225, 0; -t2162, t2223 * t1999 + t2222 * t2000 + t2227 * t2013 - t2228 * t2014, t1999 * t2221 + t2000 * t2220 + t2013 * t2225 - t2014 * t2226, 0; 0, t2222 * t2004 - t2223 * t2005 + t2227 * t2021 - t2102 * t2228, t2004 * t2220 - t2005 * t2221 + t2021 * t2225 - t2102 * t2226, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:09
	% EndTime: 2020-04-18 09:52:12
	% DurationCPUTime: 0.90s
	% Computational Cost: add. (6287->76), mult. (10430->151), div. (200->5), fcn. (6422->10), ass. (0->90)
	t449 = pkin(5) ^ 2;
	t503 = sin(qJ(2));
	t504 = sin(pkin(16));
	t505 = cos(qJ(2));
	t506 = cos(pkin(16));
	t439 = t503 * t506 + t505 * t504;
	t436 = t439 * qJD(2);
	t450 = pkin(1) ^ 2;
	t482 = t450 * t439 * t436;
	t521 = -0.4e1 * t449 * t482;
	t438 = t503 * t504 - t505 * t506;
	t502 = pkin(1) * t438;
	t488 = -0.2e1 * pkin(5) * t502 + t450;
	t433 = t449 + t488;
	t431 = 0.1e1 / t433 ^ 2;
	t437 = t438 * qJD(2);
	t448 = 0.1e1 / pkin(6);
	t512 = pkin(1) * pkin(5);
	t484 = t431 * t512;
	t478 = t448 * t484;
	t430 = 0.1e1 / t433;
	t493 = t430 * t448;
	t520 = t431 * t493 * t521 + t437 * t478;
	t483 = t436 * t512;
	t511 = -pkin(6) - pkin(2);
	t427 = (pkin(5) - t511) * (pkin(5) + t511) + t488;
	t510 = -pkin(6) + pkin(2);
	t428 = (pkin(5) - t510) * (pkin(5) + t510) + t488;
	t489 = t427 + t428;
	t422 = t489 * t483;
	t494 = t428 * t427;
	t451 = sqrt(-t494);
	t425 = 0.1e1 / t451;
	t519 = t422 * t425;
	t475 = t489 * t512;
	t423 = t439 * t475;
	t518 = t425 * t423;
	t446 = cos(pkin(15));
	t517 = t520 * t446;
	t444 = sin(pkin(15));
	t516 = t520 * t444;
	t501 = pkin(1) * t439;
	t417 = t501 * t519;
	t429 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t433;
	t434 = -pkin(5) + t502;
	t485 = 0.2e1 * t434 * pkin(5);
	t481 = -t429 + t485;
	t491 = t437 * t451;
	t409 = -t417 + (t481 * t436 + t491) * pkin(1);
	t477 = t429 + t518;
	t411 = (t438 * t451 + (-t477 + t485) * t439) * pkin(1);
	t469 = t439 * t478;
	t471 = t436 * t478;
	t515 = t409 * t469 + t411 * t471;
	t476 = pkin(5) * t482;
	t492 = t436 * t451;
	t495 = t425 * t434;
	t410 = -t422 * t495 - 0.2e1 * t476 + (-t437 * t429 - t492) * pkin(1);
	t490 = t439 * t451;
	t500 = t450 * pkin(5);
	t412 = -t423 * t495 - 0.2e1 * t439 ^ 2 * t500 + (-t438 * t429 - t490) * pkin(1);
	t513 = -t425 * (-t437 * t475 + t521) - 0.1e1 / t494 * t422 * t518;
	t514 = (-t417 + t513 * t434 + (0.2e1 * t436 * t438 + 0.4e1 * t437 * t439) * t500 + (-t477 * t436 + t491) * pkin(1)) * t493 / 0.2e1 + t412 * t471 + t410 * t469;
	t509 = t444 / 0.2e1;
	t508 = -t446 / 0.2e1;
	t507 = t446 / 0.2e1;
	t420 = -pkin(1) * t490 - t434 * t429;
	t499 = t420 * t444;
	t498 = t420 * t446;
	t421 = t429 * t501 - t434 * t451;
	t497 = t421 * t444;
	t496 = t421 * t446;
	t443 = sin(qJ(1));
	t487 = qJD(1) * t443;
	t445 = cos(qJ(1));
	t486 = qJD(1) * t445;
	t480 = t431 * t483;
	t479 = t439 * t484;
	t467 = t497 + t498;
	t466 = -t496 + t499;
	t455 = (0.4e1 * t476 + (t438 * t519 + t492 + t513 * t439 - (t481 - t518) * t437) * pkin(1)) * t493;
	t414 = (-t496 / 0.2e1 + t499 / 0.2e1) * t493;
	t413 = (t498 / 0.2e1 + t497 / 0.2e1) * t493;
	t406 = ((t411 * t507 + t412 * t509) * t430 + t467 * t479) * t448;
	t405 = ((t411 * t509 + t412 * t508) * t430 + t466 * t479) * t448;
	t402 = ((t409 * t509 + t410 * t508) * t430 + t466 * t480) * t448;
	t401 = ((t409 * t507 + t410 * t509) * t430 + t467 * t480) * t448;
	t400 = -t517 * t421 + t516 * t420 + t514 * t446 + (-t455 / 0.2e1 - t515) * t444;
	t399 = -t517 * t420 - t516 * t421 + t514 * t444 + t515 * t446 + t455 * t507;
	t1 = [-t443 * t401 - t413 * t486, t445 * t399 - t406 * t487, 0, 0; t445 * t401 - t413 * t487, t443 * t399 + t406 * t486, 0, 0; 0, t400, 0, 0; -t443 * t402 - t414 * t486, -t445 * t400 - t405 * t487, 0, 0; t445 * t402 - t414 * t487, -t443 * t400 + t405 * t486, 0, 0; 0, t399, 0, 0; -t487, 0, 0, 0; t486, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:52:15
	% EndTime: 2020-04-18 09:52:20
	% DurationCPUTime: 2.68s
	% Computational Cost: add. (18651->103), mult. (30650->184), div. (704->5), fcn. (19042->10), ass. (0->110)
	t474 = sin(qJ(2));
	t476 = cos(qJ(2));
	t569 = sin(pkin(16));
	t570 = cos(pkin(16));
	t534 = -t474 * t569 + t476 * t570;
	t531 = pkin(5) * t534;
	t529 = (0.2e1 * t531 + pkin(1)) * pkin(1);
	t577 = pkin(5) ^ 2;
	t468 = t529 + t577;
	t576 = 0.1e1 / t468;
	t593 = t576 / 0.2e1;
	t572 = -pkin(6) - pkin(2);
	t522 = (pkin(5) - t572) * (pkin(5) + t572) + t529;
	t571 = -pkin(6) + pkin(2);
	t523 = (pkin(5) - t571) * (pkin(5) + t571) + t529;
	t500 = t523 * t522;
	t478 = sqrt(-t500);
	t471 = t474 * t570 + t476 * t569;
	t479 = pkin(2) ^ 2;
	t526 = -pkin(6) ^ 2 + t468 + t479;
	t525 = pkin(5) * t526;
	t524 = t471 * t525;
	t530 = t531 + pkin(1);
	t578 = 0.1e1 / pkin(2);
	t512 = t578 * (t530 * t478 + t524);
	t509 = t512 * t593;
	t566 = pkin(5) * t478;
	t546 = t471 * t566;
	t511 = t578 * (t530 * t526 - t546);
	t510 = t576 * t511;
	t561 = cos(pkin(19));
	t560 = sin(pkin(19));
	t595 = t560 / 0.2e1;
	t462 = t561 * t509 + t510 * t595;
	t573 = pkin(1) * pkin(5);
	t521 = ((pkin(5) + pkin(6)) * (pkin(5) - pkin(6)) + t529) * t573;
	t562 = t471 * pkin(1);
	t549 = pkin(5) * t562;
	t518 = t471 * t521 - t479 * t549;
	t575 = 0.1e1 / t478;
	t547 = 0.2e1 * t575;
	t516 = t518 * t547;
	t514 = pkin(5) * t516;
	t598 = -0.2e1 * t530 * t573;
	t584 = -t514 + t598;
	t489 = t578 * (t584 * t471 - t534 * t566 - t524);
	t487 = t576 * t489;
	t599 = -0.2e1 * pkin(1);
	t490 = t578 * (t577 * t471 ^ 2 * t599 + t530 * t516 + t534 * t525 - t546);
	t488 = t490 * t593;
	t467 = 0.1e1 / t468 ^ 2;
	t590 = t467 * t573;
	t507 = t511 * t590;
	t508 = t512 * t590;
	t586 = t561 * t507 - t560 * t508;
	t594 = -t561 / 0.2e1;
	t553 = -t586 * t471 + t487 * t594 + t560 * t488 - t462;
	t539 = t553 * t476;
	t585 = t560 * t507 + t561 * t508;
	t453 = t585 * t471 + t487 * t595 + t561 * t488;
	t461 = t560 * t509 + t510 * t594;
	t554 = t453 + t461;
	t532 = -t554 * t474 + t539;
	t469 = t471 * qJD(2);
	t565 = t469 * pkin(5);
	t550 = pkin(1) * t565;
	t517 = t469 * t521 - t479 * t550;
	t515 = t517 * t547;
	t470 = t534 * qJD(2);
	t519 = t470 * t525 - t478 * t565;
	t564 = t469 * t577;
	t545 = t471 * t564;
	t541 = pkin(1) * t545;
	t496 = t578 * (t530 * t515 + t519 - 0.2e1 * t541);
	t493 = t496 * t593;
	t513 = pkin(5) * t515;
	t563 = t470 * pkin(5);
	t498 = -t469 * t525 - t471 * t513 - t478 * t563;
	t495 = t578 * (t469 * t598 + t498);
	t494 = t576 * t495;
	t450 = -t586 * t469 + t560 * t493 + t494 * t594;
	t540 = pkin(1) ^ 2 * t545;
	t587 = (0.4e1 / t500 * t518 * t517 - 0.4e1 * t540 + (t522 + t523) * pkin(1) * t563) * t575;
	t591 = t467 * t550;
	t592 = t467 * t549;
	t596 = t578 * t593;
	t597 = 0.4e1 * t540 * t576 * t467;
	t581 = (-t587 * pkin(5) * t471 + t584 * t470 - t534 * t513 - t519 + 0.4e1 * t541) * t596 + t489 * t591 + t495 * t592 + t511 * t597;
	t582 = (-0.4e1 * t577 * t470 * t562 + t534 * t564 * t599 - t469 * t514 + t587 * t530 + t498) * t596 + t490 * t591 + t496 * t592 + t512 * t597;
	t555 = t585 * t470 + t581 * t560 + t582 * t561 + t450;
	t449 = t585 * t469 + t561 * t493 + t494 * t595;
	t556 = -t586 * t470 + t582 * t560 - t581 * t561 - t449;
	t600 = t532 * qJD(2) + t556 * t474 + t555 * t476;
	t537 = t461 * t476 - t462 * t474;
	t583 = t537 * qJD(2) + t449 * t476 + t450 * t474;
	t580 = t553 * t474 + t554 * t476;
	t559 = t449 * t474;
	t558 = t461 * t474;
	t557 = t462 * t476;
	t475 = sin(qJ(1));
	t552 = qJD(1) * t475;
	t477 = cos(qJ(1));
	t551 = qJD(1) * t477;
	t544 = t475 * t558;
	t536 = t557 + t558;
	t535 = qJD(1) * t537;
	t520 = -qJD(2) * t580 - t555 * t474 + t556 * t476;
	t460 = qJD(1) * t544;
	t459 = qJD(2) * t544;
	t1 = [t459 - t477 * t535 + (t559 + (qJD(2) * t462 - t450) * t476) * t475, t460 + (t453 * t474 - t539) * t552 + t520 * t477, 0, 0; -t475 * t535 + (-t536 * qJD(2) + t450 * t476 - t559) * t477, t520 * t475 + t532 * t551, 0, 0; 0, t600, 0, 0; t583 * t475 + t536 * t551, -t600 * t477 + t580 * t552, 0, 0; -t583 * t477 + t552 * t557 + t460, t459 - t580 * t551 + ((qJD(2) * t453 - t556) * t474 + (-t553 * qJD(2) - t555) * t476) * t475, 0, 0; 0, t520, 0, 0; -t552, 0, 0, 0; t551, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiRD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-18 09:58:08
	% EndTime: 2020-04-18 10:01:47
	% DurationCPUTime: 184.59s
	% Computational Cost: add. (1618385->346), mult. (2566002->590), div. (84432->10), fcn. (1597770->18), ass. (0->314)
	t1317 = sin(qJ(3));
	t1319 = cos(qJ(3));
	t1566 = sin(qJ(2));
	t1567 = sin(pkin(16));
	t1568 = cos(qJ(2));
	t1569 = cos(pkin(16));
	t1312 = t1566 * t1569 + t1568 * t1567;
	t1488 = t1566 * t1567 - t1568 * t1569;
	t1482 = pkin(5) * t1488;
	t1477 = (-0.2e1 * t1482 + pkin(1)) * pkin(1);
	t1582 = pkin(5) ^ 2;
	t1309 = t1477 + t1582;
	t1324 = pkin(2) ^ 2;
	t1612 = -pkin(6) ^ 2 + t1324;
	t1469 = t1309 + t1612;
	t1478 = -t1482 + pkin(1);
	t1572 = pkin(5) + pkin(6);
	t1573 = pkin(5) - pkin(6);
	t1464 = (pkin(2) + t1572) * (-pkin(2) + t1573) + t1477;
	t1465 = (-pkin(2) + t1572) * (pkin(2) + t1573) + t1477;
	t1430 = t1465 * t1464;
	t1323 = sqrt(-t1430);
	t1556 = pkin(5) * t1323;
	t1585 = 0.1e1 / pkin(2);
	t1454 = t1585 * (-t1312 * t1556 + t1478 * t1469);
	t1578 = 0.1e1 / t1309;
	t1452 = t1578 * t1454;
	t1447 = t1452 / 0.2e1;
	t1468 = pkin(5) * t1469;
	t1455 = t1585 * (t1312 * t1468 + t1478 * t1323);
	t1453 = t1578 * t1455;
	t1449 = t1453 / 0.2e1;
	t1417 = t1317 * t1447 + t1319 * t1449;
	t1546 = pkin(18) + pkin(19);
	t1523 = sin(t1546);
	t1414 = t1523 * t1417;
	t1448 = -t1452 / 0.2e1;
	t1416 = t1317 * t1449 + t1319 * t1448;
	t1524 = cos(t1546);
	t1410 = -t1524 * t1416 - t1414;
	t1580 = -2 * pkin(3);
	t1406 = (t1410 * t1580 + pkin(4)) * pkin(4);
	t1571 = (-pkin(8) - pkin(10));
	t1402 = ((pkin(3) - t1571) * (pkin(3) + t1571)) + t1406;
	t1570 = (-pkin(8) + pkin(10));
	t1403 = ((pkin(3) - t1570) * (pkin(3) + t1570)) + t1406;
	t1382 = t1403 * t1402;
	t1322 = sqrt(-t1382);
	t1575 = pkin(1) * pkin(5);
	t1450 = t1454 * t1575;
	t1307 = 0.1e1 / t1309 ^ 2;
	t1310 = t1312 * qJD(2);
	t1616 = t1307 * t1310;
	t1435 = t1450 * t1616;
	t1479 = 0.3e1 * pkin(1) - 0.4e1 * t1482;
	t1462 = (t1572 * t1573 + t1477) * t1575;
	t1559 = pkin(5) * t1310;
	t1544 = pkin(1) * t1559;
	t1303 = 0.4e1 * t1310 * t1462 - 0.4e1 * t1324 * t1544;
	t1311 = t1488 * qJD(2);
	t1305 = 0.1e1 / t1323;
	t1557 = pkin(5) * t1312;
	t1518 = -t1305 * t1557 / 0.2e1;
	t1499 = t1303 * t1518 + t1311 * t1556;
	t1520 = t1582 + t1612;
	t1461 = t1585 * (-t1479 * t1544 - t1520 * t1559 + t1499);
	t1460 = t1578 * t1461;
	t1459 = -t1460 / 0.2e1;
	t1463 = t1311 * t1468;
	t1565 = t1305 / 0.2e1;
	t1476 = t1478 * t1565;
	t1542 = pkin(1) * t1557;
	t1511 = t1323 + 0.2e1 * t1542;
	t1421 = t1585 * (t1303 * t1476 - t1511 * t1559 - t1463);
	t1420 = t1578 * t1421 / 0.2e1;
	t1451 = t1455 * t1575;
	t1602 = t1451 * t1616 + t1420;
	t1393 = (-t1435 + t1459) * t1319 + t1602 * t1317 + t1417 * qJD(3);
	t1458 = t1460 / 0.2e1;
	t1545 = -t1317 * t1453 / 0.2e1 + t1319 * t1447;
	t1394 = t1602 * t1319 + (t1435 + t1458) * t1317 + t1545 * qJD(3);
	t1588 = t1524 * t1393 + t1523 * t1394;
	t1636 = pkin(4) * t1588;
	t1638 = t1322 * t1636;
	t1269 = pkin(4) * t1410;
	t1583 = pkin(4) ^ 2;
	t1268 = t1583 + (-0.2e1 * t1269 + pkin(3)) * pkin(3);
	t1325 = pkin(8) ^ 2;
	t1405 = -pkin(10) ^ 2 + t1268 + t1325;
	t1637 = t1405 * t1636;
	t1321 = 0.1e1 / pkin(8);
	t1375 = pkin(3) * t1636;
	t1577 = 0.1e1 / t1322;
	t1634 = t1402 + t1403;
	t1345 = -0.2e1 * t1577 * t1634 * t1375;
	t1376 = t1583 * t1588;
	t1374 = pkin(3) * t1376;
	t1372 = 0.2e1 * t1374;
	t1587 = t1523 * t1393 - t1524 * t1394;
	t1377 = pkin(4) * t1587;
	t1415 = t1524 * t1417;
	t1409 = t1523 * t1416 - t1415;
	t1554 = t1269 - pkin(3);
	t1621 = -t1554 / 0.2e1;
	t1340 = t1321 * (t1345 * t1621 + t1409 * t1372 + t1405 * t1377 + t1638);
	t1404 = pkin(4) * t1405;
	t1388 = -t1554 * t1322 + t1409 * t1404;
	t1387 = t1321 * t1388;
	t1355 = t1588 * t1387;
	t1267 = 0.1e1 / t1268 ^ 2;
	t1579 = 0.1e1 / t1268;
	t1576 = t1579 * t1267;
	t1584 = pkin(3) ^ 2;
	t1574 = pkin(3) * pkin(4);
	t1617 = t1267 * t1574;
	t1635 = 0.4e1 * t1584 * t1583 * t1576 * t1355 - t1340 * t1617;
	t1562 = sin(pkin(19));
	t1563 = cos(pkin(19));
	t1633 = t1562 * t1450 + t1563 * t1451;
	t1632 = t1563 * t1450 - t1562 * t1451;
	t1631 = t1317 * t1451 - t1319 * t1450;
	t1630 = t1317 * t1450 + t1319 * t1451;
	t1629 = 0.1e1 / t1382 * t1345;
	t1304 = 0.4e1 * t1312 * t1462 - 0.4e1 * t1324 * t1542;
	t1549 = t1305 * t1304;
	t1528 = -t1549 / 0.2e1;
	t1601 = t1633 * t1307;
	t1257 = t1601 * t1310 + t1563 * t1420 + t1562 * t1458;
	t1600 = t1632 * t1307;
	t1258 = -t1600 * t1310 + t1562 * t1420 + t1563 * t1459;
	t1627 = -t1566 * t1257 + t1568 * t1258;
	t1281 = (t1488 * t1323 + (t1528 - t1520) * t1312) * pkin(5) - t1479 * t1542;
	t1282 = t1304 * t1476 - t1488 * t1468 - t1511 * t1557;
	t1561 = t1585 * t1578;
	t1538 = t1561 / 0.2e1;
	t1495 = t1562 * t1538;
	t1519 = t1563 * t1561;
	t1496 = t1519 / 0.2e1;
	t1615 = t1307 * t1312;
	t1263 = t1281 * t1495 + t1282 * t1496 + t1633 * t1615;
	t1497 = -t1519 / 0.2e1;
	t1264 = t1281 * t1497 + t1282 * t1495 - t1632 * t1615;
	t1294 = t1562 * t1447 + t1563 * t1449;
	t1535 = t1568 * t1294;
	t1472 = -t1566 * t1263 + t1568 * t1264 - t1535;
	t1293 = t1563 * t1448 + t1562 * t1449;
	t1532 = t1566 * t1293;
	t1252 = -t1532 + t1472;
	t1555 = t1312 * t1582;
	t1521 = pkin(1) ^ 2 * t1310 * t1555;
	t1558 = pkin(5) * t1311;
	t1543 = pkin(1) * t1558;
	t1302 = -0.8e1 * t1521 - 0.2e1 * (t1464 + t1465) * t1543;
	t1529 = t1303 / t1430 * t1549;
	t1537 = -0.4e1 * pkin(1) * t1555;
	t1261 = t1559 * t1528 + t1478 * t1529 / 0.4e1 + t1302 * t1476 - t1311 * t1537 + t1499 - (-0.2e1 * t1582 * t1488 * pkin(1) + t1468) * t1310;
	t1262 = t1303 * t1565 * t1482 - t1528 * t1558 - t1529 * t1557 / 0.4e1 + t1302 * t1518 + t1463 + 0.2e1 * t1478 * t1543 - (-t1556 + t1537) * t1310;
	t1614 = t1578 * t1307 * t1521;
	t1425 = t1454 * t1614;
	t1422 = -0.4e1 * t1425;
	t1457 = t1461 * t1542;
	t1456 = t1307 * t1457;
	t1530 = t1585 * t1544;
	t1505 = t1307 * t1530;
	t1486 = t1562 * t1505;
	t1487 = t1563 * t1505;
	t1419 = t1421 * t1542;
	t1424 = 0.4e1 * t1455 * t1614;
	t1604 = t1307 * t1419 + t1424;
	t1235 = t1261 * t1495 + t1262 * t1497 - t1281 * t1487 + t1282 * t1486 + (t1422 - t1456) * t1563 + t1604 * t1562 + t1600 * t1311;
	t1423 = 0.4e1 * t1425;
	t1236 = t1261 * t1496 + t1262 * t1495 + t1281 * t1486 + t1282 * t1487 + t1604 * t1563 + (t1423 + t1456) * t1562 - t1601 * t1311;
	t1466 = -t1566 * t1235 - t1568 * t1236 - t1627;
	t1626 = -t1252 * qJD(2) + t1466;
	t1625 = 0.2e1 * t1554;
	t1316 = sin(pkin(18));
	t1624 = t1316 / 0.2e1;
	t1408 = pkin(4) * t1409;
	t1623 = -t1408 / 0.2e1;
	t1540 = 0.4e1 * t1577;
	t1622 = -t1540 / 0.2e1;
	t1564 = cos(pkin(18));
	t1620 = -t1564 / 0.2e1;
	t1618 = t1267 * t1375;
	t1275 = t1532 + t1535;
	t1245 = -t1275 * qJD(2) + t1627;
	t1292 = t1568 * t1293;
	t1531 = t1566 * t1294;
	t1473 = t1568 * t1263 + t1566 * t1264 - t1531;
	t1613 = t1292 + t1473;
	t1597 = -t1281 * t1530 - t1457;
	t1599 = t1631 * t1312;
	t1603 = t1282 * t1530 + t1419;
	t1389 = t1599 * qJD(3) + t1630 * t1311 + t1597 * t1317 - t1603 * t1319;
	t1598 = t1630 * t1312;
	t1390 = t1598 * qJD(3) - t1631 * t1311 + t1603 * t1317 + t1597 * t1319;
	t1539 = -t1561 / 0.2e1;
	t1516 = t1319 * t1539;
	t1517 = t1317 * t1538;
	t1515 = t1319 * t1538;
	t1594 = t1281 * t1517 + t1282 * t1515;
	t1411 = t1594 * qJD(3) + t1261 * t1517 + t1262 * t1516 + t1317 * t1424 + t1319 * t1422;
	t1412 = t1261 * t1515 + t1262 * t1517 + t1317 * t1423 + t1319 * t1424 + (t1282 * t1317 * t1539 + t1281 * t1515) * qJD(3);
	t1221 = -t1524 * t1411 - t1523 * t1412 + (t1523 * t1389 - t1524 * t1390) * t1307;
	t1265 = t1598 * t1307 + t1594;
	t1266 = t1281 * t1516 + t1282 * t1517 + t1599 * t1307;
	t1253 = -t1523 * t1265 - t1524 * t1266;
	t1356 = pkin(4) * (t1523 * t1411 - t1524 * t1412 + (t1524 * t1389 + t1523 * t1390) * t1307);
	t1606 = ((pkin(3) + pkin(10)) * (pkin(3) - pkin(10)) + t1406 - t1325) * t1574;
	t1398 = t1606 * t1253;
	t1396 = t1398 * t1540;
	t1475 = -t1524 * t1265 + t1523 * t1266;
	t1553 = t1583 * t1580;
	t1560 = pkin(4) * t1322;
	t1592 = t1409 * t1553 - t1560;
	t1360 = t1321 * (t1592 * t1253 + t1396 * t1621 + t1475 * t1404);
	t1367 = t1636 * t1622;
	t1547 = -t1579 / 0.2e1;
	t1526 = t1321 * t1547;
	t1373 = t1584 * t1376;
	t1369 = 0.4e1 * t1373;
	t1607 = t1634 * t1574;
	t1590 = -t1398 * t1629 - (t1607 * t1221 + t1253 * t1369) * t1577;
	t1343 = -pkin(4) * t1345 / 0.2e1;
	t1608 = t1553 * t1587 + t1343;
	t1611 = (t1592 * t1221 + t1608 * t1253 + t1405 * t1356 - t1398 * t1367 + t1475 * t1372 + t1590 * t1554) * t1526 + t1360 * t1618;
	t1274 = -t1523 * t1545 - t1415;
	t1397 = t1606 * t1274;
	t1395 = t1397 * t1540;
	t1413 = -t1524 * t1545 + t1414;
	t1358 = t1321 * (t1592 * t1274 + t1395 * t1621 + t1413 * t1404);
	t1591 = -t1397 * t1629 - (t1274 * t1369 + t1587 * t1607) * t1577;
	t1610 = (t1608 * t1274 - t1397 * t1367 + t1413 * t1372 + t1591 * t1554 + t1587 * t1592 + t1637) * t1526 + t1358 * t1618;
	t1609 = t1340 * t1547 + t1355 * t1617;
	t1605 = t1574 * t1625 - t1404;
	t1243 = -t1322 * t1408 - t1554 * t1405;
	t1385 = t1387 * t1617;
	t1384 = t1316 * t1385;
	t1522 = t1321 * t1617;
	t1491 = t1564 * t1522;
	t1596 = -t1243 * t1491 - t1384;
	t1498 = t1316 * t1522;
	t1595 = t1243 * t1498 - t1564 * t1385;
	t1593 = -t1531 + t1292;
	t1364 = t1243 * t1321 * t1576 * t1373;
	t1589 = t1635 * t1316 + 0.4e1 * t1564 * t1364;
	t1533 = t1566 * t1258;
	t1536 = t1568 * t1257;
	t1244 = qJD(2) * t1593 + t1533 + t1536;
	t1208 = -t1322 * t1377 + t1409 * t1343 - t1375 * t1625 + t1637;
	t1586 = t1208 * t1498 - 0.4e1 * t1316 * t1364 + t1635 * t1564;
	t1318 = sin(qJ(1));
	t1551 = qJD(1) * t1318;
	t1320 = cos(qJ(1));
	t1550 = qJD(1) * t1320;
	t1548 = t1321 * t1579;
	t1527 = t1579 * t1624;
	t1508 = t1318 * t1292;
	t1509 = t1566 * t1550;
	t1525 = -qJD(2) * t1508 - t1293 * t1509 - t1318 * t1533;
	t1510 = t1568 * t1550;
	t1507 = t1318 * t1535;
	t1290 = t1318 * t1532;
	t1506 = t1318 * t1531;
	t1501 = t1564 * t1547;
	t1500 = t1321 * t1527;
	t1492 = t1321 * t1501;
	t1484 = t1253 * t1491;
	t1483 = t1274 * t1491;
	t1474 = t1568 * t1235 - t1566 * t1236 - t1536;
	t1250 = t1613 * t1320;
	t1219 = -qJD(2) * t1613 + t1474 - t1533;
	t1386 = t1388 * t1547;
	t1371 = -0.4e1 * t1374;
	t1368 = t1321 * t1618;
	t1366 = t1377 * t1622;
	t1365 = t1316 * t1368;
	t1363 = t1564 * t1368;
	t1359 = t1360 * t1547;
	t1357 = t1358 * t1547;
	t1335 = (t1274 * t1371 + t1413 * t1343 + t1397 * t1366 + t1591 * t1408 + t1587 * t1605 - t1638) * t1548;
	t1334 = (t1605 * t1221 + t1253 * t1371 - t1322 * t1356 + t1475 * t1343 + t1398 * t1366 + t1590 * t1408) * t1548;
	t1287 = qJD(1) * t1290;
	t1283 = qJD(2) * t1290;
	t1273 = t1275 * t1320;
	t1272 = t1593 * t1320;
	t1271 = -t1507 - t1290;
	t1270 = t1508 - t1506;
	t1249 = t1252 * t1320;
	t1248 = t1613 * t1318;
	t1247 = t1472 * t1318 - t1290;
	t1242 = qJD(2) * t1506 - t1294 * t1510 - t1318 * t1536 + t1525;
	t1241 = -qJD(2) * t1507 + t1293 * t1510 - t1294 * t1509 + t1627 * t1318 - t1283;
	t1240 = qJD(1) * t1507 - t1244 * t1320 + t1287;
	t1239 = t1245 * t1320 - t1551 * t1593;
	t1228 = (t1243 * t1501 + t1316 * t1386) * t1321;
	t1227 = (t1243 * t1527 + t1564 * t1386) * t1321;
	t1224 = t1605 * t1274 + t1395 * t1623 - t1413 * t1560;
	t1216 = t1605 * t1253 + t1396 * t1623 - t1475 * t1560;
	t1215 = t1283 - qJD(1) * t1250 + (-t1472 * qJD(2) + t1466) * t1318;
	t1214 = t1472 * t1550 + (-t1473 * qJD(2) + t1474) * t1318 + t1525;
	t1213 = t1626 * t1320 + t1613 * t1551;
	t1212 = t1219 * t1320 - t1472 * t1551 + t1287;
	t1203 = t1224 * t1492 - t1243 * t1483 - t1274 * t1384 + t1316 * t1357;
	t1202 = t1224 * t1500 + t1595 * t1274 + t1564 * t1357;
	t1201 = t1216 * t1492 - t1243 * t1484 - t1253 * t1384 + t1316 * t1359;
	t1200 = t1216 * t1500 + t1595 * t1253 + t1564 * t1359;
	t1198 = t1208 * t1492 + t1243 * t1363 + t1609 * t1316;
	t1197 = t1208 * t1500 - t1243 * t1365 + t1609 * t1564;
	t1193 = -t1208 * t1483 + t1224 * t1363 + t1589 * t1274 + t1610 * t1316 + t1335 * t1620 + t1587 * t1596;
	t1192 = -t1224 * t1365 + t1586 * t1274 + t1335 * t1624 + t1610 * t1564 + t1587 * t1595;
	t1191 = -t1208 * t1484 + t1216 * t1363 + t1596 * t1221 + t1589 * t1253 + t1611 * t1316 + t1334 * t1620;
	t1190 = -t1216 * t1365 + t1595 * t1221 + t1586 * t1253 + t1334 * t1624 + t1611 * t1564;
	t1 = [-t1197 * t1271 - t1198 * t1270 - t1227 * t1242 - t1228 * t1241, -t1190 * t1273 + t1191 * t1272 - t1197 * t1250 + t1198 * t1249 + t1200 * t1240 + t1201 * t1239 + t1212 * t1228 + t1213 * t1227, -t1192 * t1273 + t1193 * t1272 + t1202 * t1240 + t1203 * t1239, 0; -t1197 * t1273 + t1198 * t1272 + t1227 * t1240 + t1228 * t1239, t1190 * t1271 + t1191 * t1270 - t1197 * t1248 + t1198 * t1247 + t1200 * t1242 + t1201 * t1241 + t1214 * t1228 + t1215 * t1227, t1192 * t1271 + t1193 * t1270 + t1202 * t1242 + t1203 * t1241, 0; 0, t1190 * t1593 + t1191 * t1275 + t1197 * t1252 + t1198 * t1613 + t1200 * t1245 + t1201 * t1244 + t1219 * t1227 - t1228 * t1626, t1192 * t1593 + t1193 * t1275 + t1202 * t1245 + t1203 * t1244, 0; t1197 * t1270 - t1198 * t1271 + t1227 * t1241 - t1228 * t1242, -t1190 * t1272 - t1191 * t1273 - t1197 * t1249 - t1198 * t1250 - t1200 * t1239 + t1201 * t1240 - t1212 * t1227 + t1213 * t1228, -t1192 * t1272 - t1193 * t1273 - t1202 * t1239 + t1203 * t1240, 0; -t1197 * t1272 - t1198 * t1273 - t1227 * t1239 + t1228 * t1240, -t1190 * t1270 + t1191 * t1271 - t1197 * t1247 - t1198 * t1248 - t1200 * t1241 + t1201 * t1242 - t1214 * t1227 + t1215 * t1228, -t1192 * t1270 + t1193 * t1271 - t1202 * t1241 + t1203 * t1242, 0; 0, -t1190 * t1275 + t1191 * t1593 - t1197 * t1613 + t1198 * t1252 - t1200 * t1244 + t1201 * t1245 + t1219 * t1228 + t1227 * t1626, -t1192 * t1275 + t1193 * t1593 - t1202 * t1244 + t1203 * t1245, 0; -t1551, 0, 0, 0; t1550, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
end