% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% palh3m1OL
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [10x1]
%   Generalized joint coordinates (joint angles)
% qJD [10x1]
%   Generalized joint velocities
% qJDD [10x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [16x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi410,phi78,phi79]';
%
% Output:
% f_new_reg [(3*9)x(9*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-20 17:16
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = palh3m1OL_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(10,1),zeros(10,1),zeros(10,1),zeros(3,1),zeros(16,1)}
assert(isreal(qJ) && all(size(qJ) == [10 1]), ...
  'palh3m1OL_invdynf_fixb_reg2_snew_vp: qJ has to be [10x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [10 1]), ...
  'palh3m1OL_invdynf_fixb_reg2_snew_vp: qJD has to be [10x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [10 1]), ...
  'palh3m1OL_invdynf_fixb_reg2_snew_vp: qJDD has to be [10x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh3m1OL_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [16 1]), ...
  'palh3m1OL_invdynf_fixb_reg2_snew_vp: pkin has to be [16x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-20 17:16:22
% EndTime: 2020-04-20 17:16:34
% DurationCPUTime: 10.05s
% Computational Cost: add. (29556->393), mult. (65692->555), div. (0->0), fcn. (52744->18), ass. (0->326)
t2470 = sin(qJ(3));
t2471 = sin(qJ(2));
t2478 = cos(qJ(3));
t2479 = cos(qJ(2));
t2407 = (-t2470 * t2479 - t2471 * t2478) * qJD(1);
t2453 = t2471 * qJDD(1);
t2517 = qJD(1) * t2479;
t2498 = qJD(2) * t2517;
t2420 = t2453 + t2498;
t2454 = t2479 * qJDD(1);
t2518 = qJD(1) * t2471;
t2499 = qJD(2) * t2518;
t2422 = t2454 - t2499;
t2352 = -t2407 * qJD(3) + t2470 * t2420 - t2478 * t2422;
t2460 = qJD(2) + qJD(3);
t2509 = t2460 * t2407;
t2332 = t2352 - t2509;
t2405 = t2470 * t2518 - t2478 * t2517;
t2469 = sin(qJ(4));
t2477 = cos(qJ(4));
t2364 = -t2477 * t2405 + t2469 * t2407;
t2363 = qJD(5) + t2364;
t2534 = qJD(5) + t2363;
t2401 = t2405 ^ 2;
t2457 = t2460 ^ 2;
t2368 = -t2401 - t2457;
t2466 = sin(qJ(7));
t2474 = cos(qJ(7));
t2403 = t2466 * t2518 - t2474 * t2517;
t2406 = (t2466 * t2479 + t2471 * t2474) * qJD(1);
t2465 = sin(pkin(15));
t2473 = cos(qJ(8));
t2520 = cos(pkin(15));
t2521 = sin(qJ(8));
t2411 = t2465 * t2473 - t2520 * t2521;
t2412 = -t2465 * t2521 - t2520 * t2473;
t2344 = -t2412 * t2403 - t2411 * t2406;
t2533 = t2344 ^ 2;
t2345 = -t2411 * t2403 + t2412 * t2406;
t2532 = t2345 ^ 2;
t2366 = t2469 * t2405 + t2477 * t2407;
t2452 = qJD(4) + t2460;
t2468 = sin(qJ(5));
t2476 = cos(qJ(5));
t2347 = t2468 * t2366 - t2476 * t2452;
t2531 = t2347 ^ 2;
t2349 = t2476 * t2366 + t2468 * t2452;
t2530 = t2349 ^ 2;
t2529 = t2363 ^ 2;
t2528 = t2364 ^ 2;
t2527 = t2366 ^ 2;
t2526 = t2403 ^ 2;
t2525 = t2406 ^ 2;
t2524 = t2407 ^ 2;
t2459 = qJD(2) + qJD(7);
t2451 = qJD(8) + t2459;
t2523 = t2451 ^ 2;
t2522 = t2452 ^ 2;
t2456 = t2459 ^ 2;
t2519 = qJD(1) * qJD(6);
t2516 = t2344 * t2345;
t2515 = t2349 * t2347;
t2514 = t2366 * t2364;
t2513 = t2405 * t2407;
t2512 = t2406 * t2403;
t2511 = t2451 * t2345;
t2510 = t2460 * t2405;
t2472 = sin(qJ(1));
t2480 = cos(qJ(1));
t2433 = t2472 * g(1) - t2480 * g(2);
t2413 = qJDD(1) * pkin(12) + t2433;
t2376 = t2413 + (t2422 - t2499) * pkin(1);
t2508 = t2472 * t2376;
t2507 = qJD(4) - t2452;
t2506 = qJD(5) - t2363;
t2505 = qJD(7) - t2459;
t2434 = -t2480 * g(1) - t2472 * g(2);
t2483 = qJD(1) ^ 2;
t2415 = -t2483 * pkin(12) + t2434;
t2392 = -t2479 * g(3) - t2471 * t2415;
t2444 = t2479 * t2483 * t2471;
t2431 = qJDD(2) + t2444;
t2378 = t2431 * pkin(1) + t2392;
t2394 = -t2471 * g(3) + t2479 * t2415;
t2464 = t2479 ^ 2;
t2482 = qJD(2) ^ 2;
t2440 = -t2464 * t2483 - t2482;
t2379 = t2440 * pkin(1) + t2394;
t2328 = -t2470 * t2378 - t2478 * t2379;
t2315 = t2368 * pkin(4) + t2328;
t2326 = -t2478 * t2378 + t2470 * t2379;
t2500 = qJDD(2) + qJDD(3);
t2371 = t2500 + t2513;
t2484 = pkin(4) * t2371 + t2326;
t2273 = t2477 * t2315 + t2469 * t2484;
t2327 = t2466 * t2378 + t2474 * t2379;
t2467 = sin(qJ(6));
t2461 = t2467 ^ 2;
t2475 = cos(qJ(6));
t2463 = t2475 ^ 2;
t2504 = t2461 + t2463;
t2462 = t2471 ^ 2;
t2503 = t2462 + t2464;
t2502 = t2467 * qJDD(1);
t2501 = t2475 * qJDD(1);
t2458 = qJDD(2) + qJDD(7);
t2497 = -qJDD(8) - t2458;
t2496 = qJDD(4) + t2500;
t2487 = -t2405 * qJD(3) + t2478 * t2420 + t2470 * t2422;
t2490 = -t2469 * t2352 + t2477 * t2487;
t2287 = -t2364 * qJD(4) - t2490;
t2495 = t2452 * t2364 - t2287;
t2494 = -t2468 * t2287 + t2476 * t2496;
t2272 = -t2469 * t2315 + t2477 * t2484;
t2493 = -t2477 * t2352 - t2469 * t2487;
t2489 = -t2474 * t2420 - t2466 * t2422;
t2353 = -t2403 * qJD(7) - t2489;
t2333 = -t2459 * t2403 + t2353;
t2325 = t2474 * t2378 - t2466 * t2379;
t2492 = t2466 * t2420 - t2474 * t2422;
t2351 = -t2406 * qJD(7) - t2492;
t2491 = -t2411 * t2351 - t2412 * t2353;
t2488 = -t2345 * qJD(8) + t2412 * t2351 - t2411 * t2353;
t2486 = -t2366 * qJD(4) - qJDD(5) - t2493;
t2274 = (qJD(4) + t2452) * t2366 + t2493;
t2485 = -t2476 * t2287 - t2468 * t2496;
t2312 = t2332 * pkin(4) + t2376;
t2481 = qJD(6) ^ 2;
t2442 = t2475 * t2483 * t2467;
t2439 = -t2463 * t2483 - t2481;
t2438 = -t2462 * t2483 - t2482;
t2437 = -t2461 * t2483 - t2481;
t2432 = -qJDD(2) + t2444;
t2430 = -qJDD(6) + t2442;
t2429 = qJDD(6) + t2442;
t2428 = t2503 * t2483;
t2427 = t2504 * t2483;
t2426 = -t2472 * qJDD(1) - t2480 * t2483;
t2425 = t2480 * qJDD(1) - t2472 * t2483;
t2424 = t2503 * qJDD(1);
t2423 = t2504 * qJDD(1);
t2421 = -0.2e1 * t2467 * t2519 + t2501;
t2419 = 0.2e1 * t2475 * t2519 + t2502;
t2418 = -t2453 - 0.2e1 * t2498;
t2417 = -t2454 + 0.2e1 * t2499;
t2416 = t2483 * pkin(6) + t2434;
t2414 = -qJDD(1) * pkin(6) + t2433;
t2393 = -t2467 * g(3) + t2475 * t2416;
t2391 = -t2475 * g(3) - t2467 * t2416;
t2389 = -t2457 - t2524;
t2388 = -t2456 - t2525;
t2387 = t2479 * t2432 - t2471 * t2438;
t2386 = -t2471 * t2431 + t2479 * t2440;
t2385 = t2475 * t2430 - t2467 * t2437;
t2384 = -t2467 * t2429 + t2475 * t2439;
t2383 = t2471 * t2432 + t2479 * t2438;
t2382 = t2479 * t2431 + t2471 * t2440;
t2381 = t2467 * t2430 + t2475 * t2437;
t2380 = t2475 * t2429 + t2467 * t2439;
t2373 = -t2500 + t2513;
t2372 = -t2458 - t2512;
t2370 = t2458 - t2512;
t2369 = t2480 * t2376;
t2367 = -t2456 - t2526;
t2362 = (t2520 * t2403 - t2406 * t2465) * pkin(3);
t2360 = -t2401 - t2524;
t2359 = -t2525 - t2526;
t2358 = -t2471 * t2392 + t2479 * t2394;
t2357 = -t2467 * t2391 + t2475 * t2393;
t2356 = t2479 * t2392 + t2471 * t2394;
t2355 = t2475 * t2391 + t2467 * t2393;
t2350 = -t2522 - t2527;
t2340 = -t2478 * t2373 + t2470 * t2389;
t2339 = t2474 * t2372 - t2466 * t2388;
t2338 = -t2470 * t2373 - t2478 * t2389;
t2337 = t2466 * t2372 + t2474 * t2388;
t2336 = t2487 + t2510;
t2335 = t2487 - t2510;
t2334 = t2505 * t2403 + t2489;
t2331 = t2352 + t2509;
t2330 = -t2505 * t2406 - t2492;
t2329 = (qJD(7) + t2459) * t2406 + t2492;
t2324 = -t2523 - t2532;
t2323 = -t2478 * t2368 + t2470 * t2371;
t2322 = t2474 * t2367 - t2466 * t2370;
t2321 = -t2470 * t2368 - t2478 * t2371;
t2320 = t2466 * t2367 + t2474 * t2370;
t2319 = t2364 * pkin(8) - t2366 * pkin(10);
t2318 = -t2496 - t2514;
t2317 = t2496 - t2514;
t2316 = -t2522 - t2528;
t2309 = -t2527 - t2528;
t2308 = t2497 + t2516;
t2307 = -t2497 + t2516;
t2306 = -t2523 - t2533;
t2305 = -t2529 - t2530;
t2304 = t2477 * t2318 - t2469 * t2350;
t2303 = t2469 * t2318 + t2477 * t2350;
t2302 = -t2403 * t2362 + (-t2520 * t2456 + t2458 * t2465) * pkin(3) + t2327;
t2301 = -t2406 * t2362 + (t2456 * t2465 + t2520 * t2458) * pkin(3) + t2325;
t2300 = -t2471 * t2338 + t2479 * t2340;
t2299 = -t2471 * t2337 + t2479 * t2339;
t2298 = t2479 * t2338 + t2471 * t2340;
t2297 = t2479 * t2337 + t2471 * t2339;
t2296 = -t2529 - t2531;
t2295 = -t2478 * t2331 + t2470 * t2336;
t2294 = t2474 * t2330 - t2466 * t2334;
t2293 = -t2470 * t2331 - t2478 * t2336;
t2292 = t2466 * t2330 + t2474 * t2334;
t2291 = t2470 * t2326 - t2478 * t2328;
t2290 = -t2466 * t2325 + t2474 * t2327;
t2289 = -t2478 * t2326 - t2470 * t2328;
t2288 = t2474 * t2325 + t2466 * t2327;
t2286 = -t2530 - t2531;
t2285 = -t2471 * t2321 + t2479 * t2323;
t2284 = -t2471 * t2320 + t2479 * t2322;
t2283 = t2479 * t2321 + t2471 * t2323;
t2282 = t2479 * t2320 + t2471 * t2322;
t2281 = t2477 * t2316 - t2469 * t2317;
t2280 = t2469 * t2316 + t2477 * t2317;
t2279 = -t2532 - t2533;
t2278 = t2376 + (t2333 * t2465 + (-t2406 * t2459 + t2351) * t2520) * pkin(3);
t2277 = t2507 * t2364 + t2490;
t2275 = -t2507 * t2366 - t2493;
t2271 = t2412 * t2308 - t2411 * t2324;
t2270 = t2411 * t2308 + t2412 * t2324;
t2269 = t2486 - t2515;
t2268 = -t2486 - t2515;
t2267 = (-qJD(8) + t2451) * t2344 + t2491;
t2266 = -t2491 + (qJD(8) + t2451) * t2344;
t2265 = t2488 + t2511;
t2264 = t2488 - t2511;
t2263 = t2412 * t2306 - t2411 * t2307;
t2262 = t2411 * t2306 + t2412 * t2307;
t2261 = t2470 * t2303 - t2478 * t2304;
t2260 = -t2478 * t2303 - t2470 * t2304;
t2259 = -t2471 * t2293 + t2479 * t2295;
t2258 = -t2471 * t2292 + t2479 * t2294;
t2257 = t2479 * t2293 + t2471 * t2295;
t2256 = t2479 * t2292 + t2471 * t2294;
t2255 = -t2471 * t2289 + t2479 * t2291;
t2254 = -t2471 * t2288 + t2479 * t2290;
t2253 = t2479 * t2289 + t2471 * t2291;
t2252 = t2479 * t2288 + t2471 * t2290;
t2251 = t2506 * t2347 + t2485;
t2250 = -t2534 * t2347 - t2485;
t2249 = -t2506 * t2349 + t2494;
t2248 = t2534 * t2349 - t2494;
t2247 = t2411 * t2301 + t2412 * t2302;
t2246 = t2412 * t2301 - t2411 * t2302;
t2245 = -t2522 * pkin(8) + t2496 * pkin(10) - t2364 * t2319 + t2273;
t2244 = -t2496 * pkin(8) - t2522 * pkin(10) + t2366 * t2319 - t2272;
t2243 = t2470 * t2280 - t2478 * t2281;
t2242 = -t2478 * t2280 - t2470 * t2281;
t2241 = t2477 * t2275 - t2469 * t2277;
t2240 = t2469 * t2275 + t2477 * t2277;
t2239 = t2476 * t2269 - t2468 * t2305;
t2238 = t2468 * t2269 + t2476 * t2305;
t2237 = -t2468 * t2268 + t2476 * t2296;
t2236 = t2476 * t2268 + t2468 * t2296;
t2235 = -t2469 * t2272 + t2477 * t2273;
t2234 = t2477 * t2272 + t2469 * t2273;
t2233 = -t2466 * t2270 + t2474 * t2271;
t2232 = t2474 * t2270 + t2466 * t2271;
t2231 = t2274 * pkin(8) + t2495 * pkin(10) - t2312;
t2230 = t2412 * t2265 - t2411 * t2267;
t2229 = t2411 * t2265 + t2412 * t2267;
t2228 = -t2466 * t2262 + t2474 * t2263;
t2227 = t2474 * t2262 + t2466 * t2263;
t2226 = -t2471 * t2260 + t2479 * t2261;
t2225 = t2479 * t2260 + t2471 * t2261;
t2224 = t2476 * t2249 - t2468 * t2251;
t2223 = t2468 * t2249 + t2476 * t2251;
t2222 = -t2411 * t2246 + t2412 * t2247;
t2221 = t2412 * t2246 + t2411 * t2247;
t2220 = t2477 * t2239 + t2469 * t2250;
t2219 = t2469 * t2239 - t2477 * t2250;
t2218 = t2477 * t2237 + t2469 * t2248;
t2217 = t2469 * t2237 - t2477 * t2248;
t2216 = -t2471 * t2242 + t2479 * t2243;
t2215 = t2479 * t2242 + t2471 * t2243;
t2214 = t2477 * t2224 + t2469 * t2286;
t2213 = t2469 * t2224 - t2477 * t2286;
t2212 = t2470 * t2240 - t2478 * t2241;
t2211 = -t2478 * t2240 - t2470 * t2241;
t2210 = t2468 * t2231 + t2476 * t2245;
t2209 = t2476 * t2231 - t2468 * t2245;
t2208 = t2470 * t2234 - t2478 * t2235;
t2207 = -t2478 * t2234 - t2470 * t2235;
t2206 = -t2471 * t2232 + t2479 * t2233;
t2205 = t2479 * t2232 + t2471 * t2233;
t2204 = -t2466 * t2229 + t2474 * t2230;
t2203 = t2474 * t2229 + t2466 * t2230;
t2202 = -t2471 * t2227 + t2479 * t2228;
t2201 = t2479 * t2227 + t2471 * t2228;
t2200 = -t2466 * t2221 + t2474 * t2222;
t2199 = t2474 * t2221 + t2466 * t2222;
t2198 = t2470 * t2219 - t2478 * t2220;
t2197 = -t2478 * t2219 - t2470 * t2220;
t2196 = t2470 * t2217 - t2478 * t2218;
t2195 = -t2478 * t2217 - t2470 * t2218;
t2194 = t2470 * t2213 - t2478 * t2214;
t2193 = -t2478 * t2213 - t2470 * t2214;
t2192 = -t2471 * t2211 + t2479 * t2212;
t2191 = t2479 * t2211 + t2471 * t2212;
t2190 = -t2468 * t2209 + t2476 * t2210;
t2189 = t2476 * t2209 + t2468 * t2210;
t2188 = -t2471 * t2207 + t2479 * t2208;
t2187 = t2479 * t2207 + t2471 * t2208;
t2186 = t2477 * t2190 + t2469 * t2244;
t2185 = t2469 * t2190 - t2477 * t2244;
t2184 = -t2471 * t2203 + t2479 * t2204;
t2183 = t2479 * t2203 + t2471 * t2204;
t2182 = -t2471 * t2199 + t2479 * t2200;
t2181 = t2479 * t2199 + t2471 * t2200;
t2180 = -t2471 * t2197 + t2479 * t2198;
t2179 = t2479 * t2197 + t2471 * t2198;
t2178 = -t2471 * t2195 + t2479 * t2196;
t2177 = t2479 * t2195 + t2471 * t2196;
t2176 = -t2471 * t2193 + t2479 * t2194;
t2175 = t2479 * t2193 + t2471 * t2194;
t2174 = t2470 * t2185 - t2478 * t2186;
t2173 = -t2478 * t2185 - t2470 * t2186;
t2172 = -t2471 * t2173 + t2479 * t2174;
t2171 = t2479 * t2173 + t2471 * t2174;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2426, -t2425, 0, -t2472 * t2433 + t2480 * t2434, 0, 0, 0, 0, 0, 0, t2480 * t2386 + t2472 * t2417, t2480 * t2387 - t2472 * t2418, t2480 * t2424 - t2472 * t2428, t2480 * t2358 - t2472 * t2413, 0, 0, 0, 0, 0, 0, t2480 * t2285 - t2472 * t2332, t2480 * t2300 - t2472 * t2335, t2480 * t2259 + t2472 * t2360, t2480 * t2255 - t2508, 0, 0, 0, 0, 0, 0, t2480 * t2216 + t2472 * t2274, t2480 * t2226 - t2472 * t2495, t2480 * t2192 + t2472 * t2309, t2480 * t2188 - t2472 * t2312, 0, 0, 0, 0, 0, 0, t2480 * t2178 + t2472 * t2236, t2480 * t2180 + t2472 * t2238, t2480 * t2176 + t2472 * t2223, t2480 * t2172 + t2472 * t2189, 0, 0, 0, 0, 0, 0, t2480 * t2384 - t2472 * t2421, t2480 * t2385 + t2472 * t2419, t2480 * t2423 - t2472 * t2427, t2480 * t2357 - t2472 * t2414, 0, 0, 0, 0, 0, 0, t2480 * t2284 + t2472 * t2329, t2480 * t2299 + t2472 * t2333, t2480 * t2258 + t2472 * t2359, t2480 * t2254 - t2508, 0, 0, 0, 0, 0, 0, t2480 * t2202 - t2472 * t2264, t2480 * t2206 + t2472 * t2266, t2480 * t2184 + t2472 * t2279, t2480 * t2182 - t2472 * t2278; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2425, t2426, 0, t2480 * t2433 + t2472 * t2434, 0, 0, 0, 0, 0, 0, t2472 * t2386 - t2480 * t2417, t2472 * t2387 + t2480 * t2418, t2472 * t2424 + t2480 * t2428, t2472 * t2358 + t2480 * t2413, 0, 0, 0, 0, 0, 0, t2472 * t2285 + t2480 * t2332, t2472 * t2300 + t2480 * t2335, t2472 * t2259 - t2480 * t2360, t2472 * t2255 + t2369, 0, 0, 0, 0, 0, 0, t2472 * t2216 - t2480 * t2274, t2472 * t2226 + t2480 * t2495, t2472 * t2192 - t2480 * t2309, t2472 * t2188 + t2480 * t2312, 0, 0, 0, 0, 0, 0, t2472 * t2178 - t2480 * t2236, t2472 * t2180 - t2480 * t2238, t2472 * t2176 - t2480 * t2223, t2472 * t2172 - t2480 * t2189, 0, 0, 0, 0, 0, 0, t2472 * t2384 + t2480 * t2421, t2472 * t2385 - t2480 * t2419, t2472 * t2423 + t2480 * t2427, t2472 * t2357 + t2480 * t2414, 0, 0, 0, 0, 0, 0, t2472 * t2284 - t2480 * t2329, t2472 * t2299 - t2480 * t2333, t2472 * t2258 - t2480 * t2359, t2472 * t2254 + t2369, 0, 0, 0, 0, 0, 0, t2472 * t2202 + t2480 * t2264, t2472 * t2206 - t2480 * t2266, t2472 * t2184 - t2480 * t2279, t2472 * t2182 + t2480 * t2278; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2382, t2383, 0, t2356, 0, 0, 0, 0, 0, 0, t2283, t2298, t2257, t2253, 0, 0, 0, 0, 0, 0, t2215, t2225, t2191, t2187, 0, 0, 0, 0, 0, 0, t2177, t2179, t2175, t2171, 0, 0, 0, 0, 0, 0, t2380, t2381, 0, t2355, 0, 0, 0, 0, 0, 0, t2282, t2297, t2256, t2252, 0, 0, 0, 0, 0, 0, t2201, t2205, t2183, t2181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2483, -qJDD(1), 0, t2434, 0, 0, 0, 0, 0, 0, t2386, t2387, t2424, t2358, 0, 0, 0, 0, 0, 0, t2285, t2300, t2259, t2255, 0, 0, 0, 0, 0, 0, t2216, t2226, t2192, t2188, 0, 0, 0, 0, 0, 0, t2178, t2180, t2176, t2172, 0, 0, 0, 0, 0, 0, t2384, t2385, t2423, t2357, 0, 0, 0, 0, 0, 0, t2284, t2299, t2258, t2254, 0, 0, 0, 0, 0, 0, t2202, t2206, t2184, t2182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2483, 0, t2433, 0, 0, 0, 0, 0, 0, -t2417, t2418, t2428, t2413, 0, 0, 0, 0, 0, 0, t2332, t2335, -t2360, t2376, 0, 0, 0, 0, 0, 0, -t2274, t2495, -t2309, t2312, 0, 0, 0, 0, 0, 0, -t2236, -t2238, -t2223, -t2189, 0, 0, 0, 0, 0, 0, t2421, -t2419, t2427, t2414, 0, 0, 0, 0, 0, 0, -t2329, -t2333, -t2359, t2376, 0, 0, 0, 0, 0, 0, t2264, -t2266, -t2279, t2278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2382, t2383, 0, t2356, 0, 0, 0, 0, 0, 0, t2283, t2298, t2257, t2253, 0, 0, 0, 0, 0, 0, t2215, t2225, t2191, t2187, 0, 0, 0, 0, 0, 0, t2177, t2179, t2175, t2171, 0, 0, 0, 0, 0, 0, t2380, t2381, 0, t2355, 0, 0, 0, 0, 0, 0, t2282, t2297, t2256, t2252, 0, 0, 0, 0, 0, 0, t2201, t2205, t2183, t2181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2440, t2432, t2454, t2394, 0, 0, 0, 0, 0, 0, t2323, t2340, t2295, t2291, 0, 0, 0, 0, 0, 0, t2243, t2261, t2212, t2208, 0, 0, 0, 0, 0, 0, t2196, t2198, t2194, t2174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2322, t2339, t2294, t2290, 0, 0, 0, 0, 0, 0, t2228, t2233, t2204, t2200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2431, t2438, -t2453, t2392, 0, 0, 0, 0, 0, 0, t2321, t2338, t2293, t2289, 0, 0, 0, 0, 0, 0, t2242, t2260, t2211, t2207, 0, 0, 0, 0, 0, 0, t2195, t2197, t2193, t2173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2320, t2337, t2292, t2288, 0, 0, 0, 0, 0, 0, t2227, t2232, t2203, t2199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2417, -t2418, -t2428, -t2413, 0, 0, 0, 0, 0, 0, -t2332, -t2335, t2360, -t2376, 0, 0, 0, 0, 0, 0, t2274, -t2495, t2309, -t2312, 0, 0, 0, 0, 0, 0, t2236, t2238, t2223, t2189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2329, t2333, t2359, -t2376, 0, 0, 0, 0, 0, 0, -t2264, t2266, t2279, -t2278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2368, t2373, t2331, t2328, 0, 0, 0, 0, 0, 0, t2281, t2304, t2241, t2235, 0, 0, 0, 0, 0, 0, t2218, t2220, t2214, t2186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2371, t2389, t2336, t2326, 0, 0, 0, 0, 0, 0, t2280, t2303, t2240, t2234, 0, 0, 0, 0, 0, 0, t2217, t2219, t2213, t2185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2332, -t2335, t2360, -t2376, 0, 0, 0, 0, 0, 0, t2274, -t2495, t2309, -t2312, 0, 0, 0, 0, 0, 0, t2236, t2238, t2223, t2189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2316, t2318, t2275, t2273, 0, 0, 0, 0, 0, 0, t2237, t2239, t2224, t2190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, t2350, t2277, t2272, 0, 0, 0, 0, 0, 0, -t2248, -t2250, -t2286, -t2244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2274, -t2495, t2309, -t2312, 0, 0, 0, 0, 0, 0, t2236, t2238, t2223, t2189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2296, t2269, t2249, t2210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2268, t2305, t2251, t2209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2248, t2250, t2286, t2244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2439, t2430, t2501, t2393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2429, t2437, -t2502, t2391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2421, t2419, -t2427, -t2414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2367, t2372, t2330, t2327, 0, 0, 0, 0, 0, 0, t2263, t2271, t2230, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2370, t2388, t2334, t2325, 0, 0, 0, 0, 0, 0, t2262, t2270, t2229, t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2329, t2333, t2359, -t2376, 0, 0, 0, 0, 0, 0, -t2264, t2266, t2279, -t2278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2306, t2308, t2265, t2247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2307, t2324, t2267, t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2264, t2266, t2279, -t2278;];
f_new_reg = t1;
