% Calculate inertial parameters regressor of joint inertia matrix for
% palh3m1DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% MM_reg [((4+1)*4/2)x(4*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-20 16:51
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = palh3m1DE2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1DE2_inertiaJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1DE2_inertiaJ_reg2_slag_vp: pkin has to be [19x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t289 = 2 * pkin(3);
t144 = sin(qJ(3));
t145 = sin(qJ(2));
t149 = cos(qJ(3));
t150 = cos(qJ(2));
t123 = t144 * t145 - t149 * t150;
t126 = t144 * t150 + t145 * t149;
t137 = sin(pkin(17));
t159 = pkin(4) ^ 2;
t158 = pkin(5) ^ 2;
t163 = pkin(1) ^ 2;
t146 = sin(pkin(16));
t250 = cos(pkin(16));
t124 = t145 * t146 - t150 * t250;
t249 = pkin(5) * t124;
t283 = -2 * pkin(1);
t216 = t249 * t283 + t163;
t118 = t158 + t216;
t116 = 0.1e1 / t118;
t162 = 0.1e1 / pkin(2);
t220 = t116 * t162;
t213 = pkin(2) ^ 2 - pkin(6) ^ 2;
t114 = t118 + t213;
t119 = pkin(1) - t249;
t269 = -pkin(6) - pkin(2);
t111 = (pkin(5) - t269) * (pkin(5) + t269) + t216;
t268 = -pkin(6) + pkin(2);
t112 = (pkin(5) - t268) * (pkin(5) + t268) + t216;
t164 = sqrt(-t112 * t111);
t125 = t145 * t250 + t150 * t146;
t248 = pkin(5) * t125;
t106 = t114 * t248 + t119 * t164;
t224 = t106 * t149;
t218 = t125 * t164;
t105 = -pkin(5) * t218 + t114 * t119;
t229 = t105 * t144;
t100 = (t224 / 0.2e1 + t229 / 0.2e1) * t220;
t134 = pkin(18) + pkin(19);
t132 = sin(t134);
t133 = cos(t134);
t225 = t106 * t144;
t228 = t105 * t149;
t99 = (-t228 / 0.2e1 + t225 / 0.2e1) * t220;
t77 = t100 * t132 + t133 * t99;
t257 = t77 * pkin(4);
t232 = t257 * t289 + t159;
t267 = (-pkin(8) - pkin(10));
t66 = ((pkin(3) - t267) * (pkin(3) + t267)) + t232;
t266 = (-pkin(8) + pkin(10));
t67 = ((pkin(3) - t266) * (pkin(3) + t266)) + t232;
t165 = sqrt(-t67 * t66);
t178 = -t100 * t133 + t132 * t99;
t214 = pkin(8) ^ 2 - pkin(10) ^ 2;
t160 = pkin(3) ^ 2;
t72 = t160 + t232;
t69 = t72 - t214;
t286 = t178 * t69;
t74 = pkin(3) * t77 + pkin(4);
t52 = pkin(3) * t286 + t165 * t74;
t234 = t52 * t137;
t138 = cos(pkin(17));
t285 = t165 * t178;
t50 = -pkin(3) * t285 + t69 * t74;
t235 = t50 * t138;
t153 = 0.1e1 / pkin(10);
t70 = 0.1e1 / t72;
t239 = t153 * t70;
t37 = (-t235 / 0.2e1 + t234 / 0.2e1) * t239;
t233 = t52 * t138;
t255 = t137 / 0.2e1;
t38 = (t233 / 0.2e1 + t50 * t255) * t239;
t34 = atan2(t38, t37);
t31 = sin(t34);
t32 = cos(t34);
t24 = t123 * t31 - t126 * t32;
t288 = -0.2e1 * t24;
t181 = -pkin(3) * t138 * t239 / 0.2e1;
t71 = 0.1e1 / t72 ^ 2;
t259 = pkin(4) * t71;
t284 = (-0.2e1 * pkin(4) * t74 - t69) * t181 + (t234 - t235) * pkin(3) * t153 * t259;
t22 = -t32 * t123 - t126 * t31;
t282 = t22 ^ 2;
t140 = sin(pkin(18));
t142 = cos(pkin(18));
t155 = 0.1e1 / pkin(8);
t272 = t70 / 0.2e1;
t201 = t155 * t272;
t68 = t72 + t214;
t73 = -pkin(3) - t257;
t49 = -pkin(4) * t285 - t68 * t73;
t258 = pkin(4) * t178;
t51 = -t165 * t73 + t68 * t258;
t40 = atan2(t51 * t201, t49 * t201);
t265 = sin(t40);
t39 = cos(t40);
t29 = t140 * t39 - t142 * t265;
t30 = -t140 * t265 - t142 * t39;
t139 = sin(pkin(19));
t227 = t106 * t139;
t141 = cos(pkin(19));
t230 = t105 * t141;
t96 = (-t230 / 0.2e1 + t227 / 0.2e1) * t220;
t226 = t106 * t141;
t231 = t105 * t139;
t97 = (t226 / 0.2e1 + t231 / 0.2e1) * t220;
t87 = atan2(t97, t96);
t81 = sin(t87);
t82 = cos(t87);
t60 = t145 * t81 - t82 * t150;
t62 = t145 * t82 + t150 * t81;
t20 = -t29 * t60 + t30 * t62;
t281 = 0.2e1 * t20;
t113 = t118 - t213;
t120 = pkin(1) * t124 - pkin(5);
t104 = -pkin(1) * t218 - t113 * t120;
t107 = pkin(1) * t125 * t113 - t120 * t164;
t147 = sin(pkin(15));
t157 = 0.1e1 / pkin(6);
t221 = t116 * t157;
t151 = cos(pkin(15));
t251 = t151 / 0.2e1;
t101 = (t107 * t251 - t104 * t147 / 0.2e1) * t221;
t98 = (t104 * t251 + t107 * t147 / 0.2e1) * t221;
t88 = atan2(t101, t98);
t84 = sin(t88);
t280 = 0.2e1 * t84;
t279 = 0.1e1 / t37 ^ 2;
t129 = -pkin(1) * t150 - pkin(13);
t115 = -pkin(4) * t123 + t129;
t278 = 0.2e1 * t115;
t277 = -0.2e1 * t125 ^ 2;
t276 = -0.2e1 * t129;
t275 = 0.2e1 * t129;
t274 = 0.2e1 * t150;
t59 = 0.1e1 / t165;
t273 = -t59 / 0.2e1;
t212 = pkin(1) * t248;
t223 = 0.2e1 / t164 * (t111 + t112) * t212;
t199 = -t223 / 0.2e1;
t219 = t124 * t164;
t90 = (t219 + (t119 * t283 - t114 + t199) * t125) * pkin(5);
t271 = -t90 / 0.2e1;
t92 = t119 * t223 / 0.2e1 + t158 * pkin(1) * t277 + (-t114 * t124 - t218) * pkin(5);
t270 = t92 / 0.2e1;
t264 = pkin(1) * t81;
t263 = pkin(1) * t82;
t193 = 0.1e1 / t118 ^ 2 * t212;
t253 = t139 / 0.2e1;
t94 = 0.1e1 / t96 ^ 2;
t45 = 0.1e1 + (((t141 * t270 + t90 * t253) * t116 + (t226 + t231) * t193) / t96 - ((t141 * t271 + t92 * t253) * t116 + (t227 - t230) * t193) * t97 * t94) * t162 / (t94 * t97 ^ 2 + 0.1e1);
t262 = pkin(3) * t45;
t261 = pkin(4) * t31;
t260 = pkin(4) * t32;
t167 = pkin(4) * (t71 * t233 + (t50 * t71 - t70 * t74) * t137);
t197 = -0.2e1 * t160 * t258;
t204 = t59 * t74 / 0.2e1;
t175 = pkin(4) * (t66 + t67) * t289;
t53 = t178 * t175;
t168 = t178 * t197 + t53 * t204;
t203 = t178 * t273;
t171 = -t77 * t165 + t53 * t203;
t179 = t69 * t77 - t285;
t189 = t239 * t255;
t254 = t138 / 0.2e1;
t202 = t70 * t254;
t33 = 0.1e1 / (t38 ^ 2 * t279 + 0.1e1);
t207 = t33 * t38 * t279;
t208 = t153 * t33 / t37;
t10 = 0.1e1 - (t171 * t181 + (t179 * pkin(3) + t168) * t189 + t284 * t178) * t207 + (t168 * t202 + ((t179 * t254 + (t171 - t286) * t255) * t70 + t178 * t167) * pkin(3)) * t208;
t252 = t144 / 0.2e1;
t64 = ((t149 * t270 + t90 * t252) * t116 + (t224 + t229) * t193) * t162;
t65 = ((t149 * t271 + t92 * t252) * t116 + (t225 - t228) * t193) * t162;
t57 = -t132 * t64 - t133 * t65;
t42 = t57 * t175;
t169 = t57 * t197 + t42 * t204;
t56 = t132 * t65 - t133 * t64;
t172 = -t56 * t165 + t42 * t203;
t238 = t165 * t57;
t180 = t56 * t69 - t238;
t5 = 0.1e1 - (t172 * t181 + (t180 * pkin(3) + t169) * t189 + t284 * t57) * t207 + (t169 * t202 + ((t180 * t254 + (-t57 * t69 + t172) * t255) * t70 + t57 * t167) * pkin(3)) * t208;
t256 = t5 * t10;
t143 = sin(qJ(4));
t247 = t143 * t5;
t246 = t144 * pkin(1);
t148 = cos(qJ(4));
t245 = t148 * t5;
t244 = t149 * pkin(1);
t243 = t143 * t10;
t242 = t143 * t22;
t241 = t148 * t10;
t240 = t148 * t22;
t222 = t116 * t147;
t217 = t143 * t148;
t135 = t143 ^ 2;
t136 = t148 ^ 2;
t215 = t135 + t136;
t211 = -0.2e1 * t242;
t210 = 0.2e1 * t240;
t209 = 0.2e1 * t217;
t206 = t24 * t217;
t205 = t73 * t273;
t198 = t116 * t251;
t7 = pkin(11) * t10 + t261;
t196 = t215 * t7;
t194 = (-t135 + t136) * t24;
t48 = 0.1e1 / t49 ^ 2;
t192 = pkin(8) * t155 / (t48 * t51 ^ 2 + 0.1e1) * t72;
t191 = t5 * t206;
t190 = t10 * t206;
t131 = pkin(4) - t244;
t26 = t31 * t131 - t32 * t246;
t188 = 0.2e1 * t215;
t25 = t131 * t32 + t31 * t246;
t2 = -pkin(9) * t5 - t25;
t8 = -pkin(9) * t10 - t260;
t187 = t10 * t2 + t5 * t8;
t186 = 0.1e1 / t49 * t192;
t3 = pkin(11) * t5 + t26;
t185 = t2 * t24 - t22 * t3;
t184 = -t22 * t7 + t24 * t8;
t183 = t104 * t193;
t182 = t107 * t193;
t174 = pkin(3) * (t49 * t71 + t70 * t73);
t173 = pkin(4) * t48 * t51 * t192;
t170 = pkin(3) * (-t159 * t178 * t70 + t51 * t259);
t128 = t129 ^ 2;
t95 = 0.1e1 / t98 ^ 2;
t91 = t120 * t199 + t163 * pkin(5) * t277 + (-t113 * t124 - t218) * pkin(1);
t89 = (t219 + (0.2e1 * t120 * pkin(5) - t113 + t199) * t125) * pkin(1);
t85 = cos(t88);
t54 = (-t140 * t62 + t142 * t60) * pkin(3) + t129;
t46 = ((t91 * t198 + t151 * t182 - t89 * t222 / 0.2e1 - t147 * t183) / t98 - (t89 * t198 + t151 * t183 + t91 * t222 / 0.2e1 + t147 * t182) * t101 * t95) / (t101 ^ 2 * t95 + 0.1e1) * t157;
t44 = t142 * t262 + t263;
t43 = t140 * t262 + t264;
t21 = t24 ^ 2;
t19 = -t29 * t62 - t30 * t60;
t18 = t29 * t44 + t30 * t43;
t17 = -t29 * t43 + t30 * t44;
t16 = 0.2e1 * ((t53 * t205 + (t77 * t68 - t285) * pkin(4)) * t272 + t178 * t170) * t186 - 0.2e1 * ((-t178 * t68 + t171) * t272 + t178 * t174) * t173;
t14 = pkin(9) * t22 - pkin(11) * t24 + t115;
t12 = 0.2e1 * ((t42 * t205 + (t56 * t68 - t238) * pkin(4)) * t272 + t57 * t170) * t186 - 0.2e1 * ((-t57 * t68 + t172) * t272 + t57 * t174) * t173 + t45;
t9 = t10 ^ 2;
t4 = t5 ^ 2;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t145 ^ 2, t145 * t274, 0, t150 ^ 2, 0, 0, pkin(13) * t274, -0.2e1 * pkin(13) * t145, 0, pkin(13) ^ 2, t126 ^ 2, -0.2e1 * t123 * t126, 0, t123 ^ 2, 0, 0, t123 * t276, t126 * t276, 0, t128, t21, t22 * t288, 0, t282, 0, 0, t22 * t278, t24 * t278, 0, t115 ^ 2, t136 * t21, -0.2e1 * t21 * t217, t24 * t210, t135 * t21, t24 * t211, t282, t14 * t210, t14 * t211, t215 * t14 * t288, t215 * t14 ^ 2, t84 ^ 2, t85 * t280, 0, t85 ^ 2, 0, 0, -0.2e1 * pkin(7) * t85, pkin(7) * t280, 0, pkin(7) ^ 2, t62 ^ 2, -0.2e1 * t60 * t62, 0, t60 ^ 2, 0, 0, t60 * t275, t62 * t275, 0, t128, t20 ^ 2, t19 * t281, 0, t19 ^ 2, 0, 0, -0.2e1 * t54 * t19, t54 * t281, 0, t54 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, 0, t150, 0, 0, 0, 0, 0, 0, 0, -t126, 0, t123, 0, 0, 0, (-t123 * t144 - t126 * t149) * pkin(1), 0, 0, 0, t5 * t24, 0, -t5 * t22, 0, 0, 0, -t22 * t26 - t24 * t25, 0, t191, t5 * t194, t5 * t242, -t191, t5 * t240, 0, t185 * t143, t185 * t148, 0, 0, 0, 0, t46 * t84, 0, t46 * t85, 0, 0, 0, 0, 0, 0, 0, t45 * t62, 0, -t45 * t60, 0, 0, 0, (-t60 * t81 - t62 * t82) * pkin(1), 0, 0, 0, t12 * t20, 0, t12 * t19, 0, 0, 0, -t17 * t20 + t18 * t19, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -0.2e1 * t244, 0.2e1 * t246, 0, (t144 ^ 2 + t149 ^ 2) * t163, 0, 0, 0, 0, 0, t4, 0.2e1 * t25 * t5, -0.2e1 * t26 * t5, 0, t25 ^ 2 + t26 ^ 2, t135 * t4, t4 * t209, 0, t136 * t4, 0, 0, -0.2e1 * t2 * t245, 0.2e1 * t2 * t247, t5 * t3 * t188, t215 * t3 ^ 2 + t2 ^ 2, 0, 0, 0, 0, 0, t46 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 ^ 2, 0.2e1 * t45 * t263, -0.2e1 * t45 * t264, 0, (t81 ^ 2 + t82 ^ 2) * t163, 0, 0, 0, 0, 0, t12 ^ 2, 0.2e1 * t17 * t12, -0.2e1 * t18 * t12, 0, t17 ^ 2 + t18 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, 0, t123, 0, 0, 0, 0, 0, 0, 0, t10 * t24, 0, -t10 * t22, 0, 0, 0, (-t22 * t31 - t24 * t32) * pkin(4), 0, t190, t10 * t194, t10 * t242, -t190, t10 * t240, 0, t184 * t143, t184 * t148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 * t20, 0, t16 * t19, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t244, t246, 0, 0, 0, 0, 0, 0, 0, t256, t10 * t25 + t5 * t260, -t10 * t26 - t5 * t261, 0, (t25 * t32 + t26 * t31) * pkin(4), t135 * t256, t209 * t256, 0, t136 * t256, 0, 0, -t187 * t148, t187 * t143, t10 * t215 * t3 + t196 * t5, t196 * t3 + t2 * t8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * t16, t17 * t16, -t18 * t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0.2e1 * t10 * t260, -0.2e1 * t10 * t261, 0, (t31 ^ 2 + t32 ^ 2) * t159, t135 * t9, t9 * t209, 0, t136 * t9, 0, 0, -0.2e1 * t8 * t241, 0.2e1 * t8 * t243, t7 * t10 * t188, t215 * t7 ^ 2 + t8 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 ^ 2, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148 * t24, 0, -t143 * t24, t22, t148 * t14, -t143 * t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, 0, t245, 0, -t143 * t3, -t148 * t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t243, 0, t241, 0, -t143 * t7, -t148 * t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MM_reg = t1;
