% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% palh3m1DE2
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JaD_transl [3x4]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-20 16:51
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = palh3m1DE2_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(3,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1DE2_jacobiaD_transl_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1DE2_jacobiaD_transl_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'palh3m1DE2_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1DE2_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1DE2_jacobiaD_transl_sym_varpar: pkin has to be [19x1] (double)');
JaD_transl=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (17->14), mult. (60->29), div. (0->0), fcn. (38->4), ass. (0->12)
	t17 = sin(qJ(1));
	t26 = qJD(1) * t17;
	t19 = cos(qJ(1));
	t25 = qJD(1) * t19;
	t24 = qJD(2) * t17;
	t23 = qJD(2) * t19;
	t16 = sin(qJ(2));
	t18 = cos(qJ(2));
	t22 = r_i_i_C(1) * t16 + r_i_i_C(2) * t18;
	t21 = -r_i_i_C(1) * t18 + r_i_i_C(2) * t16 - pkin(13);
	t20 = t22 * qJD(2);
	t1 = [t22 * t24 + (-r_i_i_C(3) * t17 + t19 * t21) * qJD(1), (t16 * t23 + t18 * t26) * r_i_i_C(2) + (t16 * t26 - t18 * t23) * r_i_i_C(1), 0, 0; -t19 * t20 + (r_i_i_C(3) * t19 + t17 * t21) * qJD(1), (t16 * t24 - t18 * t25) * r_i_i_C(2) + (-t16 * t25 - t18 * t24) * r_i_i_C(1), 0, 0; 0, -t20, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (77->25), mult. (110->40), div. (0->0), fcn. (71->6), ass. (0->27)
	t46 = qJD(2) + qJD(3);
	t47 = qJ(2) + qJ(3);
	t45 = cos(t47);
	t65 = r_i_i_C(2) * t45;
	t44 = sin(t47);
	t66 = r_i_i_C(1) * t44;
	t54 = t65 + t66;
	t48 = sin(qJ(2));
	t67 = pkin(1) * t48;
	t55 = qJD(2) * t67;
	t68 = t54 * t46 - t55;
	t64 = t44 * t46;
	t63 = t45 * t46;
	t62 = r_i_i_C(1) * t64 + r_i_i_C(2) * t63;
	t49 = sin(qJ(1));
	t61 = qJD(1) * t49;
	t51 = cos(qJ(1));
	t60 = qJD(1) * t51;
	t50 = cos(qJ(2));
	t59 = qJD(2) * t50;
	t58 = r_i_i_C(1) * t63;
	t57 = r_i_i_C(2) * t64;
	t56 = qJD(1) * t66;
	t53 = -t50 * pkin(1) + r_i_i_C(1) * t45 - r_i_i_C(2) * t44 - pkin(13);
	t52 = t51 * t56 + t60 * t65 + (-t57 + t58) * t49;
	t38 = t51 * t58;
	t1 = [-t68 * t49 + (-r_i_i_C(3) * t49 + t53 * t51) * qJD(1), t38 + (-pkin(1) * t59 - t57) * t51 + (-t54 + t67) * t61, -t49 * t56 + t38 + (-t45 * t61 - t51 * t64) * r_i_i_C(2), 0; t68 * t51 + (r_i_i_C(3) * t51 + t53 * t49) * qJD(1), (-t48 * t60 - t49 * t59) * pkin(1) + t52, t52, 0; 0, -t55 + t62, t62, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:23:42
	% EndTime: 2020-04-20 16:28:30
	% DurationCPUTime: 144.03s
	% Computational Cost: add. (3964769->242), mult. (6172642->478), div. (235892->14), fcn. (3859325->21), ass. (0->242)
	t771 = pkin(5) ^ 2;
	t775 = pkin(1) ^ 2;
	t896 = sin(qJ(2));
	t897 = sin(pkin(16));
	t898 = cos(qJ(2));
	t899 = cos(pkin(16));
	t749 = t896 * t897 - t898 * t899;
	t890 = pkin(5) * t749;
	t854 = -0.2e1 * pkin(1) * t890 + t775;
	t742 = t771 + t854;
	t739 = 0.1e1 / t742;
	t740 = 0.1e1 / t742 ^ 2;
	t925 = 0.4e1 * t739 * t740;
	t750 = t896 * t899 + t898 * t897;
	t747 = t750 * qJD(2);
	t774 = 0.1e1 / pkin(2);
	t738 = pkin(2) ^ 2 - pkin(6) ^ 2 + t742;
	t745 = pkin(1) - t890;
	t913 = -pkin(2) - pkin(6);
	t736 = (pkin(5) - t913) * (pkin(5) + t913) + t854;
	t912 = -pkin(6) + pkin(2);
	t737 = (pkin(5) - t912) * (pkin(5) + t912) + t854;
	t861 = t737 * t736;
	t777 = sqrt(-t861);
	t889 = pkin(5) * t750;
	t730 = t738 * t889 + t745 * t777;
	t768 = cos(qJ(3));
	t862 = t730 * t768;
	t857 = t750 * t777;
	t729 = -pkin(5) * t857 + t738 * t745;
	t766 = sin(qJ(3));
	t865 = t729 * t766;
	t801 = t862 / 0.2e1 + t865 / 0.2e1;
	t914 = pkin(1) * pkin(5);
	t850 = t740 * t914;
	t812 = 0.2e1 * (t736 + t737) * t914;
	t731 = t747 * t812;
	t748 = t749 * qJD(2);
	t921 = t750 * t771;
	t842 = t747 * t921;
	t825 = pkin(1) * t842;
	t734 = 0.1e1 / t777;
	t904 = t734 / 0.2e1;
	t835 = t745 * t904;
	t859 = t747 * t777;
	t717 = t731 * t835 - 0.2e1 * t825 + (-t748 * t738 - t859) * pkin(5);
	t871 = t717 * t766;
	t922 = t731 * t734;
	t722 = -t889 * t922 / 0.2e1;
	t888 = t745 * pkin(1);
	t831 = t738 + 0.2e1 * t888;
	t858 = t748 * t777;
	t716 = t722 + (-t831 * t747 + t858) * pkin(5);
	t872 = t716 * t768;
	t863 = t730 * t766;
	t864 = t729 * t768;
	t919 = t863 - t864;
	t692 = ((-t871 / 0.2e1 + t872 / 0.2e1 - t801 * qJD(3)) * t739 - t919 * t747 * t850) * t774;
	t813 = t862 + t865;
	t796 = t813 * t747;
	t802 = -t863 / 0.2e1 + t864 / 0.2e1;
	t870 = t717 * t768;
	t873 = t716 * t766;
	t693 = (t796 * t850 + (t870 / 0.2e1 + t873 / 0.2e1 + t802 * qJD(3)) * t739) * t774;
	t762 = pkin(18) + pkin(19);
	t757 = sin(t762);
	t758 = cos(t762);
	t688 = t692 * t758 - t693 * t757;
	t772 = pkin(4) ^ 2;
	t860 = t739 * t774;
	t720 = t802 * t860;
	t721 = t801 * t860;
	t711 = -t720 * t758 + t721 * t757;
	t893 = pkin(3) * t711;
	t915 = -2 * pkin(4);
	t856 = -t893 * t915 + t772;
	t911 = -pkin(8) - pkin(10);
	t701 = (pkin(3) - t911) * (pkin(3) + t911) + t856;
	t910 = pkin(10) - pkin(8);
	t702 = (pkin(3) - t910) * (pkin(3) + t910) + t856;
	t876 = t702 * t701;
	t776 = sqrt(-t876);
	t924 = t688 * t776;
	t851 = 2 * pkin(4);
	t811 = pkin(3) * (t701 + t702) * t851;
	t679 = t688 * t811;
	t773 = pkin(3) ^ 2;
	t707 = t773 + t856;
	t703 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t707;
	t708 = pkin(4) + t893;
	t830 = t708 * t915 - t703;
	t695 = 0.1e1 / t776;
	t815 = -t720 * t757 - t721 * t758;
	t905 = -t815 / 0.2e1;
	t839 = t695 * t905;
	t816 = -t692 * t757 - t693 * t758;
	t920 = t816 * t776;
	t658 = (t679 * t839 + t830 * t688 - t920) * pkin(3);
	t832 = t815 * t773 * t915;
	t906 = t695 / 0.2e1;
	t840 = t708 * t906;
	t659 = t679 * t840 + t688 * t832 + (t703 * t816 - t924) * pkin(3);
	t704 = 0.1e1 / t707;
	t770 = 0.1e1 / pkin(10);
	t705 = 0.1e1 / t707 ^ 2;
	t849 = pkin(3) * pkin(4) * t705;
	t894 = pkin(3) * t815;
	t684 = t703 * t894 + t708 * t776;
	t764 = sin(pkin(17));
	t879 = t684 * t764;
	t683 = t703 * t708 - t776 * t894;
	t765 = cos(pkin(17));
	t880 = t683 * t765;
	t790 = (t879 - t880) * t849;
	t902 = -t765 / 0.2e1;
	t903 = t764 / 0.2e1;
	t650 = ((t658 * t902 + t659 * t903) * t704 + t688 * t790) * t770;
	t874 = t704 * t770;
	t677 = (-t880 / 0.2e1 + t879 / 0.2e1) * t874;
	t674 = 0.1e1 / t677 ^ 2;
	t923 = t650 * t674;
	t878 = t684 * t765;
	t881 = t683 * t764;
	t789 = (t878 + t881) * t849;
	t901 = t765 / 0.2e1;
	t651 = ((t658 * t903 + t659 * t901) * t704 + t688 * t789) * t770;
	t678 = (t878 / 0.2e1 + t881 / 0.2e1) * t874;
	t676 = t678 ^ 2;
	t667 = t674 * t676 + 0.1e1;
	t665 = 0.1e1 / t667;
	t673 = 0.1e1 / t677;
	t761 = qJD(2) + qJD(3);
	t883 = t674 * t678;
	t643 = (-t650 * t883 + t651 * t673) * t665 + t761;
	t763 = qJ(2) + qJ(3);
	t759 = sin(t763);
	t891 = pkin(4) * t761;
	t753 = t759 * t891;
	t846 = t896 * pkin(1);
	t743 = -qJD(2) * t846 + t753;
	t664 = atan2(t678, t677) + t763;
	t662 = sin(t664);
	t663 = cos(t664);
	t818 = r_i_i_C(1) * t662 + r_i_i_C(2) * t663;
	t918 = t818 * t643 + t743;
	t732 = t750 * t812;
	t895 = pkin(1) * t771;
	t719 = t732 * t835 - 0.2e1 * t750 ^ 2 * t895 + (-t738 * t749 - t857) * pkin(5);
	t866 = t719 * t768;
	t821 = t732 * t904 + t738;
	t718 = (t749 * t777 + (-t821 - 0.2e1 * t888) * t750) * pkin(5);
	t869 = t718 * t766;
	t803 = t866 / 0.2e1 + t869 / 0.2e1;
	t828 = t750 * t850;
	t699 = (t803 * t739 + t813 * t828) * t774;
	t867 = t719 * t766;
	t868 = t718 * t768;
	t804 = -t867 / 0.2e1 + t868 / 0.2e1;
	t700 = (-t804 * t739 + t828 * t919) * t774;
	t691 = -t699 * t757 - t700 * t758;
	t680 = t691 * t811;
	t690 = -t699 * t758 + t700 * t757;
	t660 = (t680 * t839 - t690 * t776 + t830 * t691) * pkin(3);
	t661 = t680 * t840 + t691 * t832 + (t690 * t703 - t691 * t776) * pkin(3);
	t653 = ((t660 * t902 + t661 * t903) * t704 + t691 * t790) * t770;
	t654 = ((t660 * t903 + t661 * t901) * t704 + t691 * t789) * t770;
	t644 = 0.1e1 + (-t653 * t883 + t654 * t673) * t665;
	t892 = pkin(4) * t759;
	t917 = t818 * t644 - t846 + t892;
	t689 = t815 * t811;
	t671 = (t689 * t839 - t711 * t776 + t815 * t830) * pkin(3);
	t672 = t689 * t840 + t815 * t832 + (t703 * t711 - t776 * t815) * pkin(3);
	t656 = ((t671 * t902 + t672 * t903) * t704 + t815 * t790) * t770;
	t657 = ((t671 * t903 + t672 * t901) * t704 + t815 * t789) * t770;
	t647 = 0.1e1 + (-t656 * t883 + t657 * t673) * t665;
	t916 = t818 * t647 + t892;
	t909 = -t679 / 0.2e1;
	t908 = -t680 / 0.2e1;
	t907 = -t689 / 0.2e1;
	t900 = t766 / 0.2e1;
	t887 = t643 * t662;
	t886 = t643 * t663;
	t884 = t673 * t923;
	t885 = 0.2e1 * (t651 * t883 - t676 * t884) / t667 ^ 2;
	t882 = t679 * t695 / t876;
	t877 = t688 * t773;
	t875 = t704 * t765;
	t767 = sin(qJ(1));
	t853 = qJD(1) * t767;
	t769 = cos(qJ(1));
	t852 = qJD(1) * t769;
	t760 = cos(t763);
	t848 = t760 * t891;
	t847 = t898 * pkin(1);
	t844 = t772 * t877;
	t843 = 0.1e1 / t861 * t732 * t922;
	t841 = t882 / 0.4e1;
	t838 = t704 * t903;
	t837 = -t875 / 0.2e1;
	t836 = t875 / 0.2e1;
	t834 = t773 * t851;
	t833 = 0.4e1 * pkin(4) * t877;
	t827 = t665 * t849;
	t826 = -0.8e1 * t844;
	t824 = t704 * t705 * t844;
	t823 = t775 * t842;
	t822 = -t815 * t882 / 0.4e1;
	t817 = t765 * t824;
	t810 = 0.4e1 * t764 * t824;
	t809 = pkin(4) * t760 + r_i_i_C(1) * t663 - r_i_i_C(2) * t662 - pkin(13) - t847;
	t728 = -t748 * t812 - 0.8e1 * t823;
	t697 = t722 + (t843 / 0.4e1 + t728 * t904) * t745 + (0.2e1 * t747 * t749 + 0.4e1 * t748 * t750) * t895 + (-t821 * t747 + t858) * pkin(5);
	t698 = 0.4e1 * t825 + (t859 - t750 * t843 / 0.4e1 + t831 * t748 + (t749 * t731 / 0.2e1 + t748 * t732 / 0.2e1 - t750 * t728 / 0.2e1) * t734) * pkin(5);
	t681 = (t919 * t823 * t925 + (-t698 * t768 / 0.2e1 + t697 * t900 + t803 * qJD(3)) * t739 + (-t919 * t748 - (-t867 + t868) * t747 + (t813 * qJD(3) + t871 - t872) * t750) * t850) * t774;
	t682 = (t775 * t796 * t921 * t925 + (t697 * t768 / 0.2e1 + t698 * t900 + t804 * qJD(3)) * t739 + (-t813 * t748 - (-t866 - t869) * t747 + (-qJD(3) * t919 + t870 + t873) * t750) * t850) * t774;
	t669 = -t681 * t758 - t682 * t757;
	t655 = t669 * t811 + t691 * t826;
	t668 = t681 * t757 - t682 * t758;
	t646 = (t655 * t906 + t680 * t841) * t708 + (-t669 * t815 - t688 * t690 - t691 * t816) * t834 + (t668 * t703 - t669 * t776 + (t688 * t908 + t691 * t909) * t695) * pkin(3);
	t648 = t691 * t833 + (-t668 * t776 + t680 * t822 + t830 * t669 + (t655 * t905 + t690 * t909 + t816 * t908) * t695) * pkin(3);
	t788 = t883 * t885 + (-t651 * t674 + 0.2e1 * t678 * t884) * t665;
	t792 = t659 * t691 + t661 * t688 + t669 * t684;
	t794 = t658 * t691 + t660 * t688 + t669 * t683;
	t795 = -t665 * t923 - t673 * t885;
	t798 = t691 * t810;
	t799 = 0.4e1 * t684 * t817;
	t800 = -0.4e1 * t683 * t817;
	t641 = t795 * t654 + t788 * t653 + (((t646 * t836 + t648 * t838 + t683 * t798 + t691 * t799) * t673 - (t646 * t838 + t648 * t837 + t684 * t798 + t691 * t800) * t883) * t665 + ((t792 * t673 + t794 * t883) * t765 + (t794 * t673 - t792 * t883) * t764) * t827) * t770;
	t808 = t641 * t662 + t644 * t886;
	t807 = -t641 * t663 + t644 * t887;
	t670 = t811 * t816 + t815 * t826;
	t649 = (t670 * t906 + t689 * t841) * t708 + (-t688 * t711 - 0.2e1 * t815 * t816) * t834 + (-t688 * t703 - t920 + (t688 * t907 + t815 * t909) * t695) * pkin(3);
	t652 = t815 * t833 + (t924 + t689 * t822 + t830 * t816 + (t670 * t905 + t711 * t909 + t816 * t907) * t695) * pkin(3);
	t791 = t659 * t815 + t672 * t688 + t684 * t816;
	t793 = t658 * t815 + t671 * t688 + t683 * t816;
	t797 = t815 * t810;
	t642 = t795 * t657 + t788 * t656 + (((t649 * t836 + t652 * t838 + t683 * t797 + t799 * t815) * t673 - (t649 * t838 + t652 * t837 + t684 * t797 + t800 * t815) * t883) * t665 + ((t791 * t673 + t793 * t883) * t765 + (t793 * t673 - t791 * t883) * t764) * t827) * t770;
	t806 = t642 * t662 + t647 * t886;
	t805 = -t642 * t663 + t647 * t887;
	t787 = t808 * r_i_i_C(1) - t807 * r_i_i_C(2) - qJD(2) * t847 + t848;
	t786 = t806 * r_i_i_C(1) - t805 * r_i_i_C(2) + t848;
	t1 = [-t918 * t767 + (-r_i_i_C(3) * t767 + t809 * t769) * qJD(1), t787 * t769 - t917 * t853, t786 * t769 - t916 * t853, 0; t918 * t769 + (r_i_i_C(3) * t769 + t809 * t767) * qJD(1), t787 * t767 + t917 * t852, t786 * t767 + t916 * t852, 0; 0, t807 * r_i_i_C(1) + t808 * r_i_i_C(2) + t743, t805 * r_i_i_C(1) + t806 * r_i_i_C(2) + t753, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:40:58
	% EndTime: 2020-04-20 16:47:26
	% DurationCPUTime: 364.01s
	% Computational Cost: add. (10453868->262), mult. (16258346->511), div. (625254->14), fcn. (10169091->23), ass. (0->260)
	t1355 = pkin(5) ^ 2;
	t1359 = pkin(1) ^ 2;
	t1504 = sin(qJ(2));
	t1505 = sin(pkin(16));
	t1506 = cos(qJ(2));
	t1507 = cos(pkin(16));
	t1331 = t1504 * t1505 - t1506 * t1507;
	t1488 = pkin(5) * t1331;
	t1445 = -0.2e1 * pkin(1) * t1488 + t1359;
	t1324 = t1355 + t1445;
	t1321 = 0.1e1 / t1324;
	t1358 = 0.1e1 / pkin(2);
	t1332 = t1504 * t1507 + t1506 * t1505;
	t1512 = -pkin(6) - pkin(2);
	t1318 = (pkin(5) - t1512) * (pkin(5) + t1512) + t1445;
	t1511 = -pkin(6) + pkin(2);
	t1319 = (pkin(5) - t1511) * (pkin(5) + t1511) + t1445;
	t1513 = pkin(1) * pkin(5);
	t1397 = 0.2e1 * (t1318 + t1319) * t1513;
	t1314 = t1332 * t1397;
	t1320 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1324;
	t1327 = pkin(1) - t1488;
	t1452 = t1319 * t1318;
	t1361 = sqrt(-t1452);
	t1316 = 0.1e1 / t1361;
	t1498 = t1316 / 0.2e1;
	t1424 = t1327 * t1498;
	t1448 = t1332 * t1361;
	t1493 = pkin(1) * t1355;
	t1301 = t1314 * t1424 - 0.2e1 * t1332 ^ 2 * t1493 + (-t1320 * t1331 - t1448) * pkin(5);
	t1352 = cos(qJ(3));
	t1457 = t1301 * t1352;
	t1407 = t1314 * t1498 + t1320;
	t1485 = t1327 * pkin(1);
	t1300 = (t1331 * t1361 + (-t1407 - 0.2e1 * t1485) * t1332) * pkin(5);
	t1349 = sin(qJ(3));
	t1460 = t1300 * t1349;
	t1393 = t1457 / 0.2e1 + t1460 / 0.2e1;
	t1487 = pkin(5) * t1332;
	t1312 = t1320 * t1487 + t1327 * t1361;
	t1453 = t1312 * t1352;
	t1311 = -pkin(5) * t1448 + t1320 * t1327;
	t1456 = t1311 * t1349;
	t1398 = t1453 + t1456;
	t1322 = 0.1e1 / t1324 ^ 2;
	t1444 = t1322 * t1513;
	t1418 = t1332 * t1444;
	t1281 = (t1393 * t1321 + t1398 * t1418) * t1358;
	t1458 = t1301 * t1349;
	t1459 = t1300 * t1352;
	t1394 = -t1458 / 0.2e1 + t1459 / 0.2e1;
	t1454 = t1312 * t1349;
	t1455 = t1311 * t1352;
	t1516 = t1454 - t1455;
	t1282 = (-t1394 * t1321 + t1418 * t1516) * t1358;
	t1344 = pkin(18) + pkin(19);
	t1339 = sin(t1344);
	t1340 = cos(t1344);
	t1273 = -t1281 * t1339 - t1282 * t1340;
	t1356 = pkin(4) ^ 2;
	t1392 = -t1454 / 0.2e1 + t1455 / 0.2e1;
	t1451 = t1321 * t1358;
	t1302 = t1392 * t1451;
	t1391 = t1453 / 0.2e1 + t1456 / 0.2e1;
	t1303 = t1391 * t1451;
	t1293 = -t1302 * t1340 + t1303 * t1339;
	t1491 = pkin(3) * t1293;
	t1514 = -2 * pkin(4);
	t1447 = -t1491 * t1514 + t1356;
	t1510 = -pkin(8) - pkin(10);
	t1283 = (pkin(3) - t1510) * (pkin(3) + t1510) + t1447;
	t1509 = -pkin(8) + pkin(10);
	t1284 = (pkin(3) - t1509) * (pkin(3) + t1509) + t1447;
	t1484 = 2 * pkin(4);
	t1396 = pkin(3) * (t1283 + t1284) * t1484;
	t1262 = t1273 * t1396;
	t1272 = -t1281 * t1340 + t1282 * t1339;
	t1467 = t1284 * t1283;
	t1360 = sqrt(-t1467);
	t1357 = pkin(3) ^ 2;
	t1289 = t1357 + t1447;
	t1285 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1289;
	t1290 = pkin(4) + t1491;
	t1420 = t1290 * t1514 - t1285;
	t1277 = 0.1e1 / t1360;
	t1400 = -t1302 * t1339 - t1303 * t1340;
	t1499 = -t1400 / 0.2e1;
	t1428 = t1277 * t1499;
	t1242 = (t1262 * t1428 - t1272 * t1360 + t1420 * t1273) * pkin(3);
	t1422 = t1400 * t1357 * t1514;
	t1500 = t1277 / 0.2e1;
	t1429 = t1290 * t1500;
	t1243 = t1262 * t1429 + t1273 * t1422 + (t1272 * t1285 - t1273 * t1360) * pkin(3);
	t1286 = 0.1e1 / t1289;
	t1354 = 0.1e1 / pkin(10);
	t1287 = 0.1e1 / t1289 ^ 2;
	t1443 = pkin(3) * pkin(4) * t1287;
	t1492 = pkin(3) * t1400;
	t1266 = t1285 * t1492 + t1290 * t1360;
	t1346 = sin(pkin(17));
	t1470 = t1266 * t1346;
	t1265 = t1285 * t1290 - t1360 * t1492;
	t1347 = cos(pkin(17));
	t1471 = t1265 * t1347;
	t1380 = (t1470 - t1471) * t1443;
	t1496 = -t1347 / 0.2e1;
	t1497 = t1346 / 0.2e1;
	t1235 = ((t1242 * t1496 + t1243 * t1497) * t1286 + t1273 * t1380) * t1354;
	t1469 = t1266 * t1347;
	t1472 = t1265 * t1346;
	t1379 = (t1469 + t1472) * t1443;
	t1495 = t1347 / 0.2e1;
	t1236 = ((t1242 * t1497 + t1243 * t1495) * t1286 + t1273 * t1379) * t1354;
	t1465 = t1286 * t1354;
	t1259 = (-t1471 / 0.2e1 + t1470 / 0.2e1) * t1465;
	t1256 = 0.1e1 / t1259 ^ 2;
	t1260 = (t1469 / 0.2e1 + t1472 / 0.2e1) * t1465;
	t1258 = t1260 ^ 2;
	t1249 = t1256 * t1258 + 0.1e1;
	t1247 = 0.1e1 / t1249;
	t1255 = 0.1e1 / t1259;
	t1474 = t1256 * t1260;
	t1226 = 0.1e1 + (-t1235 * t1474 + t1236 * t1255) * t1247;
	t1345 = qJ(2) + qJ(3);
	t1246 = atan2(t1260, t1259) + t1345;
	t1244 = sin(t1246);
	t1348 = sin(qJ(4));
	t1351 = cos(qJ(4));
	t1405 = r_i_i_C(1) * t1351 - r_i_i_C(2) * t1348 + pkin(9);
	t1245 = cos(t1246);
	t1508 = pkin(11) + r_i_i_C(3);
	t1517 = t1508 * t1245;
	t1375 = -t1405 * t1244 + t1517;
	t1441 = t1504 * pkin(1);
	t1341 = sin(t1345);
	t1490 = pkin(4) * t1341;
	t1530 = t1375 * t1226 + t1441 - t1490;
	t1271 = t1400 * t1396;
	t1253 = (t1271 * t1428 - t1293 * t1360 + t1400 * t1420) * pkin(3);
	t1254 = t1271 * t1429 + t1400 * t1422 + (t1285 * t1293 - t1360 * t1400) * pkin(3);
	t1238 = ((t1253 * t1496 + t1254 * t1497) * t1286 + t1400 * t1380) * t1354;
	t1239 = ((t1253 * t1497 + t1254 * t1495) * t1286 + t1400 * t1379) * t1354;
	t1229 = 0.1e1 + (-t1238 * t1474 + t1239 * t1255) * t1247;
	t1529 = t1375 * t1229 - t1490;
	t1528 = 0.4e1 * t1321 * t1322;
	t1329 = t1332 * qJD(2);
	t1313 = t1329 * t1397;
	t1330 = t1331 * qJD(2);
	t1521 = t1332 * t1355;
	t1431 = t1329 * t1521;
	t1413 = pkin(1) * t1431;
	t1450 = t1329 * t1361;
	t1299 = t1313 * t1424 - 0.2e1 * t1413 + (-t1330 * t1320 - t1450) * pkin(5);
	t1462 = t1299 * t1349;
	t1522 = t1313 * t1316;
	t1304 = -t1487 * t1522 / 0.2e1;
	t1421 = t1320 + 0.2e1 * t1485;
	t1449 = t1330 * t1361;
	t1298 = t1304 + (-t1421 * t1329 + t1449) * pkin(5);
	t1463 = t1298 * t1352;
	t1274 = ((-t1462 / 0.2e1 + t1463 / 0.2e1 - t1391 * qJD(3)) * t1321 - t1516 * t1329 * t1444) * t1358;
	t1390 = t1329 * t1398;
	t1461 = t1299 * t1352;
	t1464 = t1298 * t1349;
	t1275 = (t1390 * t1444 + (t1461 / 0.2e1 + t1464 / 0.2e1 + t1392 * qJD(3)) * t1321) * t1358;
	t1270 = t1274 * t1340 - t1275 * t1339;
	t1261 = t1270 * t1396;
	t1401 = -t1274 * t1339 - t1275 * t1340;
	t1520 = t1401 * t1360;
	t1240 = (t1261 * t1428 + t1420 * t1270 - t1520) * pkin(3);
	t1526 = t1270 * t1360;
	t1241 = t1261 * t1429 + t1270 * t1422 + (t1285 * t1401 - t1526) * pkin(3);
	t1232 = ((t1240 * t1496 + t1241 * t1497) * t1286 + t1270 * t1380) * t1354;
	t1233 = ((t1240 * t1497 + t1241 * t1495) * t1286 + t1270 * t1379) * t1354;
	t1343 = qJD(2) + qJD(3);
	t1225 = (-t1232 * t1474 + t1233 * t1255) * t1247 + t1343;
	t1489 = pkin(4) * t1343;
	t1335 = t1341 * t1489;
	t1325 = -qJD(2) * t1441 + t1335;
	t1527 = (-pkin(9) * t1244 + t1517) * t1225 - t1325;
	t1437 = t1508 * t1244;
	t1525 = t1405 * t1245 + t1437;
	t1523 = t1232 * t1256;
	t1350 = sin(qJ(1));
	t1353 = cos(qJ(1));
	t1414 = qJD(1) * t1245 + qJD(4);
	t1479 = t1225 * t1244;
	t1515 = t1414 * t1350 + t1353 * t1479;
	t1503 = -t1261 / 0.2e1;
	t1502 = -t1262 / 0.2e1;
	t1501 = -t1271 / 0.2e1;
	t1494 = t1349 / 0.2e1;
	t1483 = qJD(1) * t1350;
	t1482 = qJD(1) * t1353;
	t1481 = qJD(4) * t1244;
	t1480 = qJD(4) * t1245;
	t1478 = t1225 * t1245;
	t1476 = t1255 * t1523;
	t1477 = 0.2e1 * (t1233 * t1474 - t1258 * t1476) / t1249 ^ 2;
	t1475 = t1244 * t1351;
	t1473 = t1261 * t1277 / t1467;
	t1468 = t1270 * t1357;
	t1466 = t1286 * t1347;
	t1442 = t1506 * pkin(1);
	t1342 = cos(t1345);
	t1439 = t1342 * t1489;
	t1435 = t1357 * t1484;
	t1433 = t1356 * t1468;
	t1432 = 0.1e1 / t1452 * t1314 * t1522;
	t1430 = t1473 / 0.4e1;
	t1427 = t1286 * t1497;
	t1426 = -t1466 / 0.2e1;
	t1425 = t1466 / 0.2e1;
	t1423 = 0.4e1 * pkin(4) * t1468;
	t1417 = t1247 * t1443;
	t1416 = -0.8e1 * t1433;
	t1415 = qJD(1) + t1480;
	t1410 = t1286 * t1287 * t1433;
	t1409 = t1359 * t1431;
	t1408 = -t1400 * t1473 / 0.4e1;
	t1406 = r_i_i_C(1) * t1348 + r_i_i_C(2) * t1351;
	t1404 = t1415 * t1353;
	t1403 = t1414 * t1353;
	t1402 = t1347 * t1410;
	t1395 = 0.4e1 * t1346 * t1410;
	t1389 = -0.4e1 * t1265 * t1402;
	t1388 = 0.4e1 * t1266 * t1402;
	t1387 = t1273 * t1395;
	t1386 = t1400 * t1395;
	t1385 = -t1247 * t1523 - t1255 * t1477;
	t1310 = -t1330 * t1397 - 0.8e1 * t1409;
	t1279 = t1304 + (t1432 / 0.4e1 + t1310 * t1498) * t1327 + (0.2e1 * t1329 * t1331 + 0.4e1 * t1330 * t1332) * t1493 + (-t1407 * t1329 + t1449) * pkin(5);
	t1280 = 0.4e1 * t1413 + (t1450 - t1332 * t1432 / 0.4e1 + t1421 * t1330 + (t1331 * t1313 / 0.2e1 + t1330 * t1314 / 0.2e1 - t1332 * t1310 / 0.2e1) * t1316) * pkin(5);
	t1263 = (t1516 * t1409 * t1528 + (-t1280 * t1352 / 0.2e1 + t1279 * t1494 + t1393 * qJD(3)) * t1321 + (-t1516 * t1330 - (-t1458 + t1459) * t1329 + (t1398 * qJD(3) + t1462 - t1463) * t1332) * t1444) * t1358;
	t1264 = (t1359 * t1390 * t1521 * t1528 + (t1279 * t1352 / 0.2e1 + t1280 * t1494 + t1394 * qJD(3)) * t1321 + (-t1398 * t1330 - (-t1457 - t1460) * t1329 + (-qJD(3) * t1516 + t1461 + t1464) * t1332) * t1444) * t1358;
	t1251 = -t1263 * t1340 - t1264 * t1339;
	t1384 = t1240 * t1273 + t1242 * t1270 + t1251 * t1265;
	t1383 = t1240 * t1400 + t1253 * t1270 + t1265 * t1401;
	t1382 = t1241 * t1273 + t1243 * t1270 + t1251 * t1266;
	t1381 = t1241 * t1400 + t1254 * t1270 + t1266 * t1401;
	t1378 = qJD(1) * (pkin(4) * t1342 + pkin(9) * t1245 - pkin(13) + t1437 - t1442);
	t1374 = t1474 * t1477 + (-t1233 * t1256 + 0.2e1 * t1260 * t1476) * t1247;
	t1373 = t1525 * t1225 - t1406 * t1481;
	t1372 = -t1225 * t1375 + t1406 * t1480;
	t1237 = t1251 * t1396 + t1273 * t1416;
	t1250 = t1263 * t1339 - t1264 * t1340;
	t1228 = (t1237 * t1500 + t1262 * t1430) * t1290 + (-t1251 * t1400 - t1270 * t1272 - t1273 * t1401) * t1435 + (t1250 * t1285 - t1251 * t1360 + (t1270 * t1502 + t1273 * t1503) * t1277) * pkin(3);
	t1230 = t1273 * t1423 + (-t1250 * t1360 + t1262 * t1408 + t1420 * t1251 + (t1237 * t1499 + t1272 * t1503 + t1401 * t1502) * t1277) * pkin(3);
	t1219 = t1385 * t1236 + t1374 * t1235 + (((t1228 * t1425 + t1230 * t1427 + t1265 * t1387 + t1273 * t1388) * t1255 - (t1228 * t1427 + t1230 * t1426 + t1266 * t1387 + t1273 * t1389) * t1474) * t1247 + ((t1382 * t1255 + t1384 * t1474) * t1347 + (t1384 * t1255 - t1382 * t1474) * t1346) * t1417) * t1354;
	t1371 = -qJD(2) * t1442 - t1219 * t1375 + t1373 * t1226 + t1439;
	t1252 = t1396 * t1401 + t1400 * t1416;
	t1231 = (t1252 * t1500 + t1271 * t1430) * t1290 + (-t1270 * t1293 - 0.2e1 * t1400 * t1401) * t1435 + (-t1270 * t1285 - t1520 + (t1270 * t1501 + t1400 * t1503) * t1277) * pkin(3);
	t1234 = t1400 * t1423 + (t1526 + t1271 * t1408 + t1420 * t1401 + (t1252 * t1499 + t1293 * t1503 + t1401 * t1501) * t1277) * pkin(3);
	t1220 = t1385 * t1239 + t1374 * t1238 + (((t1231 * t1425 + t1234 * t1427 + t1265 * t1386 + t1388 * t1400) * t1255 - (t1231 * t1427 + t1234 * t1426 + t1266 * t1386 + t1389 * t1400) * t1474) * t1247 + ((t1381 * t1255 + t1383 * t1474) * t1347 + (t1383 * t1255 - t1381 * t1474) * t1346) * t1417) * t1354;
	t1370 = -t1220 * t1375 + t1373 * t1229 + t1439;
	t1224 = t1351 * t1403 + (-t1225 * t1475 - t1415 * t1348) * t1350;
	t1223 = t1415 * t1351 * t1350 + (-t1350 * t1479 + t1403) * t1348;
	t1222 = t1348 * t1404 + t1515 * t1351;
	t1221 = -t1515 * t1348 + t1351 * t1404;
	t1 = [t1224 * r_i_i_C(1) - t1223 * r_i_i_C(2) + t1527 * t1350 + t1353 * t1378, t1371 * t1353 + t1530 * t1483, t1370 * t1353 + t1529 * t1483, r_i_i_C(1) * t1221 - r_i_i_C(2) * t1222; t1222 * r_i_i_C(1) + t1221 * r_i_i_C(2) + t1350 * t1378 - t1527 * t1353, t1371 * t1350 - t1530 * t1482, t1370 * t1350 - t1529 * t1482, r_i_i_C(1) * t1223 + r_i_i_C(2) * t1224; 0, -t1219 * t1525 + t1372 * t1226 + t1325, -t1220 * t1525 + t1372 * t1229 + t1335, (-t1348 * t1481 + t1351 * t1478) * r_i_i_C(2) + (qJD(4) * t1475 + t1348 * t1478) * r_i_i_C(1);];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:50
	% EndTime: 2020-04-20 16:21:01
	% DurationCPUTime: 3.24s
	% Computational Cost: add. (51099->97), mult. (81788->210), div. (2926->9), fcn. (51232->13), ass. (0->109)
	t396 = sin(qJ(2));
	t397 = sin(pkin(16));
	t398 = cos(qJ(2));
	t399 = cos(pkin(16));
	t329 = t396 * t399 + t398 * t397;
	t394 = pkin(1) * t329;
	t326 = t329 * qJD(2);
	t405 = pkin(1) * pkin(5);
	t369 = t326 * t405;
	t340 = pkin(1) ^ 2;
	t328 = t396 * t397 - t398 * t399;
	t395 = pkin(1) * t328;
	t374 = -0.2e1 * pkin(5) * t395 + t340;
	t404 = -pkin(6) - pkin(2);
	t317 = (pkin(5) - t404) * (pkin(5) + t404) + t374;
	t403 = -pkin(6) + pkin(2);
	t318 = (pkin(5) - t403) * (pkin(5) + t403) + t374;
	t375 = t317 + t318;
	t312 = t375 * t369;
	t381 = t318 * t317;
	t341 = sqrt(-t381);
	t315 = 0.1e1 / t341;
	t408 = t312 * t315;
	t308 = t394 * t408;
	t339 = pkin(5) ^ 2;
	t323 = t339 + t374;
	t319 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t323;
	t324 = -pkin(5) + t395;
	t371 = 0.2e1 * t324 * pkin(5);
	t366 = -t319 + t371;
	t327 = t328 * qJD(2);
	t377 = t327 * t341;
	t298 = -t308 + (t366 * t326 + t377) * pkin(1);
	t368 = t340 * t329 * t326;
	t362 = pkin(5) * t368;
	t378 = t326 * t341;
	t382 = t315 * t324;
	t299 = -t312 * t382 - 0.2e1 * t362 + (-t327 * t319 - t378) * pkin(1);
	t320 = 0.1e1 / t323;
	t338 = 0.1e1 / pkin(6);
	t311 = t319 * t394 - t324 * t341;
	t334 = sin(pkin(15));
	t384 = t311 * t334;
	t376 = t329 * t341;
	t310 = -pkin(1) * t376 - t324 * t319;
	t336 = cos(pkin(15));
	t385 = t310 * t336;
	t354 = t384 + t385;
	t321 = 0.1e1 / t323 ^ 2;
	t365 = t321 * t369;
	t400 = t336 / 0.2e1;
	t401 = t334 / 0.2e1;
	t286 = ((t298 * t400 + t299 * t401) * t320 + t354 * t365) * t338;
	t379 = t320 * t338;
	t306 = (t385 / 0.2e1 + t384 / 0.2e1) * t379;
	t303 = 0.1e1 / t306 ^ 2;
	t409 = t286 * t303;
	t361 = t375 * t405;
	t313 = t329 * t361;
	t407 = t315 * t313;
	t360 = t339 * t368;
	t406 = -t315 * (-t327 * t361 - 0.4e1 * t360) - 0.1e1 / t381 * t312 * t407;
	t302 = 0.1e1 / t306;
	t402 = -t334 / 0.2e1;
	t393 = t340 * pkin(5);
	t383 = t311 * t336;
	t386 = t310 * t334;
	t353 = -t383 + t386;
	t287 = ((t298 * t402 + t299 * t400) * t320 - t353 * t365) * t338;
	t307 = (t383 / 0.2e1 - t386 / 0.2e1) * t379;
	t305 = t307 ^ 2;
	t296 = t305 * t303 + 0.1e1;
	t294 = 0.1e1 / t296;
	t387 = t303 * t307;
	t283 = (-t286 * t387 + t287 * t302) * t294;
	t363 = t319 + t407;
	t300 = (t328 * t341 + (-t363 + t371) * t329) * pkin(1);
	t301 = -t313 * t382 - 0.2e1 * t329 ^ 2 * t393 + (-t328 * t319 - t376) * pkin(1);
	t370 = t321 * t405;
	t364 = t329 * t370;
	t290 = ((t300 * t402 + t301 * t400) * t320 - t353 * t364) * t338;
	t291 = ((t300 * t400 + t301 * t401) * t320 + t354 * t364) * t338;
	t284 = (t290 * t302 - t291 * t387) * t294;
	t392 = t283 * t284;
	t333 = sin(qJ(1));
	t391 = t283 * t333;
	t335 = cos(qJ(1));
	t390 = t283 * t335;
	t388 = t302 * t409;
	t389 = (t287 * t387 - t305 * t388) / t296 ^ 2;
	t380 = t320 * t334;
	t373 = qJD(1) * t333;
	t372 = qJD(1) * t335;
	t367 = t320 * t400;
	t297 = atan2(t307, t306);
	t292 = sin(t297);
	t293 = cos(t297);
	t357 = r_i_i_C(1) * t292 + r_i_i_C(2) * t293;
	t356 = t320 * t321 * t360;
	t352 = -r_i_i_C(1) * t293 + r_i_i_C(2) * t292 + pkin(7);
	t351 = t334 * t356;
	t350 = t357 * t335;
	t349 = 0.4e1 * t336 * t356;
	t348 = t298 * t329 + t300 * t326 - t310 * t327;
	t347 = t299 * t329 + t301 * t326 - t311 * t327;
	t289 = 0.4e1 * t362 + (t328 * t408 + t378 + t406 * t329 - (t366 - t407) * t327) * pkin(1);
	t288 = -t308 + t406 * t324 + (0.2e1 * t326 * t328 + 0.4e1 * t327 * t329) * t393 + (-t363 * t326 + t377) * pkin(1);
	t282 = (-t294 * t409 - 0.2e1 * t302 * t389) * t290 + (0.2e1 * t387 * t389 + (-t287 * t303 + 0.2e1 * t307 * t388) * t294) * t291 + ((t288 * t367 + t311 * t349 - t289 * t380 / 0.2e1 - 0.4e1 * t310 * t351) * t302 - (t289 * t367 + t310 * t349 + t288 * t380 / 0.2e1 + 0.4e1 * t311 * t351) * t387 + ((t347 * t302 - t348 * t387) * t336 + (-t348 * t302 - t347 * t387) * t334) * t370) * t294 * t338;
	t1 = [t357 * t391 + (-r_i_i_C(3) * t333 + t352 * t335) * qJD(1), -t282 * t350 + ((t292 * t390 + t293 * t373) * r_i_i_C(2) + (t292 * t373 - t293 * t390) * r_i_i_C(1)) * t284, 0, 0; -t283 * t350 + (r_i_i_C(3) * t335 + t352 * t333) * qJD(1), -t357 * t333 * t282 + ((t292 * t391 - t293 * t372) * r_i_i_C(2) + (-t292 * t372 - t293 * t391) * r_i_i_C(1)) * t284, 0, 0; 0, (-t282 * t292 - t293 * t392) * r_i_i_C(2) + (t282 * t293 - t292 * t392) * r_i_i_C(1), 0, 0;];
	JaD_transl = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_transl_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:50
	% EndTime: 2020-04-20 16:21:00
	% DurationCPUTime: 3.24s
	% Computational Cost: add. (51152->100), mult. (81810->203), div. (2926->9), fcn. (51247->13), ass. (0->112)
	t403 = sin(qJ(2));
	t404 = sin(pkin(16));
	t405 = cos(qJ(2));
	t406 = cos(pkin(16));
	t333 = t403 * t404 - t405 * t406;
	t334 = t403 * t406 + t405 * t404;
	t346 = pkin(1) ^ 2;
	t402 = pkin(5) * t333;
	t382 = -0.2e1 * pkin(1) * t402 + t346;
	t411 = -pkin(6) - pkin(2);
	t322 = (pkin(5) - t411) * (pkin(5) + t411) + t382;
	t410 = -pkin(6) + pkin(2);
	t323 = (pkin(5) - t410) * (pkin(5) + t410) + t382;
	t389 = t323 * t322;
	t347 = sqrt(-t389);
	t344 = pkin(5) ^ 2;
	t328 = t344 + t382;
	t324 = pkin(2) ^ 2 - pkin(6) ^ 2 + t328;
	t383 = t322 + t323;
	t412 = pkin(1) * pkin(5);
	t370 = t383 * t412;
	t318 = t334 * t370;
	t320 = 0.1e1 / t347;
	t416 = t320 * t318;
	t372 = t324 + t416;
	t329 = pkin(1) - t402;
	t400 = t329 * pkin(1);
	t305 = (t333 * t347 + (-t372 - 0.2e1 * t400) * t334) * pkin(5);
	t384 = t334 * t347;
	t390 = t320 * t329;
	t399 = t344 * pkin(1);
	t306 = t318 * t390 - 0.2e1 * t334 ^ 2 * t399 + (-t333 * t324 - t384) * pkin(5);
	t325 = 0.1e1 / t328;
	t345 = 0.1e1 / pkin(2);
	t401 = pkin(5) * t334;
	t316 = t324 * t401 + t329 * t347;
	t340 = cos(pkin(19));
	t391 = t316 * t340;
	t315 = -pkin(5) * t384 + t329 * t324;
	t339 = sin(pkin(19));
	t394 = t315 * t339;
	t361 = t391 + t394;
	t326 = 0.1e1 / t328 ^ 2;
	t381 = t326 * t412;
	t373 = t334 * t381;
	t407 = t340 / 0.2e1;
	t409 = t339 / 0.2e1;
	t295 = ((t305 * t409 + t306 * t407) * t325 + t361 * t373) * t345;
	t392 = t316 * t339;
	t393 = t315 * t340;
	t362 = -t392 + t393;
	t408 = -t340 / 0.2e1;
	t296 = ((t305 * t408 + t306 * t409) * t325 - t362 * t373) * t345;
	t387 = t325 * t345;
	t311 = (-t393 / 0.2e1 + t392 / 0.2e1) * t387;
	t308 = 0.1e1 / t311 ^ 2;
	t312 = (t391 / 0.2e1 + t394 / 0.2e1) * t387;
	t310 = t312 ^ 2;
	t302 = t310 * t308 + 0.1e1;
	t300 = 0.1e1 / t302;
	t307 = 0.1e1 / t311;
	t395 = t308 * t312;
	t289 = 0.1e1 + (t295 * t307 - t296 * t395) * t300;
	t299 = qJ(2) + atan2(t312, t311);
	t297 = sin(t299);
	t298 = cos(t299);
	t364 = r_i_i_C(1) * t297 + r_i_i_C(2) * t298;
	t378 = t403 * pkin(1);
	t419 = qJD(1) * (t364 * t289 + t378);
	t331 = t334 * qJD(2);
	t380 = t331 * t412;
	t317 = t383 * t380;
	t417 = t317 * t320;
	t313 = t401 * t417;
	t375 = t324 + 0.2e1 * t400;
	t332 = t333 * qJD(2);
	t385 = t332 * t347;
	t303 = -t313 + (-t375 * t331 + t385) * pkin(5);
	t377 = t344 * t334 * t331;
	t371 = pkin(1) * t377;
	t386 = t331 * t347;
	t304 = t317 * t390 - 0.2e1 * t371 + (-t332 * t324 - t386) * pkin(5);
	t374 = t326 * t380;
	t292 = ((t303 * t408 + t304 * t409) * t325 - t362 * t374) * t345;
	t418 = t292 * t308;
	t291 = ((t303 * t409 + t304 * t407) * t325 + t361 * t374) * t345;
	t288 = qJD(2) + (t291 * t307 - t292 * t395) * t300;
	t369 = qJD(2) * t378;
	t415 = t364 * t288 + t369;
	t367 = t346 * t377;
	t413 = 0.1e1 / t389 * t317 * t416 + t320 * (-t332 * t370 - 0.4e1 * t367);
	t398 = t288 * t289;
	t396 = t307 * t418;
	t397 = (t291 * t395 - t310 * t396) / t302 ^ 2;
	t388 = t325 * t340;
	t379 = t405 * pkin(1);
	t376 = t325 * t409;
	t363 = t325 * t326 * t367;
	t360 = -r_i_i_C(1) * t298 + r_i_i_C(2) * t297 - pkin(13) - t379;
	t359 = t340 * t363;
	t293 = -t313 + t413 * t329 + (0.2e1 * t331 * t333 + 0.4e1 * t332 * t334) * t399 + (-t372 * t331 + t385) * pkin(5);
	t294 = 0.4e1 * t371 + (t333 * t417 + t386 - t413 * t334 - (-t375 - t416) * t332) * pkin(5);
	t354 = t304 * t334 + t306 * t331 - t316 * t332;
	t355 = t303 * t334 + t305 * t331 - t315 * t332;
	t356 = 0.4e1 * t339 * t363;
	t287 = (-t300 * t418 - 0.2e1 * t307 * t397) * t295 + (0.2e1 * t395 * t397 + (-t291 * t308 + 0.2e1 * t312 * t396) * t300) * t296 + ((t293 * t388 / 0.2e1 + 0.4e1 * t316 * t359 + t294 * t376 + t315 * t356) * t307 - (-t294 * t388 / 0.2e1 - 0.4e1 * t315 * t359 + t293 * t376 + t316 * t356) * t395 + ((t354 * t307 + t355 * t395) * t340 + (t355 * t307 - t354 * t395) * t339) * t381) * t300 * t345;
	t358 = -t287 * t297 - t298 * t398;
	t357 = -t287 * t298 + t297 * t398;
	t353 = t358 * r_i_i_C(1) + t357 * r_i_i_C(2) - qJD(2) * t379;
	t342 = cos(qJ(1));
	t341 = sin(qJ(1));
	t1 = [t415 * t341 + (-r_i_i_C(3) * t341 + t360 * t342) * qJD(1), t341 * t419 + t353 * t342, 0, 0; -t415 * t342 + (r_i_i_C(3) * t342 + t360 * t341) * qJD(1), t353 * t341 - t342 * t419, 0, 0; 0, -t357 * r_i_i_C(1) + t358 * r_i_i_C(2) - t369, 0, 0;];
	JaD_transl = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_transl_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:22:25
	% EndTime: 2020-04-20 16:25:05
	% DurationCPUTime: 74.98s
	% Computational Cost: add. (2041495->263), mult. (3177788->556), div. (119757->18), fcn. (1988155->22), ass. (0->256)
	t807 = pkin(5) ^ 2;
	t811 = pkin(1) ^ 2;
	t949 = sin(qJ(2));
	t950 = sin(pkin(16));
	t951 = cos(qJ(2));
	t952 = cos(pkin(16));
	t792 = t949 * t950 - t951 * t952;
	t942 = pkin(5) * t792;
	t900 = -0.2e1 * pkin(1) * t942 + t811;
	t787 = t807 + t900;
	t784 = 0.1e1 / t787;
	t785 = 0.1e1 / t787 ^ 2;
	t786 = t784 * t785;
	t793 = t949 * t952 + t951 * t950;
	t979 = t793 * t807;
	t970 = -0.4e1 * t786 * t811 * t979;
	t790 = t793 * qJD(2);
	t810 = 0.1e1 / pkin(2);
	t783 = pkin(2) ^ 2 - pkin(6) ^ 2 + t787;
	t788 = pkin(1) - t942;
	t966 = pkin(5) + pkin(6);
	t967 = pkin(5) - pkin(6);
	t781 = (pkin(2) + t966) * (-pkin(2) + t967) + t900;
	t782 = (-pkin(2) + t966) * (pkin(2) + t967) + t900;
	t907 = t782 * t781;
	t813 = sqrt(-t907);
	t941 = pkin(5) * t793;
	t775 = t783 * t941 + t788 * t813;
	t804 = cos(qJ(3));
	t908 = t775 * t804;
	t903 = t793 * t813;
	t774 = -pkin(5) * t903 + t783 * t788;
	t802 = sin(qJ(3));
	t913 = t774 * t802;
	t831 = t908 / 0.2e1 + t913 / 0.2e1;
	t968 = pkin(1) * pkin(5);
	t896 = t785 * t968;
	t843 = 0.2e1 * (t781 + t782) * t968;
	t776 = t790 * t843;
	t791 = t792 * qJD(2);
	t885 = t790 * t979;
	t867 = pkin(1) * t885;
	t779 = 0.1e1 / t813;
	t957 = t779 / 0.2e1;
	t880 = t788 * t957;
	t905 = t790 * t813;
	t756 = t776 * t880 - 0.2e1 * t867 + (-t791 * t783 - t905) * pkin(5);
	t922 = t756 * t802;
	t980 = t776 * t779;
	t767 = -t941 * t980 / 0.2e1;
	t939 = t788 * pkin(1);
	t877 = t783 + 0.2e1 * t939;
	t904 = t791 * t813;
	t755 = t767 + (-t790 * t877 + t904) * pkin(5);
	t923 = t755 * t804;
	t909 = t775 * t802;
	t912 = t774 * t804;
	t976 = t909 - t912;
	t719 = ((-t922 / 0.2e1 + t923 / 0.2e1 - t831 * qJD(3)) * t784 - t976 * t790 * t896) * t810;
	t846 = t908 + t913;
	t828 = t790 * t846;
	t832 = -t909 / 0.2e1 + t912 / 0.2e1;
	t921 = t756 * t804;
	t924 = t755 * t802;
	t720 = (t828 * t896 + (t921 / 0.2e1 + t924 / 0.2e1 + t832 * qJD(3)) * t784) * t810;
	t799 = pkin(18) + pkin(19);
	t797 = sin(t799);
	t798 = cos(t799);
	t713 = t719 * t798 - t720 * t797;
	t809 = pkin(3) ^ 2;
	t808 = pkin(4) ^ 2;
	t906 = t784 * t810;
	t765 = t832 * t906;
	t766 = t831 * t906;
	t743 = -t765 * t798 + t766 * t797;
	t944 = pkin(4) * t743;
	t969 = -2 * pkin(3);
	t902 = -t944 * t969 + t808;
	t738 = t809 + t902;
	t734 = pkin(8) ^ 2 - pkin(10) ^ 2 + t738;
	t965 = -pkin(8) - pkin(10);
	t732 = (pkin(3) - t965) * (pkin(3) + t965) + t902;
	t964 = pkin(10) - pkin(8);
	t733 = (pkin(3) - t964) * (pkin(3) + t964) + t902;
	t928 = t733 * t732;
	t812 = sqrt(-t928);
	t851 = -t719 * t797 - t720 * t798;
	t982 = -t713 * t812 + t851 * t734;
	t897 = 2 * pkin(3);
	t842 = pkin(4) * (t732 + t733) * t897;
	t686 = t713 * t842;
	t850 = -t765 * t797 - t766 * t798;
	t878 = t850 * t808 * t969;
	t739 = -pkin(3) - t944;
	t722 = 0.1e1 / t812;
	t960 = -t722 / 0.2e1;
	t883 = t739 * t960;
	t673 = t982 * pkin(4) + t686 * t883 + t713 * t878;
	t945 = pkin(4) * t850;
	t706 = -t734 * t739 - t812 * t945;
	t703 = 0.1e1 / t706 ^ 2;
	t707 = t734 * t945 - t739 * t812;
	t705 = t707 ^ 2;
	t689 = t703 * t705 + 0.1e1;
	t931 = t703 * t707;
	t876 = t739 * t897 - t734;
	t958 = -t850 / 0.2e1;
	t882 = t722 * t958;
	t977 = t851 * t812;
	t672 = (t686 * t882 + t713 * t876 - t977) * pkin(4);
	t702 = 0.1e1 / t706;
	t934 = t672 * t702 * t703;
	t981 = 0.2e1 * (t673 * t931 - t705 * t934) / t689 ^ 2;
	t687 = 0.1e1 / t689;
	t864 = pkin(3) * pkin(4) * pkin(8) * t687 * t713;
	t940 = pkin(8) * t738;
	t893 = t687 * t940;
	t869 = t703 * t893;
	t892 = t702 * t940;
	t975 = t672 * t869 + 0.2e1 * t702 * t864 + t892 * t981;
	t801 = cos(pkin(19));
	t910 = t775 * t801;
	t800 = sin(pkin(19));
	t915 = t774 * t800;
	t848 = t910 + t915;
	t829 = t790 * t848;
	t954 = t801 / 0.2e1;
	t956 = t800 / 0.2e1;
	t724 = ((t755 * t956 + t756 * t954) * t784 + t829 * t896) * t810;
	t911 = t775 * t800;
	t914 = t774 * t801;
	t849 = -t911 + t914;
	t830 = t790 * t849;
	t955 = -t801 / 0.2e1;
	t725 = ((t755 * t955 + t756 * t956) * t784 - t830 * t896) * t810;
	t763 = (-t914 / 0.2e1 + t911 / 0.2e1) * t906;
	t760 = 0.1e1 / t763 ^ 2;
	t764 = (t910 / 0.2e1 + t915 / 0.2e1) * t906;
	t762 = t764 ^ 2;
	t751 = t760 * t762 + 0.1e1;
	t749 = 0.1e1 / t751;
	t916 = t760 * t764;
	t887 = t749 * t916;
	t759 = 0.1e1 / t763;
	t926 = t749 * t759;
	t698 = -t724 * t926 + t725 * t887 - qJD(2);
	t806 = 0.1e1 / pkin(8);
	t891 = t707 * t940;
	t868 = t703 * t891;
	t853 = t687 * t868;
	t844 = 0.2e1 * t853;
	t854 = t687 * t806 * t892;
	t845 = -0.2e1 * t854;
	t736 = 0.1e1 / t738 ^ 2;
	t946 = pkin(3) * t736;
	t895 = pkin(4) * t946;
	t872 = t707 * t895;
	t873 = t706 * t895;
	t735 = 0.1e1 / t738;
	t959 = t735 / 0.2e1;
	t663 = (t673 * t959 + t713 * t872) * t845 + (t672 * t959 + t713 * t873) * t806 * t844 + t698;
	t748 = pkin(18) - atan2(t764, t763) - qJ(2);
	t746 = sin(t748);
	t881 = t806 * t959;
	t685 = -atan2(t707 * t881, t706 * t881) + t748;
	t683 = sin(t685);
	t684 = cos(t685);
	t858 = r_i_i_C(1) * t683 - r_i_i_C(2) * t684;
	t889 = t949 * pkin(1);
	t866 = qJD(2) * t889;
	t974 = -pkin(3) * t698 * t746 + t663 * t858 - t866;
	t777 = t793 * t843;
	t948 = pkin(1) * t807;
	t758 = t777 * t880 - 0.2e1 * t793 ^ 2 * t948 + (-t783 * t792 - t903) * pkin(5);
	t917 = t758 * t804;
	t862 = t777 * t957 + t783;
	t757 = (t792 * t813 + (-t862 - 0.2e1 * t939) * t793) * pkin(5);
	t920 = t757 * t802;
	t833 = t917 / 0.2e1 + t920 / 0.2e1;
	t874 = t793 * t896;
	t730 = (t784 * t833 + t846 * t874) * t810;
	t918 = t758 * t802;
	t919 = t757 * t804;
	t834 = -t918 / 0.2e1 + t919 / 0.2e1;
	t731 = (-t784 * t834 + t874 * t976) * t810;
	t718 = -t730 * t797 - t731 * t798;
	t691 = t718 * t842;
	t717 = -t730 * t798 + t731 * t797;
	t674 = (t691 * t882 - t717 * t812 + t718 * t876) * pkin(4);
	t670 = (t674 * t959 + t718 * t873) * t806;
	t675 = t691 * t883 + t718 * t878 + (t717 * t734 - t718 * t812) * pkin(4);
	t671 = (t675 * t959 + t718 * t872) * t806;
	t728 = ((t757 * t956 + t758 * t954) * t784 + t848 * t874) * t810;
	t729 = ((t757 * t955 + t758 * t956) * t784 - t849 * t874) * t810;
	t699 = -t728 * t926 + t729 * t887 - 0.1e1;
	t859 = 0.2e1 * t893;
	t664 = (t670 * t931 - t671 * t702) * t859 + t699;
	t933 = t699 * t746;
	t973 = -pkin(3) * t933 + t664 * t858 - t889;
	t971 = -0.2e1 * t687 * t891 * t934 + t673 * t869 - 0.2e1 * t864 * t931 - t868 * t981;
	t963 = -t686 / 0.2e1;
	t962 = -t691 / 0.2e1;
	t714 = t850 * t842;
	t961 = -t714 / 0.2e1;
	t953 = t802 / 0.2e1;
	t947 = pkin(3) * t735;
	t943 = pkin(4) * t806;
	t938 = t663 * t683;
	t937 = t663 * t684;
	t803 = sin(qJ(1));
	t936 = t663 * t803;
	t805 = cos(qJ(1));
	t935 = t663 * t805;
	t929 = t725 * t759 * t760;
	t932 = 0.2e1 * (t724 * t916 - t762 * t929) / t751 ^ 2;
	t930 = t713 * t808;
	t927 = t735 * t739;
	t925 = t749 * t760;
	t899 = qJD(1) * t803;
	t898 = qJD(1) * t805;
	t894 = 0.4e1 * t735 * t736 * t809;
	t890 = t951 * pkin(1);
	t886 = 0.1e1 / t907 * t777 * t980;
	t884 = -t686 * t722 / t928 / 0.4e1;
	t879 = t808 * t897;
	t871 = t707 * t894;
	t870 = -0.8e1 * t809 * t930;
	t865 = t811 * t885;
	t863 = t850 * t884;
	t747 = cos(t748);
	t841 = -pkin(3) * t747 + r_i_i_C(1) * t684 + r_i_i_C(2) * t683 - pkin(13) - t890;
	t681 = (t714 * t882 - t743 * t812 + t850 * t876) * pkin(4);
	t676 = (t681 * t959 + t850 * t873) * t806;
	t682 = t714 * t883 + t850 * t878 + (t734 * t743 - t812 * t850) * pkin(4);
	t677 = (t682 * t959 + t850 * t872) * t806;
	t680 = t842 * t851 + t850 * t870;
	t825 = t806 * (t706 * t894 + 0.2e1 * t947) * t930;
	t662 = -0.2e1 * (((t680 * t960 + t714 * t884) * t739 - 0.2e1 * t850 * t851 * t879) * t959 + (-t743 * t947 + t850 * t871) * t930 + ((-t713 * t734 - t977 + (t713 * t961 + t850 * t963) * t722) * t959 + (t673 * t850 + t682 * t713 + t707 * t851) * t946) * pkin(4)) * t854 + 0.2e1 * (t850 * t825 + ((t714 * t863 + (t680 * t958 + t743 * t963 + t851 * t961) * t722 - t982) * t959 + (t851 * t927 + (t672 * t850 + t681 * t713 + t706 * t851) * t736) * pkin(3)) * t943) * t853 + 0.2e1 * t975 * t677 + 0.2e1 * t971 * t676;
	t838 = t662 * t858;
	t773 = -t791 * t843 - 0.8e1 * t865;
	t726 = t767 + (t886 / 0.4e1 + t773 * t957) * t788 + (0.2e1 * t790 * t792 + 0.4e1 * t791 * t793) * t948 + (-t790 * t862 + t904) * pkin(5);
	t727 = 0.4e1 * t867 + (t905 - t793 * t886 / 0.4e1 + t877 * t791 + (t792 * t776 / 0.2e1 + t791 * t777 / 0.2e1 - t793 * t773 / 0.2e1) * t779) * pkin(5);
	t826 = t756 * t793 + t758 * t790 - t775 * t791;
	t827 = t755 * t793 + t757 * t790 - t774 * t791;
	t668 = (-(-t829 * t970 + (t726 * t954 + t727 * t956) * t784 + (t800 * t827 + t801 * t826) * t896) * t926 + (t830 * t970 + (t726 * t956 + t727 * t955) * t784 + (t800 * t826 - t801 * t827) * t896) * t887) * t810 + (t725 * t925 + t759 * t932) * t728 + (-0.2e1 * t764 * t749 * t929 + t724 * t925 - t916 * t932) * t729;
	t692 = (0.4e1 * t976 * t786 * t865 + (-t727 * t804 / 0.2e1 + t726 * t953 + t833 * qJD(3)) * t784 + (-t976 * t791 - (-t918 + t919) * t790 + (qJD(3) * t846 + t922 - t923) * t793) * t896) * t810;
	t693 = (-t828 * t970 + (t726 * t804 / 0.2e1 + t727 * t953 + t834 * qJD(3)) * t784 + (-t846 * t791 - (-t917 - t920) * t790 + (-qJD(3) * t976 + t921 + t924) * t793) * t896) * t810;
	t679 = -t692 * t798 - t693 * t797;
	t669 = t679 * t842 + t718 * t870;
	t678 = t692 * t797 - t693 * t798;
	t661 = (((t669 * t960 + t691 * t884) * t739 + (-t679 * t850 - t718 * t851) * t879) * t959 + (-t717 * t947 + t718 * t871) * t930 + ((t678 * t734 - t679 * t812 + (t713 * t962 + t718 * t963) * t722) * t959 + (t673 * t718 + t675 * t713 + t679 * t707) * t946) * pkin(4)) * t845 + (t718 * t825 + ((-t678 * t812 + t691 * t863 - t679 * t734 + (t669 * t958 + t717 * t963 + t851 * t962) * t722) * t959 + (t679 * t927 + (t672 * t718 + t674 * t713 + t679 * t706) * t736) * pkin(3)) * t943) * t844 + t668 + 0.2e1 * t971 * t670 + 0.2e1 * t975 * t671;
	t836 = t661 * t683 + t664 * t937;
	t835 = -t661 * t684 + t664 * t938;
	t824 = t836 * r_i_i_C(1) + t835 * r_i_i_C(2) - qJD(2) * t890 + (-t698 * t699 * t747 - t668 * t746) * pkin(3);
	t666 = (t676 * t931 - t677 * t702) * t859;
	t1 = [-t974 * t803 + (-r_i_i_C(3) * t803 + t805 * t841) * qJD(1), t824 * t805 - t973 * t899, t805 * t838 + ((t683 * t935 + t684 * t899) * r_i_i_C(2) + (-t683 * t899 + t684 * t935) * r_i_i_C(1)) * t666, 0; t974 * t805 + (r_i_i_C(3) * t805 + t803 * t841) * qJD(1), t824 * t803 + t973 * t898, t803 * t838 + ((t683 * t936 - t684 * t898) * r_i_i_C(2) + (t683 * t898 + t684 * t936) * r_i_i_C(1)) * t666, 0; 0, -t866 + t836 * r_i_i_C(2) - t835 * r_i_i_C(1) + (-t668 * t747 + t698 * t933) * pkin(3), (t662 * t683 + t666 * t937) * r_i_i_C(2) + (t662 * t684 - t666 * t938) * r_i_i_C(1), 0;];
	JaD_transl = t1;
end