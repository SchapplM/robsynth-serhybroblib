% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh3m1DE2
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JRD_rot [9x4]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-20 16:51
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh3m1DE2_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1DE2_jacobiRD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1DE2_jacobiRD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1DE2_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1DE2_jacobiRD_rot_sym_varpar: pkin has to be [19x1] (double)');
JRD_rot=NaN(9,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0; -t31, 0, 0, 0; 0, 0, 0, 0; t31, 0, 0, 0; -t30, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (11->9), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t32 = sin(qJ(1));
	t39 = qJD(1) * t32;
	t34 = cos(qJ(1));
	t38 = qJD(1) * t34;
	t31 = sin(qJ(2));
	t37 = qJD(2) * t31;
	t33 = cos(qJ(2));
	t36 = qJD(2) * t33;
	t35 = qJD(2) * t34;
	t30 = t32 * t37 - t33 * t38;
	t29 = t31 * t38 + t32 * t36;
	t28 = t31 * t35 + t33 * t39;
	t27 = t31 * t39 - t33 * t35;
	t1 = [t30, t27, 0, 0; -t28, -t29, 0, 0; 0, -t37, 0, 0; t29, t28, 0, 0; t27, t30, 0, 0; 0, -t36, 0, 0; -t39, 0, 0, 0; t38, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:20:42
	% EndTime: 2020-04-20 16:20:42
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (57->10), mult. (54->14), div. (0->0), fcn. (54->4), ass. (0->17)
	t77 = qJD(2) + qJD(3);
	t79 = sin(qJ(1));
	t84 = t77 * t79;
	t80 = cos(qJ(1));
	t83 = t77 * t80;
	t82 = qJD(1) * t79;
	t81 = qJD(1) * t80;
	t78 = qJ(2) + qJ(3);
	t76 = cos(t78);
	t75 = sin(t78);
	t74 = t77 * t76;
	t73 = t77 * t75;
	t72 = -t75 * t84 + t76 * t81;
	t71 = t75 * t81 + t76 * t84;
	t70 = t75 * t83 + t76 * t82;
	t69 = -t75 * t82 + t76 * t83;
	t1 = [t72, t69, t69, 0; t70, t71, t71, 0; 0, t73, t73, 0; -t71, -t70, -t70, 0; t69, t72, t72, 0; 0, t74, t74, 0; -t82, 0, 0, 0; t81, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:28:30
	% EndTime: 2020-04-20 16:32:12
	% DurationCPUTime: 147.96s
	% Computational Cost: add. (3964713->228), mult. (6172546->464), div. (235892->14), fcn. (3859290->19), ass. (0->230)
	t1047 = pkin(5) ^ 2;
	t1051 = pkin(1) ^ 2;
	t1174 = sin(qJ(2));
	t1175 = sin(pkin(16));
	t1176 = cos(qJ(2));
	t1177 = cos(pkin(16));
	t1032 = t1174 * t1175 - t1176 * t1177;
	t1165 = pkin(5) * t1032;
	t1124 = -0.2e1 * pkin(1) * t1165 + t1051;
	t1027 = t1047 + t1124;
	t1024 = 0.1e1 / t1027;
	t1025 = 0.1e1 / t1027 ^ 2;
	t1195 = 0.4e1 * t1024 * t1025;
	t1048 = pkin(4) ^ 2;
	t1023 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1027;
	t1028 = pkin(1) - t1165;
	t1186 = -pkin(2) - pkin(6);
	t1021 = (pkin(5) - t1186) * (pkin(5) + t1186) + t1124;
	t1185 = -pkin(6) + pkin(2);
	t1022 = (pkin(5) - t1185) * (pkin(5) + t1185) + t1124;
	t1130 = t1022 * t1021;
	t1052 = sqrt(-t1130);
	t1033 = t1174 * t1177 + t1176 * t1175;
	t1164 = pkin(5) * t1033;
	t1015 = t1023 * t1164 + t1028 * t1052;
	t1042 = sin(qJ(3));
	t1132 = t1015 * t1042;
	t1126 = t1033 * t1052;
	t1014 = -pkin(5) * t1126 + t1023 * t1028;
	t1044 = cos(qJ(3));
	t1133 = t1014 * t1044;
	t1076 = -t1132 / 0.2e1 + t1133 / 0.2e1;
	t1050 = 0.1e1 / pkin(2);
	t1129 = t1024 * t1050;
	t1005 = t1076 * t1129;
	t1131 = t1015 * t1044;
	t1134 = t1014 * t1042;
	t1075 = t1131 / 0.2e1 + t1134 / 0.2e1;
	t1006 = t1075 * t1129;
	t1039 = pkin(18) + pkin(19);
	t1037 = sin(t1039);
	t1038 = cos(t1039);
	t996 = -t1005 * t1038 + t1006 * t1037;
	t1172 = pkin(3) * t996;
	t1188 = -2 * pkin(4);
	t1146 = -t1172 * t1188 + t1048;
	t1184 = -pkin(8) - pkin(10);
	t986 = (pkin(3) - t1184) * (pkin(3) + t1184) + t1146;
	t1183 = pkin(10) - pkin(8);
	t987 = (pkin(3) - t1183) * (pkin(3) + t1183) + t1146;
	t1156 = t987 * t986;
	t1053 = sqrt(-t1156);
	t1030 = t1033 * qJD(2);
	t1187 = pkin(1) * pkin(5);
	t1122 = t1025 * t1187;
	t1084 = 0.2e1 * (t1021 + t1022) * t1187;
	t1016 = t1030 * t1084;
	t1031 = t1032 * qJD(2);
	t1191 = t1033 * t1047;
	t1106 = t1030 * t1191;
	t1097 = pkin(1) * t1106;
	t1019 = 0.1e1 / t1052;
	t1171 = t1019 / 0.2e1;
	t1104 = t1028 * t1171;
	t1128 = t1030 * t1052;
	t1002 = t1016 * t1104 - 0.2e1 * t1097 + (-t1031 * t1023 - t1128) * pkin(5);
	t1140 = t1002 * t1042;
	t1192 = t1016 * t1019;
	t1007 = -t1164 * t1192 / 0.2e1;
	t1163 = t1028 * pkin(1);
	t1101 = t1023 + 0.2e1 * t1163;
	t1127 = t1031 * t1052;
	t1001 = t1007 + (-t1030 * t1101 + t1127) * pkin(5);
	t1141 = t1001 * t1044;
	t1189 = t1132 - t1133;
	t977 = ((-t1140 / 0.2e1 + t1141 / 0.2e1 - t1075 * qJD(3)) * t1024 - t1189 * t1030 * t1122) * t1050;
	t1085 = t1131 + t1134;
	t1069 = t1085 * t1030;
	t1139 = t1002 * t1044;
	t1142 = t1001 * t1042;
	t978 = (t1069 * t1122 + (t1139 / 0.2e1 + t1142 / 0.2e1 + t1076 * qJD(3)) * t1024) * t1050;
	t970 = t1037 * t978 - t1038 * t977;
	t1194 = t970 * t1053;
	t1046 = 0.1e1 / pkin(10);
	t1049 = pkin(3) ^ 2;
	t992 = t1049 + t1146;
	t990 = 0.1e1 / t992 ^ 2;
	t1123 = pkin(3) * pkin(4) * t990;
	t1040 = sin(pkin(17));
	t1087 = -t1005 * t1037 - t1006 * t1038;
	t1173 = pkin(3) * t1087;
	t988 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t992;
	t993 = pkin(4) + t1172;
	t969 = t1053 * t993 + t988 * t1173;
	t1148 = t969 * t1040;
	t1041 = cos(pkin(17));
	t968 = -t1053 * t1173 + t988 * t993;
	t1149 = t968 * t1041;
	t1064 = (t1148 - t1149) * t1123;
	t1169 = -t1041 / 0.2e1;
	t1170 = t1040 / 0.2e1;
	t1109 = t993 * t1188 - t988;
	t1178 = -t1087 / 0.2e1;
	t980 = 0.1e1 / t1053;
	t1118 = t980 * t1178;
	t1089 = -t1037 * t977 - t1038 * t978;
	t1190 = t1089 * t1053;
	t1145 = 2 * pkin(4);
	t1088 = pkin(3) * (t986 + t987) * t1145;
	t964 = t970 * t1088;
	t943 = (-t1109 * t970 - t1118 * t964 - t1190) * pkin(3);
	t1102 = t1049 * t1087 * t1188;
	t1179 = t980 / 0.2e1;
	t1119 = t993 * t1179;
	t944 = -t964 * t1119 - t970 * t1102 + (t1089 * t988 + t1194) * pkin(3);
	t989 = 0.1e1 / t992;
	t935 = ((t943 * t1169 + t944 * t1170) * t989 - t970 * t1064) * t1046;
	t1152 = t1046 * t989;
	t962 = (-t1149 / 0.2e1 + t1148 / 0.2e1) * t1152;
	t959 = 0.1e1 / t962 ^ 2;
	t1193 = t935 * t959;
	t958 = 0.1e1 / t962;
	t1182 = t964 / 0.2e1;
	t1017 = t1033 * t1084;
	t1166 = pkin(1) * t1047;
	t1004 = t1017 * t1104 - 0.2e1 * t1033 ^ 2 * t1166 + (-t1023 * t1032 - t1126) * pkin(5);
	t1135 = t1004 * t1044;
	t1091 = t1017 * t1171 + t1023;
	t1003 = (t1032 * t1052 + (-t1091 - 0.2e1 * t1163) * t1033) * pkin(5);
	t1138 = t1003 * t1042;
	t1077 = t1135 / 0.2e1 + t1138 / 0.2e1;
	t1099 = t1033 * t1122;
	t984 = (t1024 * t1077 + t1085 * t1099) * t1050;
	t1136 = t1004 * t1042;
	t1137 = t1003 * t1044;
	t1078 = -t1136 / 0.2e1 + t1137 / 0.2e1;
	t985 = (-t1024 * t1078 + t1099 * t1189) * t1050;
	t976 = -t1037 * t984 - t1038 * t985;
	t965 = t976 * t1088;
	t1181 = -t965 / 0.2e1;
	t974 = t1087 * t1088;
	t1180 = -t974 / 0.2e1;
	t1168 = t1041 / 0.2e1;
	t1167 = t1042 / 0.2e1;
	t1147 = t969 * t1041;
	t1150 = t968 * t1040;
	t963 = (t1147 / 0.2e1 + t1150 / 0.2e1) * t1152;
	t1158 = t959 * t963;
	t1063 = (t1147 + t1150) * t1123;
	t936 = ((t944 * t1168 + t943 * t1170) * t989 - t970 * t1063) * t1046;
	t961 = t963 ^ 2;
	t952 = t959 * t961 + 0.1e1;
	t950 = 0.1e1 / t952;
	t928 = qJD(2) + qJD(3) + (-t935 * t1158 + t936 * t958) * t950;
	t949 = qJ(2) + qJ(3) + atan2(t963, t962);
	t947 = sin(t949);
	t1162 = t928 * t947;
	t948 = cos(t949);
	t1161 = t928 * t948;
	t1159 = t958 * t1193;
	t1160 = 0.2e1 * (t936 * t1158 - t961 * t1159) / t952 ^ 2;
	t1157 = t964 * t980 / t1156;
	t1155 = t1041 * t989;
	t1043 = sin(qJ(1));
	t1154 = t1043 * t928;
	t1045 = cos(qJ(1));
	t1153 = t1045 * t928;
	t1151 = t1049 * t970;
	t1144 = qJD(1) * t1043;
	t1143 = qJD(1) * t1045;
	t1120 = -t1157 / 0.4e1;
	t1117 = t947 * t1144;
	t1116 = t948 * t1144;
	t1115 = t947 * t1143;
	t1114 = t948 * t1143;
	t1113 = t1048 * t1151;
	t1112 = t989 * t1170;
	t1111 = -t1155 / 0.2e1;
	t1110 = t1155 / 0.2e1;
	t1108 = t1049 * t1145;
	t1107 = 0.1e1 / t1130 * t1017 * t1192;
	t1105 = t950 * t1123;
	t1103 = -0.4e1 * pkin(4) * t1151;
	t1098 = 0.8e1 * t1113;
	t1096 = t1087 * t1157 / 0.4e1;
	t1093 = t989 * t990 * t1113;
	t1092 = t1051 * t1106;
	t1090 = t1041 * t1093;
	t1083 = -0.4e1 * t1040 * t1093;
	t1062 = t1158 * t1160 + (0.2e1 * t963 * t1159 - t936 * t959) * t950;
	t975 = t1037 * t985 - t1038 * t984;
	t946 = t965 * t1119 + t976 * t1102 + (-t1053 * t976 + t975 * t988) * pkin(3);
	t1013 = -t1031 * t1084 - 0.8e1 * t1092;
	t982 = t1007 + (t1107 / 0.4e1 + t1013 * t1171) * t1028 + (0.2e1 * t1030 * t1032 + 0.4e1 * t1031 * t1033) * t1166 + (-t1030 * t1091 + t1127) * pkin(5);
	t983 = 0.4e1 * t1097 + (t1128 - t1033 * t1107 / 0.4e1 + t1101 * t1031 + (t1032 * t1016 / 0.2e1 + t1031 * t1017 / 0.2e1 - t1033 * t1013 / 0.2e1) * t1019) * pkin(5);
	t966 = (t1189 * t1092 * t1195 + (-t983 * t1044 / 0.2e1 + t982 * t1167 + t1077 * qJD(3)) * t1024 + (-t1189 * t1031 - (-t1136 + t1137) * t1030 + (t1085 * qJD(3) + t1140 - t1141) * t1033) * t1122) * t1050;
	t967 = (t1051 * t1069 * t1191 * t1195 + (t982 * t1044 / 0.2e1 + t983 * t1167 + t1078 * qJD(3)) * t1024 + (-t1085 * t1031 - (-t1135 - t1138) * t1030 + (-qJD(3) * t1189 + t1139 + t1142) * t1033) * t1122) * t1050;
	t954 = -t1037 * t967 - t1038 * t966;
	t1066 = t944 * t976 - t946 * t970 + t954 * t969;
	t945 = (-t975 * t1053 + t1109 * t976 + t1118 * t965) * pkin(3);
	t1068 = t943 * t976 - t945 * t970 + t954 * t968;
	t1070 = -t958 * t1160 - t950 * t1193;
	t1072 = t976 * t1083;
	t1073 = -0.4e1 * t969 * t1090;
	t1074 = 0.4e1 * t968 * t1090;
	t940 = t1088 * t954 + t1098 * t976;
	t953 = t1037 * t966 - t1038 * t967;
	t931 = (t965 * t1120 + t940 * t1179) * t993 + (-t1087 * t954 - t1089 * t976 + t970 * t975) * t1108 + (t953 * t988 - t954 * t1053 + (-t1181 * t970 + t976 * t1182) * t980) * pkin(3);
	t933 = t976 * t1103 + (-t953 * t1053 + t965 * t1096 + t1109 * t954 + (t1089 * t1181 + t940 * t1178 + t975 * t1182) * t980) * pkin(3);
	t938 = ((t945 * t1169 + t946 * t1170) * t989 + t976 * t1064) * t1046;
	t939 = ((t946 * t1168 + t945 * t1170) * t989 + t976 * t1063) * t1046;
	t926 = t1070 * t939 + t1062 * t938 + (((t1072 * t968 + t1073 * t976 + t1110 * t931 + t1112 * t933) * t958 - (t1072 * t969 + t1074 * t976 + t1111 * t933 + t1112 * t931) * t1158) * t950 + ((t1066 * t958 + t1068 * t1158) * t1041 + (-t1066 * t1158 + t1068 * t958) * t1040) * t1105) * t1046;
	t929 = 0.1e1 + (-t938 * t1158 + t939 * t958) * t950;
	t1082 = t929 * t1161 + t926 * t947;
	t1081 = t929 * t1162 - t926 * t948;
	t957 = t974 * t1119 + t1087 * t1102 + (-t1053 * t1087 + t988 * t996) * pkin(3);
	t1065 = t1087 * t944 + t1089 * t969 - t957 * t970;
	t956 = (-t996 * t1053 + t1087 * t1109 + t1118 * t974) * pkin(3);
	t1067 = t1087 * t943 + t1089 * t968 - t956 * t970;
	t1071 = t1087 * t1083;
	t955 = t1087 * t1098 + t1088 * t1089;
	t934 = (t974 * t1120 + t955 * t1179) * t993 + (-0.2e1 * t1087 * t1089 + t970 * t996) * t1108 + (t970 * t988 - t1190 + (t1087 * t1182 - t1180 * t970) * t980) * pkin(3);
	t937 = t1087 * t1103 + (-t1194 + t974 * t1096 + t1109 * t1089 + (t1089 * t1180 + t955 * t1178 + t996 * t1182) * t980) * pkin(3);
	t941 = ((t956 * t1169 + t957 * t1170) * t989 + t1087 * t1064) * t1046;
	t942 = ((t957 * t1168 + t956 * t1170) * t989 + t1087 * t1063) * t1046;
	t927 = t1070 * t942 + t1062 * t941 + (((t1071 * t968 + t1073 * t1087 + t1110 * t934 + t1112 * t937) * t958 - (t1071 * t969 + t1074 * t1087 + t1111 * t937 + t1112 * t934) * t1158) * t950 + ((t1065 * t958 + t1067 * t1158) * t1041 + (-t1065 * t1158 + t1067 * t958) * t1040) * t1105) * t1046;
	t932 = 0.1e1 + (-t941 * t1158 + t942 * t958) * t950;
	t1080 = t932 * t1161 + t927 * t947;
	t1079 = t932 * t1162 - t927 * t948;
	t1 = [-t947 * t1154 + t1114, t1045 * t1082 - t1117 * t929, t1045 * t1080 - t1117 * t932, 0; t947 * t1153 + t1116, t1043 * t1082 + t1115 * t929, t1043 * t1080 + t1115 * t932, 0; 0, t1081, t1079, 0; -t948 * t1154 - t1115, -t1045 * t1081 - t1116 * t929, -t1045 * t1079 - t1116 * t932, 0; t948 * t1153 - t1117, -t1043 * t1081 + t1114 * t929, -t1043 * t1079 + t1114 * t932, 0; 0, t1082, t1080, 0; -t1144, 0, 0, 0; t1143, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:47:26
	% EndTime: 2020-04-20 16:51:33
	% DurationCPUTime: 231.24s
	% Computational Cost: add. (6489074->256), mult. (10085632->525), div. (389362->14), fcn. (6309768->21), ass. (0->258)
	t1658 = pkin(5) ^ 2;
	t1662 = pkin(1) ^ 2;
	t1811 = sin(qJ(2));
	t1812 = sin(pkin(16));
	t1813 = cos(qJ(2));
	t1814 = cos(pkin(16));
	t1641 = t1811 * t1812 - t1813 * t1814;
	t1797 = pkin(5) * t1641;
	t1749 = -0.2e1 * pkin(1) * t1797 + t1662;
	t1636 = t1658 + t1749;
	t1633 = 0.1e1 / t1636;
	t1634 = 0.1e1 / t1636 ^ 2;
	t1828 = 0.4e1 * t1633 * t1634;
	t1642 = t1811 * t1814 + t1813 * t1812;
	t1639 = t1642 * qJD(2);
	t1661 = 0.1e1 / pkin(2);
	t1632 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1636;
	t1637 = pkin(1) - t1797;
	t1818 = -pkin(6) - pkin(2);
	t1630 = (pkin(5) - t1818) * (pkin(5) + t1818) + t1749;
	t1817 = -pkin(6) + pkin(2);
	t1631 = (pkin(5) - t1817) * (pkin(5) + t1817) + t1749;
	t1760 = t1631 * t1630;
	t1664 = sqrt(-t1760);
	t1796 = pkin(5) * t1642;
	t1624 = t1632 * t1796 + t1637 * t1664;
	t1655 = cos(qJ(3));
	t1761 = t1624 * t1655;
	t1756 = t1642 * t1664;
	t1623 = -pkin(5) * t1756 + t1632 * t1637;
	t1652 = sin(qJ(3));
	t1764 = t1623 * t1652;
	t1694 = t1761 / 0.2e1 + t1764 / 0.2e1;
	t1819 = pkin(1) * pkin(5);
	t1748 = t1634 * t1819;
	t1700 = 0.2e1 * (t1630 + t1631) * t1819;
	t1625 = t1639 * t1700;
	t1640 = t1641 * qJD(2);
	t1824 = t1642 * t1658;
	t1732 = t1639 * t1824;
	t1714 = pkin(1) * t1732;
	t1628 = 0.1e1 / t1664;
	t1805 = t1628 / 0.2e1;
	t1725 = t1637 * t1805;
	t1758 = t1639 * t1664;
	t1611 = t1625 * t1725 - 0.2e1 * t1714 + (-t1640 * t1632 - t1758) * pkin(5);
	t1770 = t1611 * t1652;
	t1825 = t1625 * t1628;
	t1616 = -t1796 * t1825 / 0.2e1;
	t1795 = t1637 * pkin(1);
	t1722 = t1632 + 0.2e1 * t1795;
	t1757 = t1640 * t1664;
	t1610 = t1616 + (-t1722 * t1639 + t1757) * pkin(5);
	t1771 = t1610 * t1655;
	t1762 = t1624 * t1652;
	t1763 = t1623 * t1655;
	t1822 = t1762 - t1763;
	t1586 = ((-t1770 / 0.2e1 + t1771 / 0.2e1 - t1694 * qJD(3)) * t1633 - t1822 * t1639 * t1748) * t1661;
	t1701 = t1761 + t1764;
	t1693 = t1701 * t1639;
	t1695 = -t1762 / 0.2e1 + t1763 / 0.2e1;
	t1769 = t1611 * t1655;
	t1772 = t1610 * t1652;
	t1587 = (t1693 * t1748 + (t1769 / 0.2e1 + t1772 / 0.2e1 + t1695 * qJD(3)) * t1633) * t1661;
	t1648 = pkin(18) + pkin(19);
	t1646 = sin(t1648);
	t1647 = cos(t1648);
	t1582 = t1586 * t1647 - t1587 * t1646;
	t1659 = pkin(4) ^ 2;
	t1759 = t1633 * t1661;
	t1614 = t1695 * t1759;
	t1615 = t1694 * t1759;
	t1605 = -t1614 * t1647 + t1615 * t1646;
	t1798 = pkin(3) * t1605;
	t1820 = -2 * pkin(4);
	t1751 = -t1798 * t1820 + t1659;
	t1816 = -pkin(8) - pkin(10);
	t1595 = (pkin(3) - t1816) * (pkin(3) + t1816) + t1751;
	t1815 = -pkin(8) + pkin(10);
	t1596 = (pkin(3) - t1815) * (pkin(3) + t1815) + t1751;
	t1775 = t1596 * t1595;
	t1663 = sqrt(-t1775);
	t1827 = t1582 * t1663;
	t1794 = 2 * pkin(4);
	t1699 = pkin(3) * (t1595 + t1596) * t1794;
	t1573 = t1582 * t1699;
	t1660 = pkin(3) ^ 2;
	t1601 = t1660 + t1751;
	t1597 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1601;
	t1602 = pkin(4) + t1798;
	t1721 = t1602 * t1820 - t1597;
	t1589 = 0.1e1 / t1663;
	t1703 = -t1614 * t1646 - t1615 * t1647;
	t1806 = -t1703 / 0.2e1;
	t1729 = t1589 * t1806;
	t1704 = -t1586 * t1646 - t1587 * t1647;
	t1823 = t1704 * t1663;
	t1552 = (t1573 * t1729 + t1721 * t1582 - t1823) * pkin(3);
	t1723 = t1660 * t1703 * t1820;
	t1807 = t1589 / 0.2e1;
	t1730 = t1602 * t1807;
	t1553 = t1573 * t1730 + t1582 * t1723 + (t1597 * t1704 - t1827) * pkin(3);
	t1598 = 0.1e1 / t1601;
	t1657 = 0.1e1 / pkin(10);
	t1599 = 0.1e1 / t1601 ^ 2;
	t1747 = pkin(3) * pkin(4) * t1599;
	t1799 = pkin(3) * t1703;
	t1578 = t1597 * t1799 + t1602 * t1663;
	t1649 = sin(pkin(17));
	t1778 = t1578 * t1649;
	t1577 = t1597 * t1602 - t1663 * t1799;
	t1650 = cos(pkin(17));
	t1779 = t1577 * t1650;
	t1679 = (t1778 - t1779) * t1747;
	t1803 = -t1650 / 0.2e1;
	t1804 = t1649 / 0.2e1;
	t1544 = ((t1552 * t1803 + t1553 * t1804) * t1598 + t1582 * t1679) * t1657;
	t1773 = t1598 * t1657;
	t1571 = (-t1779 / 0.2e1 + t1778 / 0.2e1) * t1773;
	t1568 = 0.1e1 / t1571 ^ 2;
	t1826 = t1544 * t1568;
	t1653 = sin(qJ(1));
	t1777 = t1578 * t1650;
	t1780 = t1577 * t1649;
	t1572 = (t1777 / 0.2e1 + t1780 / 0.2e1) * t1773;
	t1558 = qJ(2) + qJ(3) + atan2(t1572, t1571);
	t1557 = cos(t1558);
	t1715 = qJD(1) * t1557 + qJD(4);
	t1678 = (t1777 + t1780) * t1747;
	t1802 = t1650 / 0.2e1;
	t1545 = ((t1552 * t1804 + t1553 * t1802) * t1598 + t1582 * t1678) * t1657;
	t1570 = t1572 ^ 2;
	t1561 = t1568 * t1570 + 0.1e1;
	t1559 = 0.1e1 / t1561;
	t1567 = 0.1e1 / t1571;
	t1782 = t1568 * t1572;
	t1537 = qJD(2) + qJD(3) + (-t1544 * t1782 + t1545 * t1567) * t1559;
	t1556 = sin(t1558);
	t1656 = cos(qJ(1));
	t1787 = t1556 * t1656;
	t1742 = t1537 * t1787;
	t1821 = t1715 * t1653 + t1742;
	t1810 = -t1573 / 0.2e1;
	t1626 = t1642 * t1700;
	t1800 = pkin(1) * t1658;
	t1613 = t1626 * t1725 - 0.2e1 * t1642 ^ 2 * t1800 + (-t1632 * t1641 - t1756) * pkin(5);
	t1765 = t1613 * t1655;
	t1708 = t1626 * t1805 + t1632;
	t1612 = (t1641 * t1664 + (-t1708 - 0.2e1 * t1795) * t1642) * pkin(5);
	t1768 = t1612 * t1652;
	t1696 = t1765 / 0.2e1 + t1768 / 0.2e1;
	t1719 = t1642 * t1748;
	t1593 = (t1696 * t1633 + t1701 * t1719) * t1661;
	t1766 = t1613 * t1652;
	t1767 = t1612 * t1655;
	t1697 = -t1766 / 0.2e1 + t1767 / 0.2e1;
	t1594 = (-t1697 * t1633 + t1719 * t1822) * t1661;
	t1585 = -t1593 * t1646 - t1594 * t1647;
	t1574 = t1585 * t1699;
	t1809 = -t1574 / 0.2e1;
	t1583 = t1703 * t1699;
	t1808 = -t1583 / 0.2e1;
	t1801 = t1652 / 0.2e1;
	t1793 = t1537 * t1557;
	t1791 = t1567 * t1826;
	t1792 = 0.2e1 * (t1545 * t1782 - t1570 * t1791) / t1561 ^ 2;
	t1651 = sin(qJ(4));
	t1790 = t1556 * t1651;
	t1789 = t1556 * t1653;
	t1654 = cos(qJ(4));
	t1788 = t1556 * t1654;
	t1786 = t1557 * t1651;
	t1785 = t1557 * t1653;
	t1784 = t1557 * t1654;
	t1783 = t1557 * t1656;
	t1781 = t1573 * t1589 / t1775;
	t1776 = t1582 * t1660;
	t1774 = t1598 * t1650;
	t1755 = t1651 * t1653;
	t1754 = t1651 * t1656;
	t1753 = t1653 * t1654;
	t1752 = t1654 * t1656;
	t1745 = t1660 * t1794;
	t1744 = t1537 * t1789;
	t1743 = t1537 * t1788;
	t1741 = t1537 * t1785;
	t1740 = t1537 * t1784;
	t1739 = t1537 * t1783;
	t1738 = t1556 * t1755;
	t1737 = t1556 * t1754;
	t1736 = t1556 * t1753;
	t1735 = t1556 * t1752;
	t1734 = t1659 * t1776;
	t1733 = 0.1e1 / t1760 * t1626 * t1825;
	t1731 = t1781 / 0.4e1;
	t1728 = t1598 * t1804;
	t1727 = -t1774 / 0.2e1;
	t1726 = t1774 / 0.2e1;
	t1724 = 0.4e1 * pkin(4) * t1776;
	t1718 = t1559 * t1747;
	t1717 = -0.8e1 * t1734;
	t1716 = qJD(4) * t1557 + qJD(1);
	t1711 = t1598 * t1599 * t1734;
	t1710 = t1662 * t1732;
	t1709 = -t1703 * t1781 / 0.4e1;
	t1707 = t1716 * t1656;
	t1706 = t1715 * t1656;
	t1705 = t1650 * t1711;
	t1698 = 0.4e1 * t1649 * t1711;
	t1692 = -0.4e1 * t1577 * t1705;
	t1691 = 0.4e1 * t1578 * t1705;
	t1690 = t1585 * t1698;
	t1689 = t1703 * t1698;
	t1688 = -qJD(1) * t1783 + t1744;
	t1687 = qJD(1) * t1785 + t1742;
	t1686 = qJD(4) * t1784 - t1537 * t1790;
	t1685 = qJD(4) * t1786 + t1743;
	t1684 = -t1559 * t1826 - t1567 * t1792;
	t1584 = -t1593 * t1647 + t1594 * t1646;
	t1554 = (t1574 * t1729 - t1584 * t1663 + t1721 * t1585) * pkin(3);
	t1622 = -t1640 * t1700 - 0.8e1 * t1710;
	t1591 = t1616 + (t1733 / 0.4e1 + t1622 * t1805) * t1637 + (0.2e1 * t1639 * t1641 + 0.4e1 * t1640 * t1642) * t1800 + (-t1708 * t1639 + t1757) * pkin(5);
	t1592 = 0.4e1 * t1714 + (t1758 - t1642 * t1733 / 0.4e1 + t1722 * t1640 + (t1641 * t1625 / 0.2e1 + t1640 * t1626 / 0.2e1 - t1642 * t1622 / 0.2e1) * t1628) * pkin(5);
	t1575 = (t1822 * t1710 * t1828 + (-t1592 * t1655 / 0.2e1 + t1591 * t1801 + t1696 * qJD(3)) * t1633 + (-t1822 * t1640 - (-t1766 + t1767) * t1639 + (t1701 * qJD(3) + t1770 - t1771) * t1642) * t1748) * t1661;
	t1576 = (t1662 * t1693 * t1824 * t1828 + (t1591 * t1655 / 0.2e1 + t1592 * t1801 + t1697 * qJD(3)) * t1633 + (-t1701 * t1640 - (-t1765 - t1768) * t1639 + (-qJD(3) * t1822 + t1769 + t1772) * t1642) * t1748) * t1661;
	t1563 = -t1575 * t1647 - t1576 * t1646;
	t1683 = t1552 * t1585 + t1554 * t1582 + t1563 * t1577;
	t1565 = (t1583 * t1729 - t1605 * t1663 + t1703 * t1721) * pkin(3);
	t1682 = t1552 * t1703 + t1565 * t1582 + t1577 * t1704;
	t1555 = t1574 * t1730 + t1585 * t1723 + (t1584 * t1597 - t1585 * t1663) * pkin(3);
	t1681 = t1553 * t1585 + t1555 * t1582 + t1563 * t1578;
	t1566 = t1583 * t1730 + t1703 * t1723 + (t1597 * t1605 - t1663 * t1703) * pkin(3);
	t1680 = t1553 * t1703 + t1566 * t1582 + t1578 * t1704;
	t1677 = t1782 * t1792 + (-t1545 * t1568 + 0.2e1 * t1572 * t1791) * t1559;
	t1676 = -t1651 * t1741 + (-qJD(1) * t1754 - qJD(4) * t1753) * t1556;
	t1675 = -t1651 * t1739 + (qJD(1) * t1755 - qJD(4) * t1752) * t1556;
	t1674 = t1653 * t1740 + (qJD(1) * t1752 - qJD(4) * t1755) * t1556;
	t1673 = t1654 * t1739 + (-qJD(1) * t1753 - qJD(4) * t1754) * t1556;
	t1564 = t1699 * t1704 + t1703 * t1717;
	t1562 = t1575 * t1646 - t1576 * t1647;
	t1551 = ((t1565 * t1804 + t1566 * t1802) * t1598 + t1703 * t1678) * t1657;
	t1550 = ((t1565 * t1803 + t1566 * t1804) * t1598 + t1703 * t1679) * t1657;
	t1549 = t1563 * t1699 + t1585 * t1717;
	t1548 = ((t1554 * t1804 + t1555 * t1802) * t1598 + t1585 * t1678) * t1657;
	t1547 = ((t1554 * t1803 + t1555 * t1804) * t1598 + t1585 * t1679) * t1657;
	t1546 = t1703 * t1724 + (t1827 + t1583 * t1709 + t1721 * t1704 + (t1564 * t1806 + t1605 * t1810 + t1704 * t1808) * t1589) * pkin(3);
	t1543 = (t1564 * t1807 + t1583 * t1731) * t1602 + (-t1582 * t1605 - 0.2e1 * t1703 * t1704) * t1745 + (-t1582 * t1597 - t1823 + (t1582 * t1808 + t1703 * t1810) * t1589) * pkin(3);
	t1542 = t1585 * t1724 + (-t1562 * t1663 + t1574 * t1709 + t1721 * t1563 + (t1549 * t1806 + t1584 * t1810 + t1704 * t1809) * t1589) * pkin(3);
	t1541 = 0.1e1 + (-t1550 * t1782 + t1551 * t1567) * t1559;
	t1540 = (t1549 * t1807 + t1574 * t1731) * t1602 + (-t1563 * t1703 - t1582 * t1584 - t1585 * t1704) * t1745 + (t1562 * t1597 - t1563 * t1663 + (t1582 * t1809 + t1585 * t1810) * t1589) * pkin(3);
	t1538 = 0.1e1 + (-t1547 * t1782 + t1548 * t1567) * t1559;
	t1536 = t1654 * t1706 + (-t1716 * t1651 - t1743) * t1653;
	t1535 = t1716 * t1753 + (t1706 - t1744) * t1651;
	t1534 = t1651 * t1707 + t1654 * t1821;
	t1533 = -t1651 * t1821 + t1654 * t1707;
	t1532 = t1684 * t1551 + t1677 * t1550 + (((t1543 * t1726 + t1546 * t1728 + t1577 * t1689 + t1691 * t1703) * t1567 - (t1543 * t1728 + t1546 * t1727 + t1578 * t1689 + t1692 * t1703) * t1782) * t1559 + ((t1680 * t1567 + t1682 * t1782) * t1650 + (t1682 * t1567 - t1680 * t1782) * t1649) * t1718) * t1657;
	t1531 = t1684 * t1548 + t1677 * t1547 + (((t1540 * t1726 + t1542 * t1728 + t1577 * t1690 + t1585 * t1691) * t1567 - (t1540 * t1728 + t1542 * t1727 + t1578 * t1690 + t1585 * t1692) * t1782) * t1559 + ((t1681 * t1567 + t1683 * t1782) * t1650 + (t1683 * t1567 - t1681 * t1782) * t1649) * t1718) * t1657;
	t1 = [t1536, t1531 * t1735 + t1673 * t1538, t1532 * t1735 + t1673 * t1541, t1533; t1534, t1531 * t1736 + t1674 * t1538, t1532 * t1736 + t1541 * t1674, t1535; 0, -t1531 * t1784 + t1685 * t1538, -t1532 * t1784 + t1541 * t1685, qJD(4) * t1788 + t1537 * t1786; -t1535, -t1531 * t1737 + t1675 * t1538, -t1532 * t1737 + t1541 * t1675, -t1534; t1533, -t1531 * t1738 + t1676 * t1538, -t1532 * t1738 + t1541 * t1676, t1536; 0, t1531 * t1786 + t1686 * t1538, t1532 * t1786 + t1541 * t1686, -qJD(4) * t1790 + t1740; qJD(1) * t1787 + t1741, -t1531 * t1783 + t1687 * t1538, -t1532 * t1783 + t1541 * t1687, 0; qJD(1) * t1789 - t1739, -t1531 * t1785 + t1688 * t1538, -t1532 * t1785 + t1541 * t1688, 0; 0, -t1531 * t1556 - t1538 * t1793, -t1532 * t1556 - t1541 * t1793, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:21:01
	% EndTime: 2020-04-20 16:21:13
	% DurationCPUTime: 3.23s
	% Computational Cost: add. (51091->91), mult. (81758->196), div. (2926->9), fcn. (51230->13), ass. (0->112)
	t527 = sin(qJ(2));
	t528 = sin(pkin(16));
	t529 = cos(qJ(2));
	t530 = cos(pkin(16));
	t457 = t527 * t530 + t529 * t528;
	t525 = pkin(1) * t457;
	t454 = t457 * qJD(2);
	t536 = pkin(1) * pkin(5);
	t498 = t454 * t536;
	t468 = pkin(1) ^ 2;
	t456 = t527 * t528 - t529 * t530;
	t526 = pkin(1) * t456;
	t503 = -0.2e1 * pkin(5) * t526 + t468;
	t535 = -pkin(6) - pkin(2);
	t445 = (pkin(5) - t535) * (pkin(5) + t535) + t503;
	t534 = -pkin(6) + pkin(2);
	t446 = (pkin(5) - t534) * (pkin(5) + t534) + t503;
	t504 = t445 + t446;
	t440 = t504 * t498;
	t510 = t446 * t445;
	t469 = sqrt(-t510);
	t443 = 0.1e1 / t469;
	t539 = t440 * t443;
	t436 = t525 * t539;
	t467 = pkin(5) ^ 2;
	t451 = t467 + t503;
	t447 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t451;
	t452 = -pkin(5) + t526;
	t500 = 0.2e1 * t452 * pkin(5);
	t495 = -t447 + t500;
	t455 = t456 * qJD(2);
	t506 = t455 * t469;
	t426 = -t436 + (t495 * t454 + t506) * pkin(1);
	t497 = t468 * t457 * t454;
	t491 = pkin(5) * t497;
	t507 = t454 * t469;
	t511 = t443 * t452;
	t427 = -t440 * t511 - 0.2e1 * t491 + (-t455 * t447 - t507) * pkin(1);
	t448 = 0.1e1 / t451;
	t466 = 0.1e1 / pkin(6);
	t439 = t447 * t525 - t452 * t469;
	t462 = sin(pkin(15));
	t513 = t439 * t462;
	t505 = t457 * t469;
	t438 = -pkin(1) * t505 - t452 * t447;
	t464 = cos(pkin(15));
	t514 = t438 * t464;
	t484 = t513 + t514;
	t449 = 0.1e1 / t451 ^ 2;
	t494 = t449 * t498;
	t531 = t464 / 0.2e1;
	t532 = t462 / 0.2e1;
	t414 = ((t426 * t531 + t427 * t532) * t448 + t484 * t494) * t466;
	t508 = t448 * t466;
	t434 = (t514 / 0.2e1 + t513 / 0.2e1) * t508;
	t431 = 0.1e1 / t434 ^ 2;
	t540 = t414 * t431;
	t490 = t504 * t536;
	t441 = t457 * t490;
	t538 = t443 * t441;
	t489 = t467 * t497;
	t537 = -t443 * (-t455 * t490 - 0.4e1 * t489) - 0.1e1 / t510 * t440 * t538;
	t430 = 0.1e1 / t434;
	t533 = -t462 / 0.2e1;
	t524 = t468 * pkin(5);
	t512 = t439 * t464;
	t515 = t438 * t462;
	t483 = -t512 + t515;
	t415 = ((t426 * t533 + t427 * t531) * t448 - t483 * t494) * t466;
	t435 = (t512 / 0.2e1 - t515 / 0.2e1) * t508;
	t433 = t435 ^ 2;
	t424 = t433 * t431 + 0.1e1;
	t422 = 0.1e1 / t424;
	t516 = t431 * t435;
	t411 = (-t414 * t516 + t415 * t430) * t422;
	t492 = t447 + t538;
	t428 = (t456 * t469 + (-t492 + t500) * t457) * pkin(1);
	t429 = -t441 * t511 - 0.2e1 * t457 ^ 2 * t524 + (-t456 * t447 - t505) * pkin(1);
	t499 = t449 * t536;
	t493 = t457 * t499;
	t418 = ((t428 * t533 + t429 * t531) * t448 - t483 * t493) * t466;
	t419 = ((t428 * t531 + t429 * t532) * t448 + t484 * t493) * t466;
	t412 = (t418 * t430 - t419 * t516) * t422;
	t523 = t411 * t412;
	t521 = t430 * t540;
	t522 = (t415 * t516 - t433 * t521) / t424 ^ 2;
	t425 = atan2(t435, t434);
	t420 = sin(t425);
	t461 = sin(qJ(1));
	t520 = t420 * t461;
	t463 = cos(qJ(1));
	t519 = t420 * t463;
	t421 = cos(t425);
	t518 = t421 * t461;
	t517 = t421 * t463;
	t509 = t448 * t462;
	t502 = qJD(1) * t461;
	t501 = qJD(1) * t463;
	t496 = t448 * t531;
	t486 = t448 * t449 * t489;
	t482 = t462 * t486;
	t481 = 0.4e1 * t464 * t486;
	t480 = t411 * t520 - t421 * t501;
	t479 = t411 * t519 + t421 * t502;
	t478 = t411 * t518 + t420 * t501;
	t477 = -t411 * t517 + t420 * t502;
	t476 = t426 * t457 + t428 * t454 - t438 * t455;
	t475 = t427 * t457 + t429 * t454 - t439 * t455;
	t417 = 0.4e1 * t491 + (t456 * t539 + t507 + t537 * t457 - (t495 - t538) * t455) * pkin(1);
	t416 = -t436 + t537 * t452 + (0.2e1 * t454 * t456 + 0.4e1 * t455 * t457) * t524 + (-t492 * t454 + t506) * pkin(1);
	t410 = (-t422 * t540 - 0.2e1 * t430 * t522) * t418 + (0.2e1 * t516 * t522 + (-t415 * t431 + 0.2e1 * t435 * t521) * t422) * t419 + ((t416 * t496 + t439 * t481 - t417 * t509 / 0.2e1 - 0.4e1 * t438 * t482) * t430 - (t417 * t496 + t438 * t481 + t416 * t509 / 0.2e1 + 0.4e1 * t439 * t482) * t516 + ((t475 * t430 - t476 * t516) * t464 + (-t476 * t430 - t475 * t516) * t462) * t499) * t422 * t466;
	t1 = [t480, -t410 * t519 + t477 * t412, 0, 0; -t479, -t410 * t520 - t478 * t412, 0, 0; 0, t410 * t421 - t420 * t523, 0, 0; t478, -t410 * t517 + t479 * t412, 0, 0; t477, -t410 * t518 + t480 * t412, 0, 0; 0, -t410 * t420 - t421 * t523, 0, 0; -t502, 0, 0, 0; t501, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:21:00
	% EndTime: 2020-04-20 16:21:12
	% DurationCPUTime: 3.12s
	% Computational Cost: add. (51135->94), mult. (81758->198), div. (2926->9), fcn. (51230->13), ass. (0->112)
	t537 = sin(qJ(2));
	t538 = sin(pkin(16));
	t539 = cos(qJ(2));
	t540 = cos(pkin(16));
	t467 = t537 * t540 + t539 * t538;
	t535 = pkin(5) * t467;
	t464 = t467 * qJD(2);
	t546 = pkin(1) * pkin(5);
	t508 = t464 * t546;
	t478 = pkin(1) ^ 2;
	t466 = t537 * t538 - t539 * t540;
	t536 = pkin(5) * t466;
	t512 = -0.2e1 * pkin(1) * t536 + t478;
	t545 = -pkin(6) - pkin(2);
	t455 = (pkin(5) - t545) * (pkin(5) + t545) + t512;
	t544 = -pkin(6) + pkin(2);
	t456 = (pkin(5) - t544) * (pkin(5) + t544) + t512;
	t513 = t455 + t456;
	t450 = t513 * t508;
	t519 = t456 * t455;
	t479 = sqrt(-t519);
	t453 = 0.1e1 / t479;
	t549 = t450 * t453;
	t446 = t535 * t549;
	t476 = pkin(5) ^ 2;
	t461 = t476 + t512;
	t457 = pkin(2) ^ 2 - pkin(6) ^ 2 + t461;
	t462 = pkin(1) - t536;
	t534 = t462 * pkin(1);
	t505 = t457 + 0.2e1 * t534;
	t465 = t466 * qJD(2);
	t515 = t465 * t479;
	t436 = -t446 + (-t505 * t464 + t515) * pkin(5);
	t507 = t476 * t467 * t464;
	t501 = pkin(1) * t507;
	t516 = t464 * t479;
	t520 = t453 * t462;
	t437 = t450 * t520 - 0.2e1 * t501 + (-t465 * t457 - t516) * pkin(5);
	t458 = 0.1e1 / t461;
	t477 = 0.1e1 / pkin(2);
	t449 = t457 * t535 + t462 * t479;
	t471 = sin(pkin(19));
	t522 = t449 * t471;
	t514 = t467 * t479;
	t448 = -pkin(5) * t514 + t462 * t457;
	t472 = cos(pkin(19));
	t523 = t448 * t472;
	t494 = -t522 + t523;
	t459 = 0.1e1 / t461 ^ 2;
	t504 = t459 * t508;
	t542 = -t472 / 0.2e1;
	t543 = t471 / 0.2e1;
	t425 = ((t436 * t542 + t437 * t543) * t458 - t494 * t504) * t477;
	t517 = t458 * t477;
	t444 = (-t523 / 0.2e1 + t522 / 0.2e1) * t517;
	t441 = 0.1e1 / t444 ^ 2;
	t550 = t425 * t441;
	t500 = t513 * t546;
	t451 = t467 * t500;
	t548 = t453 * t451;
	t498 = t478 * t507;
	t547 = 0.1e1 / t519 * t450 * t548 + t453 * (-t465 * t500 - 0.4e1 * t498);
	t440 = 0.1e1 / t444;
	t541 = t472 / 0.2e1;
	t533 = t476 * pkin(1);
	t521 = t449 * t472;
	t524 = t448 * t471;
	t493 = t521 + t524;
	t424 = ((t436 * t543 + t437 * t541) * t458 + t493 * t504) * t477;
	t445 = (t521 / 0.2e1 + t524 / 0.2e1) * t517;
	t443 = t445 ^ 2;
	t435 = t443 * t441 + 0.1e1;
	t433 = 0.1e1 / t435;
	t525 = t441 * t445;
	t421 = qJD(2) + (t424 * t440 - t425 * t525) * t433;
	t502 = t457 + t548;
	t438 = (t466 * t479 + (-t502 - 0.2e1 * t534) * t467) * pkin(5);
	t439 = t451 * t520 - 0.2e1 * t467 ^ 2 * t533 + (-t466 * t457 - t514) * pkin(5);
	t509 = t459 * t546;
	t503 = t467 * t509;
	t428 = ((t438 * t543 + t439 * t541) * t458 + t493 * t503) * t477;
	t429 = ((t438 * t542 + t439 * t543) * t458 - t494 * t503) * t477;
	t422 = 0.1e1 + (t428 * t440 - t429 * t525) * t433;
	t532 = t421 * t422;
	t530 = t440 * t550;
	t531 = (t424 * t525 - t443 * t530) / t435 ^ 2;
	t432 = qJ(2) + atan2(t445, t444);
	t430 = sin(t432);
	t473 = sin(qJ(1));
	t529 = t430 * t473;
	t474 = cos(qJ(1));
	t528 = t430 * t474;
	t431 = cos(t432);
	t527 = t431 * t473;
	t526 = t431 * t474;
	t518 = t458 * t472;
	t511 = qJD(1) * t473;
	t510 = qJD(1) * t474;
	t506 = t458 * t543;
	t495 = t458 * t459 * t498;
	t492 = t472 * t495;
	t491 = 0.4e1 * t471 * t495;
	t490 = t421 * t529 - t431 * t510;
	t489 = t421 * t528 + t431 * t511;
	t488 = t421 * t527 + t430 * t510;
	t487 = -t421 * t526 + t430 * t511;
	t486 = t436 * t467 + t438 * t464 - t448 * t465;
	t485 = t437 * t467 + t439 * t464 - t449 * t465;
	t427 = 0.4e1 * t501 + (t466 * t549 + t516 - t547 * t467 - (-t505 - t548) * t465) * pkin(5);
	t426 = -t446 + t547 * t462 + (0.2e1 * t464 * t466 + 0.4e1 * t465 * t467) * t533 + (-t502 * t464 + t515) * pkin(5);
	t420 = (-t433 * t550 - 0.2e1 * t440 * t531) * t428 + (0.2e1 * t525 * t531 + (-t424 * t441 + 0.2e1 * t445 * t530) * t433) * t429 + ((t426 * t518 / 0.2e1 + 0.4e1 * t449 * t492 + t427 * t506 + t448 * t491) * t440 - (-t427 * t518 / 0.2e1 - 0.4e1 * t448 * t492 + t426 * t506 + t449 * t491) * t525 + ((t485 * t440 + t486 * t525) * t472 + (t486 * t440 - t485 * t525) * t471) * t509) * t433 * t477;
	t1 = [t490, -t420 * t528 + t487 * t422, 0, 0; -t489, -t420 * t529 - t488 * t422, 0, 0; 0, t420 * t431 - t430 * t532, 0, 0; t488, -t420 * t526 + t489 * t422, 0, 0; t487, -t420 * t527 + t490 * t422, 0, 0; 0, -t420 * t430 - t431 * t532, 0, 0; -t511, 0, 0, 0; t510, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiRD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-20 16:25:05
	% EndTime: 2020-04-20 16:27:42
	% DurationCPUTime: 75.46s
	% Computational Cost: add. (2015891->247), mult. (3136844->533), div. (118294->18), fcn. (1962534->20), ass. (0->247)
	t1110 = pkin(5) ^ 2;
	t1114 = pkin(1) ^ 2;
	t1265 = sin(qJ(2));
	t1266 = sin(pkin(16));
	t1267 = cos(qJ(2));
	t1268 = cos(pkin(16));
	t1095 = t1265 * t1266 - t1267 * t1268;
	t1247 = pkin(5) * t1095;
	t1200 = -0.2e1 * pkin(1) * t1247 + t1114;
	t1090 = t1110 + t1200;
	t1087 = 0.1e1 / t1090;
	t1088 = 0.1e1 / t1090 ^ 2;
	t1089 = t1087 * t1088;
	t1096 = t1265 * t1268 + t1267 * t1266;
	t1283 = t1096 * t1110;
	t1275 = -0.4e1 * t1089 * t1114 * t1283;
	t1093 = t1096 * qJD(2);
	t1113 = 0.1e1 / pkin(2);
	t1086 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1090;
	t1091 = pkin(1) - t1247;
	t1271 = pkin(5) + pkin(6);
	t1272 = pkin(5) - pkin(6);
	t1084 = (pkin(2) + t1271) * (-pkin(2) + t1272) + t1200;
	t1085 = (-pkin(2) + t1271) * (pkin(2) + t1272) + t1200;
	t1207 = t1085 * t1084;
	t1116 = sqrt(-t1207);
	t1246 = pkin(5) * t1096;
	t1078 = t1086 * t1246 + t1091 * t1116;
	t1107 = cos(qJ(3));
	t1208 = t1078 * t1107;
	t1203 = t1096 * t1116;
	t1077 = -pkin(5) * t1203 + t1086 * t1091;
	t1105 = sin(qJ(3));
	t1213 = t1077 * t1105;
	t1133 = t1208 / 0.2e1 + t1213 / 0.2e1;
	t1273 = pkin(1) * pkin(5);
	t1199 = t1088 * t1273;
	t1147 = 0.2e1 * (t1084 + t1085) * t1273;
	t1079 = t1093 * t1147;
	t1094 = t1095 * qJD(2);
	t1184 = t1093 * t1283;
	t1167 = pkin(1) * t1184;
	t1082 = 0.1e1 / t1116;
	t1258 = t1082 / 0.2e1;
	t1179 = t1091 * t1258;
	t1205 = t1093 * t1116;
	t1059 = t1079 * t1179 - 0.2e1 * t1167 + (-t1094 * t1086 - t1205) * pkin(5);
	t1222 = t1059 * t1105;
	t1284 = t1079 * t1082;
	t1070 = -t1246 * t1284 / 0.2e1;
	t1244 = t1091 * pkin(1);
	t1177 = t1086 + 0.2e1 * t1244;
	t1204 = t1094 * t1116;
	t1058 = t1070 + (-t1177 * t1093 + t1204) * pkin(5);
	t1223 = t1058 * t1107;
	t1209 = t1078 * t1105;
	t1212 = t1077 * t1107;
	t1280 = t1209 - t1212;
	t1027 = ((-t1222 / 0.2e1 + t1223 / 0.2e1 - t1133 * qJD(3)) * t1087 - t1280 * t1093 * t1199) * t1113;
	t1148 = t1208 + t1213;
	t1130 = t1093 * t1148;
	t1134 = -t1209 / 0.2e1 + t1212 / 0.2e1;
	t1221 = t1059 * t1107;
	t1224 = t1058 * t1105;
	t1028 = (t1130 * t1199 + (t1221 / 0.2e1 + t1224 / 0.2e1 + t1134 * qJD(3)) * t1087) * t1113;
	t1102 = pkin(18) + pkin(19);
	t1100 = sin(t1102);
	t1101 = cos(t1102);
	t1023 = t1027 * t1101 - t1028 * t1100;
	t1112 = pkin(3) ^ 2;
	t1111 = pkin(4) ^ 2;
	t1206 = t1087 * t1113;
	t1068 = t1134 * t1206;
	t1069 = t1133 * t1206;
	t1050 = -t1068 * t1101 + t1069 * t1100;
	t1249 = pkin(4) * t1050;
	t1274 = -2 * pkin(3);
	t1202 = -t1249 * t1274 + t1111;
	t1046 = t1112 + t1202;
	t1042 = pkin(8) ^ 2 - pkin(10) ^ 2 + t1046;
	t1270 = -pkin(8) - pkin(10);
	t1040 = (pkin(3) - t1270) * (pkin(3) + t1270) + t1202;
	t1269 = pkin(10) - pkin(8);
	t1041 = (pkin(3) - t1269) * (pkin(3) + t1269) + t1202;
	t1228 = t1041 * t1040;
	t1115 = sqrt(-t1228);
	t1153 = -t1027 * t1100 - t1028 * t1101;
	t1286 = -t1023 * t1115 + t1153 * t1042;
	t1240 = 2 * pkin(3);
	t1047 = -pkin(3) - t1249;
	t1152 = -t1068 * t1100 - t1069 * t1101;
	t1250 = pkin(4) * t1152;
	t1018 = -t1042 * t1047 - t1115 * t1250;
	t1015 = 0.1e1 / t1018 ^ 2;
	t1019 = t1042 * t1250 - t1047 * t1115;
	t1017 = t1019 ^ 2;
	t1009 = t1015 * t1017 + 0.1e1;
	t1232 = t1015 * t1019;
	t1014 = 0.1e1 / t1018;
	t1146 = pkin(4) * (t1040 + t1041) * t1240;
	t1006 = t1023 * t1146;
	t1176 = t1047 * t1240 - t1042;
	t1030 = 0.1e1 / t1115;
	t1259 = -t1152 / 0.2e1;
	t1181 = t1030 * t1259;
	t1281 = t1153 * t1115;
	t992 = (t1006 * t1181 + t1176 * t1023 - t1281) * pkin(4);
	t1241 = t1014 * t1015 * t992;
	t1178 = t1152 * t1111 * t1274;
	t1261 = -t1030 / 0.2e1;
	t1182 = t1047 * t1261;
	t993 = t1286 * pkin(4) + t1006 * t1182 + t1023 * t1178;
	t1285 = 0.2e1 / t1009 ^ 2 * (-t1017 * t1241 + t993 * t1232);
	t1080 = t1096 * t1147;
	t1160 = t1080 * t1258 + t1086;
	t1060 = (t1095 * t1116 + (-t1160 - 0.2e1 * t1244) * t1096) * pkin(5);
	t1253 = pkin(1) * t1110;
	t1061 = t1080 * t1179 - 0.2e1 * t1096 ^ 2 * t1253 + (-t1086 * t1095 - t1203) * pkin(5);
	t1104 = cos(pkin(19));
	t1210 = t1078 * t1104;
	t1103 = sin(pkin(19));
	t1215 = t1077 * t1103;
	t1150 = t1210 + t1215;
	t1174 = t1096 * t1199;
	t1255 = t1104 / 0.2e1;
	t1257 = t1103 / 0.2e1;
	t1036 = ((t1060 * t1257 + t1061 * t1255) * t1087 + t1150 * t1174) * t1113;
	t1211 = t1078 * t1103;
	t1214 = t1077 * t1104;
	t1151 = -t1211 + t1214;
	t1256 = -t1104 / 0.2e1;
	t1037 = ((t1060 * t1256 + t1061 * t1257) * t1087 - t1151 * t1174) * t1113;
	t1066 = (-t1214 / 0.2e1 + t1211 / 0.2e1) * t1206;
	t1062 = 0.1e1 / t1066;
	t1063 = 0.1e1 / t1066 ^ 2;
	t1067 = (t1210 / 0.2e1 + t1215 / 0.2e1) * t1206;
	t1216 = t1063 * t1067;
	t1279 = t1036 * t1062 - t1037 * t1216;
	t1007 = 0.1e1 / t1009;
	t1164 = pkin(3) * pkin(4) * pkin(8) * t1007 * t1023;
	t1245 = pkin(8) * t1046;
	t1195 = t1007 * t1245;
	t1169 = t1015 * t1195;
	t1194 = t1014 * t1245;
	t1278 = 0.2e1 * t1014 * t1164 + t992 * t1169 + t1194 * t1285;
	t1193 = t1019 * t1245;
	t1168 = t1015 * t1193;
	t1276 = -0.2e1 * t1007 * t1193 * t1241 - 0.2e1 * t1164 * t1232 - t1168 * t1285 + t993 * t1169;
	t1043 = 0.1e1 / t1046;
	t1044 = 0.1e1 / t1046 ^ 2;
	t1264 = -t1006 / 0.2e1;
	t1217 = t1061 * t1107;
	t1220 = t1060 * t1105;
	t1135 = t1217 / 0.2e1 + t1220 / 0.2e1;
	t1038 = (t1135 * t1087 + t1148 * t1174) * t1113;
	t1218 = t1061 * t1105;
	t1219 = t1060 * t1107;
	t1136 = -t1218 / 0.2e1 + t1219 / 0.2e1;
	t1039 = (-t1136 * t1087 + t1174 * t1280) * t1113;
	t1026 = -t1038 * t1100 - t1039 * t1101;
	t1010 = t1026 * t1146;
	t1263 = -t1010 / 0.2e1;
	t1024 = t1152 * t1146;
	t1262 = -t1024 / 0.2e1;
	t1260 = t1043 / 0.2e1;
	t1254 = t1105 / 0.2e1;
	t1252 = pkin(3) * t1043;
	t1251 = pkin(3) * t1044;
	t1109 = 0.1e1 / pkin(8);
	t1248 = pkin(4) * t1109;
	t1180 = t1109 * t1260;
	t1005 = -qJ(2) - atan2(t1067, t1066) + pkin(18) - atan2(t1019 * t1180, t1018 * t1180);
	t1003 = sin(t1005);
	t1131 = t1093 * t1150;
	t1032 = ((t1058 * t1257 + t1059 * t1255) * t1087 + t1131 * t1199) * t1113;
	t1065 = t1067 ^ 2;
	t1055 = t1063 * t1065 + 0.1e1;
	t1053 = 0.1e1 / t1055;
	t1155 = t1007 * t1168;
	t1144 = 0.2e1 * t1155;
	t1156 = t1007 * t1109 * t1194;
	t1145 = -0.2e1 * t1156;
	t1198 = pkin(4) * t1251;
	t1172 = t1019 * t1198;
	t1173 = t1018 * t1198;
	t1132 = t1093 * t1151;
	t1033 = ((t1058 * t1256 + t1059 * t1257) * t1087 - t1132 * t1199) * t1113;
	t1226 = t1053 * t1063;
	t1186 = t1033 * t1226;
	t985 = -qJD(2) - t1032 * t1062 * t1053 + t1067 * t1186 + (t1023 * t1172 + t993 * t1260) * t1145 + (t1023 * t1173 + t992 * t1260) * t1109 * t1144;
	t1243 = t1003 * t985;
	t1004 = cos(t1005);
	t1242 = t1004 * t985;
	t1106 = sin(qJ(1));
	t1239 = qJD(1) * t1106;
	t1108 = cos(qJ(1));
	t1238 = qJD(1) * t1108;
	t1237 = t1003 * t1106;
	t1236 = t1003 * t1108;
	t1235 = t1004 * t1106;
	t1234 = t1004 * t1108;
	t1231 = t1023 * t1111;
	t1230 = t1033 * t1062 * t1063;
	t1227 = t1043 * t1047;
	t1197 = 0.4e1 * t1043 * t1044 * t1112;
	t1192 = t985 * t1237;
	t1191 = t985 * t1236;
	t1190 = t985 * t1235;
	t1189 = t985 * t1234;
	t1188 = t1111 * t1240;
	t1185 = 0.1e1 / t1207 * t1080 * t1284;
	t1183 = -t1006 * t1030 / t1228 / 0.4e1;
	t1171 = t1019 * t1197;
	t1170 = -0.8e1 * t1112 * t1231;
	t1163 = 0.2e1 * t1195;
	t1162 = t1114 * t1184;
	t1161 = t1152 * t1183;
	t1025 = -t1038 * t1101 + t1039 * t1100;
	t1076 = -t1094 * t1147 - 0.8e1 * t1162;
	t1034 = t1070 + (t1185 / 0.4e1 + t1076 * t1258) * t1091 + (0.2e1 * t1093 * t1095 + 0.4e1 * t1094 * t1096) * t1253 + (-t1160 * t1093 + t1204) * pkin(5);
	t1035 = 0.4e1 * t1167 + (t1205 - t1096 * t1185 / 0.4e1 + t1177 * t1094 + (t1095 * t1079 / 0.2e1 + t1094 * t1080 / 0.2e1 - t1096 * t1076 / 0.2e1) * t1082) * pkin(5);
	t1127 = t1109 * (t1018 * t1197 + 0.2e1 * t1252) * t1231;
	t1128 = t1059 * t1096 + t1061 * t1093 - t1078 * t1094;
	t1129 = t1058 * t1096 + t1060 * t1093 - t1077 * t1094;
	t1011 = (0.4e1 * t1280 * t1089 * t1162 + (-t1035 * t1107 / 0.2e1 + t1034 * t1254 + t1135 * qJD(3)) * t1087 + (-t1280 * t1094 - (-t1218 + t1219) * t1093 + (t1148 * qJD(3) + t1222 - t1223) * t1096) * t1199) * t1113;
	t1012 = (-t1130 * t1275 + (t1034 * t1107 / 0.2e1 + t1035 * t1254 + t1136 * qJD(3)) * t1087 + (-t1148 * t1094 - (-t1217 - t1220) * t1093 + (-qJD(3) * t1280 + t1221 + t1224) * t1096) * t1199) * t1113;
	t999 = -t1011 * t1101 - t1012 * t1100;
	t989 = t1026 * t1170 + t999 * t1146;
	t994 = (t1010 * t1181 - t1025 * t1115 + t1176 * t1026) * pkin(4);
	t990 = (t1026 * t1173 + t994 * t1260) * t1109;
	t995 = t1010 * t1182 + t1026 * t1178 + (t1025 * t1042 - t1026 * t1115) * pkin(4);
	t991 = (t1026 * t1172 + t995 * t1260) * t1109;
	t998 = t1011 * t1100 - t1012 * t1101;
	t983 = t1036 * t1186 + (((t1010 * t1183 + t989 * t1261) * t1047 + (-t1026 * t1153 - t1152 * t999) * t1188) * t1260 + (-t1025 * t1252 + t1026 * t1171) * t1231 + ((-t999 * t1115 + t998 * t1042 + (t1023 * t1263 + t1026 * t1264) * t1030) * t1260 + (t999 * t1019 + t1023 * t995 + t1026 * t993) * t1251) * pkin(4)) * t1145 + (t1026 * t1127 + ((-t998 * t1115 + t1010 * t1161 - t999 * t1042 + (t1025 * t1264 + t1153 * t1263 + t989 * t1259) * t1030) * t1260 + (t999 * t1227 + (t1018 * t999 + t1023 * t994 + t1026 * t992) * t1044) * pkin(3)) * t1248) * t1144 + 0.2e1 * t1279 * (t1032 * t1216 - t1065 * t1230) / t1055 ^ 2 + (-(-t1131 * t1275 + (t1034 * t1255 + t1035 * t1257) * t1087 + (t1129 * t1103 + t1128 * t1104) * t1199) * t1062 + (t1132 * t1275 + (t1034 * t1257 + t1035 * t1256) * t1087 + (t1128 * t1103 - t1129 * t1104) * t1199) * t1216) * t1053 * t1113 + (-0.2e1 * t1067 * t1053 * t1230 + t1032 * t1226) * t1037 + 0.2e1 * t1276 * t990 + 0.2e1 * t1278 * t991;
	t986 = -0.1e1 - t1279 * t1053 + (-t1014 * t991 + t990 * t1232) * t1163;
	t1141 = t1106 * t983 + t986 * t1238;
	t1140 = -t1108 * t983 + t986 * t1239;
	t1000 = t1146 * t1153 + t1152 * t1170;
	t1001 = (t1024 * t1181 - t1050 * t1115 + t1152 * t1176) * pkin(4);
	t1002 = t1024 * t1182 + t1152 * t1178 + (t1042 * t1050 - t1115 * t1152) * pkin(4);
	t996 = (t1001 * t1260 + t1152 * t1173) * t1109;
	t997 = (t1002 * t1260 + t1152 * t1172) * t1109;
	t984 = -0.2e1 * (((t1000 * t1261 + t1024 * t1183) * t1047 - 0.2e1 * t1152 * t1153 * t1188) * t1260 + (-t1050 * t1252 + t1152 * t1171) * t1231 + ((-t1023 * t1042 - t1281 + (t1023 * t1262 + t1152 * t1264) * t1030) * t1260 + (t1002 * t1023 + t1019 * t1153 + t1152 * t993) * t1251) * pkin(4)) * t1156 + 0.2e1 * (t1152 * t1127 + ((t1024 * t1161 + (t1000 * t1259 + t1050 * t1264 + t1153 * t1262) * t1030 - t1286) * t1260 + (t1153 * t1227 + (t1001 * t1023 + t1018 * t1153 + t1152 * t992) * t1044) * pkin(3)) * t1248) * t1155 + 0.2e1 * t1278 * t997 + 0.2e1 * t1276 * t996;
	t988 = (-t1014 * t997 + t996 * t1232) * t1163;
	t1139 = t1106 * t984 + t988 * t1238;
	t1138 = -t1108 * t984 + t988 * t1239;
	t1 = [qJD(1) * t1234 - t1192, -t1003 * t1140 + t1189 * t986, -t1003 * t1138 + t1189 * t988, 0; qJD(1) * t1235 + t1191, t1003 * t1141 + t1190 * t986, t1003 * t1139 + t1190 * t988, 0; 0, t1004 * t983 - t986 * t1243, t1004 * t984 - t988 * t1243, 0; qJD(1) * t1236 + t1190, t1004 * t1140 + t1191 * t986, t1004 * t1138 + t1191 * t988, 0; qJD(1) * t1237 - t1189, -t1004 * t1141 + t1192 * t986, -t1004 * t1139 + t1192 * t988, 0; 0, t1003 * t983 + t986 * t1242, t1003 * t984 + t988 * t1242, 0; -t1239, 0, 0, 0; t1238, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
end