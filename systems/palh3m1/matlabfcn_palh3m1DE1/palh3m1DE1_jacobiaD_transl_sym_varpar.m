% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% palh3m1DE1
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JaD_transl [3x4]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-19 19:20
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = palh3m1DE1_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(3,1),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1DE1_jacobiaD_transl_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1DE1_jacobiaD_transl_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'palh3m1DE1_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1DE1_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1DE1_jacobiaD_transl_sym_varpar: pkin has to be [19x1] (double)');
JaD_transl=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0; 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (17->14), mult. (60->29), div. (0->0), fcn. (38->4), ass. (0->12)
	t17 = sin(qJ(1));
	t26 = qJD(1) * t17;
	t19 = cos(qJ(1));
	t25 = qJD(1) * t19;
	t24 = qJD(2) * t17;
	t23 = qJD(2) * t19;
	t16 = sin(qJ(2));
	t18 = cos(qJ(2));
	t22 = r_i_i_C(1) * t16 + r_i_i_C(2) * t18;
	t21 = -r_i_i_C(1) * t18 + r_i_i_C(2) * t16 - pkin(13);
	t20 = t22 * qJD(2);
	t1 = [t22 * t24 + (-r_i_i_C(3) * t17 + t19 * t21) * qJD(1), (t16 * t23 + t18 * t26) * r_i_i_C(2) + (t16 * t26 - t18 * t23) * r_i_i_C(1), 0, 0; -t19 * t20 + (r_i_i_C(3) * t19 + t17 * t21) * qJD(1), (t16 * t24 - t18 * t25) * r_i_i_C(2) + (-t16 * t25 - t18 * t24) * r_i_i_C(1), 0, 0; 0, -t20, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:15
	% DurationCPUTime: 0.10s
	% Computational Cost: add. (93->24), mult. (298->43), div. (0->0), fcn. (269->6), ass. (0->24)
	t51 = sin(qJ(3));
	t52 = sin(qJ(2));
	t54 = cos(qJ(3));
	t55 = cos(qJ(2));
	t60 = t51 * t55 + t52 * t54;
	t69 = qJD(2) + qJD(3);
	t58 = t69 * t60;
	t56 = cos(qJ(1));
	t59 = t51 * t52 - t54 * t55;
	t53 = sin(qJ(1));
	t65 = qJD(1) * t53;
	t45 = -t58 * t56 + t59 * t65;
	t57 = t69 * t59;
	t46 = -t57 * t56 - t60 * t65;
	t68 = t46 * r_i_i_C(1) + t45 * r_i_i_C(2);
	t64 = qJD(1) * t56;
	t47 = -t57 * t53 + t60 * t64;
	t48 = -t58 * t53 - t59 * t64;
	t67 = t47 * r_i_i_C(1) + t48 * r_i_i_C(2);
	t66 = r_i_i_C(1) * t58 - t57 * r_i_i_C(2);
	t63 = qJD(2) * t55;
	t62 = qJD(2) * t52 * pkin(1);
	t61 = -pkin(1) * t55 - pkin(13);
	t1 = [t53 * t62 + t48 * r_i_i_C(1) - t47 * r_i_i_C(2) + (-r_i_i_C(3) * t53 + t61 * t56) * qJD(1), (t52 * t65 - t56 * t63) * pkin(1) + t68, t68, 0; -t56 * t62 - t45 * r_i_i_C(1) + t46 * r_i_i_C(2) + (r_i_i_C(3) * t56 + t61 * t53) * qJD(1), (-t52 * t64 - t53 * t63) * pkin(1) + t67, t67, 0; 0, -t62 + t66, t66, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:21:05
	% EndTime: 2020-04-19 18:29:02
	% DurationCPUTime: 300.58s
	% Computational Cost: add. (8968873->337), mult. (13949926->618), div. (538600->14), fcn. (8723281->19), ass. (0->278)
	t878 = pkin(3) ^ 2;
	t1028 = sin(qJ(3));
	t1029 = sin(qJ(2));
	t1031 = sin(pkin(16));
	t1032 = cos(qJ(2));
	t1034 = cos(pkin(16));
	t847 = t1029 * t1034 + t1032 * t1031;
	t1023 = pkin(5) * t847;
	t876 = pkin(5) ^ 2;
	t845 = t1029 * t1031 - t1032 * t1034;
	t1024 = pkin(5) * t845;
	t880 = pkin(1) ^ 2;
	t977 = -0.2e1 * pkin(1) * t1024 + t880;
	t835 = t876 + t977;
	t831 = pkin(2) ^ 2 - pkin(6) ^ 2 + t835;
	t840 = pkin(1) - t1024;
	t1047 = -pkin(6) - pkin(2);
	t829 = (pkin(5) - t1047) * (pkin(5) + t1047) + t977;
	t1046 = -pkin(6) + pkin(2);
	t830 = (pkin(5) - t1046) * (pkin(5) + t1046) + t977;
	t985 = t830 * t829;
	t882 = sqrt(-t985);
	t814 = t831 * t1023 + t840 * t882;
	t963 = t814 * t1028;
	t981 = t847 * t882;
	t813 = -pkin(5) * t981 + t840 * t831;
	t874 = cos(qJ(3));
	t987 = t813 * t874;
	t907 = -t963 / 0.2e1 + t987 / 0.2e1;
	t832 = 0.1e1 / t835;
	t879 = 0.1e1 / pkin(2);
	t984 = t832 * t879;
	t804 = t907 * t984;
	t964 = t813 * t1028;
	t986 = t814 * t874;
	t908 = t986 / 0.2e1 + t964 / 0.2e1;
	t805 = t908 * t984;
	t871 = pkin(18) + pkin(19);
	t869 = sin(t871);
	t870 = cos(t871);
	t795 = -t804 * t870 + t805 * t869;
	t1025 = pkin(3) * t795;
	t1049 = -2 * pkin(4);
	t877 = pkin(4) ^ 2;
	t979 = -t1025 * t1049 + t877;
	t791 = t878 + t979;
	t788 = 0.1e1 / t791;
	t875 = 0.1e1 / pkin(10);
	t992 = t788 * t875;
	t931 = -t804 * t869 - t805 * t870;
	t1026 = pkin(3) * t931;
	t787 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t791;
	t792 = pkin(4) + t1025;
	t1045 = -pkin(8) - pkin(10);
	t785 = (pkin(3) - t1045) * (pkin(3) + t1045) + t979;
	t1044 = -pkin(8) + pkin(10);
	t786 = (pkin(3) - t1044) * (pkin(3) + t1044) + t979;
	t994 = t786 * t785;
	t881 = sqrt(-t994);
	t768 = t787 * t1026 + t792 * t881;
	t872 = sin(pkin(17));
	t997 = t768 * t872;
	t767 = -t881 * t1026 + t787 * t792;
	t873 = cos(pkin(17));
	t998 = t767 * t873;
	t761 = (-t998 / 0.2e1 + t997 / 0.2e1) * t992;
	t758 = 0.1e1 / t761 ^ 2;
	t996 = t768 * t873;
	t999 = t767 * t872;
	t762 = (t996 / 0.2e1 + t999 / 0.2e1) * t992;
	t1001 = t758 * t762;
	t1036 = -t873 / 0.2e1;
	t1037 = t872 / 0.2e1;
	t842 = t847 * qJD(2);
	t920 = t963 - t987;
	t1048 = pkin(1) * pkin(5);
	t924 = 0.2e1 * (t829 + t830) * t1048;
	t815 = t842 * t924;
	t843 = t845 * qJD(2);
	t1059 = t847 * t876;
	t969 = t842 * t1059;
	t946 = pkin(1) * t969;
	t824 = 0.1e1 / t882;
	t1038 = t824 / 0.2e1;
	t956 = t840 * t1038;
	t983 = t842 * t882;
	t801 = t815 * t956 - 0.2e1 * t946 + (-t843 * t831 - t983) * pkin(5);
	t967 = t801 * t1028;
	t833 = 0.1e1 / t835 ^ 2;
	t975 = t833 * t1048;
	t1060 = t815 * t824;
	t806 = -t1023 * t1060 / 0.2e1;
	t1022 = t840 * pkin(1);
	t952 = t831 + 0.2e1 * t1022;
	t982 = t843 * t882;
	t800 = t806 + (-t952 * t842 + t982) * pkin(5);
	t991 = t800 * t874;
	t776 = ((-t967 / 0.2e1 + t991 / 0.2e1 - t908 * qJD(3)) * t832 - t920 * t842 * t975) * t879;
	t921 = t964 + t986;
	t902 = t921 * t842;
	t968 = t800 * t1028;
	t990 = t801 * t874;
	t777 = (t902 * t975 + (t990 / 0.2e1 + t968 / 0.2e1 + t907 * qJD(3)) * t832) * t879;
	t932 = -t776 * t869 - t777 * t870;
	t1058 = t932 * t881;
	t772 = t776 * t870 - t777 * t869;
	t976 = 2 * pkin(4);
	t923 = pkin(3) * (t785 + t786) * t976;
	t763 = t772 * t923;
	t951 = t792 * t1049 - t787;
	t1039 = -t931 / 0.2e1;
	t779 = 0.1e1 / t881;
	t960 = t779 * t1039;
	t733 = (t763 * t960 + t951 * t772 - t1058) * pkin(3);
	t1067 = t772 * t881;
	t953 = t931 * t878 * t1049;
	t1040 = t779 / 0.2e1;
	t961 = t792 * t1040;
	t734 = t763 * t961 + t772 * t953 + (t787 * t932 - t1067) * pkin(3);
	t789 = 0.1e1 / t791 ^ 2;
	t974 = pkin(3) * pkin(4) * t789;
	t901 = (t997 - t998) * t974;
	t725 = ((t733 * t1036 + t734 * t1037) * t788 + t772 * t901) * t875;
	t1035 = t873 / 0.2e1;
	t900 = (t996 + t999) * t974;
	t726 = ((t734 * t1035 + t733 * t1037) * t788 + t772 * t900) * t875;
	t760 = t762 ^ 2;
	t750 = t758 * t760 + 0.1e1;
	t748 = 0.1e1 / t750;
	t757 = 0.1e1 / t761;
	t718 = (-t725 * t1001 + t726 * t757) * t748;
	t1054 = -qJD(3) - qJD(2);
	t1030 = sin(qJ(1));
	t938 = t1032 * t1030;
	t1033 = cos(qJ(1));
	t940 = t1033 * t1029;
	t892 = -qJD(1) * t940 - qJD(2) * t938;
	t934 = t1029 * t1028;
	t916 = t1030 * t934;
	t937 = t1032 * t1028;
	t919 = t1033 * t937;
	t821 = qJD(1) * t919 + (qJD(3) * t938 - t892) * t874 + t1054 * t916;
	t837 = t874 * t938 - t916;
	t1068 = t718 * t837 + t821;
	t844 = -t1032 * t874 + t934;
	t846 = -t1029 * t874 - t937;
	t828 = t1054 * t846;
	t1066 = (-t718 * t846 + t828) * r_i_i_C(1);
	t1065 = -0.4e1 * t832 * t833;
	t816 = t847 * t924;
	t942 = t816 * t1038 + t831;
	t802 = (t845 * t882 + (-t942 - 0.2e1 * t1022) * t847) * pkin(5);
	t966 = t802 * t1028;
	t1027 = pkin(1) * t876;
	t803 = t816 * t956 - 0.2e1 * t847 ^ 2 * t1027 + (-t831 * t845 - t981) * pkin(5);
	t988 = t803 * t874;
	t910 = t988 / 0.2e1 + t966 / 0.2e1;
	t949 = t847 * t975;
	t783 = (t910 * t832 + t921 * t949) * t879;
	t965 = t803 * t1028;
	t989 = t802 * t874;
	t909 = -t965 / 0.2e1 + t989 / 0.2e1;
	t784 = (-t909 * t832 + t920 * t949) * t879;
	t775 = -t783 * t869 - t784 * t870;
	t764 = t775 * t923;
	t774 = -t783 * t870 + t784 * t869;
	t735 = (t764 * t960 - t774 * t881 + t951 * t775) * pkin(3);
	t736 = t764 * t961 + t775 * t953 + (t774 * t787 - t775 * t881) * pkin(3);
	t728 = ((t735 * t1036 + t736 * t1037) * t788 + t775 * t901) * t875;
	t729 = ((t736 * t1035 + t735 * t1037) * t788 + t775 * t900) * t875;
	t719 = (-t728 * t1001 + t729 * t757) * t748;
	t1064 = t719 + 0.1e1;
	t773 = t931 * t923;
	t755 = (t773 * t960 - t795 * t881 + t931 * t951) * pkin(3);
	t756 = t773 * t961 + t931 * t953 + (t787 * t795 - t881 * t931) * pkin(3);
	t731 = ((t755 * t1036 + t756 * t1037) * t788 + t931 * t901) * t875;
	t732 = ((t756 * t1035 + t755 * t1037) * t788 + t931 * t900) * t875;
	t722 = (-t731 * t1001 + t732 * t757) * t748;
	t1063 = t722 + 0.1e1;
	t1062 = t846 * r_i_i_C(2);
	t1061 = t725 * t758;
	t751 = atan2(t762, t761);
	t746 = sin(t751);
	t747 = cos(t751);
	t839 = t874 * t940 + t919;
	t926 = qJD(2) * t940;
	t819 = -t837 * qJD(1) - qJD(2) * t919 - t839 * qJD(3) - t874 * t926;
	t936 = t1030 * t1029;
	t941 = t1033 * t1032;
	t893 = qJD(1) * t936 - qJD(2) * t941;
	t917 = t1030 * t937;
	t918 = t1033 * t934;
	t820 = -qJD(1) * t917 + (qJD(3) * t941 - t893) * t874 + t1054 * t918;
	t1057 = t819 * t746 + t820 * t747;
	t836 = t874 * t936 + t917;
	t838 = t874 * t941 - t918;
	t925 = qJD(2) * t936;
	t822 = t838 * qJD(1) - qJD(2) * t917 - t836 * qJD(3) - t874 * t925;
	t1056 = t1068 * t747 + t822 * t746;
	t1053 = t1064 * r_i_i_C(1);
	t1052 = t1064 * r_i_i_C(2);
	t1051 = t1063 * r_i_i_C(1);
	t1050 = t1063 * r_i_i_C(2);
	t1043 = -t763 / 0.2e1;
	t1042 = -t764 / 0.2e1;
	t1041 = -t773 / 0.2e1;
	t944 = t880 * t969;
	t812 = -t843 * t924 - 0.8e1 * t944;
	t970 = 0.1e1 / t985 * t816 * t1060;
	t781 = t806 + (t970 / 0.4e1 + t812 * t1038) * t840 + (0.2e1 * t842 * t845 + 0.4e1 * t843 * t847) * t1027 + (-t942 * t842 + t982) * pkin(5);
	t782 = 0.4e1 * t946 + (t983 - t847 * t970 / 0.4e1 + t952 * t843 + (t845 * t815 / 0.2e1 + t843 * t816 / 0.2e1 - t847 * t812 / 0.2e1) * t824) * pkin(5);
	t973 = t1028 / 0.2e1;
	t765 = (-t920 * t944 * t1065 + (-t782 * t874 / 0.2e1 + t781 * t973 + t910 * qJD(3)) * t832 + (-t920 * t843 - (-t965 + t989) * t842 + (t921 * qJD(3) + t967 - t991) * t847) * t975) * t879;
	t766 = (-t880 * t902 * t1059 * t1065 + (t781 * t874 / 0.2e1 + t782 * t973 + t909 * qJD(3)) * t832 + (-t921 * t843 - (-t966 - t988) * t842 + (-t920 * qJD(3) + t968 + t990) * t847) * t975) * t879;
	t753 = -t765 * t870 - t766 * t869;
	t995 = t772 * t878;
	t971 = t877 * t995;
	t947 = -0.8e1 * t971;
	t730 = t753 * t923 + t775 * t947;
	t752 = t765 * t869 - t766 * t870;
	t955 = t878 * t976;
	t1000 = t763 * t779 / t994;
	t962 = t1000 / 0.4e1;
	t721 = (t730 * t1040 + t764 * t962) * t792 + (-t753 * t931 - t772 * t774 - t775 * t932) * t955 + (t752 * t787 - t753 * t881 + (t772 * t1042 + t775 * t1043) * t779) * pkin(3);
	t943 = -t931 * t1000 / 0.4e1;
	t954 = 0.4e1 * pkin(4) * t995;
	t723 = t775 * t954 + (-t752 * t881 + t764 * t943 + t951 * t753 + (t730 * t1039 + t1042 * t932 + t774 * t1043) * t779) * pkin(3);
	t1003 = t757 * t1061;
	t1004 = 0.2e1 * (t726 * t1001 - t760 * t1003) / t750 ^ 2;
	t891 = t1001 * t1004 + (0.2e1 * t762 * t1003 - t726 * t758) * t748;
	t904 = t734 * t775 + t736 * t772 + t753 * t768;
	t906 = t733 * t775 + t735 * t772 + t753 * t767;
	t911 = -t757 * t1004 - t748 * t1061;
	t945 = t788 * t789 * t971;
	t922 = 0.4e1 * t872 * t945;
	t913 = t775 * t922;
	t933 = t873 * t945;
	t914 = 0.4e1 * t768 * t933;
	t915 = -0.4e1 * t767 * t933;
	t948 = t748 * t974;
	t993 = t788 * t873;
	t957 = t993 / 0.2e1;
	t958 = -t993 / 0.2e1;
	t959 = t788 * t1037;
	t713 = t911 * t729 + t891 * t728 + (((t721 * t957 + t723 * t959 + t767 * t913 + t775 * t914) * t757 - (t721 * t959 + t723 * t958 + t768 * t913 + t775 * t915) * t1001) * t748 + ((t906 * t1001 + t904 * t757) * t873 + (-t904 * t1001 + t906 * t757) * t872) * t948) * t875;
	t1021 = t713 * t836;
	t1020 = t713 * t837;
	t1019 = t713 * t838;
	t1018 = t713 * t839;
	t1017 = t713 * t844;
	t1016 = t713 * t846;
	t754 = t923 * t932 + t931 * t947;
	t724 = (t754 * t1040 + t773 * t962) * t792 + (-t772 * t795 - 0.2e1 * t931 * t932) * t955 + (-t772 * t787 - t1058 + (t772 * t1041 + t1043 * t931) * t779) * pkin(3);
	t727 = t931 * t954 + (t1067 + t773 * t943 + t951 * t932 + (t754 * t1039 + t1041 * t932 + t795 * t1043) * t779) * pkin(3);
	t903 = t734 * t931 + t756 * t772 + t768 * t932;
	t905 = t733 * t931 + t755 * t772 + t767 * t932;
	t912 = t931 * t922;
	t714 = t911 * t732 + t891 * t731 + (((t724 * t957 + t727 * t959 + t767 * t912 + t914 * t931) * t757 - (t724 * t959 + t727 * t958 + t768 * t912 + t915 * t931) * t1001) * t748 + ((t905 * t1001 + t903 * t757) * t873 + (-t903 * t1001 + t905 * t757) * t872) * t948) * t875;
	t1015 = t714 * t836;
	t1014 = t714 * t837;
	t1013 = t714 * t838;
	t1012 = t714 * t839;
	t1011 = t714 * t844;
	t1010 = t714 * t846;
	t1009 = t718 * t836;
	t1007 = t718 * t839;
	t1006 = t718 * t844;
	t1002 = t747 * t838;
	t738 = t819 * t747;
	t827 = t844 * t1054;
	t899 = t827 * t746 * r_i_i_C(1) + t828 * pkin(4) + (t827 * r_i_i_C(2) + t1066) * t747;
	t742 = t822 * t747;
	t898 = t821 * pkin(4) + t1056 * r_i_i_C(1) + t742 * r_i_i_C(2);
	t897 = (t718 * t1002 + t1057) * r_i_i_C(1) + t738 * r_i_i_C(2) + t820 * pkin(4);
	t896 = (t718 * t838 + t820) * r_i_i_C(1) + (t819 - t1007) * r_i_i_C(2);
	t895 = t1068 * r_i_i_C(1) + (t822 - t1009) * r_i_i_C(2);
	t894 = t1066 + (t827 - t1006) * r_i_i_C(2);
	t1 = [(-t746 * t821 + t742 + (-t746 * t837 - t747 * t836) * t718) * r_i_i_C(1) + (t746 * t1009 - t1056) * r_i_i_C(2) + t822 * pkin(4) + pkin(1) * t925 + (-pkin(1) * t941 - t1033 * pkin(13) - t1030 * r_i_i_C(3)) * qJD(1), t893 * pkin(1) + (r_i_i_C(1) * t1018 + (-t1007 + t1019) * r_i_i_C(2) + t896 * t719) * t747 + ((t719 * t819 + t1019) * r_i_i_C(1) + (-t719 * t820 - t1018 - t820) * r_i_i_C(2) + (-t838 * t1052 - t839 * t1053) * t718) * t746 + t897, (r_i_i_C(1) * t1012 + (-t1007 + t1013) * r_i_i_C(2) + t896 * t722) * t747 + ((t722 * t819 + t1013) * r_i_i_C(1) + (-t722 * t820 - t1012 - t820) * r_i_i_C(2) + (-t838 * t1050 - t839 * t1051) * t718) * t746 + t897, 0; (t746 * t820 - t738) * r_i_i_C(1) + t1057 * r_i_i_C(2) - t819 * pkin(4) - pkin(1) * t926 + ((t746 * t838 + t747 * t839) * r_i_i_C(1) + (-t746 * t839 + t1002) * r_i_i_C(2)) * t718 + (-pkin(1) * t938 - t1030 * pkin(13) + t1033 * r_i_i_C(3)) * qJD(1), t892 * pkin(1) + (r_i_i_C(1) * t1021 + (-t1009 + t1020) * r_i_i_C(2) + t895 * t719) * t747 + ((t719 * t822 + t1020) * r_i_i_C(1) + (-t719 * t821 - t1021 - t821) * r_i_i_C(2) + (-t837 * t1052 - t836 * t1053) * t718) * t746 + t898, (r_i_i_C(1) * t1015 + (-t1009 + t1014) * r_i_i_C(2) + t895 * t722) * t747 + ((t722 * t822 + t1014) * r_i_i_C(1) + (-t722 * t821 - t1015 - t821) * r_i_i_C(2) + (-t837 * t1050 - t836 * t1051) * t718) * t746 + t898, 0; 0, -qJD(2) * t1029 * pkin(1) + (r_i_i_C(1) * t1017 + (-t1006 - t1016) * r_i_i_C(2) + t894 * t719) * t747 + ((t719 * t827 - t1016) * r_i_i_C(1) + (-t719 * t828 - t1017 - t828) * r_i_i_C(2) + (-t844 * t1053 + t1064 * t1062) * t718) * t746 + t899, (r_i_i_C(1) * t1011 + (-t1006 - t1010) * r_i_i_C(2) + t894 * t722) * t747 + ((t722 * t827 - t1010) * r_i_i_C(1) + (-t722 * t828 - t1011 - t828) * r_i_i_C(2) + (-t844 * t1051 + t1063 * t1062) * t718) * t746 + t899, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:56:46
	% EndTime: 2020-04-19 19:11:42
	% DurationCPUTime: 892.34s
	% Computational Cost: add. (23584440->358), mult. (36646144->643), div. (1423148->14), fcn. (22924395->21), ass. (0->282)
	t1662 = pkin(5) ^ 2;
	t1666 = pkin(1) ^ 2;
	t1832 = sin(qJ(2));
	t1834 = sin(pkin(16));
	t1835 = cos(qJ(2));
	t1837 = cos(pkin(16));
	t1628 = t1832 * t1834 - t1835 * t1837;
	t1816 = pkin(5) * t1628;
	t1775 = -0.2e1 * pkin(1) * t1816 + t1666;
	t1618 = t1662 + t1775;
	t1615 = 0.1e1 / t1618;
	t1630 = t1832 * t1837 + t1835 * t1834;
	t1625 = t1630 * qJD(2);
	t1665 = 0.1e1 / pkin(2);
	t1614 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1618;
	t1623 = pkin(1) - t1816;
	t1842 = -pkin(6) - pkin(2);
	t1612 = (pkin(5) - t1842) * (pkin(5) + t1842) + t1775;
	t1841 = -pkin(6) + pkin(2);
	t1613 = (pkin(5) - t1841) * (pkin(5) + t1841) + t1775;
	t1785 = t1613 * t1612;
	t1668 = sqrt(-t1785);
	t1781 = t1630 * t1668;
	t1596 = -pkin(5) * t1781 + t1614 * t1623;
	t1831 = sin(qJ(3));
	t1764 = t1596 * t1831;
	t1815 = pkin(5) * t1630;
	t1597 = t1614 * t1815 + t1623 * t1668;
	t1660 = cos(qJ(3));
	t1786 = t1597 * t1660;
	t1692 = t1786 / 0.2e1 + t1764 / 0.2e1;
	t1763 = t1597 * t1831;
	t1787 = t1596 * t1660;
	t1702 = t1763 - t1787;
	t1843 = pkin(1) * pkin(5);
	t1713 = 0.2e1 * (t1612 + t1613) * t1843;
	t1598 = t1625 * t1713;
	t1626 = t1628 * qJD(2);
	t1854 = t1630 * t1662;
	t1754 = t1625 * t1854;
	t1738 = pkin(1) * t1754;
	t1607 = 0.1e1 / t1668;
	t1825 = t1607 / 0.2e1;
	t1747 = t1623 * t1825;
	t1783 = t1625 * t1668;
	t1584 = t1598 * t1747 - 0.2e1 * t1738 + (-t1626 * t1614 - t1783) * pkin(5);
	t1767 = t1584 * t1831;
	t1616 = 0.1e1 / t1618 ^ 2;
	t1774 = t1616 * t1843;
	t1855 = t1598 * t1607;
	t1589 = -t1815 * t1855 / 0.2e1;
	t1814 = t1623 * pkin(1);
	t1744 = t1614 + 0.2e1 * t1814;
	t1782 = t1626 * t1668;
	t1583 = t1589 + (-t1744 * t1625 + t1782) * pkin(5);
	t1791 = t1583 * t1660;
	t1559 = ((-t1767 / 0.2e1 + t1791 / 0.2e1 - t1692 * qJD(3)) * t1615 - t1702 * t1625 * t1774) * t1665;
	t1703 = t1764 + t1786;
	t1689 = t1625 * t1703;
	t1691 = -t1763 / 0.2e1 + t1787 / 0.2e1;
	t1768 = t1583 * t1831;
	t1790 = t1584 * t1660;
	t1560 = (t1689 * t1774 + (t1790 / 0.2e1 + t1768 / 0.2e1 + t1691 * qJD(3)) * t1615) * t1665;
	t1655 = pkin(18) + pkin(19);
	t1653 = sin(t1655);
	t1654 = cos(t1655);
	t1555 = t1559 * t1654 - t1560 * t1653;
	t1663 = pkin(4) ^ 2;
	t1784 = t1615 * t1665;
	t1587 = t1691 * t1784;
	t1588 = t1692 * t1784;
	t1578 = -t1587 * t1654 + t1588 * t1653;
	t1817 = pkin(3) * t1578;
	t1844 = -2 * pkin(4);
	t1777 = -t1817 * t1844 + t1663;
	t1840 = -pkin(8) - pkin(10);
	t1568 = (pkin(3) - t1840) * (pkin(3) + t1840) + t1777;
	t1839 = -pkin(8) + pkin(10);
	t1569 = (pkin(3) - t1839) * (pkin(3) + t1839) + t1777;
	t1813 = 2 * pkin(4);
	t1712 = pkin(3) * (t1568 + t1569) * t1813;
	t1546 = t1555 * t1712;
	t1664 = pkin(3) ^ 2;
	t1574 = t1664 + t1777;
	t1570 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1574;
	t1575 = pkin(4) + t1817;
	t1743 = t1575 * t1844 - t1570;
	t1794 = t1569 * t1568;
	t1667 = sqrt(-t1794);
	t1562 = 0.1e1 / t1667;
	t1714 = -t1587 * t1653 - t1588 * t1654;
	t1826 = -t1714 / 0.2e1;
	t1751 = t1562 * t1826;
	t1715 = -t1559 * t1653 - t1560 * t1654;
	t1853 = t1715 * t1667;
	t1510 = (t1546 * t1751 + t1743 * t1555 - t1853) * pkin(3);
	t1745 = t1714 * t1664 * t1844;
	t1827 = t1562 / 0.2e1;
	t1752 = t1575 * t1827;
	t1862 = t1555 * t1667;
	t1511 = t1546 * t1752 + t1555 * t1745 + (t1570 * t1715 - t1862) * pkin(3);
	t1571 = 0.1e1 / t1574;
	t1661 = 0.1e1 / pkin(10);
	t1572 = 0.1e1 / t1574 ^ 2;
	t1773 = pkin(3) * pkin(4) * t1572;
	t1818 = pkin(3) * t1714;
	t1551 = t1570 * t1818 + t1575 * t1667;
	t1656 = sin(pkin(17));
	t1797 = t1551 * t1656;
	t1550 = t1570 * t1575 - t1667 * t1818;
	t1657 = cos(pkin(17));
	t1798 = t1550 * t1657;
	t1684 = (t1797 - t1798) * t1773;
	t1823 = -t1657 / 0.2e1;
	t1824 = t1656 / 0.2e1;
	t1498 = ((t1510 * t1823 + t1511 * t1824) * t1571 + t1555 * t1684) * t1661;
	t1796 = t1551 * t1657;
	t1799 = t1550 * t1656;
	t1683 = (t1796 + t1799) * t1773;
	t1822 = t1657 / 0.2e1;
	t1499 = ((t1510 * t1824 + t1511 * t1822) * t1571 + t1555 * t1683) * t1661;
	t1792 = t1571 * t1661;
	t1544 = (-t1798 / 0.2e1 + t1797 / 0.2e1) * t1792;
	t1541 = 0.1e1 / t1544 ^ 2;
	t1545 = (t1796 / 0.2e1 + t1799 / 0.2e1) * t1792;
	t1543 = t1545 ^ 2;
	t1533 = t1541 * t1543 + 0.1e1;
	t1531 = 0.1e1 / t1533;
	t1540 = 0.1e1 / t1544;
	t1801 = t1541 * t1545;
	t1491 = (-t1498 * t1801 + t1499 * t1540) * t1531;
	t1534 = atan2(t1545, t1544);
	t1529 = sin(t1534);
	t1530 = cos(t1534);
	t1730 = t1832 * t1831;
	t1833 = sin(qJ(1));
	t1706 = t1833 * t1730;
	t1734 = t1835 * t1833;
	t1620 = t1660 * t1734 - t1706;
	t1733 = t1835 * t1831;
	t1836 = cos(qJ(1));
	t1709 = t1836 * t1733;
	t1736 = t1836 * t1832;
	t1622 = t1660 * t1736 + t1709;
	t1721 = qJD(2) * t1736;
	t1602 = -t1620 * qJD(1) - qJD(2) * t1709 - t1622 * qJD(3) - t1660 * t1721;
	t1732 = t1833 * t1832;
	t1737 = t1836 * t1835;
	t1682 = qJD(1) * t1732 - qJD(2) * t1737;
	t1707 = t1833 * t1733;
	t1708 = t1836 * t1730;
	t1851 = -qJD(3) - qJD(2);
	t1603 = -qJD(1) * t1707 + (qJD(3) * t1737 - t1682) * t1660 + t1851 * t1708;
	t1621 = t1660 * t1737 - t1708;
	t1860 = -t1529 * t1622 + t1530 * t1621;
	t1696 = t1860 * t1491 + t1602 * t1529 + t1603 * t1530;
	t1681 = -qJD(1) * t1736 - qJD(2) * t1734;
	t1604 = qJD(1) * t1709 + (qJD(3) * t1734 - t1681) * t1660 + t1851 * t1706;
	t1619 = t1660 * t1732 + t1707;
	t1605 = t1621 * qJD(1) + t1851 * t1619;
	t1859 = -t1529 * t1619 + t1530 * t1620;
	t1867 = t1859 * t1491 + t1605 * t1529 + t1604 * t1530;
	t1599 = t1630 * t1713;
	t1726 = t1599 * t1825 + t1614;
	t1585 = (t1628 * t1668 + (-t1726 - 0.2e1 * t1814) * t1630) * pkin(5);
	t1766 = t1585 * t1831;
	t1819 = pkin(1) * t1662;
	t1586 = t1599 * t1747 - 0.2e1 * t1630 ^ 2 * t1819 + (-t1614 * t1628 - t1781) * pkin(5);
	t1788 = t1586 * t1660;
	t1694 = t1788 / 0.2e1 + t1766 / 0.2e1;
	t1741 = t1630 * t1774;
	t1566 = (t1694 * t1615 + t1703 * t1741) * t1665;
	t1765 = t1586 * t1831;
	t1789 = t1585 * t1660;
	t1693 = -t1765 / 0.2e1 + t1789 / 0.2e1;
	t1567 = (-t1693 * t1615 + t1702 * t1741) * t1665;
	t1558 = -t1566 * t1653 - t1567 * t1654;
	t1547 = t1558 * t1712;
	t1557 = -t1566 * t1654 + t1567 * t1653;
	t1512 = (t1547 * t1751 - t1557 * t1667 + t1743 * t1558) * pkin(3);
	t1513 = t1547 * t1752 + t1558 * t1745 + (t1557 * t1570 - t1558 * t1667) * pkin(3);
	t1501 = ((t1512 * t1823 + t1513 * t1824) * t1571 + t1558 * t1684) * t1661;
	t1502 = ((t1512 * t1824 + t1513 * t1822) * t1571 + t1558 * t1683) * t1661;
	t1492 = (-t1501 * t1801 + t1502 * t1540) * t1531;
	t1821 = t1492 + 0.1e1;
	t1556 = t1714 * t1712;
	t1538 = (t1556 * t1751 - t1578 * t1667 + t1714 * t1743) * pkin(3);
	t1539 = t1556 * t1752 + t1714 * t1745 + (t1570 * t1578 - t1667 * t1714) * pkin(3);
	t1508 = ((t1538 * t1823 + t1539 * t1824) * t1571 + t1714 * t1684) * t1661;
	t1509 = ((t1538 * t1824 + t1539 * t1822) * t1571 + t1714 * t1683) * t1661;
	t1495 = (-t1508 * t1801 + t1509 * t1540) * t1531;
	t1820 = t1495 + 0.1e1;
	t1627 = -t1835 * t1660 + t1730;
	t1629 = -t1832 * t1660 - t1733;
	t1506 = t1529 * t1627 + t1530 * t1629;
	t1610 = t1627 * t1851;
	t1611 = t1851 * t1629;
	t1866 = -t1506 * t1491 + t1610 * t1529 + t1611 * t1530;
	t1658 = sin(qJ(4));
	t1659 = cos(qJ(4));
	t1705 = qJD(4) * (-r_i_i_C(1) * t1658 - r_i_i_C(2) * t1659);
	t1865 = t1821 * t1705;
	t1864 = t1820 * t1705;
	t1769 = qJD(1) * t1833;
	t1858 = -qJD(4) * t1859 - t1769;
	t1857 = -0.4e1 * t1615 * t1616;
	t1838 = pkin(11) + r_i_i_C(3);
	t1856 = t1498 * t1541;
	t1848 = t1620 * t1529 + t1619 * t1530;
	t1847 = t1621 * t1529 + t1622 * t1530;
	t1846 = -t1629 * t1529 + t1627 * t1530;
	t1519 = t1605 * t1530;
	t1480 = t1491 * t1848 + t1529 * t1604 - t1519;
	t1830 = -t1546 / 0.2e1;
	t1829 = -t1547 / 0.2e1;
	t1828 = -t1556 / 0.2e1;
	t1812 = qJD(4) * t1506;
	t1811 = t1491 * t1629;
	t1809 = t1540 * t1856;
	t1810 = 0.2e1 * (t1499 * t1801 - t1543 * t1809) / t1533 ^ 2;
	t1800 = t1546 * t1562 / t1794;
	t1795 = t1555 * t1664;
	t1793 = t1571 * t1657;
	t1515 = t1602 * t1530;
	t1521 = t1610 * t1530;
	t1772 = t1831 / 0.2e1;
	t1770 = qJD(1) * t1836;
	t1762 = t1836 * qJD(4);
	t1761 = t1836 * t1658;
	t1760 = t1833 * t1659;
	t1759 = t1491 * t1821;
	t1758 = t1491 * t1820;
	t1757 = t1664 * t1813;
	t1756 = t1663 * t1795;
	t1755 = 0.1e1 / t1785 * t1599 * t1855;
	t1753 = t1800 / 0.4e1;
	t1750 = t1571 * t1824;
	t1749 = -t1793 / 0.2e1;
	t1748 = t1793 / 0.2e1;
	t1746 = 0.4e1 * pkin(4) * t1795;
	t1740 = t1531 * t1773;
	t1739 = -0.8e1 * t1756;
	t1729 = t1571 * t1572 * t1756;
	t1728 = t1666 * t1754;
	t1727 = -t1714 * t1800 / 0.4e1;
	t1720 = t1659 * r_i_i_C(1) - t1658 * r_i_i_C(2) + pkin(9);
	t1719 = t1657 * t1729;
	t1711 = 0.4e1 * t1656 * t1729;
	t1701 = -0.4e1 * t1550 * t1719;
	t1700 = 0.4e1 * t1551 * t1719;
	t1699 = t1558 * t1711;
	t1698 = t1714 * t1711;
	t1690 = -t1531 * t1856 - t1540 * t1810;
	t1595 = -t1626 * t1713 - 0.8e1 * t1728;
	t1564 = t1589 + (t1755 / 0.4e1 + t1595 * t1825) * t1623 + (0.2e1 * t1625 * t1628 + 0.4e1 * t1626 * t1630) * t1819 + (-t1726 * t1625 + t1782) * pkin(5);
	t1565 = 0.4e1 * t1738 + (t1783 - t1630 * t1755 / 0.4e1 + t1744 * t1626 + (t1628 * t1598 / 0.2e1 + t1626 * t1599 / 0.2e1 - t1630 * t1595 / 0.2e1) * t1607) * pkin(5);
	t1548 = (-t1702 * t1728 * t1857 + (-t1565 * t1660 / 0.2e1 + t1564 * t1772 + t1694 * qJD(3)) * t1615 + (-t1702 * t1626 - (-t1765 + t1789) * t1625 + (t1703 * qJD(3) + t1767 - t1791) * t1630) * t1774) * t1665;
	t1549 = (-t1666 * t1689 * t1854 * t1857 + (t1564 * t1660 / 0.2e1 + t1565 * t1772 + t1693 * qJD(3)) * t1615 + (-t1703 * t1626 - (-t1766 - t1788) * t1625 + (-t1702 * qJD(3) + t1768 + t1790) * t1630) * t1774) * t1665;
	t1536 = -t1548 * t1654 - t1549 * t1653;
	t1688 = t1510 * t1558 + t1512 * t1555 + t1536 * t1550;
	t1687 = t1510 * t1714 + t1538 * t1555 + t1550 * t1715;
	t1686 = t1511 * t1558 + t1513 * t1555 + t1536 * t1551;
	t1685 = t1511 * t1714 + t1539 * t1555 + t1551 * t1715;
	t1677 = t1801 * t1810 + (-t1499 * t1541 + 0.2e1 * t1545 * t1809) * t1531;
	t1646 = t1659 * t1762;
	t1609 = t1611 * pkin(4);
	t1601 = t1604 * pkin(4);
	t1600 = t1603 * pkin(4);
	t1537 = t1712 * t1715 + t1714 * t1739;
	t1535 = t1548 * t1653 - t1549 * t1654;
	t1507 = t1536 * t1712 + t1558 * t1739;
	t1500 = t1714 * t1746 + (t1862 + t1556 * t1727 + t1743 * t1715 + (t1537 * t1826 + t1578 * t1830 + t1715 * t1828) * t1562) * pkin(3);
	t1497 = (t1537 * t1827 + t1556 * t1753) * t1575 + (-t1555 * t1578 - 0.2e1 * t1714 * t1715) * t1757 + (-t1555 * t1570 - t1853 + (t1555 * t1828 + t1714 * t1830) * t1562) * pkin(3);
	t1496 = t1558 * t1746 + (-t1535 * t1667 + t1547 * t1727 + t1743 * t1536 + (t1507 * t1826 + t1557 * t1830 + t1715 * t1829) * t1562) * pkin(3);
	t1494 = (t1507 * t1827 + t1547 * t1753) * t1575 + (-t1536 * t1714 - t1555 * t1557 - t1558 * t1715) * t1757 + (t1535 * t1570 - t1536 * t1667 + (t1555 * t1829 + t1558 * t1830) * t1562) * pkin(3);
	t1481 = t1491 * t1846 + t1529 * t1611 - t1521;
	t1477 = t1491 * t1847 + t1529 * t1603 - t1515;
	t1475 = qJD(1) * t1761 + t1477 * t1659 + (t1658 * t1860 + t1760) * qJD(4);
	t1474 = t1659 * t1770 - t1477 * t1658 + (-t1833 * t1658 + t1659 * t1860) * qJD(4);
	t1473 = t1690 * t1509 + t1677 * t1508 + (((t1497 * t1748 + t1500 * t1750 + t1550 * t1698 + t1700 * t1714) * t1540 - (t1497 * t1750 + t1500 * t1749 + t1551 * t1698 + t1701 * t1714) * t1801) * t1531 + ((t1685 * t1540 + t1687 * t1801) * t1657 + (t1687 * t1540 - t1685 * t1801) * t1656) * t1740) * t1661;
	t1472 = t1690 * t1502 + t1677 * t1501 + (((t1494 * t1748 + t1496 * t1750 + t1550 * t1699 + t1558 * t1700) * t1540 - (t1494 * t1750 + t1496 * t1749 + t1551 * t1699 + t1558 * t1701) * t1801) * t1531 + ((t1686 * t1540 + t1688 * t1801) * t1657 + (t1688 * t1540 - t1686 * t1801) * t1656) * t1740) * t1661;
	t1 = [(-t1480 * t1659 + t1858 * t1658 + t1646) * r_i_i_C(1) + (-qJD(1) * t1760 + t1480 * t1658 + (-t1659 * t1859 - t1761) * qJD(4)) * r_i_i_C(2) - t1480 * pkin(9) + t1605 * pkin(4) - pkin(13) * t1770 + t1838 * t1867 + (-qJD(1) * t1737 + qJD(2) * t1732) * pkin(1), t1600 + t1838 * (-t1515 + (-t1472 * t1621 - t1492 * t1602 + t1622 * t1759) * t1530 + (t1472 * t1622 + t1492 * t1603 + t1621 * t1759 + t1603) * t1529) + t1847 * t1865 + t1682 * pkin(1) + t1720 * (t1472 * t1847 + t1492 * t1696 + t1696), t1600 + t1838 * (-t1515 + (-t1473 * t1621 - t1495 * t1602 + t1622 * t1758) * t1530 + (t1473 * t1622 + t1495 * t1603 + t1621 * t1758 + t1603) * t1529) + t1847 * t1864 + t1720 * (t1473 * t1847 + t1495 * t1696 + t1696), r_i_i_C(1) * t1474 - r_i_i_C(2) * t1475; -pkin(13) * t1769 - t1602 * pkin(4) + t1477 * pkin(9) + t1475 * r_i_i_C(1) + t1474 * r_i_i_C(2) - t1838 * t1696 + (-qJD(1) * t1734 - t1721) * pkin(1), t1601 + t1838 * (-t1519 + (-t1472 * t1620 - t1492 * t1605 + t1619 * t1759) * t1530 + (t1472 * t1619 + t1492 * t1604 + t1620 * t1759 + t1604) * t1529) + t1848 * t1865 + t1681 * pkin(1) + t1720 * (t1472 * t1848 + t1492 * t1867 + t1867), t1601 + t1838 * (-t1519 + (-t1473 * t1620 - t1495 * t1605 + t1619 * t1758) * t1530 + (t1473 * t1619 + t1495 * t1604 + t1620 * t1758 + t1604) * t1529) + t1848 * t1864 + t1720 * (t1473 * t1848 + t1495 * t1867 + t1867), t1646 * r_i_i_C(2) + (-t1858 * r_i_i_C(1) - t1480 * r_i_i_C(2)) * t1659 + ((t1762 - t1480) * r_i_i_C(1) + t1858 * r_i_i_C(2)) * t1658; 0, -qJD(2) * t1832 * pkin(1) + t1609 + t1838 * (-t1521 + (t1472 * t1629 - t1492 * t1610 + t1627 * t1759) * t1530 + (t1472 * t1627 + t1492 * t1611 - t1821 * t1811 + t1611) * t1529) + t1846 * t1865 + t1720 * (t1472 * t1846 + t1492 * t1866 + t1866), t1609 + t1838 * (-t1521 + (t1473 * t1629 - t1495 * t1610 + t1627 * t1758) * t1530 + (t1473 * t1627 + t1495 * t1611 - t1820 * t1811 + t1611) * t1529) + t1846 * t1864 + t1720 * (t1473 * t1846 + t1495 * t1866 + t1866), (-t1481 * t1659 + t1658 * t1812) * r_i_i_C(2) + (-t1481 * t1658 - t1659 * t1812) * r_i_i_C(1);];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:20
	% EndTime: 2020-04-19 18:18:27
	% DurationCPUTime: 3.21s
	% Computational Cost: add. (51099->97), mult. (81788->210), div. (2926->9), fcn. (51232->13), ass. (0->109)
	t396 = sin(qJ(2));
	t397 = sin(pkin(16));
	t398 = cos(qJ(2));
	t399 = cos(pkin(16));
	t329 = t396 * t399 + t398 * t397;
	t394 = pkin(1) * t329;
	t326 = t329 * qJD(2);
	t405 = pkin(1) * pkin(5);
	t369 = t326 * t405;
	t340 = pkin(1) ^ 2;
	t328 = t396 * t397 - t398 * t399;
	t395 = pkin(1) * t328;
	t374 = -0.2e1 * pkin(5) * t395 + t340;
	t404 = -pkin(6) - pkin(2);
	t317 = (pkin(5) - t404) * (pkin(5) + t404) + t374;
	t403 = -pkin(6) + pkin(2);
	t318 = (pkin(5) - t403) * (pkin(5) + t403) + t374;
	t375 = t317 + t318;
	t312 = t375 * t369;
	t381 = t318 * t317;
	t341 = sqrt(-t381);
	t315 = 0.1e1 / t341;
	t408 = t312 * t315;
	t308 = t394 * t408;
	t339 = pkin(5) ^ 2;
	t323 = t339 + t374;
	t319 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t323;
	t324 = -pkin(5) + t395;
	t371 = 0.2e1 * t324 * pkin(5);
	t366 = -t319 + t371;
	t327 = t328 * qJD(2);
	t377 = t327 * t341;
	t298 = -t308 + (t326 * t366 + t377) * pkin(1);
	t368 = t340 * t329 * t326;
	t362 = pkin(5) * t368;
	t378 = t326 * t341;
	t382 = t315 * t324;
	t299 = -t312 * t382 - 0.2e1 * t362 + (-t327 * t319 - t378) * pkin(1);
	t320 = 0.1e1 / t323;
	t338 = 0.1e1 / pkin(6);
	t311 = t319 * t394 - t324 * t341;
	t334 = sin(pkin(15));
	t384 = t311 * t334;
	t376 = t329 * t341;
	t310 = -pkin(1) * t376 - t319 * t324;
	t336 = cos(pkin(15));
	t385 = t310 * t336;
	t354 = t384 + t385;
	t321 = 0.1e1 / t323 ^ 2;
	t365 = t321 * t369;
	t400 = t336 / 0.2e1;
	t401 = t334 / 0.2e1;
	t286 = ((t298 * t400 + t299 * t401) * t320 + t354 * t365) * t338;
	t379 = t320 * t338;
	t306 = (t385 / 0.2e1 + t384 / 0.2e1) * t379;
	t303 = 0.1e1 / t306 ^ 2;
	t409 = t286 * t303;
	t361 = t375 * t405;
	t313 = t329 * t361;
	t407 = t315 * t313;
	t360 = t339 * t368;
	t406 = -t315 * (-t327 * t361 - 0.4e1 * t360) - 0.1e1 / t381 * t312 * t407;
	t302 = 0.1e1 / t306;
	t402 = -t334 / 0.2e1;
	t393 = t340 * pkin(5);
	t383 = t311 * t336;
	t386 = t310 * t334;
	t353 = -t383 + t386;
	t287 = ((t298 * t402 + t299 * t400) * t320 - t353 * t365) * t338;
	t307 = (t383 / 0.2e1 - t386 / 0.2e1) * t379;
	t305 = t307 ^ 2;
	t296 = t303 * t305 + 0.1e1;
	t294 = 0.1e1 / t296;
	t387 = t303 * t307;
	t283 = (-t286 * t387 + t287 * t302) * t294;
	t363 = t319 + t407;
	t300 = (t328 * t341 + (-t363 + t371) * t329) * pkin(1);
	t301 = -t313 * t382 - 0.2e1 * t329 ^ 2 * t393 + (-t319 * t328 - t376) * pkin(1);
	t370 = t321 * t405;
	t364 = t329 * t370;
	t290 = ((t300 * t402 + t301 * t400) * t320 - t353 * t364) * t338;
	t291 = ((t300 * t400 + t301 * t401) * t320 + t354 * t364) * t338;
	t284 = (t290 * t302 - t291 * t387) * t294;
	t392 = t283 * t284;
	t333 = sin(qJ(1));
	t391 = t283 * t333;
	t335 = cos(qJ(1));
	t390 = t283 * t335;
	t388 = t302 * t409;
	t389 = (t287 * t387 - t305 * t388) / t296 ^ 2;
	t380 = t320 * t334;
	t373 = qJD(1) * t333;
	t372 = qJD(1) * t335;
	t367 = t320 * t400;
	t297 = atan2(t307, t306);
	t292 = sin(t297);
	t293 = cos(t297);
	t357 = r_i_i_C(1) * t292 + r_i_i_C(2) * t293;
	t356 = t320 * t321 * t360;
	t352 = -r_i_i_C(1) * t293 + r_i_i_C(2) * t292 + pkin(7);
	t351 = t334 * t356;
	t350 = t357 * t335;
	t349 = 0.4e1 * t336 * t356;
	t348 = t298 * t329 + t300 * t326 - t310 * t327;
	t347 = t299 * t329 + t301 * t326 - t311 * t327;
	t289 = 0.4e1 * t362 + (t328 * t408 + t378 + t406 * t329 - (t366 - t407) * t327) * pkin(1);
	t288 = -t308 + t406 * t324 + (0.2e1 * t326 * t328 + 0.4e1 * t327 * t329) * t393 + (-t326 * t363 + t377) * pkin(1);
	t282 = (-t294 * t409 - 0.2e1 * t302 * t389) * t290 + (0.2e1 * t387 * t389 + (-t287 * t303 + 0.2e1 * t307 * t388) * t294) * t291 + ((t288 * t367 + t311 * t349 - t289 * t380 / 0.2e1 - 0.4e1 * t310 * t351) * t302 - (t289 * t367 + t310 * t349 + t288 * t380 / 0.2e1 + 0.4e1 * t311 * t351) * t387 + ((t302 * t347 - t348 * t387) * t336 + (-t302 * t348 - t347 * t387) * t334) * t370) * t294 * t338;
	t1 = [t357 * t391 + (-r_i_i_C(3) * t333 + t335 * t352) * qJD(1), -t282 * t350 + ((t292 * t390 + t293 * t373) * r_i_i_C(2) + (t292 * t373 - t293 * t390) * r_i_i_C(1)) * t284, 0, 0; -t283 * t350 + (r_i_i_C(3) * t335 + t333 * t352) * qJD(1), -t357 * t333 * t282 + ((t292 * t391 - t293 * t372) * r_i_i_C(2) + (-t292 * t372 - t293 * t391) * r_i_i_C(1)) * t284, 0, 0; 0, (-t282 * t292 - t293 * t392) * r_i_i_C(2) + (t282 * t293 - t292 * t392) * r_i_i_C(1), 0, 0;];
	JaD_transl = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_transl_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:22
	% EndTime: 2020-04-19 18:18:38
	% DurationCPUTime: 6.90s
	% Computational Cost: add. (126244->128), mult. (201296->242), div. (7468->9), fcn. (126529->13), ass. (0->133)
	t365 = pkin(5) ^ 2;
	t367 = pkin(1) ^ 2;
	t360 = sin(qJ(2));
	t362 = cos(qJ(2));
	t446 = sin(pkin(16));
	t447 = cos(pkin(16));
	t381 = -t360 * t446 + t362 * t447;
	t445 = pkin(5) * t381;
	t416 = 0.2e1 * pkin(1) * t445 + t367;
	t348 = t365 + t416;
	t345 = 0.1e1 / t348;
	t366 = 0.1e1 / pkin(2);
	t421 = t345 * t366;
	t344 = pkin(2) ^ 2 - pkin(6) ^ 2 + t348;
	t349 = pkin(1) + t445;
	t452 = -pkin(6) - pkin(2);
	t342 = (pkin(5) - t452) * (pkin(5) + t452) + t416;
	t451 = -pkin(6) + pkin(2);
	t343 = (pkin(5) - t451) * (pkin(5) + t451) + t416;
	t423 = t343 * t342;
	t368 = sqrt(-t423);
	t354 = t360 * t447 + t362 * t446;
	t444 = pkin(5) * t354;
	t336 = t344 * t444 + t349 * t368;
	t358 = sin(pkin(19));
	t426 = t336 * t358;
	t418 = t354 * t368;
	t335 = -pkin(5) * t418 + t349 * t344;
	t359 = cos(pkin(19));
	t427 = t335 * t359;
	t331 = (-t427 / 0.2e1 + t426 / 0.2e1) * t421;
	t425 = t336 * t359;
	t428 = t335 * t358;
	t332 = (t425 / 0.2e1 + t428 / 0.2e1) * t421;
	t322 = atan2(t332, t331);
	t317 = sin(t322);
	t318 = cos(t322);
	t431 = t318 * t360;
	t469 = t317 * t362 + t431;
	t417 = t342 + t343;
	t453 = pkin(1) * pkin(5);
	t396 = t417 * t453;
	t338 = t354 * t396;
	t340 = 0.1e1 / t368;
	t457 = t340 * t338;
	t400 = t344 + t457;
	t440 = t349 * pkin(1);
	t325 = (-t381 * t368 + (-t400 - 0.2e1 * t440) * t354) * pkin(5);
	t424 = t340 * t349;
	t438 = t365 * pkin(1);
	t326 = t338 * t424 - 0.2e1 * t354 ^ 2 * t438 + (t344 * t381 - t418) * pkin(5);
	t387 = t425 + t428;
	t346 = 0.1e1 / t348 ^ 2;
	t412 = t346 * t453;
	t401 = t354 * t412;
	t448 = t359 / 0.2e1;
	t450 = t358 / 0.2e1;
	t309 = ((t325 * t450 + t326 * t448) * t345 + t387 * t401) * t366;
	t388 = -t426 + t427;
	t449 = -t359 / 0.2e1;
	t310 = ((t325 * t449 + t326 * t450) * t345 - t388 * t401) * t366;
	t328 = 0.1e1 / t331 ^ 2;
	t330 = t332 ^ 2;
	t321 = t330 * t328 + 0.1e1;
	t319 = 0.1e1 / t321;
	t327 = 0.1e1 / t331;
	t429 = t328 * t332;
	t303 = (t309 * t327 - t429 * t310) * t319;
	t351 = t354 * qJD(2);
	t411 = t351 * t453;
	t337 = t417 * t411;
	t458 = t337 * t340;
	t333 = t444 * t458;
	t403 = t344 + 0.2e1 * t440;
	t352 = t381 * qJD(2);
	t419 = t352 * t368;
	t323 = -t333 + (-t351 * t403 - t419) * pkin(5);
	t407 = t365 * t354 * t351;
	t397 = pkin(1) * t407;
	t420 = t351 * t368;
	t324 = t337 * t424 - 0.2e1 * t397 + (t352 * t344 - t420) * pkin(5);
	t402 = t346 * t411;
	t305 = ((t323 * t450 + t324 * t448) * t345 + t387 * t402) * t366;
	t306 = ((t323 * t449 + t324 * t450) * t345 - t388 * t402) * t366;
	t302 = (t305 * t327 - t306 * t429) * t319;
	t413 = qJD(2) + t302;
	t398 = t413 * t303;
	t380 = t413 + t398;
	t394 = t367 * t407;
	t454 = 0.1e1 / t423 * t337 * t457 + t340 * (t352 * t396 - 0.4e1 * t394);
	t307 = -t333 + t454 * t349 + (-0.2e1 * t351 * t381 - 0.4e1 * t352 * t354) * t438 + (-t351 * t400 - t419) * pkin(5);
	t308 = 0.4e1 * t397 + (-t381 * t458 + t420 - t454 * t354 + (-t403 - t457) * t352) * pkin(5);
	t378 = t324 * t354 + t326 * t351 + t336 * t352;
	t379 = t323 * t354 + t325 * t351 + t335 * t352;
	t392 = t345 * t346 * t394;
	t383 = 0.4e1 * t358 * t392;
	t386 = t359 * t392;
	t404 = t345 * t450;
	t422 = t345 * t359;
	t459 = t306 * t328;
	t434 = t327 * t459;
	t435 = (t305 * t429 - t330 * t434) / t321 ^ 2;
	t298 = (-t319 * t459 - 0.2e1 * t327 * t435) * t309 + (0.2e1 * t429 * t435 + (-t305 * t328 + 0.2e1 * t332 * t434) * t319) * t310 + ((t307 * t422 / 0.2e1 + 0.4e1 * t336 * t386 + t308 * t404 + t335 * t383) * t327 - (-t308 * t422 / 0.2e1 - 0.4e1 * t335 * t386 + t307 * t404 + t336 * t383) * t429 + ((t327 * t378 + t379 * t429) * t359 + (t327 * t379 - t378 * t429) * t358) * t412) * t319 * t366;
	t442 = t298 * r_i_i_C(2);
	t456 = r_i_i_C(1) * t380 + t442;
	t468 = t456 * t317;
	t430 = t318 * t362;
	t433 = t317 * t360;
	t389 = -t430 + t433;
	t384 = t389 * r_i_i_C(2);
	t385 = t469 * r_i_i_C(1);
	t467 = (-t385 + t384) * t303;
	t443 = t298 * r_i_i_C(1);
	t466 = (t380 * r_i_i_C(2) - t443) * t318;
	t361 = sin(qJ(1));
	t464 = t469 * t361;
	t463 = -t318 * r_i_i_C(1) + t317 * r_i_i_C(2);
	t441 = t317 * r_i_i_C(1);
	t439 = t360 * pkin(1);
	t437 = qJD(1) * r_i_i_C(3);
	t436 = qJD(2) * pkin(1);
	t415 = qJD(1) * t361;
	t363 = cos(qJ(1));
	t414 = qJD(1) * t363;
	t410 = t363 * t433;
	t399 = t413 * t362;
	t393 = t464 * qJD(1) + t413 * t410;
	t391 = qJD(1) * t410 + t413 * t464;
	t382 = r_i_i_C(2) * t398 - t443;
	t377 = -t384 + t439;
	t376 = t463 * (t303 + 0.1e1);
	t374 = (-t318 * r_i_i_C(2) - t441) * t298 + t376 * t302 + (-pkin(1) + t376) * qJD(2);
	t1 = [t391 * r_i_i_C(1) + (r_i_i_C(2) * t431 - pkin(13) + (-pkin(1) + t463) * t362) * t414 + (qJD(2) * t377 - t302 * t384 - t437) * t361, t393 * r_i_i_C(1) + (t377 - t467) * t415 + (((r_i_i_C(1) * t398 + t442) * t317 + t466) * t360 + t374 * t362) * t363, 0, 0; t393 * r_i_i_C(2) + (-t362 * pkin(1) + r_i_i_C(1) * t389 - pkin(13)) * t415 + (-t360 * t436 + t437 - t399 * t441 + (-r_i_i_C(1) * t360 * t413 - r_i_i_C(2) * t399) * t318) * t363, t391 * r_i_i_C(2) + (-r_i_i_C(2) * t430 - t385 - t439 + t467) * t414 + ((t382 * t318 + t468) * t360 + (t317 * t382 - t318 * t456 - t436) * t362) * t361, 0, 0; 0, (-t466 - t468) * t362 + t374 * t360, 0, 0;];
	JaD_transl = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiaD_transl_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:20:45
	% EndTime: 2020-04-19 18:30:40
	% DurationCPUTime: 372.63s
	% Computational Cost: add. (8893737->388), mult. (13835410->747), div. (525940->18), fcn. (8659891->24), ass. (0->344)
	t1178 = 4 * pkin(4);
	t1144 = -2 * pkin(3);
	t1126 = sin(pkin(16));
	t1127 = cos(pkin(16));
	t878 = sin(qJ(2));
	t881 = cos(qJ(2));
	t866 = t881 * t1126 + t878 * t1127;
	t1119 = pkin(5) * t866;
	t996 = -t878 * t1126 + t881 * t1127;
	t1120 = pkin(5) * t996;
	t888 = pkin(1) ^ 2;
	t1081 = 0.2e1 * pkin(1) * t1120 + t888;
	t884 = pkin(5) ^ 2;
	t860 = t884 + t1081;
	t856 = pkin(2) ^ 2 - pkin(6) ^ 2 + t860;
	t861 = pkin(1) + t1120;
	t1139 = pkin(5) + pkin(6);
	t1140 = pkin(5) - pkin(6);
	t854 = (pkin(2) + t1139) * (-pkin(2) + t1140) + t1081;
	t855 = (-pkin(2) + t1139) * (pkin(2) + t1140) + t1081;
	t1092 = t855 * t854;
	t890 = sqrt(-t1092);
	t848 = t856 * t1119 + t861 * t890;
	t880 = cos(qJ(3));
	t1093 = t848 * t880;
	t1087 = t866 * t890;
	t847 = -pkin(5) * t1087 + t861 * t856;
	t877 = sin(qJ(3));
	t1098 = t847 * t877;
	t1015 = -t1093 / 0.2e1 - t1098 / 0.2e1;
	t1094 = t848 * t877;
	t1097 = t847 * t880;
	t1016 = t1094 / 0.2e1 - t1097 / 0.2e1;
	t863 = t866 * qJD(2);
	t1069 = t863 * t866 * t884;
	t1045 = pkin(1) * t1069;
	t852 = 0.1e1 / t890;
	t1132 = t852 / 0.2e1;
	t1057 = t861 * t1132;
	t1089 = t863 * t890;
	t1141 = pkin(1) * pkin(5);
	t1025 = 0.2e1 * (t854 + t855) * t1141;
	t849 = t863 * t1025;
	t864 = t996 * qJD(2);
	t832 = t849 * t1057 - 0.2e1 * t1045 + (t864 * t856 - t1089) * pkin(5);
	t1106 = t832 * t880;
	t1117 = t861 * pkin(1);
	t1052 = t856 + 0.2e1 * t1117;
	t1088 = t864 * t890;
	t1158 = t849 * t852;
	t843 = -t1119 * t1158 / 0.2e1;
	t831 = t843 + (-t1052 * t863 - t1088) * pkin(5);
	t1109 = t831 * t877;
	t1019 = t1106 / 0.2e1 + t1109 / 0.2e1;
	t1107 = t832 * t877;
	t1108 = t831 * t880;
	t1020 = -t1107 / 0.2e1 + t1108 / 0.2e1;
	t858 = 0.1e1 / t860 ^ 2;
	t1074 = t858 * t1141;
	t1050 = t863 * t1074;
	t1027 = t1093 + t1098;
	t1028 = -t1094 + t1097;
	t872 = pkin(18) + pkin(19);
	t870 = sin(t872);
	t871 = cos(t872);
	t1171 = t871 * t1027 + t870 * t1028;
	t857 = 0.1e1 / t860;
	t887 = 0.1e1 / pkin(2);
	t1166 = t887 * (-t1171 * t1050 + (-t871 * t1019 - t870 * t1020 + (-t870 * t1015 + t871 * t1016) * qJD(3)) * t857);
	t1175 = pkin(4) * t1166;
	t1090 = t857 * t887;
	t841 = t1016 * t1090;
	t842 = t1015 * t1090;
	t813 = t841 * t871 - t842 * t870;
	t1122 = pkin(4) * t813;
	t885 = pkin(4) ^ 2;
	t1083 = -t1122 * t1144 + t885;
	t886 = pkin(3) ^ 2;
	t809 = t886 + t1083;
	t806 = pkin(8) ^ 2 - pkin(10) ^ 2 + t809;
	t1177 = t1175 * t806;
	t1138 = -pkin(8) - pkin(10);
	t804 = (pkin(3) - t1138) * (pkin(3) + t1138) + t1083;
	t1137 = pkin(10) - pkin(8);
	t805 = (pkin(3) - t1137) * (pkin(3) + t1137) + t1083;
	t1111 = t805 * t804;
	t889 = sqrt(-t1111);
	t1176 = t1175 * t889;
	t1170 = t870 * t1027 - t871 * t1028;
	t1174 = t1170 * t1050 - ((t871 * t1015 + t870 * t1016) * qJD(3) - t870 * t1019 + t871 * t1020) * t857;
	t808 = 0.1e1 / t809 ^ 2;
	t883 = 0.1e1 / pkin(8);
	t1159 = t808 * t883;
	t1164 = 0.1e1 / t889;
	t1136 = -t1164 / 0.2e1;
	t810 = -pkin(3) - t1122;
	t1157 = t804 + t805;
	t969 = t887 * t1174;
	t965 = pkin(4) * t969;
	t1162 = t965 * t1144;
	t941 = t1157 * t1162;
	t939 = -t1164 / t1111 * t941 / 0.4e1;
	t1173 = -t965 * t1136 + t810 * t939;
	t873 = sin(pkin(19));
	t1096 = t848 * t873;
	t875 = cos(pkin(19));
	t1099 = t847 * t875;
	t839 = (-t1099 / 0.2e1 + t1096 / 0.2e1) * t1090;
	t1095 = t848 * t875;
	t1100 = t847 * t873;
	t840 = (t1095 / 0.2e1 + t1100 / 0.2e1) * t1090;
	t830 = atan2(t840, t839);
	t825 = sin(t830);
	t1110 = t825 * t878;
	t826 = cos(t830);
	t824 = t881 * t826;
	t794 = t824 - t1110;
	t882 = cos(qJ(1));
	t1079 = qJD(1) * t882;
	t1065 = t878 * t1079;
	t879 = sin(qJ(1));
	t1078 = qJD(2) * t879;
	t1172 = -t881 * t1078 - t1065;
	t1031 = t841 * t870 + t842 * t871;
	t1123 = pkin(4) * t1031;
	t783 = -t889 * t1123 - t806 * t810;
	t781 = 0.1e1 / t783;
	t782 = 0.1e1 / t783 ^ 2;
	t784 = t806 * t1123 - t810 * t889;
	t1143 = t784 ^ 2;
	t1055 = t782 * t1143 + 0.1e1;
	t1113 = t782 * t784;
	t1118 = pkin(8) * t809;
	t1142 = t781 * t782;
	t940 = t941 * t1136;
	t938 = pkin(4) * t940;
	t928 = t1031 * t938 + t810 * t1162 + t806 * t965 - t1176;
	t963 = t885 * t969;
	t959 = pkin(3) * t963;
	t956 = 0.2e1 * t959;
	t929 = t1031 * t956 + t810 * t940 + t889 * t965 + t1177;
	t917 = 0.2e1 * t883 / t1055 ^ 2 * (-t1143 * t1142 * t928 + t929 * t1113) * t1118;
	t772 = 0.1e1 / t1055;
	t1073 = t772 * t1118;
	t926 = t883 * t928;
	t922 = t926 * t1073;
	t960 = pkin(3) * t883 * t969;
	t948 = pkin(8) * t772 * t960;
	t1169 = -0.2e1 * t782 * t922 + (t948 * t1178 - 0.2e1 * t917) * t781;
	t1046 = t782 * t1073;
	t1165 = 2 * pkin(4);
	t927 = t883 * t929;
	t925 = pkin(4) * t927;
	t1168 = t784 * t1142 * t922 * t1178 - 0.2e1 * t925 * t1046 + (t1165 * t917 - 0.4e1 * t885 * t948) * t1113;
	t807 = 0.1e1 / t809;
	t1163 = 0.2e1 * t810;
	t836 = 0.1e1 / t839 ^ 2;
	t1101 = t836 * t840;
	t1029 = t1095 + t1100;
	t1049 = t866 * t1074;
	t1129 = t875 / 0.2e1;
	t1131 = t873 / 0.2e1;
	t850 = t866 * t1025;
	t1041 = t850 * t1132 + t856;
	t833 = (-t996 * t890 + (-t1041 - 0.2e1 * t1117) * t866) * pkin(5);
	t1125 = pkin(1) * t884;
	t834 = t850 * t1057 - 0.2e1 * t866 ^ 2 * t1125 + (t856 * t996 - t1087) * pkin(5);
	t800 = ((t834 * t1129 + t833 * t1131) * t857 + t1029 * t1049) * t887;
	t1030 = -t1096 + t1099;
	t1130 = -t875 / 0.2e1;
	t801 = ((t833 * t1130 + t834 * t1131) * t857 - t1030 * t1049) * t887;
	t838 = t840 ^ 2;
	t829 = t836 * t838 + 0.1e1;
	t827 = 0.1e1 / t829;
	t835 = 0.1e1 / t839;
	t779 = (-t801 * t1101 + t800 * t835) * t827;
	t1161 = -t779 - 0.1e1;
	t795 = t825 * t881 + t826 * t878;
	t790 = t795 * t879;
	t797 = ((t831 * t1130 + t832 * t1131) * t857 - t1030 * t1050) * t887;
	t1160 = t797 * t836;
	t1153 = t794 * t779;
	t770 = t1153 + t794;
	t874 = sin(pkin(18));
	t876 = cos(pkin(18));
	t1038 = t784 * t1046;
	t1047 = t781 * t1073;
	t1133 = t807 / 0.2e1;
	t953 = t808 * t960;
	t950 = pkin(4) * t953;
	t914 = 0.2e1 * (t927 * t1133 - t784 * t950) * t1047 - 0.2e1 * (t926 * t1133 - t783 * t950) * t1038;
	t1058 = t883 * t1133;
	t986 = atan2(t784 * t1058, t783 * t1058);
	t980 = sin(t986);
	t912 = t980 * t914;
	t981 = cos(t986);
	t913 = t981 * t914;
	t735 = -t874 * t913 + t876 * t912;
	t734 = -t874 * t912 - t876 * t913;
	t1156 = t939 * t1123 + t1136 * t1175;
	t958 = t886 * t963;
	t946 = -0.4e1 * t807 * t958 * t1159;
	t961 = pkin(3) * t1175;
	t1155 = t1031 * t946 + t961 * t1159;
	t1102 = t834 * t880;
	t1105 = t833 * t877;
	t1018 = t1105 / 0.2e1 + t1102 / 0.2e1;
	t802 = (t1018 * t857 + t1027 * t1049) * t887;
	t1103 = t834 * t877;
	t1104 = t833 * t880;
	t1017 = -t1103 / 0.2e1 + t1104 / 0.2e1;
	t803 = (-t1017 * t857 - t1028 * t1049) * t887;
	t787 = -t802 * t870 - t803 * t871;
	t1128 = t877 / 0.2e1;
	t1070 = 0.1e1 / t1092 * t850 * t1158;
	t1043 = t888 * t1069;
	t846 = t864 * t1025 - 0.8e1 * t1043;
	t799 = 0.4e1 * t1045 + (t1089 - t866 * t1070 / 0.4e1 - t1052 * t864 + (-t996 * t849 / 0.2e1 - t864 * t850 / 0.2e1 - t866 * t846 / 0.2e1) * t852) * pkin(5);
	t1134 = -t799 / 0.2e1;
	t798 = t843 + (t1070 / 0.4e1 + t846 * t1132) * t861 + (-0.2e1 * t863 * t996 - 0.4e1 * t864 * t866) * t1125 + (-t1041 * t863 - t1088) * pkin(5);
	t1021 = t798 * t1128 + t880 * t1134;
	t1135 = t798 / 0.2e1;
	t1022 = t799 * t1128 + t880 * t1135;
	t1032 = t1102 + t1105;
	t1033 = -t1103 + t1104;
	t1034 = t1106 + t1109;
	t1035 = t1107 - t1108;
	t1037 = t857 * t858 * t1043;
	t997 = 0.4e1 * t1027;
	t998 = 0.4e1 * t1028;
	t935 = t887 * (-(t870 * t997 - t871 * t998) * t1037 + (-t871 * t1021 - t870 * t1022 + (-t870 * t1017 - t871 * t1018) * qJD(3)) * t857 + (-t1170 * t864 - (t870 * t1032 - t871 * t1033) * t863 + (-t1171 * qJD(3) - t870 * t1034 - t871 * t1035) * t866) * t1074);
	t933 = pkin(4) * t935;
	t932 = pkin(3) * t933;
	t1154 = t932 * t1159 + t787 * t946;
	t758 = -t874 * t980 - t876 * t981;
	t796 = ((t832 * t1129 + t831 * t1131) * t857 + t1029 * t1050) * t887;
	t778 = (-t797 * t1101 + t796 * t835) * t827;
	t1076 = qJD(2) + t778;
	t1075 = t885 * t1144;
	t1053 = t1031 * t1075;
	t1146 = (t1075 * t1166 + t938) * t1058 - t1053 * t950 + pkin(3) * t808 * t925;
	t1124 = pkin(4) * t808;
	t1121 = pkin(4) * t887;
	t1010 = 0.4e1 * t873 * t1037;
	t1023 = t875 * t1037;
	t1056 = t857 * t1131;
	t1091 = t857 * t875;
	t1112 = t835 * t1160;
	t1114 = 0.2e1 * (t796 * t1101 - t838 * t1112) / t829 ^ 2;
	t994 = t832 * t866 + t834 * t863 + t848 * t864;
	t995 = t831 * t866 + t833 * t863 + t847 * t864;
	t756 = (-t835 * t1114 - t827 * t1160) * t800 + (t1101 * t1114 + (0.2e1 * t840 * t1112 - t796 * t836) * t827) * t801 + ((t847 * t1010 + 0.4e1 * t848 * t1023 + t799 * t1056 + t1091 * t1135) * t835 - (t848 * t1010 - 0.4e1 * t847 * t1023 + t798 * t1056 + t1091 * t1134) * t1101 + ((t995 * t1101 + t994 * t835) * t875 + (-t994 * t1101 + t995 * t835) * t873) * t1074) * t827 * t887;
	t1116 = t756 * t878;
	t1115 = t756 * t881;
	t1086 = t878 * t879;
	t1085 = t879 * t881;
	t1063 = t878 * t1078;
	t823 = t825 * t1086;
	t1084 = t825 * t1063 + t778 * t823;
	t1080 = qJD(1) * t879;
	t1077 = qJD(2) * t882;
	t1071 = t825 * t1085;
	t1066 = t878 * t1080;
	t1064 = t881 * t1079;
	t1062 = t878 * t1077;
	t1060 = t810 * t1136;
	t1059 = t1031 * t1136;
	t1054 = -pkin(1) * t881 - pkin(13);
	t1051 = pkin(3) * t1163 - t806;
	t1048 = t1076 * t779;
	t1044 = 0.2e1 * t1136;
	t1042 = t882 * t778 * t1110 + qJD(1) * t1071 + t825 * t1062 + t826 * t1066;
	t1040 = 0.2e1 * t1047;
	t1039 = t883 * t1047;
	t1026 = -0.2e1 * t1038;
	t1024 = pkin(3) * t1157 * t1165;
	t1014 = pkin(3) * (t783 * t808 + t807 * t810);
	t1013 = pkin(4) * t883 * t1038;
	t1012 = t1161 * t1076;
	t1011 = t1048 + t1076;
	t773 = t787 * t1024;
	t786 = -t802 * t871 + t803 * t870;
	t1001 = t773 * t1059 - t786 * t889;
	t785 = t1031 * t1024;
	t1000 = t785 * t1059 - t813 * t889;
	t999 = qJD(1) * t794;
	t989 = pkin(3) * (-t1031 * t807 * t885 + t784 * t1124);
	t762 = -t778 * t1071 + t1172 * t825 + (-t1086 * t778 - t1063 + t1064) * t826;
	t988 = -t824 - t1153;
	t985 = t1012 * t881 - t1116;
	t984 = t1011 * t878 - t1115;
	t983 = t773 * t1060 + (t786 * t806 - t787 * t889) * pkin(4);
	t982 = t785 * t1060 + (-t1031 * t889 + t806 * t813) * pkin(4);
	t769 = t1161 * t795;
	t979 = t985 * t826;
	t768 = t769 * t882;
	t763 = t1076 * t795;
	t976 = (-t787 * t806 + t1001) * t1133 + t787 * t1014;
	t975 = (-t1031 * t806 + t1000) * t1133 + t1031 * t1014;
	t974 = (t878 * t1048 - t1115) * t825 + t979;
	t973 = t983 * t1133 + t787 * t989;
	t972 = t1031 * t989 + t982 * t1133;
	t971 = -t874 * t981 + t876 * t980;
	t966 = t1174 * t1121;
	t955 = -0.4e1 * t959;
	t954 = 0.4e1 * t958;
	t947 = t885 * t953;
	t934 = (-(t870 * t998 + t871 * t997) * t1037 + (t870 * t1021 - t871 * t1022 + (-t871 * t1017 + t870 * t1018) * qJD(3)) * t857 + (-t1171 * t864 - (t871 * t1032 + t870 * t1033) * t863 + (t1170 * qJD(3) - t871 * t1034 + t870 * t1035) * t866) * t1074) * t1121;
	t930 = (t1031 * t954 + t1157 * t961) * t1044;
	t923 = pkin(3) * t926 * t1124;
	t918 = (t1157 * t932 + t787 * t954) * t1044;
	t907 = ((t1053 * t1166 + t1173 * t785 + t806 * t966 + t810 * t930 + t813 * t956 - t1176) * t1058 - t982 * t950 + t1146 * t1031 + t1155 * t784) * t1040 + ((t1031 * t955 + t930 * t1123 + t1156 * t785 + t961 * t1163 + t813 * t938 - t889 * t966 - t1177) * t1058 - (t1031 * t1051 + t1000) * t947 + t1031 * t923 + t1155 * t783) * t1026 + t1169 * t972 + t1168 * t975;
	t906 = t907 * t981;
	t905 = t907 * t980;
	t904 = ((t935 * t1053 + t1173 * t773 + t786 * t956 + t806 * t934 + t810 * t918 - t889 * t933) * t1058 - t983 * t950 + t1146 * t787 + t1154 * t784) * t1040 + ((t918 * t1123 + t1156 * t773 + t932 * t1163 + t786 * t938 + t787 * t955 - t806 * t933 - t889 * t934) * t1058 - (t1051 * t787 + t1001) * t947 + t787 * t923 + t1154 * t783) * t1026 + t1169 * t973 + t1168 * t976;
	t903 = t904 * t981;
	t902 = t904 * t980;
	t793 = t794 * t882;
	t792 = t795 * t882;
	t791 = t879 * t824 - t823;
	t767 = (t988 + t1110) * t882;
	t766 = t769 * t879;
	t765 = t988 * t879 + t823;
	t764 = t1076 * t794;
	t761 = t825 * t1064 + (t1076 * t1085 + t1065) * t826 - t1084;
	t760 = -t763 * t882 - t879 * t999;
	t759 = -t1076 * t882 * t824 + t1042;
	t755 = -0.2e1 * t975 * t1013 + 0.2e1 * t972 * t1039;
	t752 = -0.2e1 * t976 * t1013 + 0.2e1 * t973 * t1039;
	t747 = (t1012 * t878 + t1115) * t826 + t985 * t825;
	t746 = t984 * t825 + t979;
	t745 = qJD(1) * t768 + t974 * t879 + t1084;
	t744 = -t794 * t879 * t756 + (t1076 * t790 - t882 * t999) * t779 - t762;
	t743 = t779 * qJD(1) * t790 + t974 * t882 + t1042;
	t742 = t770 * t1080 + (t984 * t826 + (t1011 * t881 + t1116) * t825) * t882;
	t741 = t971 * t755;
	t740 = t758 * t755;
	t738 = t971 * t752;
	t737 = t758 * t752;
	t729 = -t734 * t755 - t874 * t906 + t876 * t905;
	t728 = t735 * t755 - t874 * t905 - t876 * t906;
	t727 = -t734 * t752 - t874 * t903 + t876 * t902;
	t726 = t735 * t752 - t874 * t902 - t876 * t903;
	t1 = [(t734 * t790 - t735 * t791 - t758 * t762 - t761 * t971) * r_i_i_C(1) + (t734 * t791 + t735 * t790 + t758 * t761 - t762 * t971) * r_i_i_C(2) + pkin(1) * t1063 + (-t761 * t874 - t762 * t876) * pkin(3) + (-t879 * r_i_i_C(3) + t1054 * t882) * qJD(1), (-t726 * t792 + t727 * t793 + t734 * t767 + t735 * t768 + t737 * t759 + t738 * t760 - t742 * t971 + t743 * t758) * r_i_i_C(1) + (-t726 * t793 - t727 * t792 - t734 * t768 + t735 * t767 - t737 * t760 + t738 * t759 + t742 * t758 + t743 * t971) * r_i_i_C(2) + (-t742 * t874 + t743 * t876) * pkin(3) + (-t881 * t1077 + t1066) * pkin(1), (-t728 * t792 + t729 * t793 + t740 * t759 + t741 * t760) * r_i_i_C(1) + (-t728 * t793 - t729 * t792 - t740 * t760 + t741 * t759) * r_i_i_C(2), 0; (-t734 * t792 + t735 * t793 + t758 * t760 - t759 * t971) * r_i_i_C(1) + (-t734 * t793 - t735 * t792 + t758 * t759 + t760 * t971) * r_i_i_C(2) - pkin(1) * t1062 + (-t759 * t874 + t760 * t876) * pkin(3) + (t882 * r_i_i_C(3) + t1054 * t879) * qJD(1), (-t726 * t790 + t727 * t791 + t734 * t765 + t735 * t766 - t737 * t761 + t738 * t762 - t744 * t971 + t745 * t758) * r_i_i_C(1) + (-t726 * t791 - t727 * t790 - t734 * t766 + t735 * t765 - t737 * t762 - t738 * t761 + t744 * t758 + t745 * t971) * r_i_i_C(2) + (-t744 * t874 + t745 * t876) * pkin(3) + t1172 * pkin(1), (-t728 * t790 + t729 * t791 - t740 * t761 + t741 * t762) * r_i_i_C(1) + (-t728 * t791 - t729 * t790 - t740 * t762 - t741 * t761) * r_i_i_C(2), 0; 0, (t726 * t794 + t727 * t795 + t734 * t769 + t735 * t770 - t737 * t763 + t738 * t764 - t746 * t971 + t747 * t758) * r_i_i_C(1) + (-t726 * t795 + t727 * t794 - t734 * t770 + t735 * t769 - t737 * t764 - t738 * t763 + t746 * t758 + t747 * t971) * r_i_i_C(2) - qJD(2) * t878 * pkin(1) + (-t746 * t874 + t747 * t876) * pkin(3), (t728 * t794 + t729 * t795 - t740 * t763 + t741 * t764) * r_i_i_C(1) + (-t728 * t795 + t729 * t794 - t740 * t764 - t741 * t763) * r_i_i_C(2), 0;];
	JaD_transl = t1;
end