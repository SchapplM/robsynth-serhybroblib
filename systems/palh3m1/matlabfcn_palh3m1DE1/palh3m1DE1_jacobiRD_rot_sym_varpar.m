% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh3m1DE1
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JRD_rot [9x4]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-19 19:20
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh3m1DE1_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1DE1_jacobiRD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1DE1_jacobiRD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1DE1_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1DE1_jacobiRD_rot_sym_varpar: pkin has to be [19x1] (double)');
JRD_rot=NaN(9,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0; -t31, 0, 0, 0; 0, 0, 0, 0; t31, 0, 0, 0; -t30, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:15
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (11->9), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t32 = sin(qJ(1));
	t39 = qJD(1) * t32;
	t34 = cos(qJ(1));
	t38 = qJD(1) * t34;
	t31 = sin(qJ(2));
	t37 = qJD(2) * t31;
	t33 = cos(qJ(2));
	t36 = qJD(2) * t33;
	t35 = qJD(2) * t34;
	t30 = t32 * t37 - t33 * t38;
	t29 = t31 * t38 + t32 * t36;
	t28 = t31 * t35 + t33 * t39;
	t27 = t31 * t39 - t33 * t35;
	t1 = [t30, t27, 0, 0; -t28, -t29, 0, 0; 0, -t37, 0, 0; t29, t28, 0, 0; t27, t30, 0, 0; 0, -t36, 0, 0; -t39, 0, 0, 0; t38, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:15
	% EndTime: 2020-04-19 18:18:15
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (73->12), mult. (250->16), div. (0->0), fcn. (250->6), ass. (0->18)
	t76 = sin(qJ(3));
	t77 = sin(qJ(2));
	t79 = cos(qJ(3));
	t80 = cos(qJ(2));
	t84 = t76 * t80 + t77 * t79;
	t87 = qJD(2) + qJD(3);
	t88 = t87 * t84;
	t78 = sin(qJ(1));
	t86 = qJD(1) * t78;
	t81 = cos(qJ(1));
	t85 = qJD(1) * t81;
	t83 = t76 * t77 - t79 * t80;
	t74 = t87 * t83;
	t73 = -t78 * t88 - t83 * t85;
	t72 = -t74 * t78 + t84 * t85;
	t71 = -t74 * t81 - t84 * t86;
	t70 = -t81 * t88 + t83 * t86;
	t1 = [t73, t71, t71, 0; -t70, t72, t72, 0; 0, t88, t88, 0; -t72, t70, t70, 0; t71, t73, t73, 0; 0, -t74, -t74, 0; -t86, 0, 0, 0; t85, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:29:02
	% EndTime: 2020-04-19 18:37:07
	% DurationCPUTime: 302.74s
	% Computational Cost: add. (8968809->294), mult. (13949746->551), div. (538600->14), fcn. (8723138->19), ass. (0->253)
	t1229 = pkin(5) ^ 2;
	t1233 = pkin(1) ^ 2;
	t1384 = sin(qJ(2));
	t1386 = sin(pkin(16));
	t1387 = cos(qJ(2));
	t1389 = cos(pkin(16));
	t1198 = t1384 * t1386 - t1387 * t1389;
	t1369 = pkin(5) * t1198;
	t1332 = -0.2e1 * pkin(1) * t1369 + t1233;
	t1188 = t1229 + t1332;
	t1185 = 0.1e1 / t1188;
	t1200 = t1384 * t1389 + t1387 * t1386;
	t1195 = t1200 * qJD(2);
	t1232 = 0.1e1 / pkin(2);
	t1184 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1188;
	t1193 = pkin(1) - t1369;
	t1393 = -pkin(6) - pkin(2);
	t1182 = (pkin(5) - t1393) * (pkin(5) + t1393) + t1332;
	t1392 = -pkin(6) + pkin(2);
	t1183 = (pkin(5) - t1392) * (pkin(5) + t1392) + t1332;
	t1339 = t1183 * t1182;
	t1235 = sqrt(-t1339);
	t1335 = t1200 * t1235;
	t1169 = -pkin(5) * t1335 + t1193 * t1184;
	t1383 = sin(qJ(3));
	t1323 = t1169 * t1383;
	t1368 = pkin(5) * t1200;
	t1170 = t1184 * t1368 + t1193 * t1235;
	t1227 = cos(qJ(3));
	t1340 = t1170 * t1227;
	t1258 = t1340 / 0.2e1 + t1323 / 0.2e1;
	t1322 = t1170 * t1383;
	t1341 = t1169 * t1227;
	t1268 = t1322 - t1341;
	t1394 = pkin(1) * pkin(5);
	t1277 = 0.2e1 * (t1182 + t1183) * t1394;
	t1171 = t1195 * t1277;
	t1196 = t1198 * qJD(2);
	t1401 = t1200 * t1229;
	t1316 = t1195 * t1401;
	t1300 = pkin(1) * t1316;
	t1178 = 0.1e1 / t1235;
	t1377 = t1178 / 0.2e1;
	t1309 = t1193 * t1377;
	t1337 = t1195 * t1235;
	t1157 = t1171 * t1309 - 0.2e1 * t1300 + (-t1196 * t1184 - t1337) * pkin(5);
	t1326 = t1157 * t1383;
	t1186 = 0.1e1 / t1188 ^ 2;
	t1331 = t1186 * t1394;
	t1402 = t1171 * t1178;
	t1162 = -t1368 * t1402 / 0.2e1;
	t1367 = t1193 * pkin(1);
	t1306 = t1184 + 0.2e1 * t1367;
	t1336 = t1196 * t1235;
	t1156 = t1162 + (-t1306 * t1195 + t1336) * pkin(5);
	t1345 = t1156 * t1227;
	t1132 = ((-t1326 / 0.2e1 + t1345 / 0.2e1 - t1258 * qJD(3)) * t1185 - t1268 * t1195 * t1331) * t1232;
	t1269 = t1323 + t1340;
	t1255 = t1269 * t1195;
	t1257 = -t1322 / 0.2e1 + t1341 / 0.2e1;
	t1327 = t1156 * t1383;
	t1344 = t1157 * t1227;
	t1133 = (t1255 * t1331 + (t1344 / 0.2e1 + t1327 / 0.2e1 + t1257 * qJD(3)) * t1185) * t1232;
	t1224 = pkin(18) + pkin(19);
	t1222 = sin(t1224);
	t1223 = cos(t1224);
	t1128 = t1223 * t1132 - t1222 * t1133;
	t1230 = pkin(4) ^ 2;
	t1338 = t1185 * t1232;
	t1160 = t1257 * t1338;
	t1161 = t1258 * t1338;
	t1151 = -t1223 * t1160 + t1222 * t1161;
	t1370 = pkin(3) * t1151;
	t1395 = -2 * pkin(4);
	t1334 = -t1370 * t1395 + t1230;
	t1391 = -pkin(8) - pkin(10);
	t1141 = (pkin(3) - t1391) * (pkin(3) + t1391) + t1334;
	t1390 = -pkin(8) + pkin(10);
	t1142 = (pkin(3) - t1390) * (pkin(3) + t1390) + t1334;
	t1348 = t1142 * t1141;
	t1234 = sqrt(-t1348);
	t1407 = t1128 * t1234;
	t1398 = -qJD(3) - qJD(2);
	t1292 = t1384 * t1383;
	t1197 = -t1387 * t1227 + t1292;
	t1365 = 2 * pkin(4);
	t1276 = pkin(3) * (t1141 + t1142) * t1365;
	t1119 = t1128 * t1276;
	t1231 = pkin(3) ^ 2;
	t1147 = t1231 + t1334;
	t1143 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1147;
	t1148 = pkin(4) + t1370;
	t1305 = t1148 * t1395 - t1143;
	t1135 = 0.1e1 / t1234;
	t1278 = -t1222 * t1160 - t1223 * t1161;
	t1378 = -t1278 / 0.2e1;
	t1313 = t1135 * t1378;
	t1279 = -t1222 * t1132 - t1223 * t1133;
	t1400 = t1279 * t1234;
	t1089 = (t1119 * t1313 + t1305 * t1128 - t1400) * pkin(3);
	t1307 = t1278 * t1231 * t1395;
	t1379 = t1135 / 0.2e1;
	t1314 = t1148 * t1379;
	t1090 = t1119 * t1314 + t1128 * t1307 + (t1143 * t1279 - t1407) * pkin(3);
	t1144 = 0.1e1 / t1147;
	t1228 = 0.1e1 / pkin(10);
	t1145 = 0.1e1 / t1147 ^ 2;
	t1330 = pkin(3) * pkin(4) * t1145;
	t1371 = pkin(3) * t1278;
	t1124 = t1143 * t1371 + t1148 * t1234;
	t1225 = sin(pkin(17));
	t1351 = t1124 * t1225;
	t1123 = t1143 * t1148 - t1234 * t1371;
	t1226 = cos(pkin(17));
	t1352 = t1123 * t1226;
	t1250 = (t1351 - t1352) * t1330;
	t1375 = -t1226 / 0.2e1;
	t1376 = t1225 / 0.2e1;
	t1081 = ((t1089 * t1375 + t1090 * t1376) * t1144 + t1128 * t1250) * t1228;
	t1350 = t1124 * t1226;
	t1353 = t1123 * t1225;
	t1249 = (t1350 + t1353) * t1330;
	t1374 = t1226 / 0.2e1;
	t1082 = ((t1089 * t1376 + t1090 * t1374) * t1144 + t1128 * t1249) * t1228;
	t1346 = t1144 * t1228;
	t1117 = (-t1352 / 0.2e1 + t1351 / 0.2e1) * t1346;
	t1114 = 0.1e1 / t1117 ^ 2;
	t1118 = (t1350 / 0.2e1 + t1353 / 0.2e1) * t1346;
	t1116 = t1118 ^ 2;
	t1106 = t1114 * t1116 + 0.1e1;
	t1104 = 0.1e1 / t1106;
	t1113 = 0.1e1 / t1117;
	t1355 = t1114 * t1118;
	t1074 = (-t1081 * t1355 + t1082 * t1113) * t1104;
	t1107 = atan2(t1118, t1117);
	t1102 = sin(t1107);
	t1103 = cos(t1107);
	t1180 = t1197 * t1398;
	t1295 = t1387 * t1383;
	t1199 = -t1384 * t1227 - t1295;
	t1181 = t1398 * t1199;
	t1406 = t1180 * t1102 + t1181 * t1103 + (-t1102 * t1197 - t1103 * t1199) * t1074;
	t1385 = sin(qJ(1));
	t1270 = t1385 * t1292;
	t1296 = t1387 * t1385;
	t1190 = t1227 * t1296 - t1270;
	t1388 = cos(qJ(1));
	t1273 = t1388 * t1295;
	t1298 = t1388 * t1384;
	t1192 = t1227 * t1298 + t1273;
	t1173 = -t1190 * qJD(1) + t1398 * t1192;
	t1271 = t1385 * t1295;
	t1272 = t1388 * t1292;
	t1294 = t1385 * t1384;
	t1299 = t1388 * t1387;
	t1174 = -qJD(1) * t1271 + (-qJD(1) * t1294 - t1398 * t1299) * t1227 + t1398 * t1272;
	t1191 = t1227 * t1299 - t1272;
	t1405 = t1173 * t1102 + t1174 * t1103 + (-t1102 * t1192 + t1103 * t1191) * t1074;
	t1175 = qJD(1) * t1273 + (qJD(1) * t1298 - t1398 * t1296) * t1227 + t1398 * t1270;
	t1189 = t1227 * t1294 + t1271;
	t1176 = t1191 * qJD(1) + t1398 * t1189;
	t1246 = t1176 * t1102 + t1175 * t1103 + (-t1102 * t1189 + t1103 * t1190) * t1074;
	t1404 = -0.4e1 * t1185 * t1186;
	t1403 = t1081 * t1114;
	t1382 = -t1119 / 0.2e1;
	t1172 = t1200 * t1277;
	t1288 = t1172 * t1377 + t1184;
	t1158 = (t1198 * t1235 + (-t1288 - 0.2e1 * t1367) * t1200) * pkin(5);
	t1325 = t1158 * t1383;
	t1366 = t1229 * pkin(1);
	t1159 = t1172 * t1309 - 0.2e1 * t1200 ^ 2 * t1366 + (-t1198 * t1184 - t1335) * pkin(5);
	t1342 = t1159 * t1227;
	t1260 = t1342 / 0.2e1 + t1325 / 0.2e1;
	t1303 = t1200 * t1331;
	t1139 = (t1260 * t1185 + t1269 * t1303) * t1232;
	t1324 = t1159 * t1383;
	t1343 = t1158 * t1227;
	t1259 = -t1324 / 0.2e1 + t1343 / 0.2e1;
	t1140 = (-t1259 * t1185 + t1268 * t1303) * t1232;
	t1131 = -t1222 * t1139 - t1223 * t1140;
	t1120 = t1131 * t1276;
	t1381 = -t1120 / 0.2e1;
	t1129 = t1278 * t1276;
	t1380 = -t1129 / 0.2e1;
	t1130 = -t1223 * t1139 + t1222 * t1140;
	t1091 = (t1120 * t1313 - t1130 * t1234 + t1305 * t1131) * pkin(3);
	t1092 = t1120 * t1314 + t1131 * t1307 + (t1130 * t1143 - t1131 * t1234) * pkin(3);
	t1084 = ((t1091 * t1375 + t1092 * t1376) * t1144 + t1131 * t1250) * t1228;
	t1085 = ((t1091 * t1376 + t1092 * t1374) * t1144 + t1131 * t1249) * t1228;
	t1075 = (-t1084 * t1355 + t1085 * t1113) * t1104;
	t1373 = t1075 + 0.1e1;
	t1111 = (t1129 * t1313 - t1151 * t1234 + t1278 * t1305) * pkin(3);
	t1112 = t1129 * t1314 + t1278 * t1307 + (t1151 * t1143 - t1234 * t1278) * pkin(3);
	t1087 = ((t1111 * t1375 + t1112 * t1376) * t1144 + t1278 * t1250) * t1228;
	t1088 = ((t1111 * t1376 + t1112 * t1374) * t1144 + t1278 * t1249) * t1228;
	t1078 = (-t1087 * t1355 + t1088 * t1113) * t1104;
	t1372 = t1078 + 0.1e1;
	t1364 = t1074 * t1199;
	t1362 = t1113 * t1403;
	t1363 = 0.2e1 * (t1082 * t1355 - t1116 * t1362) / t1106 ^ 2;
	t1354 = t1119 * t1135 / t1348;
	t1349 = t1128 * t1231;
	t1347 = t1144 * t1226;
	t1094 = t1173 * t1103;
	t1329 = t1383 / 0.2e1;
	t1321 = t1074 * t1373;
	t1320 = t1074 * t1372;
	t1319 = t1231 * t1365;
	t1318 = t1230 * t1349;
	t1317 = 0.1e1 / t1339 * t1172 * t1402;
	t1315 = t1354 / 0.4e1;
	t1312 = t1144 * t1376;
	t1311 = -t1347 / 0.2e1;
	t1310 = t1347 / 0.2e1;
	t1308 = 0.4e1 * pkin(4) * t1349;
	t1302 = t1104 * t1330;
	t1301 = -0.8e1 * t1318;
	t1291 = t1144 * t1145 * t1318;
	t1290 = t1233 * t1316;
	t1289 = -t1278 * t1354 / 0.4e1;
	t1283 = t1226 * t1291;
	t1282 = t1102 * t1190 + t1103 * t1189;
	t1281 = t1102 * t1191 + t1103 * t1192;
	t1280 = -t1102 * t1199 + t1103 * t1197;
	t1275 = 0.4e1 * t1225 * t1291;
	t1267 = -0.4e1 * t1123 * t1283;
	t1266 = 0.4e1 * t1124 * t1283;
	t1265 = t1131 * t1275;
	t1264 = t1278 * t1275;
	t1256 = -t1104 * t1403 - t1113 * t1363;
	t1168 = -t1196 * t1277 - 0.8e1 * t1290;
	t1137 = t1162 + (t1317 / 0.4e1 + t1168 * t1377) * t1193 + (0.2e1 * t1195 * t1198 + 0.4e1 * t1196 * t1200) * t1366 + (-t1288 * t1195 + t1336) * pkin(5);
	t1138 = 0.4e1 * t1300 + (t1337 - t1200 * t1317 / 0.4e1 + t1306 * t1196 + (t1198 * t1171 / 0.2e1 + t1196 * t1172 / 0.2e1 - t1200 * t1168 / 0.2e1) * t1178) * pkin(5);
	t1121 = (-t1268 * t1290 * t1404 + (-t1138 * t1227 / 0.2e1 + t1137 * t1329 + t1260 * qJD(3)) * t1185 + (-t1268 * t1196 - (-t1324 + t1343) * t1195 + (t1269 * qJD(3) + t1326 - t1345) * t1200) * t1331) * t1232;
	t1122 = (-t1233 * t1255 * t1401 * t1404 + (t1137 * t1227 / 0.2e1 + t1138 * t1329 + t1259 * qJD(3)) * t1185 + (-t1269 * t1196 - (-t1325 - t1342) * t1195 + (-t1268 * qJD(3) + t1327 + t1344) * t1200) * t1331) * t1232;
	t1109 = -t1223 * t1121 - t1222 * t1122;
	t1254 = t1089 * t1131 + t1091 * t1128 + t1109 * t1123;
	t1253 = t1089 * t1278 + t1111 * t1128 + t1123 * t1279;
	t1252 = t1090 * t1131 + t1092 * t1128 + t1109 * t1124;
	t1251 = t1090 * t1278 + t1112 * t1128 + t1124 * t1279;
	t1244 = t1355 * t1363 + (-t1082 * t1114 + 0.2e1 * t1118 * t1362) * t1104;
	t1110 = t1276 * t1279 + t1278 * t1301;
	t1108 = t1222 * t1121 - t1223 * t1122;
	t1100 = t1180 * t1103;
	t1098 = t1176 * t1103;
	t1086 = t1109 * t1276 + t1131 * t1301;
	t1083 = t1278 * t1308 + (t1407 + t1129 * t1289 + t1305 * t1279 + (t1110 * t1378 + t1151 * t1382 + t1279 * t1380) * t1135) * pkin(3);
	t1080 = (t1110 * t1379 + t1129 * t1315) * t1148 + (-t1128 * t1151 - 0.2e1 * t1278 * t1279) * t1319 + (-t1128 * t1143 - t1400 + (t1128 * t1380 + t1278 * t1382) * t1135) * pkin(3);
	t1079 = t1131 * t1308 + (-t1108 * t1234 + t1120 * t1289 + t1305 * t1109 + (t1086 * t1378 + t1130 * t1382 + t1279 * t1381) * t1135) * pkin(3);
	t1077 = (t1086 * t1379 + t1120 * t1315) * t1148 + (-t1109 * t1278 - t1128 * t1130 - t1131 * t1279) * t1319 + (t1108 * t1143 - t1109 * t1234 + (t1128 * t1381 + t1131 * t1382) * t1135) * pkin(3);
	t1070 = t1256 * t1088 + t1244 * t1087 + (((t1080 * t1310 + t1083 * t1312 + t1123 * t1264 + t1266 * t1278) * t1113 - (t1080 * t1312 + t1083 * t1311 + t1124 * t1264 + t1267 * t1278) * t1355) * t1104 + ((t1251 * t1113 + t1253 * t1355) * t1226 + (t1253 * t1113 - t1251 * t1355) * t1225) * t1302) * t1228;
	t1069 = t1256 * t1085 + t1244 * t1084 + (((t1077 * t1310 + t1079 * t1312 + t1123 * t1265 + t1131 * t1266) * t1113 - (t1077 * t1312 + t1079 * t1311 + t1124 * t1265 + t1131 * t1267) * t1355) * t1104 + ((t1252 * t1113 + t1254 * t1355) * t1226 + (t1254 * t1113 - t1252 * t1355) * t1225) * t1302) * t1228;
	t1 = [-t1282 * t1074 - t1175 * t1102 + t1098, t1281 * t1069 + t1075 * t1405 + t1405, t1070 * t1281 + t1078 * t1405 + t1405, 0; t1281 * t1074 + t1174 * t1102 - t1094, t1282 * t1069 + t1246 * t1075 + t1246, t1070 * t1282 + t1078 * t1246 + t1246, 0; 0, t1280 * t1069 + t1075 * t1406 + t1406, t1070 * t1280 + t1078 * t1406 + t1406, 0; -t1246, t1094 + (t1069 * t1191 + t1075 * t1173 - t1192 * t1321) * t1103 + (-t1069 * t1192 - t1075 * t1174 - t1191 * t1321 - t1174) * t1102, t1094 + (t1070 * t1191 + t1078 * t1173 - t1192 * t1320) * t1103 + (-t1070 * t1192 - t1078 * t1174 - t1191 * t1320 - t1174) * t1102, 0; t1405, t1098 + (t1069 * t1190 + t1075 * t1176 - t1189 * t1321) * t1103 + (-t1069 * t1189 - t1075 * t1175 - t1190 * t1321 - t1175) * t1102, t1098 + (t1070 * t1190 + t1078 * t1176 - t1189 * t1320) * t1103 + (-t1070 * t1189 - t1078 * t1175 - t1190 * t1320 - t1175) * t1102, 0; 0, t1100 + (-t1069 * t1199 + t1075 * t1180 - t1197 * t1321) * t1103 + (-t1069 * t1197 - t1075 * t1181 + t1373 * t1364 - t1181) * t1102, t1100 + (-t1070 * t1199 + t1078 * t1180 - t1197 * t1320) * t1103 + (-t1070 * t1197 - t1078 * t1181 + t1372 * t1364 - t1181) * t1102, 0; -qJD(1) * t1385, 0, 0, 0; qJD(1) * t1388, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 19:11:42
	% EndTime: 2020-04-19 19:20:58
	% DurationCPUTime: 553.16s
	% Computational Cost: add. (14615542->299), mult. (22696178->575), div. (884548->14), fcn. (14201116->21), ass. (0->283)
	t2065 = pkin(5) ^ 2;
	t2069 = pkin(1) ^ 2;
	t2236 = sin(qJ(2));
	t2238 = sin(pkin(16));
	t2239 = cos(qJ(2));
	t2241 = cos(pkin(16));
	t2031 = t2236 * t2238 - t2239 * t2241;
	t2222 = pkin(5) * t2031;
	t2179 = -0.2e1 * pkin(1) * t2222 + t2069;
	t2021 = t2065 + t2179;
	t2018 = 0.1e1 / t2021;
	t2033 = t2236 * t2241 + t2239 * t2238;
	t2028 = t2033 * qJD(2);
	t2068 = 0.1e1 / pkin(2);
	t2017 = pkin(2) ^ 2 - pkin(6) ^ 2 + t2021;
	t2026 = pkin(1) - t2222;
	t2245 = -pkin(6) - pkin(2);
	t2015 = (pkin(5) - t2245) * (pkin(5) + t2245) + t2179;
	t2244 = -pkin(6) + pkin(2);
	t2016 = (pkin(5) - t2244) * (pkin(5) + t2244) + t2179;
	t2189 = t2016 * t2015;
	t2071 = sqrt(-t2189);
	t2185 = t2033 * t2071;
	t2002 = -pkin(5) * t2185 + t2017 * t2026;
	t2235 = sin(qJ(3));
	t2169 = t2002 * t2235;
	t2221 = pkin(5) * t2033;
	t2003 = t2017 * t2221 + t2026 * t2071;
	t2063 = cos(qJ(3));
	t2190 = t2003 * t2063;
	t2096 = t2190 / 0.2e1 + t2169 / 0.2e1;
	t2168 = t2003 * t2235;
	t2191 = t2002 * t2063;
	t2106 = t2168 - t2191;
	t2246 = pkin(1) * pkin(5);
	t2118 = 0.2e1 * (t2015 + t2016) * t2246;
	t2004 = t2028 * t2118;
	t2029 = t2031 * qJD(2);
	t2263 = t2033 * t2065;
	t2161 = t2028 * t2263;
	t2145 = pkin(1) * t2161;
	t2011 = 0.1e1 / t2071;
	t2229 = t2011 / 0.2e1;
	t2154 = t2026 * t2229;
	t2187 = t2028 * t2071;
	t1990 = t2004 * t2154 - 0.2e1 * t2145 + (-t2029 * t2017 - t2187) * pkin(5);
	t2172 = t1990 * t2235;
	t2019 = 0.1e1 / t2021 ^ 2;
	t2178 = t2019 * t2246;
	t2264 = t2004 * t2011;
	t1995 = -t2221 * t2264 / 0.2e1;
	t2220 = t2026 * pkin(1);
	t2151 = t2017 + 0.2e1 * t2220;
	t2186 = t2029 * t2071;
	t1989 = t1995 + (-t2151 * t2028 + t2186) * pkin(5);
	t2195 = t1989 * t2063;
	t1965 = ((-t2172 / 0.2e1 + t2195 / 0.2e1 - t2096 * qJD(3)) * t2018 - t2106 * t2028 * t2178) * t2068;
	t2107 = t2169 + t2190;
	t2093 = t2107 * t2028;
	t2095 = -t2168 / 0.2e1 + t2191 / 0.2e1;
	t2173 = t1989 * t2235;
	t2194 = t1990 * t2063;
	t1966 = (t2093 * t2178 + (t2194 / 0.2e1 + t2173 / 0.2e1 + t2095 * qJD(3)) * t2018) * t2068;
	t2058 = pkin(18) + pkin(19);
	t2056 = sin(t2058);
	t2057 = cos(t2058);
	t1961 = t1965 * t2057 - t1966 * t2056;
	t2066 = pkin(4) ^ 2;
	t2188 = t2018 * t2068;
	t1993 = t2095 * t2188;
	t1994 = t2096 * t2188;
	t1984 = -t1993 * t2057 + t1994 * t2056;
	t2223 = pkin(3) * t1984;
	t2247 = -2 * pkin(4);
	t2181 = -t2223 * t2247 + t2066;
	t2243 = -pkin(8) - pkin(10);
	t1974 = (pkin(3) - t2243) * (pkin(3) + t2243) + t2181;
	t2242 = -pkin(8) + pkin(10);
	t1975 = (pkin(3) - t2242) * (pkin(3) + t2242) + t2181;
	t2219 = 2 * pkin(4);
	t2117 = pkin(3) * (t1974 + t1975) * t2219;
	t1952 = t1961 * t2117;
	t2067 = pkin(3) ^ 2;
	t1980 = t2067 + t2181;
	t1976 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t1980;
	t1981 = pkin(4) + t2223;
	t2150 = t1981 * t2247 - t1976;
	t2198 = t1975 * t1974;
	t2070 = sqrt(-t2198);
	t1968 = 0.1e1 / t2070;
	t2119 = -t1993 * t2056 - t1994 * t2057;
	t2230 = -t2119 / 0.2e1;
	t2158 = t1968 * t2230;
	t2120 = -t1965 * t2056 - t1966 * t2057;
	t2262 = t2120 * t2070;
	t1916 = (t1952 * t2158 + t2150 * t1961 - t2262) * pkin(3);
	t2152 = t2119 * t2067 * t2247;
	t2231 = t1968 / 0.2e1;
	t2159 = t1981 * t2231;
	t2272 = t1961 * t2070;
	t1917 = t1952 * t2159 + t1961 * t2152 + (t1976 * t2120 - t2272) * pkin(3);
	t1977 = 0.1e1 / t1980;
	t2064 = 0.1e1 / pkin(10);
	t1978 = 0.1e1 / t1980 ^ 2;
	t2177 = pkin(3) * pkin(4) * t1978;
	t2224 = pkin(3) * t2119;
	t1957 = t1976 * t2224 + t1981 * t2070;
	t2059 = sin(pkin(17));
	t2201 = t1957 * t2059;
	t1956 = t1976 * t1981 - t2070 * t2224;
	t2060 = cos(pkin(17));
	t2202 = t1956 * t2060;
	t2088 = (t2201 - t2202) * t2177;
	t2227 = -t2060 / 0.2e1;
	t2228 = t2059 / 0.2e1;
	t1904 = ((t1916 * t2227 + t1917 * t2228) * t1977 + t1961 * t2088) * t2064;
	t2200 = t1957 * t2060;
	t2203 = t1956 * t2059;
	t2087 = (t2200 + t2203) * t2177;
	t2226 = t2060 / 0.2e1;
	t1905 = ((t1916 * t2228 + t1917 * t2226) * t1977 + t1961 * t2087) * t2064;
	t2196 = t1977 * t2064;
	t1950 = (-t2202 / 0.2e1 + t2201 / 0.2e1) * t2196;
	t1947 = 0.1e1 / t1950 ^ 2;
	t1951 = (t2200 / 0.2e1 + t2203 / 0.2e1) * t2196;
	t1949 = t1951 ^ 2;
	t1939 = t1947 * t1949 + 0.1e1;
	t1937 = 0.1e1 / t1939;
	t1946 = 0.1e1 / t1950;
	t2205 = t1947 * t1951;
	t1897 = (-t1904 * t2205 + t1905 * t1946) * t1937;
	t1940 = atan2(t1951, t1950);
	t1935 = sin(t1940);
	t1936 = cos(t1940);
	t2137 = t2236 * t2235;
	t2030 = -t2239 * t2063 + t2137;
	t2260 = -qJD(3) - qJD(2);
	t2013 = t2030 * t2260;
	t2140 = t2239 * t2235;
	t2032 = -t2236 * t2063 - t2140;
	t2014 = t2260 * t2032;
	t2249 = -t2032 * t1935 + t2030 * t1936;
	t2282 = t1897 * t2249 + t2014 * t1935 - t1936 * t2013;
	t2237 = sin(qJ(1));
	t2108 = t2237 * t2137;
	t2141 = t2239 * t2237;
	t2023 = t2063 * t2141 - t2108;
	t2240 = cos(qJ(1));
	t2111 = t2240 * t2140;
	t2143 = t2240 * t2236;
	t2025 = t2063 * t2143 + t2111;
	t2006 = -t2023 * qJD(1) + t2260 * t2025;
	t2109 = t2237 * t2140;
	t2110 = t2240 * t2137;
	t2139 = t2237 * t2236;
	t2144 = t2240 * t2239;
	t2007 = -qJD(1) * t2109 + (-qJD(1) * t2139 - t2260 * t2144) * t2063 + t2260 * t2110;
	t2024 = t2063 * t2144 - t2110;
	t2250 = t2024 * t1935 + t2025 * t1936;
	t2281 = t1897 * t2250 + t2007 * t1935 - t1936 * t2006;
	t2270 = -t1935 * t2025 + t1936 * t2024;
	t2100 = t2270 * t1897 + t2006 * t1935 + t2007 * t1936;
	t2008 = qJD(1) * t2111 + (qJD(1) * t2143 - t2260 * t2141) * t2063 + t2260 * t2108;
	t2022 = t2063 * t2139 + t2109;
	t2009 = t2024 * qJD(1) + t2260 * t2022;
	t2269 = -t1935 * t2022 + t1936 * t2023;
	t2280 = t2269 * t1897 + t2009 * t1935 + t2008 * t1936;
	t2005 = t2033 * t2118;
	t2132 = t2005 * t2229 + t2017;
	t1991 = (t2031 * t2071 + (-t2132 - 0.2e1 * t2220) * t2033) * pkin(5);
	t2171 = t1991 * t2235;
	t2225 = pkin(1) * t2065;
	t1992 = t2005 * t2154 - 0.2e1 * t2033 ^ 2 * t2225 + (-t2017 * t2031 - t2185) * pkin(5);
	t2192 = t1992 * t2063;
	t2098 = t2192 / 0.2e1 + t2171 / 0.2e1;
	t2148 = t2033 * t2178;
	t1972 = (t2098 * t2018 + t2107 * t2148) * t2068;
	t2170 = t1992 * t2235;
	t2193 = t1991 * t2063;
	t2097 = -t2170 / 0.2e1 + t2193 / 0.2e1;
	t1973 = (-t2097 * t2018 + t2106 * t2148) * t2068;
	t1964 = -t1972 * t2056 - t1973 * t2057;
	t1953 = t1964 * t2117;
	t1963 = -t1972 * t2057 + t1973 * t2056;
	t1918 = (t1953 * t2158 - t1963 * t2070 + t2150 * t1964) * pkin(3);
	t1919 = t1953 * t2159 + t1964 * t2152 + (t1963 * t1976 - t1964 * t2070) * pkin(3);
	t1907 = ((t1918 * t2227 + t1919 * t2228) * t1977 + t1964 * t2088) * t2064;
	t1908 = ((t1918 * t2228 + t1919 * t2226) * t1977 + t1964 * t2087) * t2064;
	t1898 = (-t1907 * t2205 + t1908 * t1946) * t1937;
	t2279 = t1898 + 0.1e1;
	t1962 = t2119 * t2117;
	t1944 = (t1962 * t2158 - t1984 * t2070 + t2119 * t2150) * pkin(3);
	t1945 = t1962 * t2159 + t2119 * t2152 + (t1976 * t1984 - t2070 * t2119) * pkin(3);
	t1914 = ((t1944 * t2227 + t1945 * t2228) * t1977 + t2119 * t2088) * t2064;
	t1915 = ((t1944 * t2228 + t1945 * t2226) * t1977 + t2119 * t2087) * t2064;
	t1901 = (-t1914 * t2205 + t1915 * t1946) * t1937;
	t2278 = t1901 + 0.1e1;
	t1912 = t1935 * t2030 + t1936 * t2032;
	t2275 = -t1912 * t1897 + t2013 * t1935 + t2014 * t1936;
	t2062 = cos(qJ(4));
	t2165 = t2237 * t2062;
	t2061 = sin(qJ(4));
	t2166 = t2240 * t2061;
	t2274 = -qJD(1) * t2165 + (-t2062 * t2269 - t2166) * qJD(4);
	t2167 = t2062 * t2240;
	t2267 = qJD(4) * t2167 + (-qJD(1) * t2237 - qJD(4) * t2269) * t2061;
	t2266 = -0.4e1 * t2018 * t2019;
	t2265 = t1904 * t1947;
	t1930 = t2023 * t1935;
	t1889 = t1897 * t1930;
	t1929 = t2022 * t1936;
	t1923 = t2008 * t1935;
	t2254 = -t1936 * t2009 + t1923;
	t2259 = t1897 * t1929 + t1889 + t2254;
	t2251 = t1929 + t1930;
	t2234 = -t1952 / 0.2e1;
	t2233 = -t1953 / 0.2e1;
	t2232 = -t1962 / 0.2e1;
	t2218 = qJD(4) * t2061;
	t2217 = qJD(4) * t2062;
	t2215 = t1946 * t2265;
	t2216 = 0.2e1 * (t1905 * t2205 - t1949 * t2215) / t1939 ^ 2;
	t2204 = t1952 * t1968 / t2198;
	t2199 = t1961 * t2067;
	t2197 = t1977 * t2060;
	t2176 = t2235 / 0.2e1;
	t2164 = t2067 * t2219;
	t2163 = t2066 * t2199;
	t2162 = 0.1e1 / t2189 * t2005 * t2264;
	t2160 = t2204 / 0.4e1;
	t2157 = t1977 * t2228;
	t2156 = -t2197 / 0.2e1;
	t2155 = t2197 / 0.2e1;
	t2153 = 0.4e1 * pkin(4) * t2199;
	t2147 = t1937 * t2177;
	t2146 = -0.8e1 * t2163;
	t2135 = t1977 * t1978 * t2163;
	t2134 = t2069 * t2161;
	t2133 = -t2119 * t2204 / 0.4e1;
	t2124 = t2060 * t2135;
	t2116 = 0.4e1 * t2059 * t2135;
	t2105 = -0.4e1 * t1956 * t2124;
	t2104 = 0.4e1 * t1957 * t2124;
	t2103 = t1964 * t2116;
	t2102 = t2119 * t2116;
	t2094 = -t1937 * t2265 - t1946 * t2216;
	t2001 = -t2029 * t2118 - 0.8e1 * t2134;
	t1970 = t1995 + (t2162 / 0.4e1 + t2001 * t2229) * t2026 + (0.2e1 * t2028 * t2031 + 0.4e1 * t2029 * t2033) * t2225 + (-t2132 * t2028 + t2186) * pkin(5);
	t1971 = 0.4e1 * t2145 + (t2187 - t2033 * t2162 / 0.4e1 + t2151 * t2029 + (t2031 * t2004 / 0.2e1 + t2029 * t2005 / 0.2e1 - t2033 * t2001 / 0.2e1) * t2011) * pkin(5);
	t1954 = (-t2106 * t2134 * t2266 + (-t1971 * t2063 / 0.2e1 + t1970 * t2176 + t2098 * qJD(3)) * t2018 + (-t2106 * t2029 - (-t2170 + t2193) * t2028 + (t2107 * qJD(3) + t2172 - t2195) * t2033) * t2178) * t2068;
	t1955 = (-t2069 * t2093 * t2263 * t2266 + (t1970 * t2063 / 0.2e1 + t1971 * t2176 + t2097 * qJD(3)) * t2018 + (-t2107 * t2029 - (-t2171 - t2192) * t2028 + (-t2106 * qJD(3) + t2173 + t2194) * t2033) * t2178) * t2068;
	t1942 = -t1954 * t2057 - t1955 * t2056;
	t2092 = t1916 * t1964 + t1918 * t1961 + t1942 * t1956;
	t2091 = t1916 * t2119 + t1944 * t1961 + t1956 * t2120;
	t2090 = t1917 * t1964 + t1919 * t1961 + t1942 * t1957;
	t2089 = t1917 * t2119 + t1945 * t1961 + t1957 * t2120;
	t2084 = t1897 * t2251 + t2254;
	t2080 = t2205 * t2216 + (-t1905 * t1947 + 0.2e1 * t1951 * t2215) * t1937;
	t1943 = t2117 * t2120 + t2119 * t2146;
	t1941 = t1954 * t2056 - t1955 * t2057;
	t1913 = t1942 * t2117 + t1964 * t2146;
	t1906 = t2119 * t2153 + (t2272 + t1962 * t2133 + t2150 * t2120 + (t1943 * t2230 + t1984 * t2234 + t2120 * t2232) * t1968) * pkin(3);
	t1903 = (t1943 * t2231 + t1962 * t2160) * t1981 + (-t1961 * t1984 - 0.2e1 * t2119 * t2120) * t2164 + (-t1961 * t1976 - t2262 + (t1961 * t2232 + t2119 * t2234) * t1968) * pkin(3);
	t1902 = t1964 * t2153 + (-t1941 * t2070 + t1953 * t2133 + t2150 * t1942 + (t1913 * t2230 + t1963 * t2234 + t2120 * t2233) * t1968) * pkin(3);
	t1900 = (t1913 * t2231 + t1953 * t2160) * t1981 + (-t1942 * t2119 - t1961 * t1963 - t1964 * t2120) * t2164 + (t1941 * t1976 - t1942 * t2070 + (t1961 * t2233 + t1964 * t2234) * t1968) * pkin(3);
	t1887 = t2278 * t2249;
	t1886 = t2278 * t2250;
	t1885 = t2278 * t2251;
	t1884 = t2279 * t2249;
	t1883 = t2279 * t2250;
	t1882 = t2279 * t2251;
	t1879 = -t1923 - t1889 + (-t1897 * t2022 + t2009) * t1936;
	t1877 = qJD(1) * t2166 + t2281 * t2062 + (t2061 * t2270 + t2165) * qJD(4);
	t1876 = qJD(1) * t2167 - t2281 * t2061 + (-t2237 * t2061 + t2062 * t2270) * qJD(4);
	t1875 = t2094 * t1915 + t2080 * t1914 + (((t1903 * t2155 + t1906 * t2157 + t1956 * t2102 + t2104 * t2119) * t1946 - (t1903 * t2157 + t1906 * t2156 + t1957 * t2102 + t2105 * t2119) * t2205) * t1937 + ((t2089 * t1946 + t2091 * t2205) * t2060 + (t2091 * t1946 - t2089 * t2205) * t2059) * t2147) * t2064;
	t1874 = t2094 * t1908 + t2080 * t1907 + (((t1900 * t2155 + t1902 * t2157 + t1956 * t2103 + t1964 * t2104) * t1946 - (t1900 * t2157 + t1902 * t2156 + t1957 * t2103 + t1964 * t2105) * t2205) * t1937 + ((t2090 * t1946 + t2092 * t2205) * t2060 + (t2092 * t1946 - t2090 * t2205) * t2059) * t2147) * t2064;
	t1873 = t1875 * t2249 + t1901 * t2275 + t2275;
	t1872 = t1875 * t2251 + t1901 * t2280 + t2280;
	t1871 = t1875 * t2250 + t1901 * t2100 + t2100;
	t1870 = t1874 * t2249 + t1898 * t2275 + t2275;
	t1869 = t1874 * t2251 + t1898 * t2280 + t2280;
	t1868 = t1874 * t2250 + t1898 * t2100 + t2100;
	t1 = [t1879 * t2062 + t2267, t1868 * t2062 - t1883 * t2218, t1871 * t2062 - t1886 * t2218, t1876; t1877, t1869 * t2062 - t1882 * t2218, t1872 * t2062 - t1885 * t2218, -t2259 * t2061 - t2274; 0, t1870 * t2062 - t1884 * t2218, t1873 * t2062 - t1887 * t2218, -t1912 * t2217 - t2061 * t2282; -t1879 * t2061 + t2274, -t1868 * t2061 - t1883 * t2217, -t1871 * t2061 - t1886 * t2217, -t1877; t1876, -t1869 * t2061 - t1882 * t2217, -t1872 * t2061 - t1885 * t2217, -t2259 * t2062 + t2267; 0, -t1870 * t2061 - t1884 * t2217, -t1873 * t2061 - t1887 * t2217, t1912 * t2218 - t2062 * t2282; t2280, -t1874 * t2270 + t1898 * t2281 + t2281, -t1875 * t2270 + t1901 * t2281 + t2281, 0; -t2100, -t1874 * t2269 + t1898 * t2084 + t2259, -t1875 * t2269 + t1901 * t2084 + t2259, 0; 0, t1874 * t1912 + t1898 * t2282 + t2282, t1875 * t1912 + t1901 * t2282 + t2282, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:27
	% EndTime: 2020-04-19 18:18:35
	% DurationCPUTime: 3.17s
	% Computational Cost: add. (51091->91), mult. (81758->196), div. (2926->9), fcn. (51230->13), ass. (0->112)
	t527 = sin(qJ(2));
	t528 = sin(pkin(16));
	t529 = cos(qJ(2));
	t530 = cos(pkin(16));
	t457 = t527 * t530 + t529 * t528;
	t525 = pkin(1) * t457;
	t454 = t457 * qJD(2);
	t536 = pkin(1) * pkin(5);
	t498 = t454 * t536;
	t468 = pkin(1) ^ 2;
	t456 = t527 * t528 - t529 * t530;
	t526 = pkin(1) * t456;
	t503 = -0.2e1 * pkin(5) * t526 + t468;
	t535 = -pkin(6) - pkin(2);
	t445 = (pkin(5) - t535) * (pkin(5) + t535) + t503;
	t534 = -pkin(6) + pkin(2);
	t446 = (pkin(5) - t534) * (pkin(5) + t534) + t503;
	t504 = t445 + t446;
	t440 = t504 * t498;
	t510 = t446 * t445;
	t469 = sqrt(-t510);
	t443 = 0.1e1 / t469;
	t539 = t440 * t443;
	t436 = t525 * t539;
	t467 = pkin(5) ^ 2;
	t451 = t467 + t503;
	t447 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t451;
	t452 = -pkin(5) + t526;
	t500 = 0.2e1 * t452 * pkin(5);
	t495 = -t447 + t500;
	t455 = t456 * qJD(2);
	t506 = t455 * t469;
	t426 = -t436 + (t495 * t454 + t506) * pkin(1);
	t497 = t468 * t457 * t454;
	t491 = pkin(5) * t497;
	t507 = t454 * t469;
	t511 = t443 * t452;
	t427 = -t440 * t511 - 0.2e1 * t491 + (-t455 * t447 - t507) * pkin(1);
	t448 = 0.1e1 / t451;
	t466 = 0.1e1 / pkin(6);
	t439 = t447 * t525 - t452 * t469;
	t462 = sin(pkin(15));
	t513 = t439 * t462;
	t505 = t457 * t469;
	t438 = -pkin(1) * t505 - t452 * t447;
	t464 = cos(pkin(15));
	t514 = t438 * t464;
	t484 = t513 + t514;
	t449 = 0.1e1 / t451 ^ 2;
	t494 = t449 * t498;
	t531 = t464 / 0.2e1;
	t532 = t462 / 0.2e1;
	t414 = ((t426 * t531 + t427 * t532) * t448 + t484 * t494) * t466;
	t508 = t448 * t466;
	t434 = (t514 / 0.2e1 + t513 / 0.2e1) * t508;
	t431 = 0.1e1 / t434 ^ 2;
	t540 = t414 * t431;
	t490 = t504 * t536;
	t441 = t457 * t490;
	t538 = t443 * t441;
	t489 = t467 * t497;
	t537 = -t443 * (-t455 * t490 - 0.4e1 * t489) - 0.1e1 / t510 * t440 * t538;
	t430 = 0.1e1 / t434;
	t533 = -t462 / 0.2e1;
	t524 = t468 * pkin(5);
	t512 = t439 * t464;
	t515 = t438 * t462;
	t483 = -t512 + t515;
	t415 = ((t426 * t533 + t427 * t531) * t448 - t483 * t494) * t466;
	t435 = (t512 / 0.2e1 - t515 / 0.2e1) * t508;
	t433 = t435 ^ 2;
	t424 = t433 * t431 + 0.1e1;
	t422 = 0.1e1 / t424;
	t516 = t431 * t435;
	t411 = (-t414 * t516 + t415 * t430) * t422;
	t492 = t447 + t538;
	t428 = (t456 * t469 + (-t492 + t500) * t457) * pkin(1);
	t429 = -t441 * t511 - 0.2e1 * t457 ^ 2 * t524 + (-t456 * t447 - t505) * pkin(1);
	t499 = t449 * t536;
	t493 = t457 * t499;
	t418 = ((t428 * t533 + t429 * t531) * t448 - t483 * t493) * t466;
	t419 = ((t428 * t531 + t429 * t532) * t448 + t484 * t493) * t466;
	t412 = (t418 * t430 - t419 * t516) * t422;
	t523 = t411 * t412;
	t521 = t430 * t540;
	t522 = (t415 * t516 - t433 * t521) / t424 ^ 2;
	t425 = atan2(t435, t434);
	t420 = sin(t425);
	t461 = sin(qJ(1));
	t520 = t420 * t461;
	t463 = cos(qJ(1));
	t519 = t420 * t463;
	t421 = cos(t425);
	t518 = t421 * t461;
	t517 = t421 * t463;
	t509 = t448 * t462;
	t502 = qJD(1) * t461;
	t501 = qJD(1) * t463;
	t496 = t448 * t531;
	t486 = t448 * t449 * t489;
	t482 = t462 * t486;
	t481 = 0.4e1 * t464 * t486;
	t480 = t411 * t520 - t421 * t501;
	t479 = t411 * t519 + t421 * t502;
	t478 = t411 * t518 + t420 * t501;
	t477 = -t411 * t517 + t420 * t502;
	t476 = t426 * t457 + t428 * t454 - t438 * t455;
	t475 = t427 * t457 + t429 * t454 - t439 * t455;
	t417 = 0.4e1 * t491 + (t456 * t539 + t507 + t537 * t457 - (t495 - t538) * t455) * pkin(1);
	t416 = -t436 + t537 * t452 + (0.2e1 * t454 * t456 + 0.4e1 * t455 * t457) * t524 + (-t492 * t454 + t506) * pkin(1);
	t410 = (-t422 * t540 - 0.2e1 * t430 * t522) * t418 + (0.2e1 * t516 * t522 + (-t415 * t431 + 0.2e1 * t435 * t521) * t422) * t419 + ((t416 * t496 + t439 * t481 - t417 * t509 / 0.2e1 - 0.4e1 * t438 * t482) * t430 - (t417 * t496 + t438 * t481 + t416 * t509 / 0.2e1 + 0.4e1 * t439 * t482) * t516 + ((t475 * t430 - t476 * t516) * t464 + (-t476 * t430 - t475 * t516) * t462) * t499) * t422 * t466;
	t1 = [t480, -t410 * t519 + t477 * t412, 0, 0; -t479, -t410 * t520 - t478 * t412, 0, 0; 0, t410 * t421 - t420 * t523, 0, 0; t478, -t410 * t517 + t479 * t412, 0, 0; t477, -t410 * t518 + t480 * t412, 0, 0; 0, -t410 * t420 - t421 * t523, 0, 0; -t502, 0, 0, 0; t501, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:38
	% EndTime: 2020-04-19 18:18:51
	% DurationCPUTime: 6.74s
	% Computational Cost: add. (126227->107), mult. (201254->222), div. (7468->9), fcn. (126510->13), ass. (0->126)
	t537 = pkin(5) ^ 2;
	t539 = pkin(1) ^ 2;
	t532 = sin(qJ(2));
	t534 = cos(qJ(2));
	t614 = sin(pkin(16));
	t615 = cos(pkin(16));
	t553 = -t532 * t614 + t534 * t615;
	t612 = pkin(5) * t553;
	t588 = 0.2e1 * pkin(1) * t612 + t539;
	t520 = t537 + t588;
	t517 = 0.1e1 / t520;
	t538 = 0.1e1 / pkin(2);
	t593 = t517 * t538;
	t516 = pkin(2) ^ 2 - pkin(6) ^ 2 + t520;
	t521 = pkin(1) + t612;
	t620 = -pkin(6) - pkin(2);
	t514 = (pkin(5) - t620) * (pkin(5) + t620) + t588;
	t619 = -pkin(6) + pkin(2);
	t515 = (pkin(5) - t619) * (pkin(5) + t619) + t588;
	t595 = t515 * t514;
	t540 = sqrt(-t595);
	t526 = t532 * t615 + t534 * t614;
	t611 = pkin(5) * t526;
	t508 = t516 * t611 + t521 * t540;
	t530 = sin(pkin(19));
	t598 = t508 * t530;
	t590 = t526 * t540;
	t507 = -pkin(5) * t590 + t516 * t521;
	t531 = cos(pkin(19));
	t599 = t507 * t531;
	t503 = (-t599 / 0.2e1 + t598 / 0.2e1) * t593;
	t597 = t508 * t531;
	t600 = t507 * t530;
	t504 = (t597 / 0.2e1 + t600 / 0.2e1) * t593;
	t494 = atan2(t504, t503);
	t489 = sin(t494);
	t490 = cos(t494);
	t563 = t489 * t534 + t490 * t532;
	t523 = t526 * qJD(2);
	t621 = pkin(1) * pkin(5);
	t583 = t523 * t621;
	t589 = t514 + t515;
	t509 = t589 * t583;
	t512 = 0.1e1 / t540;
	t625 = t509 * t512;
	t505 = t611 * t625;
	t610 = t521 * pkin(1);
	t574 = t516 + 0.2e1 * t610;
	t524 = t553 * qJD(2);
	t591 = t524 * t540;
	t495 = -t505 + (-t523 * t574 - t591) * pkin(5);
	t578 = t537 * t526 * t523;
	t569 = pkin(1) * t578;
	t592 = t523 * t540;
	t596 = t512 * t521;
	t496 = t509 * t596 - 0.2e1 * t569 + (t524 * t516 - t592) * pkin(5);
	t560 = t597 + t600;
	t518 = 0.1e1 / t520 ^ 2;
	t573 = t518 * t583;
	t616 = t531 / 0.2e1;
	t618 = t530 / 0.2e1;
	t477 = ((t495 * t618 + t496 * t616) * t517 + t560 * t573) * t538;
	t561 = -t598 + t599;
	t617 = -t531 / 0.2e1;
	t478 = ((t495 * t617 + t496 * t618) * t517 - t561 * t573) * t538;
	t500 = 0.1e1 / t503 ^ 2;
	t502 = t504 ^ 2;
	t493 = t500 * t502 + 0.1e1;
	t491 = 0.1e1 / t493;
	t499 = 0.1e1 / t503;
	t601 = t500 * t504;
	t585 = qJD(2) + (t477 * t499 - t478 * t601) * t491;
	t629 = t563 * t585;
	t533 = sin(qJ(1));
	t628 = t563 * t533;
	t568 = t589 * t621;
	t510 = t526 * t568;
	t624 = t512 * t510;
	t571 = t516 + t624;
	t497 = (-t553 * t540 + (-t571 - 0.2e1 * t610) * t526) * pkin(5);
	t613 = pkin(1) * t537;
	t498 = t510 * t596 - 0.2e1 * t526 ^ 2 * t613 + (t516 * t553 - t590) * pkin(5);
	t584 = t518 * t621;
	t572 = t526 * t584;
	t481 = ((t497 * t618 + t498 * t616) * t517 + t560 * t572) * t538;
	t482 = ((t497 * t617 + t498 * t618) * t517 - t561 * t572) * t538;
	t475 = (t481 * t499 - t482 * t601) * t491;
	t627 = -t475 - 0.1e1;
	t626 = t478 * t500;
	t602 = t490 * t534;
	t605 = t489 * t532;
	t562 = -t602 + t605;
	t623 = t533 * t562;
	t566 = t539 * t578;
	t622 = 0.1e1 / t595 * t509 * t624 + t512 * (t524 * t568 - 0.4e1 * t566);
	t479 = -t505 + t622 * t521 + (-0.2e1 * t523 * t553 - 0.4e1 * t524 * t526) * t613 + (-t523 * t571 - t591) * pkin(5);
	t480 = 0.4e1 * t569 + (-t553 * t625 + t592 - t622 * t526 + (-t574 - t624) * t524) * pkin(5);
	t551 = t496 * t526 + t498 * t523 + t508 * t524;
	t552 = t495 * t526 + t497 * t523 + t507 * t524;
	t564 = t517 * t518 * t566;
	t556 = 0.4e1 * t530 * t564;
	t559 = t531 * t564;
	t575 = t517 * t618;
	t594 = t517 * t531;
	t606 = t499 * t626;
	t607 = (t477 * t601 - t502 * t606) / t493 ^ 2;
	t470 = (-t491 * t626 - 0.2e1 * t499 * t607) * t481 + (0.2e1 * t601 * t607 + (-t477 * t500 + 0.2e1 * t504 * t606) * t491) * t482 + ((t479 * t594 / 0.2e1 + 0.4e1 * t508 * t559 + t480 * t575 + t507 * t556) * t499 - (-t480 * t594 / 0.2e1 - 0.4e1 * t507 * t559 + t479 * t575 + t508 * t556) * t601 + ((t499 * t551 + t552 * t601) * t531 + (t499 * t552 - t551 * t601) * t530) * t584) * t491 * t538;
	t609 = t470 * t532;
	t608 = t470 * t534;
	t587 = qJD(1) * t533;
	t535 = cos(qJ(1));
	t586 = qJD(1) * t535;
	t582 = t535 * t605;
	t579 = t535 * t602;
	t570 = t585 * t475;
	t565 = qJD(1) * t628 + t582 * t585;
	t558 = t627 * t585;
	t557 = t570 + t585;
	t555 = qJD(1) * t563;
	t554 = qJD(1) * t562;
	t550 = (-t579 + t582) * qJD(1) + t585 * t628;
	t549 = t534 * t558 - t609;
	t548 = t532 * t557 - t608;
	t547 = t549 * t490;
	t546 = t489 * t548 + t547;
	t1 = [t550, t533 * t475 * t555 + ((t532 * t570 - t608) * t489 + t547) * t535 + t565, 0, 0; t533 * t554 - t535 * t629, t563 * t586 * t627 + t546 * t533, 0, 0; 0, (t532 * t558 + t608) * t490 + t549 * t489, 0, 0; t535 * t555 - t585 * t623, (t548 * t490 + (t534 * t557 + t609) * t489) * t535 + t627 * t587 * t562, 0, 0; -t579 * t585 + t565, t470 * t623 + (t533 * t629 + t535 * t554) * t475 + t550, 0, 0; 0, t546, 0, 0; -t587, 0, 0, 0; t586, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobiRD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:30:40
	% EndTime: 2020-04-19 18:39:28
	% DurationCPUTime: 363.36s
	% Computational Cost: add. (8767481->355), mult. (13634090->694), div. (518472->18), fcn. (8533354->24), ass. (0->337)
	t1337 = pkin(3) ^ 2;
	t1336 = pkin(4) ^ 2;
	t1335 = pkin(5) ^ 2;
	t1339 = pkin(1) ^ 2;
	t1329 = sin(qJ(2));
	t1332 = cos(qJ(2));
	t1583 = sin(pkin(16));
	t1584 = cos(pkin(16));
	t1448 = -t1329 * t1583 + t1332 * t1584;
	t1566 = pkin(5) * t1448;
	t1522 = 0.2e1 * pkin(1) * t1566 + t1339;
	t1313 = t1335 + t1522;
	t1309 = pkin(2) ^ 2 - pkin(6) ^ 2 + t1313;
	t1314 = pkin(1) + t1566;
	t1587 = pkin(5) + pkin(6);
	t1588 = pkin(5) - pkin(6);
	t1307 = (pkin(2) + t1587) * (-pkin(2) + t1588) + t1522;
	t1308 = (-pkin(2) + t1587) * (pkin(2) + t1588) + t1522;
	t1536 = t1308 * t1307;
	t1341 = sqrt(-t1536);
	t1319 = t1329 * t1584 + t1332 * t1583;
	t1565 = pkin(5) * t1319;
	t1301 = t1309 * t1565 + t1314 * t1341;
	t1328 = sin(qJ(3));
	t1538 = t1301 * t1328;
	t1531 = t1319 * t1341;
	t1300 = -pkin(5) * t1531 + t1309 * t1314;
	t1331 = cos(qJ(3));
	t1541 = t1300 * t1331;
	t1466 = t1538 / 0.2e1 - t1541 / 0.2e1;
	t1310 = 0.1e1 / t1313;
	t1338 = 0.1e1 / pkin(2);
	t1534 = t1310 * t1338;
	t1294 = t1466 * t1534;
	t1537 = t1301 * t1331;
	t1542 = t1300 * t1328;
	t1465 = -t1537 / 0.2e1 - t1542 / 0.2e1;
	t1295 = t1465 * t1534;
	t1325 = pkin(18) + pkin(19);
	t1323 = sin(t1325);
	t1324 = cos(t1325);
	t1266 = t1294 * t1324 - t1295 * t1323;
	t1568 = pkin(4) * t1266;
	t1592 = -2 * pkin(3);
	t1524 = -t1568 * t1592 + t1336;
	t1262 = t1337 + t1524;
	t1259 = pkin(8) ^ 2 - pkin(10) ^ 2 + t1262;
	t1316 = t1319 * qJD(2);
	t1589 = pkin(1) * pkin(5);
	t1476 = 0.2e1 * (t1307 + t1308) * t1589;
	t1302 = t1316 * t1476;
	t1317 = t1448 * qJD(2);
	t1510 = t1316 * t1319 * t1335;
	t1494 = pkin(1) * t1510;
	t1305 = 0.1e1 / t1341;
	t1578 = t1305 / 0.2e1;
	t1506 = t1314 * t1578;
	t1533 = t1316 * t1341;
	t1285 = t1302 * t1506 - 0.2e1 * t1494 + (t1317 * t1309 - t1533) * pkin(5);
	t1550 = t1285 * t1331;
	t1607 = t1302 * t1305;
	t1296 = -t1565 * t1607 / 0.2e1;
	t1563 = t1314 * pkin(1);
	t1502 = t1309 + 0.2e1 * t1563;
	t1532 = t1317 * t1341;
	t1284 = t1296 + (-t1502 * t1316 - t1532) * pkin(5);
	t1553 = t1284 * t1328;
	t1469 = t1550 / 0.2e1 + t1553 / 0.2e1;
	t1551 = t1285 * t1328;
	t1552 = t1284 * t1331;
	t1470 = -t1551 / 0.2e1 + t1552 / 0.2e1;
	t1311 = 0.1e1 / t1313 ^ 2;
	t1520 = t1311 * t1589;
	t1500 = t1316 * t1520;
	t1477 = t1537 + t1542;
	t1478 = -t1538 + t1541;
	t1620 = t1323 * t1478 + t1324 * t1477;
	t1615 = t1338 * (-t1620 * t1500 + (-t1324 * t1469 - t1323 * t1470 + (-t1323 * t1465 + t1324 * t1466) * qJD(3)) * t1310);
	t1624 = pkin(4) * t1615;
	t1626 = t1259 * t1624;
	t1586 = -pkin(8) - pkin(10);
	t1257 = (pkin(3) - t1586) * (pkin(3) + t1586) + t1524;
	t1585 = pkin(10) - pkin(8);
	t1258 = (pkin(3) - t1585) * (pkin(3) + t1585) + t1524;
	t1555 = t1258 * t1257;
	t1340 = sqrt(-t1555);
	t1625 = t1340 * t1624;
	t1327 = cos(pkin(19));
	t1539 = t1301 * t1327;
	t1326 = sin(pkin(19));
	t1544 = t1300 * t1326;
	t1479 = t1539 + t1544;
	t1575 = t1327 / 0.2e1;
	t1577 = t1326 / 0.2e1;
	t1249 = ((t1284 * t1577 + t1285 * t1575) * t1310 + t1479 * t1500) * t1338;
	t1540 = t1301 * t1326;
	t1543 = t1300 * t1327;
	t1480 = -t1540 + t1543;
	t1576 = -t1327 / 0.2e1;
	t1250 = ((t1284 * t1576 + t1285 * t1577) * t1310 - t1480 * t1500) * t1338;
	t1292 = (-t1543 / 0.2e1 + t1540 / 0.2e1) * t1534;
	t1289 = 0.1e1 / t1292 ^ 2;
	t1293 = (t1539 / 0.2e1 + t1544 / 0.2e1) * t1534;
	t1291 = t1293 ^ 2;
	t1282 = t1289 * t1291 + 0.1e1;
	t1280 = 0.1e1 / t1282;
	t1288 = 0.1e1 / t1292;
	t1545 = t1289 * t1293;
	t1526 = qJD(2) + (t1249 * t1288 - t1250 * t1545) * t1280;
	t1619 = t1323 * t1477 - t1324 * t1478;
	t1623 = ((t1323 * t1466 + t1324 * t1465) * qJD(3) - t1323 * t1469 + t1324 * t1470) * t1310 - t1619 * t1500;
	t1261 = 0.1e1 / t1262 ^ 2;
	t1334 = 0.1e1 / pkin(8);
	t1608 = t1261 * t1334;
	t1283 = atan2(t1293, t1292);
	t1279 = cos(t1283);
	t1277 = t1332 * t1279;
	t1278 = sin(t1283);
	t1554 = t1278 * t1329;
	t1247 = t1277 - t1554;
	t1263 = -pkin(3) - t1568;
	t1601 = t1257 + t1258;
	t1420 = t1338 * t1623;
	t1416 = pkin(4) * t1420;
	t1611 = 0.2e1 * pkin(3) * t1416;
	t1392 = t1601 * t1611;
	t1613 = 0.1e1 / t1340;
	t1390 = -t1613 / t1555 * t1392 / 0.4e1;
	t1582 = -t1613 / 0.2e1;
	t1622 = t1263 * t1390 + t1416 * t1582;
	t1330 = sin(qJ(1));
	t1528 = t1330 * t1332;
	t1530 = t1329 * t1330;
	t1621 = t1278 * t1528 + t1279 * t1530;
	t1481 = t1294 * t1323 + t1295 * t1324;
	t1569 = pkin(4) * t1481;
	t1236 = -t1259 * t1263 - t1340 * t1569;
	t1234 = 0.1e1 / t1236;
	t1235 = 0.1e1 / t1236 ^ 2;
	t1391 = t1392 * t1582;
	t1389 = pkin(4) * t1391;
	t1379 = -t1259 * t1416 + t1263 * t1611 + t1389 * t1481 - t1625;
	t1414 = t1336 * t1420;
	t1410 = pkin(3) * t1414;
	t1407 = -0.2e1 * t1410;
	t1380 = t1263 * t1391 - t1340 * t1416 + t1407 * t1481 + t1626;
	t1237 = t1259 * t1569 - t1263 * t1340;
	t1591 = t1237 ^ 2;
	t1504 = t1235 * t1591 + 0.1e1;
	t1557 = t1235 * t1237;
	t1564 = pkin(8) * t1262;
	t1590 = t1234 * t1235;
	t1368 = 0.2e1 * t1334 / t1504 ^ 2 * (-t1591 * t1590 * t1379 + t1380 * t1557) * t1564;
	t1377 = t1334 * t1379;
	t1225 = 0.1e1 / t1504;
	t1518 = t1225 * t1564;
	t1373 = t1377 * t1518;
	t1411 = pkin(3) * t1334 * t1420;
	t1399 = pkin(8) * t1225 * t1411;
	t1618 = -0.2e1 * t1235 * t1373 + (-0.4e1 * pkin(4) * t1399 - 0.2e1 * t1368) * t1234;
	t1378 = t1334 * t1380;
	t1376 = pkin(4) * t1378;
	t1495 = t1235 * t1518;
	t1614 = 0.2e1 * pkin(4);
	t1616 = 0.4e1 * pkin(4) * t1237 * t1590 * t1373 - 0.2e1 * t1376 * t1495 + (0.4e1 * t1336 * t1399 + t1368 * t1614) * t1557;
	t1260 = 0.1e1 / t1262;
	t1612 = 0.2e1 * t1263;
	t1303 = t1319 * t1476;
	t1492 = t1303 * t1578 + t1309;
	t1286 = (-t1448 * t1341 + (-t1492 - 0.2e1 * t1563) * t1319) * pkin(5);
	t1571 = pkin(1) * t1335;
	t1287 = t1303 * t1506 - 0.2e1 * t1319 ^ 2 * t1571 + (t1309 * t1448 - t1531) * pkin(5);
	t1499 = t1319 * t1520;
	t1253 = ((t1286 * t1577 + t1287 * t1575) * t1310 + t1479 * t1499) * t1338;
	t1254 = ((t1286 * t1576 + t1287 * t1577) * t1310 - t1480 * t1499) * t1338;
	t1232 = (t1253 * t1288 - t1254 * t1545) * t1280;
	t1610 = -t1232 - 0.1e1;
	t1248 = t1278 * t1332 + t1279 * t1329;
	t1243 = t1248 * t1330;
	t1609 = t1250 * t1289;
	t1602 = t1247 * t1232;
	t1223 = t1602 + t1247;
	t1404 = t1261 * t1411;
	t1401 = pkin(4) * t1404;
	t1488 = t1237 * t1495;
	t1496 = t1234 * t1518;
	t1579 = t1260 / 0.2e1;
	t1365 = 0.2e1 * (t1237 * t1401 + t1378 * t1579) * t1496 - 0.2e1 * (t1236 * t1401 + t1377 * t1579) * t1488;
	t1507 = t1334 * t1579;
	t1436 = atan2(t1237 * t1507, t1236 * t1507);
	t1430 = sin(t1436);
	t1363 = t1430 * t1365;
	t1431 = cos(t1436);
	t1364 = t1431 * t1365;
	t1572 = sin(pkin(18));
	t1573 = cos(pkin(18));
	t1600 = t1572 * t1363 + t1573 * t1364;
	t1188 = t1573 * t1363 - t1572 * t1364;
	t1599 = t1390 * t1569 + t1582 * t1624;
	t1409 = t1337 * t1414;
	t1397 = 0.4e1 * t1260 * t1409 * t1608;
	t1412 = pkin(3) * t1624;
	t1598 = t1481 * t1397 + t1412 * t1608;
	t1546 = t1287 * t1331;
	t1549 = t1286 * t1328;
	t1468 = t1549 / 0.2e1 + t1546 / 0.2e1;
	t1255 = (t1468 * t1310 + t1477 * t1499) * t1338;
	t1547 = t1287 * t1328;
	t1548 = t1286 * t1331;
	t1467 = -t1547 / 0.2e1 + t1548 / 0.2e1;
	t1256 = (-t1467 * t1310 - t1478 * t1499) * t1338;
	t1240 = -t1255 * t1323 - t1256 * t1324;
	t1446 = 0.4e1 * t1477;
	t1447 = 0.4e1 * t1478;
	t1493 = t1339 * t1510;
	t1299 = t1317 * t1476 - 0.8e1 * t1493;
	t1511 = 0.1e1 / t1536 * t1303 * t1607;
	t1251 = t1296 + (t1511 / 0.4e1 + t1299 * t1578) * t1314 + (-0.2e1 * t1316 * t1448 - 0.4e1 * t1317 * t1319) * t1571 + (-t1492 * t1316 - t1532) * pkin(5);
	t1574 = t1328 / 0.2e1;
	t1252 = 0.4e1 * t1494 + (t1533 - t1319 * t1511 / 0.4e1 - t1502 * t1317 + (-t1448 * t1302 / 0.2e1 - t1317 * t1303 / 0.2e1 - t1319 * t1299 / 0.2e1) * t1305) * pkin(5);
	t1580 = -t1252 / 0.2e1;
	t1471 = t1251 * t1574 + t1331 * t1580;
	t1581 = t1251 / 0.2e1;
	t1472 = t1252 * t1574 + t1331 * t1581;
	t1482 = t1546 + t1549;
	t1483 = -t1547 + t1548;
	t1484 = t1550 + t1553;
	t1485 = t1551 - t1552;
	t1487 = t1310 * t1311 * t1493;
	t1386 = t1338 * (-(t1323 * t1446 - t1324 * t1447) * t1487 + (-t1324 * t1471 - t1323 * t1472 + (-t1323 * t1467 - t1324 * t1468) * qJD(3)) * t1310 + (-t1619 * t1317 - (t1323 * t1482 - t1324 * t1483) * t1316 + (-t1620 * qJD(3) - t1323 * t1484 - t1324 * t1485) * t1319) * t1520);
	t1384 = pkin(4) * t1386;
	t1383 = pkin(3) * t1384;
	t1597 = t1240 * t1397 + t1383 * t1608;
	t1211 = -t1572 * t1430 - t1573 * t1431;
	t1521 = t1336 * t1592;
	t1503 = t1481 * t1521;
	t1594 = (t1521 * t1615 + t1389) * t1507 + t1503 * t1401 + pkin(3) * t1261 * t1376;
	t1570 = pkin(4) * t1261;
	t1567 = pkin(4) * t1338;
	t1562 = qJD(1) * t1330;
	t1333 = cos(qJ(1));
	t1561 = qJD(1) * t1333;
	t1440 = t1285 * t1319 + t1287 * t1316 + t1301 * t1317;
	t1441 = t1284 * t1319 + t1286 * t1316 + t1300 * t1317;
	t1451 = 0.4e1 * t1326 * t1487;
	t1473 = t1327 * t1487;
	t1505 = t1310 * t1577;
	t1535 = t1310 * t1327;
	t1556 = t1288 * t1609;
	t1558 = 0.2e1 * (t1249 * t1545 - t1291 * t1556) / t1282 ^ 2;
	t1209 = (-t1280 * t1609 - t1288 * t1558) * t1253 + (t1545 * t1558 + (-t1249 * t1289 + 0.2e1 * t1293 * t1556) * t1280) * t1254 + ((t1252 * t1505 + t1300 * t1451 + 0.4e1 * t1301 * t1473 + t1535 * t1581) * t1288 - (t1251 * t1505 - 0.4e1 * t1300 * t1473 + t1301 * t1451 + t1535 * t1580) * t1545 + ((t1440 * t1288 + t1441 * t1545) * t1327 + (t1441 * t1288 - t1440 * t1545) * t1326) * t1520) * t1280 * t1338;
	t1560 = t1209 * t1329;
	t1559 = t1209 * t1332;
	t1529 = t1329 * t1333;
	t1527 = t1332 * t1333;
	t1276 = t1278 * t1530;
	t1525 = t1526 * t1276;
	t1515 = t1278 * t1529;
	t1512 = t1279 * t1527;
	t1509 = t1263 * t1582;
	t1508 = t1481 * t1582;
	t1501 = pkin(3) * t1612 - t1259;
	t1498 = 0.2e1 * t1582;
	t1497 = t1526 * t1232;
	t1491 = t1621 * qJD(1) + t1526 * t1515;
	t1490 = 0.2e1 * t1496;
	t1489 = t1334 * t1496;
	t1475 = pkin(3) * t1601 * t1614;
	t1474 = -0.2e1 * t1488;
	t1464 = t1610 * t1526;
	t1463 = t1497 + t1526;
	t1462 = pkin(3) * (t1236 * t1261 + t1260 * t1263);
	t1461 = pkin(4) * t1334 * t1488;
	t1452 = t1247 * t1330;
	t1226 = t1240 * t1475;
	t1239 = -t1255 * t1324 + t1256 * t1323;
	t1450 = t1226 * t1508 - t1239 * t1340;
	t1238 = t1481 * t1475;
	t1449 = t1238 * t1508 - t1266 * t1340;
	t1439 = pkin(3) * (-t1260 * t1336 * t1481 + t1237 * t1570);
	t1438 = -t1277 - t1602;
	t1215 = (t1512 - t1515) * qJD(1) - t1526 * t1621;
	t1435 = t1464 * t1332 - t1560;
	t1434 = t1463 * t1329 - t1559;
	t1433 = t1226 * t1509 + (t1239 * t1259 - t1240 * t1340) * pkin(4);
	t1432 = t1238 * t1509 + (t1259 * t1266 - t1340 * t1481) * pkin(4);
	t1429 = t1435 * t1279;
	t1222 = t1610 * t1248;
	t1221 = t1222 * t1333;
	t1216 = t1526 * t1248;
	t1426 = (-t1240 * t1259 + t1450) * t1579 + t1240 * t1462;
	t1425 = (-t1259 * t1481 + t1449) * t1579 + t1481 * t1462;
	t1424 = (t1329 * t1497 - t1559) * t1278 + t1429;
	t1423 = t1240 * t1439 + t1433 * t1579;
	t1422 = t1432 * t1579 + t1439 * t1481;
	t1210 = -t1573 * t1430 + t1572 * t1431;
	t1417 = t1623 * t1567;
	t1406 = 0.4e1 * t1410;
	t1405 = -0.4e1 * t1409;
	t1398 = t1336 * t1404;
	t1385 = (-(t1323 * t1447 + t1324 * t1446) * t1487 + (t1323 * t1471 - t1324 * t1472 + (t1323 * t1468 - t1324 * t1467) * qJD(3)) * t1310 + (-t1620 * t1317 - (t1323 * t1483 + t1324 * t1482) * t1316 + (t1619 * qJD(3) + t1323 * t1485 - t1324 * t1484) * t1319) * t1520) * t1567;
	t1381 = (t1481 * t1405 + t1601 * t1412) * t1498;
	t1374 = pkin(3) * t1377 * t1570;
	t1369 = (t1240 * t1405 + t1601 * t1383) * t1498;
	t1358 = ((t1622 * t1238 - t1259 * t1417 + t1263 * t1381 + t1266 * t1407 + t1503 * t1615 - t1625) * t1507 + t1432 * t1401 + t1594 * t1481 + t1598 * t1237) * t1490 + ((t1599 * t1238 + t1266 * t1389 + t1340 * t1417 + t1381 * t1569 + t1481 * t1406 + t1412 * t1612 - t1626) * t1507 + (t1481 * t1501 + t1449) * t1398 + t1481 * t1374 + t1598 * t1236) * t1474 + t1618 * t1422 + t1616 * t1425;
	t1357 = t1358 * t1431;
	t1356 = t1358 * t1430;
	t1355 = ((t1622 * t1226 + t1239 * t1407 + t1259 * t1385 + t1263 * t1369 - t1340 * t1384 + t1386 * t1503) * t1507 + t1433 * t1401 + t1594 * t1240 + t1597 * t1237) * t1490 + ((t1599 * t1226 + t1239 * t1389 + t1240 * t1406 - t1259 * t1384 - t1340 * t1385 + t1369 * t1569 + t1383 * t1612) * t1507 + (t1501 * t1240 + t1450) * t1398 + t1240 * t1374 + t1597 * t1236) * t1474 + t1618 * t1423 + t1616 * t1426;
	t1354 = t1355 * t1431;
	t1353 = t1355 * t1430;
	t1246 = t1247 * t1333;
	t1245 = t1248 * t1333;
	t1244 = t1330 * t1277 - t1276;
	t1220 = (t1438 + t1554) * t1333;
	t1219 = t1222 * t1330;
	t1218 = t1438 * t1330 + t1276;
	t1217 = t1526 * t1247;
	t1214 = qJD(1) * t1278 * t1527 + (qJD(1) * t1529 + t1526 * t1528) * t1279 - t1525;
	t1213 = -qJD(1) * t1452 - t1216 * t1333;
	t1212 = -t1526 * t1512 + t1491;
	t1208 = 0.2e1 * t1422 * t1489 - 0.2e1 * t1425 * t1461;
	t1205 = 0.2e1 * t1423 * t1489 - 0.2e1 * t1426 * t1461;
	t1200 = (t1464 * t1329 + t1559) * t1279 + t1435 * t1278;
	t1199 = t1434 * t1278 + t1429;
	t1198 = qJD(1) * t1221 + t1424 * t1330 + t1525;
	t1197 = -t1209 * t1452 + (t1526 * t1243 - t1247 * t1561) * t1232 - t1215;
	t1196 = t1232 * qJD(1) * t1243 + t1424 * t1333 + t1491;
	t1195 = t1223 * t1562 + (t1434 * t1279 + (t1463 * t1332 + t1560) * t1278) * t1333;
	t1194 = t1210 * t1208;
	t1193 = t1211 * t1208;
	t1191 = t1210 * t1205;
	t1190 = t1211 * t1205;
	t1182 = t1600 * t1208 + t1573 * t1356 - t1572 * t1357;
	t1181 = t1188 * t1208 - t1572 * t1356 - t1573 * t1357;
	t1180 = t1600 * t1205 + t1573 * t1353 - t1572 * t1354;
	t1179 = t1188 * t1205 - t1572 * t1353 - t1573 * t1354;
	t1 = [-t1188 * t1244 + t1210 * t1214 - t1211 * t1215 - t1243 * t1600, -t1179 * t1245 + t1180 * t1246 + t1188 * t1221 + t1190 * t1212 - t1191 * t1213 + t1195 * t1210 + t1196 * t1211 - t1220 * t1600, -t1181 * t1245 + t1182 * t1246 + t1193 * t1212 - t1194 * t1213, 0; t1188 * t1246 + t1210 * t1212 + t1211 * t1213 + t1245 * t1600, -t1179 * t1243 + t1180 * t1244 + t1188 * t1219 - t1190 * t1214 - t1191 * t1215 + t1197 * t1210 + t1198 * t1211 - t1218 * t1600, -t1181 * t1243 + t1182 * t1244 - t1193 * t1214 - t1194 * t1215, 0; 0, t1179 * t1247 + t1180 * t1248 + t1188 * t1223 - t1190 * t1216 - t1191 * t1217 + t1199 * t1210 + t1200 * t1211 - t1222 * t1600, t1181 * t1247 + t1182 * t1248 - t1193 * t1216 - t1194 * t1217, 0; t1188 * t1243 + t1210 * t1215 + t1211 * t1214 - t1244 * t1600, -t1179 * t1246 - t1180 * t1245 + t1188 * t1220 - t1190 * t1213 - t1191 * t1212 + t1195 * t1211 - t1196 * t1210 + t1221 * t1600, -t1181 * t1246 - t1182 * t1245 - t1193 * t1213 - t1194 * t1212, 0; -t1188 * t1245 - t1210 * t1213 + t1211 * t1212 + t1246 * t1600, -t1179 * t1244 - t1180 * t1243 + t1188 * t1218 - t1190 * t1215 + t1191 * t1214 + t1197 * t1211 - t1198 * t1210 + t1219 * t1600, -t1181 * t1244 - t1182 * t1243 - t1193 * t1215 + t1194 * t1214, 0; 0, -t1179 * t1248 + t1180 * t1247 + t1188 * t1222 - t1190 * t1217 + t1191 * t1216 + t1199 * t1211 - t1200 * t1210 + t1223 * t1600, -t1181 * t1248 + t1182 * t1247 - t1193 * t1217 + t1194 * t1216, 0; -t1562, 0, 0, 0; t1561, 0, 0, 0; 0, 0, 0, 0;];
	JRD_rot = t1;
end