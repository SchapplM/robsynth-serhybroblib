% Zeitableitung der rotatorischen Teilmatrix der geometrischen Jacobi-Matrix für beliebiges Segment von
% palh3m1DE1
% Use Code from Maple symbolic Code Generation
%
% Geometrische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorgeschwindigkeit und Geschw. der verallgemeinerten Koordinaten.
% 
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [19x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DA,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% JgD_rot [3x4]
%   Zeitableitung der rotatorischen Teilmatrix der geometrischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-19 19:20
% Revision: bf71b3c88fbe513355f3920541c47e1db11bd916 (2020-04-17)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JgD_rot = palh3m1DE1_jacobigD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),uint8(0),zeros(19,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m1DE1_jacobigD_rot_sym_varpar: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m1DE1_jacobigD_rot_sym_varpar: qJD has to be [4x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh3m1DE1_jacobigD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [19 1]), ...
  'palh3m1DE1_jacobigD_rot_sym_varpar: pkin has to be [19x1] (double)');
JgD_rot=NaN(3,4);
if link_index == 0
	%% Symbolic Calculation
	% From jacobigD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobigD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobigD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (2->2), div. (0->0), fcn. (2->2), ass. (0->1)
	t1 = [0, qJD(1) * cos(qJ(1)), 0, 0; 0, qJD(1) * sin(qJ(1)), 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobigD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:14
	% EndTime: 2020-04-19 18:18:14
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t40 = qJD(1) * cos(qJ(1));
	t39 = qJD(1) * sin(qJ(1));
	t1 = [0, t40, t40, 0; 0, t39, t39, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobigD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:19:51
	% EndTime: 2020-04-19 18:21:05
	% DurationCPUTime: 46.32s
	% Computational Cost: add. (1067500->212), mult. (1666316->433), div. (62252->14), fcn. (1041364->16), ass. (0->213)
	t578 = pkin(5) ^ 2;
	t582 = pkin(1) ^ 2;
	t686 = sin(qJ(2));
	t687 = sin(pkin(16));
	t688 = cos(qJ(2));
	t689 = cos(pkin(16));
	t561 = t686 * t687 - t688 * t689;
	t682 = pkin(5) * t561;
	t648 = -0.2e1 * pkin(1) * t682 + t582;
	t556 = t578 + t648;
	t553 = 0.1e1 / t556;
	t554 = 0.1e1 / t556 ^ 2;
	t712 = 0.4e1 * t553 * t554;
	t562 = t686 * t689 + t688 * t687;
	t559 = t562 * qJD(2);
	t581 = 0.1e1 / pkin(2);
	t552 = pkin(2) ^ 2 - pkin(6) ^ 2 + t556;
	t557 = pkin(1) - t682;
	t703 = -pkin(6) - pkin(2);
	t550 = (pkin(5) - t703) * (pkin(5) + t703) + t648;
	t702 = -pkin(6) + pkin(2);
	t551 = (pkin(5) - t702) * (pkin(5) + t702) + t648;
	t655 = t551 * t550;
	t584 = sqrt(-t655);
	t681 = pkin(5) * t562;
	t544 = t552 * t681 + t557 * t584;
	t575 = cos(qJ(3));
	t656 = t544 * t575;
	t651 = t562 * t584;
	t543 = -pkin(5) * t651 + t552 * t557;
	t573 = sin(qJ(3));
	t659 = t543 * t573;
	t606 = t656 / 0.2e1 + t659 / 0.2e1;
	t704 = pkin(1) * pkin(5);
	t646 = t554 * t704;
	t612 = 0.2e1 * (t550 + t551) * t704;
	t545 = t559 * t612;
	t560 = t561 * qJD(2);
	t708 = t562 * t578;
	t641 = t559 * t708;
	t624 = pkin(1) * t641;
	t548 = 0.1e1 / t584;
	t694 = t548 / 0.2e1;
	t634 = t557 * t694;
	t653 = t559 * t584;
	t531 = t545 * t634 - 0.2e1 * t624 + (-t560 * t552 - t653) * pkin(5);
	t665 = t531 * t573;
	t709 = t545 * t548;
	t536 = -t681 * t709 / 0.2e1;
	t680 = t557 * pkin(1);
	t630 = t552 + 0.2e1 * t680;
	t652 = t560 * t584;
	t530 = t536 + (-t630 * t559 + t652) * pkin(5);
	t666 = t530 * t575;
	t657 = t544 * t573;
	t658 = t543 * t575;
	t706 = t657 - t658;
	t506 = ((-t665 / 0.2e1 + t666 / 0.2e1 - t606 * qJD(3)) * t553 - t706 * t559 * t646) * t581;
	t613 = t656 + t659;
	t601 = t613 * t559;
	t607 = -t657 / 0.2e1 + t658 / 0.2e1;
	t664 = t531 * t575;
	t667 = t530 * t573;
	t507 = (t601 * t646 + (t664 / 0.2e1 + t667 / 0.2e1 + t607 * qJD(3)) * t553) * t581;
	t570 = pkin(18) + pkin(19);
	t566 = sin(t570);
	t567 = cos(t570);
	t502 = t506 * t567 - t507 * t566;
	t579 = pkin(4) ^ 2;
	t654 = t553 * t581;
	t534 = t607 * t654;
	t535 = t606 * t654;
	t525 = -t534 * t567 + t535 * t566;
	t683 = pkin(3) * t525;
	t705 = -2 * pkin(4);
	t650 = -t683 * t705 + t579;
	t701 = -pkin(8) - pkin(10);
	t515 = (pkin(3) - t701) * (pkin(3) + t701) + t650;
	t700 = -pkin(8) + pkin(10);
	t516 = (pkin(3) - t700) * (pkin(3) + t700) + t650;
	t670 = t516 * t515;
	t583 = sqrt(-t670);
	t711 = t502 * t583;
	t647 = 2 * pkin(4);
	t611 = pkin(3) * (t515 + t516) * t647;
	t493 = t502 * t611;
	t580 = pkin(3) ^ 2;
	t521 = t580 + t650;
	t517 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t521;
	t522 = pkin(4) + t683;
	t629 = t522 * t705 - t517;
	t509 = 0.1e1 / t583;
	t615 = -t534 * t566 - t535 * t567;
	t695 = -t615 / 0.2e1;
	t638 = t509 * t695;
	t616 = -t506 * t566 - t507 * t567;
	t707 = t616 * t583;
	t475 = (t493 * t638 + t629 * t502 - t707) * pkin(3);
	t631 = t615 * t580 * t705;
	t696 = t509 / 0.2e1;
	t639 = t522 * t696;
	t476 = t493 * t639 + t502 * t631 + (t517 * t616 - t711) * pkin(3);
	t518 = 0.1e1 / t521;
	t577 = 0.1e1 / pkin(10);
	t668 = t518 * t577;
	t684 = pkin(3) * t615;
	t498 = t517 * t684 + t522 * t583;
	t571 = sin(pkin(17));
	t673 = t498 * t571;
	t497 = t517 * t522 - t583 * t684;
	t572 = cos(pkin(17));
	t674 = t497 * t572;
	t491 = (-t674 / 0.2e1 + t673 / 0.2e1) * t668;
	t488 = 0.1e1 / t491 ^ 2;
	t519 = 0.1e1 / t521 ^ 2;
	t645 = pkin(3) * pkin(4) * t519;
	t595 = (t673 - t674) * t645;
	t692 = -t572 / 0.2e1;
	t693 = t571 / 0.2e1;
	t710 = ((t475 * t692 + t476 * t693) * t518 + t502 * t595) * t577 * t488;
	t487 = 0.1e1 / t491;
	t699 = -t493 / 0.2e1;
	t546 = t562 * t612;
	t685 = pkin(1) * t578;
	t533 = t546 * t634 - 0.2e1 * t562 ^ 2 * t685 + (-t552 * t561 - t651) * pkin(5);
	t660 = t533 * t575;
	t620 = t546 * t694 + t552;
	t532 = (t561 * t584 + (-t620 - 0.2e1 * t680) * t562) * pkin(5);
	t663 = t532 * t573;
	t608 = t660 / 0.2e1 + t663 / 0.2e1;
	t627 = t562 * t646;
	t513 = (t553 * t608 + t613 * t627) * t581;
	t661 = t533 * t573;
	t662 = t532 * t575;
	t609 = -t661 / 0.2e1 + t662 / 0.2e1;
	t514 = (-t553 * t609 + t627 * t706) * t581;
	t505 = -t513 * t566 - t514 * t567;
	t494 = t505 * t611;
	t698 = -t494 / 0.2e1;
	t503 = t615 * t611;
	t697 = -t503 / 0.2e1;
	t691 = t572 / 0.2e1;
	t690 = t573 / 0.2e1;
	t672 = t498 * t572;
	t675 = t497 * t571;
	t594 = (t672 + t675) * t645;
	t468 = ((t475 * t693 + t476 * t691) * t518 + t502 * t594) * t577;
	t492 = (t672 / 0.2e1 + t675 / 0.2e1) * t668;
	t490 = t492 ^ 2;
	t481 = t488 * t490 + 0.1e1;
	t677 = t488 * t492;
	t678 = t487 * t710;
	t679 = 0.2e1 * (t468 * t677 - t490 * t678) / t481 ^ 2;
	t676 = t493 * t509 / t670;
	t671 = t502 * t580;
	t669 = t518 * t572;
	t574 = sin(qJ(1));
	t568 = qJD(1) * t574;
	t576 = cos(qJ(1));
	t569 = qJD(1) * t576;
	t643 = t579 * t671;
	t642 = 0.1e1 / t655 * t546 * t709;
	t640 = t676 / 0.4e1;
	t637 = t518 * t693;
	t636 = -t669 / 0.2e1;
	t635 = t669 / 0.2e1;
	t633 = t580 * t647;
	t632 = 0.4e1 * pkin(4) * t671;
	t479 = 0.1e1 / t481;
	t626 = t479 * t645;
	t625 = -0.8e1 * t643;
	t623 = t518 * t519 * t643;
	t622 = t582 * t641;
	t621 = -t615 * t676 / 0.4e1;
	t617 = t572 * t623;
	t610 = 0.4e1 * t571 * t623;
	t605 = -0.4e1 * t497 * t617;
	t604 = 0.4e1 * t498 * t617;
	t603 = t505 * t610;
	t602 = t615 * t610;
	t600 = -t479 * t710 - t487 * t679;
	t504 = -t513 * t567 + t514 * t566;
	t477 = (t494 * t638 - t504 * t583 + t629 * t505) * pkin(3);
	t542 = -t560 * t612 - 0.8e1 * t622;
	t511 = t536 + (t642 / 0.4e1 + t542 * t694) * t557 + (0.2e1 * t559 * t561 + 0.4e1 * t560 * t562) * t685 + (-t620 * t559 + t652) * pkin(5);
	t512 = 0.4e1 * t624 + (t653 - t562 * t642 / 0.4e1 + t630 * t560 + (t561 * t545 / 0.2e1 + t560 * t546 / 0.2e1 - t562 * t542 / 0.2e1) * t548) * pkin(5);
	t495 = (t706 * t622 * t712 + (-t512 * t575 / 0.2e1 + t511 * t690 + t608 * qJD(3)) * t553 + (-t706 * t560 - (-t661 + t662) * t559 + (qJD(3) * t613 + t665 - t666) * t562) * t646) * t581;
	t496 = (t582 * t601 * t708 * t712 + (t511 * t575 / 0.2e1 + t512 * t690 + t609 * qJD(3)) * t553 + (-t613 * t560 - (-t660 - t663) * t559 + (-qJD(3) * t706 + t664 + t667) * t562) * t646) * t581;
	t483 = -t495 * t567 - t496 * t566;
	t599 = t475 * t505 + t477 * t502 + t483 * t497;
	t485 = (t503 * t638 - t525 * t583 + t615 * t629) * pkin(3);
	t598 = t475 * t615 + t485 * t502 + t497 * t616;
	t478 = t494 * t639 + t505 * t631 + (t504 * t517 - t505 * t583) * pkin(3);
	t597 = t476 * t505 + t478 * t502 + t483 * t498;
	t486 = t503 * t639 + t615 * t631 + (t517 * t525 - t583 * t615) * pkin(3);
	t596 = t476 * t615 + t486 * t502 + t498 * t616;
	t593 = t677 * t679 + (-t468 * t488 + 0.2e1 * t492 * t678) * t479;
	t484 = t611 * t616 + t615 * t625;
	t482 = t495 * t566 - t496 * t567;
	t474 = ((t485 * t693 + t486 * t691) * t518 + t615 * t594) * t577;
	t473 = ((t485 * t692 + t486 * t693) * t518 + t615 * t595) * t577;
	t472 = t483 * t611 + t505 * t625;
	t471 = ((t477 * t693 + t478 * t691) * t518 + t505 * t594) * t577;
	t470 = ((t477 * t692 + t478 * t693) * t518 + t505 * t595) * t577;
	t469 = t615 * t632 + (t711 + t503 * t621 + t629 * t616 + (t484 * t695 + t525 * t699 + t616 * t697) * t509) * pkin(3);
	t466 = (t484 * t696 + t503 * t640) * t522 + (-t502 * t525 - 0.2e1 * t615 * t616) * t633 + (-t502 * t517 - t707 + (t502 * t697 + t615 * t699) * t509) * pkin(3);
	t465 = t505 * t632 + (-t482 * t583 + t494 * t621 + t629 * t483 + (t472 * t695 + t504 * t699 + t616 * t698) * t509) * pkin(3);
	t464 = (-t473 * t677 + t474 * t487) * t479;
	t463 = (t472 * t696 + t494 * t640) * t522 + (-t483 * t615 - t502 * t504 - t505 * t616) * t633 + (t482 * t517 - t483 * t583 + (t502 * t698 + t505 * t699) * t509) * pkin(3);
	t461 = (-t470 * t677 + t471 * t487) * t479;
	t460 = t600 * t474 + t593 * t473 + (((t466 * t635 + t469 * t637 + t497 * t602 + t604 * t615) * t487 - (t466 * t637 + t469 * t636 + t498 * t602 + t605 * t615) * t677) * t479 + ((t487 * t596 + t598 * t677) * t572 + (t487 * t598 - t596 * t677) * t571) * t626) * t577;
	t459 = t600 * t471 + t593 * t470 + (((t463 * t635 + t465 * t637 + t497 * t603 + t505 * t604) * t487 - (t463 * t637 + t465 * t636 + t498 * t603 + t505 * t605) * t677) * t479 + ((t487 * t597 + t599 * t677) * t572 + (t487 * t599 - t597 * t677) * t571) * t626) * t577;
	t1 = [0, t459 * t574 + t461 * t569 + t569, t460 * t574 + t464 * t569 + t569, 0; 0, -t459 * t576 + t461 * t568 + t568, -t460 * t576 + t464 * t568 + t568, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobigD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:23:58
	% EndTime: 2020-04-19 18:25:27
	% DurationCPUTime: 54.48s
	% Computational Cost: add. (1275417->222), mult. (1988870->450), div. (75512->14), fcn. (1242592->19), ass. (0->222)
	t842 = pkin(5) ^ 2;
	t846 = pkin(1) ^ 2;
	t836 = sin(qJ(2));
	t839 = cos(qJ(2));
	t959 = sin(pkin(16));
	t960 = cos(pkin(16));
	t867 = -t836 * t959 + t839 * t960;
	t955 = pkin(5) * t867;
	t921 = 0.2e1 * pkin(1) * t955 + t846;
	t818 = t842 + t921;
	t815 = 0.1e1 / t818;
	t824 = t836 * t960 + t839 * t959;
	t821 = t824 * qJD(2);
	t845 = 0.1e1 / pkin(2);
	t814 = pkin(2) ^ 2 - pkin(6) ^ 2 + t818;
	t819 = pkin(1) + t955;
	t974 = -pkin(6) - pkin(2);
	t812 = (pkin(5) - t974) * (pkin(5) + t974) + t921;
	t973 = -pkin(6) + pkin(2);
	t813 = (pkin(5) - t973) * (pkin(5) + t973) + t921;
	t928 = t813 * t812;
	t848 = sqrt(-t928);
	t954 = pkin(5) * t824;
	t806 = t814 * t954 + t819 * t848;
	t838 = cos(qJ(3));
	t929 = t806 * t838;
	t924 = t824 * t848;
	t805 = -pkin(5) * t924 + t814 * t819;
	t835 = sin(qJ(3));
	t932 = t805 * t835;
	t877 = t929 / 0.2e1 + t932 / 0.2e1;
	t816 = 0.1e1 / t818 ^ 2;
	t975 = pkin(1) * pkin(5);
	t919 = t816 * t975;
	t883 = 0.2e1 * (t812 + t813) * t975;
	t807 = t821 * t883;
	t822 = t867 * qJD(2);
	t981 = t824 * t842;
	t914 = t821 * t981;
	t895 = pkin(1) * t914;
	t810 = 0.1e1 / t848;
	t965 = t810 / 0.2e1;
	t905 = t819 * t965;
	t926 = t821 * t848;
	t793 = t807 * t905 - 0.2e1 * t895 + (t822 * t814 - t926) * pkin(5);
	t938 = t793 * t835;
	t982 = t807 * t810;
	t798 = -t954 * t982 / 0.2e1;
	t953 = t819 * pkin(1);
	t901 = t814 + 0.2e1 * t953;
	t925 = t822 * t848;
	t792 = t798 + (-t821 * t901 - t925) * pkin(5);
	t939 = t792 * t838;
	t930 = t806 * t835;
	t931 = t805 * t838;
	t979 = t930 - t931;
	t768 = ((-t938 / 0.2e1 + t939 / 0.2e1 - t877 * qJD(3)) * t815 - t979 * t821 * t919) * t845;
	t886 = t929 + t932;
	t872 = t886 * t821;
	t878 = -t930 / 0.2e1 + t931 / 0.2e1;
	t937 = t793 * t838;
	t940 = t792 * t835;
	t769 = (t872 * t919 + (t937 / 0.2e1 + t940 / 0.2e1 + t878 * qJD(3)) * t815) * t845;
	t832 = pkin(18) + pkin(19);
	t828 = sin(t832);
	t829 = cos(t832);
	t764 = t768 * t829 - t769 * t828;
	t843 = pkin(4) ^ 2;
	t927 = t815 * t845;
	t796 = t878 * t927;
	t797 = t877 * t927;
	t787 = -t796 * t829 + t797 * t828;
	t956 = pkin(3) * t787;
	t976 = -2 * pkin(4);
	t923 = -t956 * t976 + t843;
	t972 = -pkin(8) - pkin(10);
	t777 = (pkin(3) - t972) * (pkin(3) + t972) + t923;
	t971 = -pkin(8) + pkin(10);
	t778 = (pkin(3) - t971) * (pkin(3) + t971) + t923;
	t920 = 2 * pkin(4);
	t882 = pkin(3) * (t777 + t778) * t920;
	t755 = t764 * t882;
	t844 = pkin(3) ^ 2;
	t783 = t844 + t923;
	t779 = -pkin(8) ^ 2 + pkin(10) ^ 2 + t783;
	t784 = pkin(4) + t956;
	t900 = t784 * t976 - t779;
	t943 = t778 * t777;
	t847 = sqrt(-t943);
	t771 = 0.1e1 / t847;
	t888 = -t796 * t828 - t797 * t829;
	t966 = -t888 / 0.2e1;
	t909 = t771 * t966;
	t889 = -t768 * t828 - t769 * t829;
	t980 = t889 * t847;
	t734 = (t755 * t909 + t764 * t900 - t980) * pkin(3);
	t902 = t844 * t888 * t976;
	t967 = t771 / 0.2e1;
	t910 = t784 * t967;
	t985 = t764 * t847;
	t735 = t755 * t910 + t764 * t902 + (t779 * t889 - t985) * pkin(3);
	t780 = 0.1e1 / t783;
	t841 = 0.1e1 / pkin(10);
	t781 = 0.1e1 / t783 ^ 2;
	t918 = pkin(3) * pkin(4) * t781;
	t957 = pkin(3) * t888;
	t760 = t779 * t957 + t784 * t847;
	t833 = sin(pkin(17));
	t946 = t760 * t833;
	t759 = t779 * t784 - t847 * t957;
	t834 = cos(pkin(17));
	t947 = t759 * t834;
	t862 = (t946 - t947) * t918;
	t963 = -t834 / 0.2e1;
	t964 = t833 / 0.2e1;
	t726 = ((t734 * t963 + t735 * t964) * t780 + t764 * t862) * t841;
	t945 = t760 * t834;
	t948 = t759 * t833;
	t861 = (t945 + t948) * t918;
	t962 = t834 / 0.2e1;
	t727 = ((t734 * t964 + t735 * t962) * t780 + t764 * t861) * t841;
	t941 = t780 * t841;
	t753 = (-t947 / 0.2e1 + t946 / 0.2e1) * t941;
	t750 = 0.1e1 / t753 ^ 2;
	t754 = (t945 / 0.2e1 + t948 / 0.2e1) * t941;
	t752 = t754 ^ 2;
	t742 = t750 * t752 + 0.1e1;
	t740 = 0.1e1 / t742;
	t749 = 0.1e1 / t753;
	t950 = t750 * t754;
	t987 = (-t726 * t950 + t727 * t749) * t740 + qJD(3) + qJD(2);
	t986 = 0.4e1 * t815 * t816;
	t743 = atan2(t754, t753);
	t738 = sin(t743);
	t739 = cos(t743);
	t884 = t835 * t836 - t838 * t839;
	t885 = t835 * t839 + t836 * t838;
	t984 = -t884 * t738 + t885 * t739;
	t983 = t726 * t750;
	t970 = -t755 / 0.2e1;
	t808 = t824 * t883;
	t958 = pkin(1) * t842;
	t795 = t808 * t905 - 0.2e1 * t824 ^ 2 * t958 + (t814 * t867 - t924) * pkin(5);
	t933 = t795 * t838;
	t891 = t808 * t965 + t814;
	t794 = (-t867 * t848 + (-t891 - 0.2e1 * t953) * t824) * pkin(5);
	t936 = t794 * t835;
	t879 = t933 / 0.2e1 + t936 / 0.2e1;
	t898 = t824 * t919;
	t775 = (t879 * t815 + t886 * t898) * t845;
	t934 = t795 * t835;
	t935 = t794 * t838;
	t880 = -t934 / 0.2e1 + t935 / 0.2e1;
	t776 = (-t880 * t815 + t898 * t979) * t845;
	t767 = -t775 * t828 - t776 * t829;
	t756 = t767 * t882;
	t969 = -t756 / 0.2e1;
	t765 = t888 * t882;
	t968 = -t765 / 0.2e1;
	t961 = t835 / 0.2e1;
	t951 = t749 * t983;
	t952 = 0.2e1 * (t727 * t950 - t752 * t951) / t742 ^ 2;
	t949 = t755 * t771 / t943;
	t944 = t764 * t844;
	t942 = t780 * t834;
	t837 = sin(qJ(1));
	t830 = qJD(1) * t837;
	t840 = cos(qJ(1));
	t831 = qJD(1) * t840;
	t916 = t843 * t944;
	t915 = 0.1e1 / t928 * t808 * t982;
	t911 = t949 / 0.4e1;
	t908 = t780 * t964;
	t907 = -t942 / 0.2e1;
	t906 = t942 / 0.2e1;
	t904 = t844 * t920;
	t903 = 0.4e1 * pkin(4) * t944;
	t897 = t740 * t918;
	t896 = -0.8e1 * t916;
	t894 = t780 * t781 * t916;
	t893 = t846 * t914;
	t892 = -t888 * t949 / 0.4e1;
	t890 = t834 * t894;
	t881 = 0.4e1 * t833 * t894;
	t876 = -0.4e1 * t759 * t890;
	t875 = 0.4e1 * t760 * t890;
	t874 = t767 * t881;
	t873 = t888 * t881;
	t868 = -t740 * t983 - t749 * t952;
	t766 = -t775 * t829 + t776 * t828;
	t736 = (t756 * t909 - t766 * t847 + t767 * t900) * pkin(3);
	t804 = t822 * t883 - 0.8e1 * t893;
	t773 = t798 + (t915 / 0.4e1 + t804 * t965) * t819 + (-0.2e1 * t821 * t867 - 0.4e1 * t822 * t824) * t958 + (-t821 * t891 - t925) * pkin(5);
	t774 = 0.4e1 * t895 + (t926 - t824 * t915 / 0.4e1 - t901 * t822 + (-t867 * t807 / 0.2e1 - t822 * t808 / 0.2e1 - t824 * t804 / 0.2e1) * t810) * pkin(5);
	t757 = (t979 * t893 * t986 + (-t774 * t838 / 0.2e1 + t773 * t961 + t879 * qJD(3)) * t815 + (t979 * t822 - (-t934 + t935) * t821 + (qJD(3) * t886 + t938 - t939) * t824) * t919) * t845;
	t758 = (t846 * t872 * t981 * t986 + (t773 * t838 / 0.2e1 + t774 * t961 + t880 * qJD(3)) * t815 + (t886 * t822 - (-t933 - t936) * t821 + (-qJD(3) * t979 + t937 + t940) * t824) * t919) * t845;
	t745 = -t757 * t829 - t758 * t828;
	t866 = t734 * t767 + t736 * t764 + t745 * t759;
	t747 = (t765 * t909 - t787 * t847 + t888 * t900) * pkin(3);
	t865 = t734 * t888 + t747 * t764 + t759 * t889;
	t737 = t756 * t910 + t767 * t902 + (t766 * t779 - t767 * t847) * pkin(3);
	t864 = t735 * t767 + t737 * t764 + t745 * t760;
	t748 = t765 * t910 + t888 * t902 + (t779 * t787 - t847 * t888) * pkin(3);
	t863 = t735 * t888 + t748 * t764 + t760 * t889;
	t860 = t950 * t952 + (-t727 * t750 + 0.2e1 * t754 * t951) * t740;
	t857 = t987 * (t885 * t738 + t739 * t884);
	t746 = t882 * t889 + t888 * t896;
	t744 = t757 * t828 - t758 * t829;
	t733 = ((t747 * t964 + t748 * t962) * t780 + t888 * t861) * t841;
	t732 = ((t747 * t963 + t748 * t964) * t780 + t888 * t862) * t841;
	t731 = t745 * t882 + t767 * t896;
	t730 = ((t736 * t964 + t737 * t962) * t780 + t767 * t861) * t841;
	t729 = ((t736 * t963 + t737 * t964) * t780 + t767 * t862) * t841;
	t728 = t888 * t903 + (t985 + t765 * t892 + t900 * t889 + (t746 * t966 + t787 * t970 + t889 * t968) * t771) * pkin(3);
	t725 = (t746 * t967 + t765 * t911) * t784 + (-t764 * t787 - 0.2e1 * t888 * t889) * t904 + (-t764 * t779 - t980 + (t764 * t968 + t888 * t970) * t771) * pkin(3);
	t724 = t767 * t903 + (-t744 * t847 + t756 * t892 + t900 * t745 + (t731 * t966 + t766 * t970 + t889 * t969) * t771) * pkin(3);
	t723 = (-t732 * t950 + t733 * t749) * t740;
	t722 = (t731 * t967 + t756 * t911) * t784 + (-t745 * t888 - t764 * t766 - t767 * t889) * t904 + (t744 * t779 - t745 * t847 + (t764 * t969 + t767 * t970) * t771) * pkin(3);
	t720 = (-t729 * t950 + t730 * t749) * t740;
	t718 = t868 * t733 + t860 * t732 + (((t725 * t906 + t728 * t908 + t759 * t873 + t875 * t888) * t749 - (t725 * t908 + t728 * t907 + t760 * t873 + t876 * t888) * t950) * t740 + ((t749 * t863 + t865 * t950) * t834 + (t749 * t865 - t863 * t950) * t833) * t897) * t841;
	t717 = t868 * t730 + t860 * t729 + (((t722 * t906 + t724 * t908 + t759 * t874 + t767 * t875) * t749 - (t722 * t908 + t724 * t907 + t760 * t874 + t767 * t876) * t950) * t740 + ((t749 * t864 + t866 * t950) * t834 + (t749 * t866 - t864 * t950) * t833) * t897) * t841;
	t1 = [0, t717 * t837 + t720 * t831 + t831, t718 * t837 + t723 * t831 + t831, t984 * t830 + t857 * t840; 0, -t717 * t840 + t720 * t830 + t830, -t718 * t840 + t723 * t830 + t830, -t831 * t984 + t837 * t857; 0, 0, 0, -t987 * t984;];
	JgD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobigD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:16
	% EndTime: 2020-04-19 18:18:20
	% DurationCPUTime: 1.29s
	% Computational Cost: add. (12594->80), mult. (20244->171), div. (678->9), fcn. (12648->10), ass. (0->96)
	t268 = sin(qJ(2));
	t269 = sin(pkin(16));
	t270 = cos(qJ(2));
	t271 = cos(pkin(16));
	t208 = t268 * t271 + t270 * t269;
	t266 = pkin(1) * t208;
	t205 = t208 * qJD(2);
	t277 = pkin(1) * pkin(5);
	t245 = t205 * t277;
	t219 = pkin(1) ^ 2;
	t207 = t268 * t269 - t270 * t271;
	t267 = pkin(1) * t207;
	t249 = -0.2e1 * pkin(5) * t267 + t219;
	t276 = -pkin(6) - pkin(2);
	t196 = (pkin(5) - t276) * (pkin(5) + t276) + t249;
	t275 = -pkin(6) + pkin(2);
	t197 = (pkin(5) - t275) * (pkin(5) + t275) + t249;
	t250 = t196 + t197;
	t191 = t250 * t245;
	t256 = t197 * t196;
	t220 = sqrt(-t256);
	t194 = 0.1e1 / t220;
	t280 = t191 * t194;
	t187 = t266 * t280;
	t218 = pkin(5) ^ 2;
	t202 = t218 + t249;
	t198 = -pkin(2) ^ 2 + pkin(6) ^ 2 + t202;
	t203 = -pkin(5) + t267;
	t247 = 0.2e1 * t203 * pkin(5);
	t242 = -t198 + t247;
	t206 = t207 * qJD(2);
	t252 = t206 * t220;
	t177 = -t187 + (t242 * t205 + t252) * pkin(1);
	t244 = t219 * t208 * t205;
	t238 = pkin(5) * t244;
	t253 = t205 * t220;
	t257 = t194 * t203;
	t178 = -t191 * t257 - 0.2e1 * t238 + (-t206 * t198 - t253) * pkin(1);
	t199 = 0.1e1 / t202;
	t217 = 0.1e1 / pkin(6);
	t254 = t199 * t217;
	t190 = t198 * t266 - t203 * t220;
	t213 = sin(pkin(15));
	t259 = t190 * t213;
	t251 = t208 * t220;
	t189 = -pkin(1) * t251 - t203 * t198;
	t215 = cos(pkin(15));
	t260 = t189 * t215;
	t185 = (t260 / 0.2e1 + t259 / 0.2e1) * t254;
	t182 = 0.1e1 / t185 ^ 2;
	t231 = t259 + t260;
	t200 = 0.1e1 / t202 ^ 2;
	t241 = t200 * t245;
	t272 = t215 / 0.2e1;
	t273 = t213 / 0.2e1;
	t281 = ((t177 * t272 + t178 * t273) * t199 + t231 * t241) * t217 * t182;
	t237 = t250 * t277;
	t192 = t208 * t237;
	t279 = t194 * t192;
	t236 = t218 * t244;
	t278 = -t194 * (-t206 * t237 - 0.4e1 * t236) - 0.1e1 / t256 * t191 * t279;
	t181 = 0.1e1 / t185;
	t274 = -t213 / 0.2e1;
	t265 = t219 * pkin(5);
	t258 = t190 * t215;
	t261 = t189 * t213;
	t230 = -t258 + t261;
	t169 = ((t177 * t274 + t178 * t272) * t199 - t230 * t241) * t217;
	t186 = (t258 / 0.2e1 - t261 / 0.2e1) * t254;
	t184 = t186 ^ 2;
	t176 = t184 * t182 + 0.1e1;
	t262 = t182 * t186;
	t263 = t181 * t281;
	t264 = (t169 * t262 - t184 * t263) / t176 ^ 2;
	t255 = t199 * t213;
	t239 = t198 + t279;
	t179 = (t207 * t220 + (-t239 + t247) * t208) * pkin(1);
	t180 = -t192 * t257 - 0.2e1 * t208 ^ 2 * t265 + (-t207 * t198 - t251) * pkin(1);
	t246 = t200 * t277;
	t240 = t208 * t246;
	t172 = ((t179 * t274 + t180 * t272) * t199 - t230 * t240) * t217;
	t173 = ((t179 * t272 + t180 * t273) * t199 + t231 * t240) * t217;
	t174 = 0.1e1 / t176;
	t248 = qJD(1) * (t172 * t181 - t173 * t262) * t174;
	t243 = t199 * t272;
	t233 = t199 * t200 * t236;
	t229 = t213 * t233;
	t228 = 0.4e1 * t215 * t233;
	t227 = t177 * t208 + t179 * t205 - t189 * t206;
	t226 = t178 * t208 + t180 * t205 - t190 * t206;
	t214 = cos(qJ(1));
	t212 = sin(qJ(1));
	t171 = 0.4e1 * t238 + (t207 * t280 + t253 + t278 * t208 - (t242 - t279) * t206) * pkin(1);
	t170 = -t187 + t278 * t203 + (0.2e1 * t205 * t207 + 0.4e1 * t206 * t208) * t265 + (-t239 * t205 + t252) * pkin(1);
	t165 = (-t174 * t281 - 0.2e1 * t181 * t264) * t172 + (0.2e1 * t262 * t264 + (-t169 * t182 + 0.2e1 * t186 * t263) * t174) * t173 + ((t170 * t243 + t190 * t228 - t171 * t255 / 0.2e1 - 0.4e1 * t189 * t229) * t181 - (t171 * t243 + t189 * t228 + t170 * t255 / 0.2e1 + 0.4e1 * t190 * t229) * t262 + ((t226 * t181 - t227 * t262) * t215 + (-t227 * t181 - t226 * t262) * t213) * t246) * t174 * t217;
	t1 = [0, t165 * t212 + t214 * t248, 0, 0; 0, -t165 * t214 + t212 * t248, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobigD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:18:18
	% EndTime: 2020-04-19 18:18:22
	% DurationCPUTime: 1.25s
	% Computational Cost: add. (12596->81), mult. (20246->173), div. (678->9), fcn. (12650->10), ass. (0->96)
	t284 = sin(qJ(2));
	t285 = sin(pkin(16));
	t286 = cos(qJ(2));
	t287 = cos(pkin(16));
	t224 = t284 * t287 + t286 * t285;
	t282 = pkin(5) * t224;
	t221 = t224 * qJD(2);
	t293 = pkin(1) * pkin(5);
	t262 = t221 * t293;
	t235 = pkin(1) ^ 2;
	t223 = t284 * t285 - t286 * t287;
	t283 = pkin(5) * t223;
	t264 = -0.2e1 * pkin(1) * t283 + t235;
	t292 = -pkin(6) - pkin(2);
	t212 = (pkin(5) - t292) * (pkin(5) + t292) + t264;
	t291 = -pkin(6) + pkin(2);
	t213 = (pkin(5) - t291) * (pkin(5) + t291) + t264;
	t265 = t212 + t213;
	t207 = t265 * t262;
	t271 = t213 * t212;
	t236 = sqrt(-t271);
	t210 = 0.1e1 / t236;
	t296 = t207 * t210;
	t203 = t282 * t296;
	t233 = pkin(5) ^ 2;
	t218 = t233 + t264;
	t214 = pkin(2) ^ 2 - pkin(6) ^ 2 + t218;
	t219 = pkin(1) - t283;
	t281 = t219 * pkin(1);
	t258 = t214 + 0.2e1 * t281;
	t222 = t223 * qJD(2);
	t267 = t222 * t236;
	t193 = -t203 + (-t258 * t221 + t267) * pkin(5);
	t261 = t233 * t224 * t221;
	t254 = pkin(1) * t261;
	t268 = t221 * t236;
	t272 = t210 * t219;
	t194 = t207 * t272 - 0.2e1 * t254 + (-t222 * t214 - t268) * pkin(5);
	t215 = 0.1e1 / t218;
	t234 = 0.1e1 / pkin(2);
	t269 = t215 * t234;
	t206 = t214 * t282 + t219 * t236;
	t228 = sin(pkin(19));
	t274 = t206 * t228;
	t266 = t224 * t236;
	t205 = -pkin(5) * t266 + t219 * t214;
	t229 = cos(pkin(19));
	t275 = t205 * t229;
	t201 = (-t275 / 0.2e1 + t274 / 0.2e1) * t269;
	t198 = 0.1e1 / t201 ^ 2;
	t247 = -t274 + t275;
	t216 = 0.1e1 / t218 ^ 2;
	t257 = t216 * t262;
	t289 = -t229 / 0.2e1;
	t290 = t228 / 0.2e1;
	t297 = ((t193 * t289 + t194 * t290) * t215 - t247 * t257) * t234 * t198;
	t253 = t265 * t293;
	t208 = t224 * t253;
	t295 = t210 * t208;
	t251 = t235 * t261;
	t294 = 0.1e1 / t271 * t207 * t295 + t210 * (-t222 * t253 - 0.4e1 * t251);
	t197 = 0.1e1 / t201;
	t288 = t229 / 0.2e1;
	t280 = t233 * pkin(1);
	t273 = t206 * t229;
	t276 = t205 * t228;
	t246 = t273 + t276;
	t184 = ((t193 * t290 + t194 * t288) * t215 + t246 * t257) * t234;
	t202 = (t273 / 0.2e1 + t276 / 0.2e1) * t269;
	t200 = t202 ^ 2;
	t192 = t200 * t198 + 0.1e1;
	t277 = t198 * t202;
	t278 = t197 * t297;
	t279 = (t184 * t277 - t200 * t278) / t192 ^ 2;
	t270 = t215 * t229;
	t263 = t216 * t293;
	t260 = t215 * t290;
	t255 = t214 + t295;
	t195 = (t223 * t236 + (-t255 - 0.2e1 * t281) * t224) * pkin(5);
	t196 = t208 * t272 - 0.2e1 * t224 ^ 2 * t280 + (-t223 * t214 - t266) * pkin(5);
	t256 = t224 * t263;
	t188 = ((t195 * t290 + t196 * t288) * t215 + t246 * t256) * t234;
	t189 = ((t195 * t289 + t196 * t290) * t215 - t247 * t256) * t234;
	t190 = 0.1e1 / t192;
	t259 = qJD(1) * ((t188 * t197 - t189 * t277) * t190 + 0.1e1);
	t248 = t215 * t216 * t251;
	t245 = t229 * t248;
	t244 = 0.4e1 * t228 * t248;
	t243 = t193 * t224 + t195 * t221 - t205 * t222;
	t242 = t194 * t224 + t196 * t221 - t206 * t222;
	t231 = cos(qJ(1));
	t230 = sin(qJ(1));
	t187 = 0.4e1 * t254 + (t223 * t296 + t268 - t294 * t224 - (-t258 - t295) * t222) * pkin(5);
	t186 = -t203 + t294 * t219 + (0.2e1 * t221 * t223 + 0.4e1 * t222 * t224) * t280 + (-t255 * t221 + t267) * pkin(5);
	t181 = (-t190 * t297 - 0.2e1 * t197 * t279) * t188 + (0.2e1 * t277 * t279 + (-t184 * t198 + 0.2e1 * t202 * t278) * t190) * t189 + ((t186 * t270 / 0.2e1 + 0.4e1 * t206 * t245 + t187 * t260 + t205 * t244) * t197 - (-t187 * t270 / 0.2e1 - 0.4e1 * t205 * t245 + t186 * t260 + t206 * t244) * t277 + ((t242 * t197 + t243 * t277) * t229 + (t243 * t197 - t242 * t277) * t228) * t263) * t190 * t234;
	t1 = [0, t181 * t230 + t231 * t259, 0, 0; 0, -t181 * t231 + t230 * t259, 0, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
elseif link_index == 8
	%% Symbolic Calculation
	% From jacobigD_rot_8_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-19 18:20:04
	% EndTime: 2020-04-19 18:20:45
	% DurationCPUTime: 24.65s
	% Computational Cost: add. (542986->224), mult. (846766->490), div. (31210->18), fcn. (529626->16), ass. (0->228)
	t566 = pkin(5) ^ 2;
	t570 = pkin(1) ^ 2;
	t692 = sin(qJ(2));
	t693 = sin(pkin(16));
	t694 = cos(qJ(2));
	t695 = cos(pkin(16));
	t551 = t692 * t693 - t694 * t695;
	t685 = pkin(5) * t551;
	t648 = -0.2e1 * pkin(1) * t685 + t570;
	t546 = t566 + t648;
	t543 = 0.1e1 / t546;
	t544 = 0.1e1 / t546 ^ 2;
	t545 = t543 * t544;
	t552 = t692 * t695 + t694 * t693;
	t549 = t552 * qJD(2);
	t720 = t552 * t566;
	t637 = t549 * t720;
	t618 = t570 * t637;
	t605 = t545 * t618;
	t725 = 0.4e1 * t605;
	t569 = 0.1e1 / pkin(2);
	t542 = pkin(2) ^ 2 - pkin(6) ^ 2 + t546;
	t547 = pkin(1) - t685;
	t712 = -pkin(6) - pkin(2);
	t540 = (pkin(5) - t712) * (pkin(5) + t712) + t648;
	t711 = -pkin(6) + pkin(2);
	t541 = (pkin(5) - t711) * (pkin(5) + t711) + t648;
	t657 = t541 * t540;
	t572 = sqrt(-t657);
	t684 = pkin(5) * t552;
	t534 = t542 * t684 + t547 * t572;
	t563 = cos(qJ(3));
	t658 = t534 * t563;
	t652 = t552 * t572;
	t533 = -pkin(5) * t652 + t542 * t547;
	t561 = sin(qJ(3));
	t663 = t533 * t561;
	t589 = t658 / 0.2e1 + t663 / 0.2e1;
	t713 = pkin(1) * pkin(5);
	t645 = t544 * t713;
	t627 = t549 * t645;
	t598 = 0.2e1 * (t540 + t541) * t713;
	t535 = t549 * t598;
	t550 = t551 * qJD(2);
	t619 = pkin(1) * t637;
	t538 = 0.1e1 / t572;
	t700 = t538 / 0.2e1;
	t633 = t547 * t700;
	t654 = t549 * t572;
	t515 = t535 * t633 - 0.2e1 * t619 + (-t550 * t542 - t654) * pkin(5);
	t672 = t515 * t561;
	t721 = t535 * t538;
	t526 = -t684 * t721 / 0.2e1;
	t682 = t547 * pkin(1);
	t629 = t542 + 0.2e1 * t682;
	t653 = t550 * t572;
	t514 = t526 + (-t629 * t549 + t653) * pkin(5);
	t673 = t514 * t563;
	t659 = t534 * t561;
	t662 = t533 * t563;
	t717 = t659 - t662;
	t483 = ((-t672 / 0.2e1 + t673 / 0.2e1 - t589 * qJD(3)) * t543 - t717 * t627) * t569;
	t599 = t658 + t663;
	t587 = t599 * t549;
	t590 = -t659 / 0.2e1 + t662 / 0.2e1;
	t671 = t515 * t563;
	t674 = t514 * t561;
	t484 = (t587 * t645 + (t671 / 0.2e1 + t674 / 0.2e1 + t590 * qJD(3)) * t543) * t569;
	t558 = pkin(18) + pkin(19);
	t556 = sin(t558);
	t557 = cos(t558);
	t479 = t483 * t557 - t484 * t556;
	t568 = pkin(3) ^ 2;
	t567 = pkin(4) ^ 2;
	t655 = t543 * t569;
	t524 = t590 * t655;
	t525 = t589 * t655;
	t506 = -t524 * t557 + t525 * t556;
	t687 = pkin(4) * t506;
	t714 = -2 * pkin(3);
	t650 = -t687 * t714 + t567;
	t502 = t568 + t650;
	t498 = pkin(8) ^ 2 - pkin(10) ^ 2 + t502;
	t710 = -pkin(8) - pkin(10);
	t496 = (pkin(3) - t710) * (pkin(3) + t710) + t650;
	t709 = -pkin(8) + pkin(10);
	t497 = (pkin(3) - t709) * (pkin(3) + t709) + t650;
	t676 = t497 * t496;
	t571 = sqrt(-t676);
	t604 = -t483 * t556 - t484 * t557;
	t724 = -t479 * t571 + t604 * t498;
	t646 = 2 * pkin(3);
	t597 = pkin(4) * (t496 + t497) * t646;
	t461 = t479 * t597;
	t603 = -t524 * t556 - t525 * t557;
	t630 = t603 * t567 * t714;
	t503 = -pkin(3) - t687;
	t486 = 0.1e1 / t571;
	t705 = -t486 / 0.2e1;
	t635 = t503 * t705;
	t451 = t724 * pkin(4) + t461 * t635 + t479 * t630;
	t688 = pkin(4) * t603;
	t474 = -t498 * t503 - t571 * t688;
	t471 = 0.1e1 / t474 ^ 2;
	t475 = t498 * t688 - t503 * t571;
	t473 = t475 ^ 2;
	t464 = t471 * t473 + 0.1e1;
	t679 = t471 * t475;
	t628 = t503 * t646 - t498;
	t701 = -t603 / 0.2e1;
	t634 = t486 * t701;
	t718 = t604 * t571;
	t450 = (t461 * t634 + t628 * t479 - t718) * pkin(4);
	t470 = 0.1e1 / t474;
	t681 = t450 * t470 * t471;
	t723 = 0.2e1 * (t451 * t679 - t473 * t681) / t464 ^ 2;
	t559 = sin(pkin(19));
	t661 = t534 * t559;
	t560 = cos(pkin(19));
	t664 = t533 * t560;
	t522 = (-t664 / 0.2e1 + t661 / 0.2e1) * t655;
	t519 = 0.1e1 / t522 ^ 2;
	t602 = -t661 + t664;
	t698 = -t560 / 0.2e1;
	t699 = t559 / 0.2e1;
	t722 = ((t514 * t698 + t515 * t699) * t543 - t602 * t627) * t569 * t519;
	t462 = 0.1e1 / t464;
	t617 = pkin(3) * pkin(4) * pkin(8) * t462 * t479;
	t683 = pkin(8) * t502;
	t642 = t462 * t683;
	t621 = t471 * t642;
	t641 = t470 * t683;
	t716 = -t450 * t621 - 0.2e1 * t470 * t617 - t641 * t723;
	t640 = t475 * t683;
	t620 = t471 * t640;
	t715 = 0.2e1 * t462 * t640 * t681 - t451 * t621 + 0.2e1 * t617 * t679 + t620 * t723;
	t499 = 0.1e1 / t502;
	t518 = 0.1e1 / t522;
	t500 = 0.1e1 / t502 ^ 2;
	t708 = -t461 / 0.2e1;
	t536 = t552 * t598;
	t691 = pkin(1) * t566;
	t517 = t536 * t633 - 0.2e1 * t552 ^ 2 * t691 + (-t542 * t551 - t652) * pkin(5);
	t667 = t517 * t563;
	t615 = t536 * t700 + t542;
	t516 = (t551 * t572 + (-t615 - 0.2e1 * t682) * t552) * pkin(5);
	t670 = t516 * t561;
	t591 = t667 / 0.2e1 + t670 / 0.2e1;
	t626 = t552 * t645;
	t494 = (t591 * t543 + t599 * t626) * t569;
	t668 = t517 * t561;
	t669 = t516 * t563;
	t592 = -t668 / 0.2e1 + t669 / 0.2e1;
	t495 = (-t592 * t543 + t626 * t717) * t569;
	t482 = -t494 * t556 - t495 * t557;
	t465 = t482 * t597;
	t707 = -t465 / 0.2e1;
	t480 = t603 * t597;
	t706 = -t480 / 0.2e1;
	t532 = -t550 * t598 - 0.8e1 * t618;
	t638 = 0.1e1 / t657 * t536 * t721;
	t490 = t526 + (t638 / 0.4e1 + t532 * t700) * t547 + (0.2e1 * t549 * t551 + 0.4e1 * t550 * t552) * t691 + (-t615 * t549 + t653) * pkin(5);
	t704 = t490 / 0.2e1;
	t491 = 0.4e1 * t619 + (t654 - t552 * t638 / 0.4e1 + t629 * t550 + (t551 * t535 / 0.2e1 + t550 * t536 / 0.2e1 - t552 * t532 / 0.2e1) * t538) * pkin(5);
	t703 = -t491 / 0.2e1;
	t702 = t499 / 0.2e1;
	t697 = t560 / 0.2e1;
	t696 = t561 / 0.2e1;
	t690 = pkin(3) * t499;
	t689 = pkin(3) * t500;
	t565 = 0.1e1 / pkin(8);
	t686 = pkin(4) * t565;
	t660 = t534 * t560;
	t665 = t533 * t559;
	t601 = t660 + t665;
	t488 = ((t514 * t699 + t515 * t697) * t543 + t601 * t627) * t569;
	t523 = (t660 / 0.2e1 + t665 / 0.2e1) * t655;
	t521 = t523 ^ 2;
	t511 = t519 * t521 + 0.1e1;
	t666 = t519 * t523;
	t677 = t518 * t722;
	t680 = 0.2e1 * (t488 * t666 - t521 * t677) / t511 ^ 2;
	t678 = t479 * t567;
	t675 = t499 * t503;
	t656 = t543 * t560;
	t466 = (t717 * t725 + (t591 * qJD(3) + t490 * t696 + t563 * t703) * t543 + (-t717 * t550 - (-t668 + t669) * t549 + (t599 * qJD(3) + t672 - t673) * t552) * t645) * t569;
	t467 = (0.4e1 * t570 * t545 * t587 * t720 + (t592 * qJD(3) + t491 * t696 + t563 * t704) * t543 + (-t599 * t550 - (-t667 - t670) * t549 + (-qJD(3) * t717 + t671 + t674) * t552) * t645) * t569;
	t457 = -t466 * t557 - t467 * t556;
	t622 = -0.8e1 * t568 * t678;
	t447 = t457 * t597 + t482 * t622;
	t481 = -t494 * t557 + t495 * t556;
	t452 = (t465 * t634 - t481 * t571 + t628 * t482) * pkin(4);
	t644 = pkin(4) * t689;
	t625 = t474 * t644;
	t448 = (t452 * t702 + t482 * t625) * t565;
	t453 = t465 * t635 + t482 * t630 + (t481 * t498 - t482 * t571) * pkin(4);
	t624 = t475 * t644;
	t449 = (t453 * t702 + t482 * t624) * t565;
	t456 = t466 * t556 - t467 * t557;
	t492 = ((t516 * t699 + t517 * t697) * t543 + t601 * t626) * t569;
	t493 = ((t516 * t698 + t517 * t699) * t543 - t602 * t626) * t569;
	t509 = 0.1e1 / t511;
	t643 = 0.4e1 * t499 * t500 * t568;
	t583 = t565 * (t474 * t643 + 0.2e1 * t690) * t678;
	t584 = t515 * t552 + t517 * t549 - t534 * t550;
	t585 = t514 * t552 + t516 * t549 - t533 * t550;
	t588 = t559 * t725;
	t594 = t560 * t605;
	t606 = t462 * t620;
	t607 = t462 * t565 * t641;
	t636 = -t461 * t486 / t676 / 0.4e1;
	t616 = t603 * t636;
	t623 = t475 * t643;
	t631 = t567 * t646;
	t632 = t543 * t699;
	t651 = 0.2e1 * (((t447 * t705 + t465 * t636) * t503 + (-t457 * t603 - t482 * t604) * t631) * t702 + (-t481 * t690 + t482 * t623) * t678 + ((t456 * t498 - t457 * t571 + (t479 * t707 + t482 * t708) * t486) * t702 + (t451 * t482 + t453 * t479 + t457 * t475) * t689) * pkin(4)) * t607 - 0.2e1 * (t482 * t583 + ((-t456 * t571 + t465 * t616 - t457 * t498 + (t447 * t701 + t481 * t708 + t604 * t707) * t486) * t702 + (t457 * t675 + (t450 * t482 + t452 * t479 + t457 * t474) * t500) * pkin(3)) * t686) * t606 + 0.2e1 * t716 * t449 + 0.2e1 * t715 * t448 + (-t509 * t722 - t518 * t680) * t492 + (t666 * t680 + (-t488 * t519 + 0.2e1 * t523 * t677) * t509) * t493 + ((t491 * t632 + t533 * t588 + 0.4e1 * t534 * t594 + t656 * t704) * t518 - (t490 * t632 - 0.4e1 * t533 * t594 + t534 * t588 + t656 * t703) * t666 + ((t584 * t518 + t585 * t666) * t560 + (t585 * t518 - t584 * t666) * t559) * t645) * t509 * t569;
	t459 = (t480 * t634 - t506 * t571 + t603 * t628) * pkin(4);
	t454 = (t459 * t702 + t603 * t625) * t565;
	t460 = t480 * t635 + t603 * t630 + (t498 * t506 - t571 * t603) * pkin(4);
	t455 = (t460 * t702 + t603 * t624) * t565;
	t611 = 0.2e1 * t642;
	t647 = qJD(1) * (-t454 * t679 + t455 * t470) * t611;
	t614 = qJD(1) * ((-t448 * t679 + t449 * t470) * t611 + (t492 * t518 - t493 * t666) * t509 + 0.1e1);
	t564 = cos(qJ(1));
	t562 = sin(qJ(1));
	t458 = t597 * t604 + t603 * t622;
	t442 = 0.2e1 * (((t458 * t705 + t480 * t636) * t503 - 0.2e1 * t603 * t604 * t631) * t702 + (-t506 * t690 + t603 * t623) * t678 + ((-t479 * t498 - t718 + (t479 * t706 + t603 * t708) * t486) * t702 + (t451 * t603 + t460 * t479 + t475 * t604) * t689) * pkin(4)) * t607 - 0.2e1 * (t603 * t583 + ((t480 * t616 + (t458 * t701 + t506 * t708 + t604 * t706) * t486 - t724) * t702 + (t604 * t675 + (t450 * t603 + t459 * t479 + t474 * t604) * t500) * pkin(3)) * t686) * t606 + 0.2e1 * t716 * t455 + 0.2e1 * t715 * t454;
	t1 = [0, t651 * t562 + t564 * t614, t442 * t562 + t564 * t647, 0; 0, t562 * t614 - t651 * t564, -t442 * t564 + t562 * t647, 0; 0, 0, 0, 0;];
	JgD_rot = t1;
end