% Calculate homogenous joint transformation matrices for
% picker2Dm1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_mdh [4x4x15]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-10 19:54
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = picker2Dm1DE1_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1DE1_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1DE1_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 09:06:11
% EndTime: 2020-05-10 09:06:18
% DurationCPUTime: 6.82s
% Computational Cost: add. (50565->433), mult. (136866->558), div. (2100->11), fcn. (36114->44), ass. (0->276)
t728 = 4 * pkin(1);
t577 = pkin(4) ^ 2;
t519 = -t577 / 0.4e1;
t582 = pkin(3) ^ 2;
t727 = t519 + t582 / 0.2e1;
t726 = 2 * pkin(7);
t570 = 2 * pkin(2);
t536 = sin(pkin(8));
t537 = cos(pkin(8));
t540 = sin(qJ(1));
t543 = cos(qJ(1));
t463 = t536 * t543 - t537 * t540;
t725 = 0.2e1 * t463;
t509 = t543 ^ 2;
t724 = -0.2e1 * t509;
t555 = 0.2e1 * t582;
t723 = 0.4e1 * t582;
t589 = pkin(1) ^ 2;
t587 = t589 ^ 2;
t722 = 4 * t587;
t721 = 2 * t589;
t559 = 6 * t589;
t592 = pkin(7) ^ 2;
t567 = 2 * t592;
t597 = t582 ^ 2;
t554 = 0.5e1 * t597;
t574 = pkin(5) ^ 2;
t464 = -t536 * t540 - t537 * t543;
t717 = pkin(5) * t464;
t663 = pkin(1) * t717;
t455 = t574 - t663;
t459 = -pkin(1) + t717;
t571 = 2 * pkin(1);
t689 = -0.2e1 * t663 + t574;
t448 = sqrt(-(-(t571 + pkin(5)) * pkin(5) + t689) * (pkin(5) * (t571 - pkin(5)) + t689));
t712 = t448 * t463;
t443 = -pkin(5) * t712 - 0.2e1 * t455 * t459;
t720 = t443 / 0.4e1;
t719 = 0.1e1 / pkin(6) / 0.2e1;
t497 = pkin(1) * t543;
t484 = t497 + pkin(7);
t718 = pkin(1) * t540;
t539 = sin(qJ(2));
t495 = pkin(3) * t539;
t542 = cos(qJ(2));
t496 = pkin(3) * t542;
t485 = t495 * t726;
t506 = t539 ^ 2;
t701 = t506 * t582;
t660 = 0.2e1 * t701;
t675 = -t582 + t592;
t465 = t485 + t660 + t675;
t700 = t540 * t542;
t656 = pkin(3) * t700;
t626 = pkin(1) * t656;
t477 = -0.2e1 * t626;
t569 = 0.2e1 * pkin(3);
t501 = t589 + t592;
t636 = -t577 + t501;
t619 = t485 + t636;
t695 = t589 * t509;
t658 = -0.4e1 * t695;
t664 = -0.4e1 * t495;
t673 = t589 - t592;
t676 = t577 - t592;
t483 = t495 + pkin(7);
t707 = t483 * t543;
t442 = sqrt(t465 * t658 + 0.4e1 * t673 * t701 + pkin(7) * t636 * t664 - t587 + (-0.2e1 * t582 + t676) * t721 - (t592 - (t569 + pkin(4)) * pkin(4)) * (t592 + (t569 - pkin(4)) * pkin(4)) + (-(t477 + t619) * t707 + t619 * t656) * t728);
t615 = -pkin(1) + t656;
t560 = 3 * t589;
t616 = t555 + t560 - t676;
t621 = -0.4e1 * t626;
t699 = t542 * t543;
t655 = pkin(3) * t699;
t440 = (t483 * t540 + t655) * t442 - (t485 + t616 + t621) * t707 + t615 * t485 + t616 * t656 + (t465 * t724 - t636 + t660 - t723) * pkin(1);
t470 = t555 + t619;
t667 = 0.2e1 * t497;
t441 = (-t615 + t707) * t442 + (t465 * t667 + t470 * t483) * t540 + (t470 * t543 + (0.4e1 * t509 - 0.2e1) * t483 * pkin(1)) * t496;
t444 = pkin(5) * t455 * t725 - t448 * t459;
t454 = 0.1e1 / (t589 + t689);
t575 = 0.1e1 / pkin(5);
t710 = t454 * t575;
t635 = t582 + t501;
t451 = 0.1e1 / (t483 * t667 + t477 + t485 + t635);
t583 = 0.1e1 / pkin(3);
t711 = t451 * t583;
t623 = t710 * t711;
t426 = (t440 * t720 + t441 * t444 / 0.4e1) * t623;
t427 = (-t440 * t444 / 0.4e1 + t441 * t720) * t623;
t541 = sin(pkin(9));
t544 = cos(pkin(9));
t424 = t426 * t544 + t427 * t541;
t716 = pkin(6) * t424;
t423 = t716 * t570;
t572 = pkin(6) ^ 2;
t691 = t423 + t572;
t408 = sqrt(-(-(t570 + pkin(6)) * pkin(6) + t691) * (pkin(6) * (t570 - pkin(6)) + t691));
t425 = t426 * t541 - t427 * t544;
t715 = t408 * t425;
t576 = t577 ^ 2;
t591 = t592 ^ 2;
t674 = t587 + t591;
t679 = t567 - t577;
t694 = t592 * t577;
t609 = t679 * t589 + t576 / 0.6e1 + t674 - t694;
t462 = -t597 / 0.6e1 + t609;
t530 = -t582 / 0.3e1;
t491 = t530 + t592;
t466 = t491 * t477;
t472 = t495 + t484;
t500 = -0.3e1 * t582 + t592;
t508 = t543 * t509;
t593 = pkin(1) * t589;
t692 = t593 * t508;
t662 = pkin(7) * t692;
t629 = 0.8e1 * t662;
t475 = t500 * t629;
t499 = -t577 - t582;
t566 = 3 * t592;
t487 = t566 + t499;
t706 = t487 * t589;
t476 = 0.10e2 * t706;
t526 = 0.4e1 / 0.3e1 * t582;
t520 = -t577 / 0.3e1;
t641 = t520 + t501;
t478 = t526 + t641;
t521 = -t577 / 0.2e1;
t480 = t521 + t635;
t481 = -t577 + t635;
t486 = pkin(7) * t667;
t565 = 4 * t592;
t489 = (t565 + t577) * t589;
t492 = -t589 / 0.3e1 + t592;
t493 = 0.10e2 / 0.3e1 * t589;
t494 = t501 ^ 2;
t498 = -0.30e2 * t577 + (60 * t592);
t503 = -3 * t589 + t592;
t518 = -t577 / 0.6e1;
t527 = 0.2e1 / 0.3e1 * t582;
t532 = 0.4e1 / 0.3e1 * t589;
t534 = t589 / 0.2e1;
t545 = 15 * t587;
t546 = 15 * t589;
t547 = 10 * t589;
t552 = -0.2e1 * t577;
t553 = -0.5e1 * t577;
t556 = 7 * t587;
t557 = 5 * t587;
t558 = 7 * t589;
t563 = 3 * t591;
t564 = 8 * t592;
t596 = pkin(3) * t582;
t579 = t596 ^ 2;
t601 = pkin(7) * t592;
t608 = 0.5e1 / 0.6e1 * t597 + t609;
t610 = t592 - t626;
t687 = t576 / 0.2e1 - t597 / 0.2e1;
t618 = -0.3e1 * t694 + t563 + t687;
t622 = -0.6e1 * t626;
t523 = -0.3e1 / 0.2e1 * t577;
t686 = t523 + t566;
t690 = t501 * ((t523 + t567) * t589 - 0.3e1 / 0.2e1 * t694 + t674 + t687) + t579;
t611 = ((t493 + t679) * t582 + t608) * t622 + (t545 + (-0.9e1 * t577 + (18 * t592)) * t589 + t618) * t582 + (t546 + t686) * t597 + t690;
t612 = t480 * t621;
t680 = t560 + t592;
t638 = t582 + t680;
t613 = -(0.3e1 * t582 + t501) * t718 + t638 * t496;
t522 = -0.2e1 / 0.3e1 * t577;
t531 = -0.2e1 / 0.3e1 * t582;
t639 = t522 + t501;
t681 = t547 + t567;
t685 = t531 + t592;
t614 = -(t554 + ((5 * t589) + t487) * t555 + (t531 + t639) * t501) * t718 + (t597 + (t522 + t531 + t681) * t582 + t557 + 0.2e1 * t706 + t592 * (t522 + t685)) * t496;
t678 = t576 - t597;
t617 = -0.6e1 * t694 + (6 * t591) + t678;
t640 = t522 + t527 + t567;
t688 = (t527 + t639) * t501 + t597;
t620 = t478 * t621 + (t559 + t640) * t582 + t688;
t654 = t593 * t496;
t624 = t508 * t654;
t696 = t587 * t509 ^ 2;
t625 = t696 * t496;
t651 = 0.16e2 * t692;
t627 = pkin(7) * t651;
t628 = 0.20e2 / 0.3e1 * t589;
t677 = -t577 + t582;
t637 = t566 + t677;
t528 = t582 / 0.3e1;
t642 = t518 + t528 + t592;
t643 = t577 / 0.3e1 + t528 + t567;
t644 = 0.2e1 / 0.3e1 * t577 + t527 + t565;
t645 = 0.4e1 / 0.3e1 * t577 + t526 - (2 * t592);
t698 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t646 = t540 * t698;
t665 = 0.6e1 * t497;
t648 = pkin(7) * t665;
t666 = 0.4e1 * t497;
t649 = pkin(7) * t666;
t650 = -t718 / 0.2e1;
t652 = 0.12e2 * t695;
t653 = t589 * t496;
t657 = 0.4e1 * t695;
t659 = 0.8e1 * t696;
t702 = t539 * t506 * t596;
t661 = -0.8e1 * t702;
t668 = 0.2e1 * t718;
t669 = pkin(7) * t497;
t670 = 4 * pkin(7);
t671 = t591 + t597;
t672 = t591 - t587;
t682 = 0.4e1 / 0.7e1 * t592 - t577 / 0.7e1;
t683 = t534 + t592;
t684 = t589 / 0.3e1 + t592;
t693 = t592 * t589;
t697 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t703 = t506 ^ 2 * t597;
t704 = t499 * t592;
t705 = t494 * (-t582 + t636);
t708 = (-t540 * t593 + t653) * t509;
t714 = ((-0.24e2 * (0.4e1 / 0.3e1 * t695 + t486 + t492) * t703 * t718 - 0.12e2 * (-0.8e1 / 0.3e1 * t625 + ((t532 + t642) * t496 - (0.7e1 / 0.6e1 * t582 + t518 + t683) * t718) * t657 + (-t582 * t673 - 0.5e1 / 0.3e1 * t587 + t643 * t589 + t592 * (t520 + t491)) * t496 + (-t597 + (-t628 + t644) * t582 - (3 * t587) + t645 * t589 + t591) * t650 + (-t540 * t587 * t508 + ((t589 + t642) * t496 + (t555 - t673) * t650) * t497) * t670) * t701 + 0.24e2 * t491 * t625 + ((t592 + 0.5e1 / 0.2e1 * t582 + 0.3e1 / 0.2e1 * t589 + t521) * t496 + t500 * t718 / 0.2e1) * t627 - 0.6e1 * ((-0.3e1 * t597 + (-t628 + t645) * t582 + t644 * t589 + t672) * t496 - 0.2e1 * (-0.5e1 / 0.3e1 * t597 + (-t589 + t643) * t582 + t592 * (t530 + t641)) * t718) * t695 - 0.6e1 * t614 * t669 - (t579 + ((21 * t589) + t487) * t597 + (t476 + t563 + (35 * t587) + 0.2e1 * t704) * t582 + (t556 + (t553 + t564 - 0.5e1 * t582) * t589 + t592 * (-t577 + t675)) * t501) * t496 + (0.7e1 * t579 + (t558 + t487) * t554 + (t476 + (21 * t587) + (9 * t591) + 0.6e1 * t704) * t582 + t705) * t718) * t442 + (0.16e2 * (t659 + t627 + (-8 * t587 + 12 * t693) * t509 + (-12 * pkin(7) * t593 + t601 * t728) * t543 - (6 * t693) + t674) * t703 + 0.24e2 * (t685 * t659 + 0.14e2 * (-0.32e2 / 0.21e2 * (t592 + t582 / 0.4e1 + t589 / 0.4e1 - t577 / 0.8e1) * t626 + 0.5e1 / 0.42e2 * t597 + (0.16e2 / 0.21e2 * t589 + t682) * t582 + t587 / 0.7e1 + t682 * t589 + t591 - 0.3e1 / 0.7e1 * t694 + t576 / 0.42e2) * t695 + t492 * t612 - t673 * t597 + (t489 - 0.10e2 / 0.3e1 * t587 + (2 * t591) - t694) * t582 + t462 * t697 + ((-0.2e1 / 0.3e1 * t626 + t519 + t683) * t651 + (-0.8e1 / 0.3e1 * (t684 + t727) * t626 + 0.5e1 / 0.18e2 * t597 + (0.4e1 / 0.3e1 * t592 + t532 + t520) * t582 + t591 + 0.2e1 / 0.3e1 * t693 - 0.2e1 / 0.3e1 * t694 - t587 / 0.3e1 + t576 / 0.18e2) * t665) * pkin(7)) * t701 + 0.16e2 * (-0.6e1 * t592 * t582 + t671) * t696 + 0.32e2 * (t477 * t698 + t480 * t500) * t662 + 0.24e2 * (t491 * t612 - t579 + (-t493 + t676) * t597 + (t489 + t597 / 0.6e1 - t576 / 0.6e1 + t672) * t582 + t462 * t592) * t695 + 0.8e1 * t611 * t669 - 0.8e1 * ((t558 + t686) * t597 + (t556 + (t553 + (10 * t592)) * t589 + t618) * t582 + t690) * t626 + t597 ^ 2 + (t552 + t565 + (28 * t589)) * t579 + (t498 * t589 + (70 * t587) + t617) * t597 + (t498 * t587 + t617 * t559 + t678 * t567 - 0.6e1 * t591 * t577 + (28 * t593 ^ 2) + (4 * t601 ^ 2)) * t582 + t481 * t705) * t472 + (((0.4e1 * t708 + (t496 + t668) * t486 + t503 * t496 + (t521 + t638) * t668) * t661 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t582 + t534 + t518) * t496 + pkin(1) * t646) * t658 + (-0.8e1 * t624 + ((t520 + t527 + t680) * t496 - (0.8e1 / 0.3e1 * t582 + t641) * t718) * t666) * pkin(7) + t614) * t495) * t442 + (0.32e2 * (t629 + (-0.4e1 * t540 * t654 + t722 + (t723 + t552 + t564) * t589) * t509 + (-t589 + t610 + t727) * t649 + t477 * t697 + t503 * t480) * t702 + 0.8e1 * (t475 + (t480 * t698 + t466) * t652 + (t612 + (t559 + t679) * t582 + t608) * t648 + t611) * t495) * t472) * t484) / ((-0.4e1 * (-t673 * t496 + 0.2e1 * t708 + (t655 * t726 + t540 * (t582 + t721)) * pkin(1)) * t701 + 0.8e1 * pkin(7) * t624 + ((pkin(3) * t722 + 0.8e1 * t589 * t596) * t542 + 0.4e1 * t593 * t646) * t509 - 0.4e1 * t613 * t669 - (t681 * t582 + t557 + t671 + (6 * t693)) * t496 + (t554 + (t547 + 6 * t592) * t582 + t494) * t718) * t442 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t626 + 0.4e1 / 0.9e1 * t582 - t577 / 0.9e1 + t684) * t695 + t492 * t477 + t478 * t697 + (t692 + (t518 + t527 + t610) * t497) * t670) * t701 + t475 + (t478 * t698 + t466) * t652 + t620 * t648 + ((t493 + t640) * t582 + t688) * t622 + t579 + (t546 + t637) * t597 + (t637 * t559 + t677 * t567 + t545 + t563) * t582 + t494 * t481) * t472 + ((t661 * t718 + (t653 * t724 + (t496 - t718) * t486 + t613) * t664) * t442 + (0.8e1 * (t486 + t657 + t503) * t702 + 0.6e1 * (t675 * t657 + (t477 + t478) * t649 + t620) * t495) * t472) * t484);
t585 = pkin(2) ^ 2;
t418 = 0.1e1 / (t585 + t691);
t586 = 1 / pkin(2);
t713 = t418 * t586;
t590 = 1 / pkin(1);
t709 = t454 * t590;
t578 = 0.1e1 / pkin(4);
t647 = t451 * t578 / pkin(3) ^ 2;
t634 = t714 / 0.4e1;
t633 = t418 * t719;
t632 = t711 / 0.2e1;
t631 = t710 / 0.2e1;
t630 = t578 * t583 / 0.2e1;
t468 = -t539 * t543 + t700;
t467 = -t539 * t540 - t699;
t460 = -pkin(1) * t464 + pkin(5);
t456 = t589 - t663;
t447 = atan2(t575 * t590 * t448 / 0.2e1, t464);
t446 = cos(t447);
t445 = sin(t447);
t439 = atan2((pkin(1) * t456 * t725 + t448 * t460) * t709 / 0.2e1, -(-pkin(1) * t712 + 0.2e1 * t456 * t460) * t709 / 0.2e1);
t438 = atan2(t444 * t631, t443 * t631);
t437 = cos(t439);
t436 = cos(t438);
t435 = sin(t439);
t434 = sin(t438);
t433 = atan2(t441 * t632, t440 * t632);
t432 = cos(t433);
t431 = sin(t433);
t430 = -t435 * t536 + t437 * t537;
t429 = t435 * t537 + t437 * t536;
t422 = pkin(2) * t424 + pkin(6);
t421 = -pkin(2) - t716;
t420 = t423 + (2 * t585);
t419 = t423 + 0.2e1 * t572;
t416 = atan2(t442 * t630, t630 * t714);
t415 = cos(t416);
t414 = sin(t416);
t413 = (t440 * t442 / 0.4e1 + t441 * t634) * t647;
t412 = (t440 * t634 - t441 * t442 / 0.4e1) * t647;
t411 = atan2(t425, t424);
t410 = cos(t411);
t409 = sin(t411);
t407 = atan2(t586 * t408 * t719, -t424);
t406 = cos(t407);
t405 = sin(t407);
t404 = atan2(t412 * t467 + t413 * t468, -t412 * t468 + t413 * t467);
t403 = cos(t404);
t402 = sin(t404);
t401 = atan2((pkin(2) * t420 * t425 + t408 * t422) * t713 / 0.2e1, -(-pkin(2) * t715 + t420 * t422) * t713 / 0.2e1);
t400 = atan2((pkin(6) * t419 * t425 - t408 * t421) * t633, (-pkin(6) * t715 - t419 * t421) * t633);
t399 = cos(t401);
t398 = cos(t400);
t397 = sin(t401);
t396 = sin(t400);
t1 = [-t543, t540, 0, 0; -t540, -t543, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t432, -t431, 0, pkin(1); t431, t432, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t398, t396, 0, pkin(2); -t396, -t398, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t415, -t414, 0, pkin(3); t414, t415, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t430, -t429, 0, t537 * pkin(5); t429, t430, 0, t536 * pkin(5); 0, 0, 1, 0; 0, 0, 0, 1; -t410, t409, 0, 0; -t409, -t410, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t539, t542, 0, pkin(7); -t542, t539, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t436, t434, 0, pkin(1); -t434, -t436, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t406, t405, 0, pkin(6); -t405, -t406, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t403, t402, 0, pkin(4); -t402, -t403, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t446, -t445, 0, pkin(5); t445, t446, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t399, t397, 0, pkin(6); -t397, -t399, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(3); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(1); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(2); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,15);             % numerisch
else,                         T_mdh = sym('xx', [4,4,15]); end % symbolisch

for i = 1:15
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
