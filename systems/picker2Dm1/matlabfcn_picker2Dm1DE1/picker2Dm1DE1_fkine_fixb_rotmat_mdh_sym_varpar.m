% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% picker2Dm1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   11:  mdh base (link 0) -> mdh frame (11-1), link (11-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-10 19:54
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = picker2Dm1DE1_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1DE1_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1DE1_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 09:05:52
% EndTime: 2020-05-10 09:06:11
% DurationCPUTime: 18.92s
% Computational Cost: add. (338613->476), mult. (877854->611), div. (16020->12), fcn. (262674->44), ass. (0->308)
t372 = 0.1e1 / pkin(6) / 0.2e1;
t204 = pkin(2) ^ 2;
t193 = pkin(6) ^ 2;
t191 = 2 * pkin(2);
t162 = sin(pkin(9));
t165 = cos(pkin(9));
t161 = sin(qJ(1));
t208 = pkin(1) ^ 2;
t206 = t208 ^ 2;
t211 = pkin(7) ^ 2;
t164 = cos(qJ(1));
t130 = t164 ^ 2;
t215 = pkin(3) ^ 2;
t371 = sin(qJ(2));
t306 = pkin(3) * t371;
t280 = pkin(7) * t306;
t271 = 0.2e1 * t280;
t254 = t211 + t271;
t226 = t371 ^ 2;
t346 = t215 * t226;
t316 = 0.2e1 * t346;
t242 = -t215 + t254 + t316;
t240 = t130 * t242;
t198 = pkin(4) ^ 2;
t248 = t208 + t254;
t246 = -t198 + t248;
t267 = t306 + pkin(7);
t250 = t267 * t164;
t163 = cos(qJ(2));
t356 = t163 * t161;
t310 = pkin(3) * t356;
t279 = pkin(1) * t310;
t376 = 0.2e1 * t215;
t328 = t211 + t376;
t287 = t198 - t328;
t329 = -t211 + t198;
t289 = t208 - t329;
t312 = pkin(1) * t356;
t313 = t371 * pkin(7);
t332 = t208 - t211;
t381 = 0.1e1 / pkin(3);
t363 = t381 / 0.2e1;
t390 = 0.1e1 / t363;
t238 = sqrt(-0.4e1 * pkin(1) * (0.2e1 * (-t312 + t313) * pkin(3) + t289) * t250 + 0.4e1 * t246 * t279 + 0.4e1 * t332 * t346 - 0.4e1 * t289 * t280 - t206 - (t211 - (t390 + pkin(4)) * pkin(4)) * (t211 + (t390 - pkin(4)) * pkin(4)) + (-0.4e1 * t240 + 0.2e1 * t287) * t208);
t192 = 0.2e1 * pkin(1);
t241 = t250 - t310;
t239 = 0.1e1 / (t192 * t241 + t215 + t248);
t378 = 0.3e1 * t208;
t265 = t378 - t287;
t355 = t163 * t164;
t309 = pkin(3) * t355;
t375 = 0.4e1 * t215;
t380 = -0.2e1 * pkin(1);
t234 = t239 * ((t161 * t267 + t309) * t238 + t240 * t380 - ((-0.4e1 * t312 + 0.2e1 * t313) * pkin(3) + t265) * t250 + (t271 + t265) * t310 + (t316 - t271 - t375 - t289) * pkin(1));
t232 = t234 / 0.4e1;
t119 = pkin(3) * t163;
t243 = t376 + t246;
t120 = pkin(1) * t164;
t322 = 0.2e1 * t120;
t237 = t239 * ((pkin(1) + t241) * t238 + (t242 * t322 + t243 * t267) * t161 + (t164 * t243 + (0.4e1 * t130 - 0.2e1) * pkin(1) * t267) * t119);
t236 = t237 / 0.4e1;
t235 = t381 * t236;
t196 = 0.1e1 / pkin(5);
t195 = pkin(5) ^ 2;
t158 = sin(pkin(8));
t159 = cos(pkin(8));
t92 = -t158 * t161 - t159 * t164;
t374 = pkin(5) * t92;
t89 = t374 * t380;
t361 = t195 + t89;
t82 = 0.1e1 / (t208 + t361);
t366 = t196 * t82;
t77 = sqrt(-(-(t192 + pkin(5)) * pkin(5) + t361) * (pkin(5) * (t192 - pkin(5)) + t361));
t91 = t158 * t164 - t159 * t161;
t367 = t77 * t91;
t83 = t89 + 0.2e1 * t195;
t87 = -pkin(1) + t374;
t72 = -pkin(5) * t367 - t83 * t87;
t73 = pkin(5) * t83 * t91 - t77 * t87;
t56 = (t232 * t381 * t72 + t73 * t235) * t366;
t233 = t381 * t234;
t57 = (-t73 * t233 / 0.4e1 + t72 * t235) * t366;
t48 = t162 * t57 + t165 * t56;
t373 = pkin(6) * t48;
t47 = t373 * t191;
t362 = t193 + t47;
t42 = 0.1e1 / (t204 + t362);
t299 = t42 * t372;
t32 = sqrt(-(-(t191 + pkin(6)) * pkin(6) + t362) * (pkin(6) * (t191 - pkin(6)) + t362));
t49 = t162 * t56 - t165 * t57;
t369 = t32 * t49;
t43 = t47 + 0.2e1 * t193;
t45 = -pkin(2) - t373;
t15 = atan2((pkin(6) * t43 * t49 - t32 * t45) * t299, (-pkin(6) * t369 - t43 * t45) * t299);
t11 = sin(t15);
t13 = cos(t15);
t231 = atan2(t237 * t363, t233 / 0.2e1);
t229 = sin(t231);
t230 = cos(t231);
t54 = -t161 * t230 - t164 * t229;
t55 = t161 * t229 - t164 * t230;
t260 = t11 * t54 - t13 * t55;
t205 = 1 / pkin(2);
t30 = atan2(t205 * t32 * t372, -t48);
t28 = sin(t30);
t29 = cos(t30);
t9 = t11 * t55 + t13 * t54;
t395 = -t260 * t29 - t28 * t9;
t2 = -t260 * t28 + t29 * t9;
t365 = t205 * t42;
t44 = t47 + 0.2e1 * t204;
t46 = pkin(2) * t48 + pkin(6);
t16 = atan2((pkin(2) * t44 * t49 + t32 * t46) * t365 / 0.2e1, -(-pkin(2) * t369 + t44 * t46) * t365 / 0.2e1);
t12 = sin(t16);
t14 = cos(t16);
t35 = atan2(t49, t48);
t33 = sin(t35);
t34 = cos(t35);
t22 = t33 * t55 + t34 * t54;
t259 = t33 * t54 - t34 * t55;
t394 = -t12 * t22 - t14 * t259;
t393 = -t12 * t259 + t14 * t22;
t199 = 0.1e1 / pkin(4);
t352 = t199 / t215;
t122 = t211 - 0.3e1 * t215;
t129 = t164 * t130;
t212 = pkin(1) * t208;
t347 = t212 * t129;
t319 = pkin(7) * t347;
t284 = 0.8e1 * t319;
t100 = t122 * t284;
t148 = 0.4e1 / 0.3e1 * t215;
t123 = t208 + t211;
t142 = -t198 / 0.3e1;
t293 = t142 + t123;
t101 = t148 + t293;
t143 = -t198 / 0.2e1;
t326 = t215 + t211;
t286 = t208 + t326;
t103 = t143 + t286;
t168 = 0.10e2 * t208;
t189 = 0.3e1 * t211;
t382 = t189 - t198 - t215;
t104 = t382 * t168;
t105 = -t198 + t286;
t110 = pkin(7) * t322;
t188 = 0.4e1 * t211;
t112 = (t188 + t198) * t208;
t152 = -t215 / 0.3e1;
t114 = t152 + t211;
t115 = -t208 / 0.3e1 + t211;
t118 = t123 ^ 2;
t121 = -0.30e2 * t198 + 0.60e2 * t211;
t125 = -0.3e1 * t208 + t211;
t131 = 0.10e2 / 0.3e1 * t208;
t132 = -0.20e2 / 0.3e1 * t208;
t140 = -t198 / 0.6e1;
t141 = -t198 / 0.4e1;
t145 = -0.3e1 / 0.2e1 * t198;
t149 = 0.2e1 / 0.3e1 * t215;
t154 = 0.4e1 / 0.3e1 * t208;
t156 = t208 / 0.2e1;
t166 = 0.15e2 * t206;
t173 = 0.18e2 * t211;
t174 = -0.2e1 * t198;
t175 = -0.5e1 * t198;
t176 = -0.6e1 * t198;
t217 = t215 ^ 2;
t177 = 0.5e1 * t217;
t180 = 0.7e1 * t206;
t181 = 0.5e1 * t206;
t182 = 0.6e1 * t208;
t183 = 0.2e1 * t208;
t210 = t211 ^ 2;
t185 = 0.3e1 * t210;
t186 = 0.8e1 * t211;
t187 = 0.6e1 * t211;
t190 = 0.2e1 * t211;
t197 = t198 ^ 2;
t216 = pkin(3) * t215;
t200 = t216 ^ 2;
t221 = pkin(7) * t211;
t333 = t206 + t210;
t336 = t190 - t198;
t349 = t211 * t198;
t247 = t336 * t208 + t197 / 0.6e1 + t333 - t349;
t244 = 0.5e1 / 0.6e1 * t217 + t247;
t311 = t208 * t119;
t245 = t130 * (-t161 * t212 + t311);
t335 = t197 - t217;
t249 = 0.6e1 * t210 + t335 - 0.6e1 * t349;
t253 = t211 - t279;
t269 = -0.4e1 * t279;
t255 = t103 * t269;
t345 = t197 / 0.2e1 - t217 / 0.2e1;
t266 = -0.3e1 * t349 + t185 + t345;
t270 = -0.6e1 * t279;
t340 = 0.15e2 * t208 + t189;
t360 = t200 + t123 * ((t145 + t190) * t208 - 0.3e1 / 0.2e1 * t349 + t333 + t345);
t261 = (t145 + t340) * t217 + ((t131 + t336) * t215 + t244) * t270 + (t166 + (t173 - 0.9e1 * t198) * t208 + t266) * t215 + t360;
t285 = t378 + t326;
t370 = pkin(1) * t161;
t262 = -(0.3e1 * t215 + t123) * t370 + t285 * t119;
t144 = -0.2e1 / 0.3e1 * t198;
t153 = -0.2e1 / 0.3e1 * t215;
t338 = t174 - 0.2e1 * t215;
t290 = t187 + t338;
t291 = t144 + t123;
t339 = t168 + t190;
t344 = t153 + t211;
t264 = -t370 * (t177 + (t168 + t290) * t215 + (t153 + t291) * t123) + (t217 + (t144 + t153 + t339) * t215 + t181 + t290 * t208 + t211 * (t144 + t344)) * t119;
t268 = -0.2e1 * t279;
t109 = t120 + pkin(7);
t272 = t109 * t306;
t273 = t347 * t119;
t351 = t206 * t130 ^ 2;
t274 = t351 * t119;
t292 = t144 + t149 + t190;
t359 = t217 + (t149 + t291) * t123;
t275 = t101 * t269 + t359 + (t182 + t292) * t215;
t301 = t109 * t371 * t226 * t216;
t276 = -0.8e1 * t301;
t307 = 0.16e2 * t347;
t281 = pkin(7) * t307;
t327 = -t215 + t211;
t288 = -t198 + t327;
t150 = t215 / 0.3e1;
t294 = t140 + t150 + t211;
t295 = t198 / 0.3e1 + t150 + t190;
t296 = 0.2e1 / 0.3e1 * t198 + t149 + t188;
t297 = 0.4e1 / 0.3e1 * t198 + t148 - 0.2e1 * t211;
t354 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t300 = t161 * t354;
t320 = 0.6e1 * t120;
t302 = pkin(7) * t320;
t321 = 0.4e1 * t120;
t303 = pkin(7) * t321;
t305 = -t370 / 0.2e1;
t350 = t208 * t130;
t308 = 0.12e2 * t350;
t317 = 0.4e1 * t350;
t318 = 0.8e1 * t351;
t323 = 0.2e1 * t370;
t324 = pkin(7) * t120;
t325 = 0.4e1 * pkin(7);
t330 = t210 + t217;
t331 = t210 - t206;
t337 = t175 - 0.5e1 * t215;
t341 = 0.4e1 / 0.7e1 * t211 - t198 / 0.7e1;
t342 = t156 + t211;
t343 = t208 / 0.3e1 + t211;
t348 = t211 * t208;
t353 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t357 = t226 ^ 2 * t217;
t358 = t118 * (t208 + t288);
t377 = -0.6e1 * t215;
t379 = 0.4e1 * t206;
t383 = t141 + t215 / 0.2e1;
t90 = -t217 / 0.6e1 + t247;
t93 = t114 * t268;
t97 = t120 + t267;
t368 = ((-0.24e2 * (0.4e1 / 0.3e1 * t350 + t110 + t115) * t357 * t370 + (0.4e1 * t245 + (t119 + t323) * t110 + t125 * t119 + (t143 + t285) * t323) * t276 - 0.12e2 * (-0.8e1 / 0.3e1 * t274 + ((t154 + t294) * t119 - (0.7e1 / 0.6e1 * t215 + t140 + t342) * t370) * t317 + (-t215 * t332 - 0.5e1 / 0.3e1 * t206 + t295 * t208 + t211 * (t142 + t114)) * t119 + (-t217 + (t132 + t296) * t215 - 0.3e1 * t206 + t297 * t208 + t210) * t305 + (-t161 * t206 * t129 + ((t208 + t294) * t119 + (-t208 + t328) * t305) * t120) * t325) * t346 - 0.6e1 * (-0.4e1 * ((0.5e1 / 0.6e1 * t215 + t156 + t140) * t163 * t390 + pkin(1) * t300) * t350 + (-0.8e1 * t273 + ((t142 + t149 + t378 + t211) * t119 - (0.8e1 / 0.3e1 * t215 + t293) * t370) * t321) * pkin(7) + t264) * t272 + 0.24e2 * t114 * t274 + ((t211 + 0.5e1 / 0.2e1 * t215 + 0.3e1 / 0.2e1 * t208 + t143) * t119 + t122 * t370 / 0.2e1) * t281 - 0.6e1 * ((-0.3e1 * t217 + (t132 + t297) * t215 + t296 * t208 + t331) * t119 - 0.2e1 * (-0.5e1 / 0.3e1 * t217 + (-t208 + t295) * t215 + t211 * (t152 + t293)) * t370) * t350 - 0.6e1 * t264 * t324 - (t200 + (0.21e2 * t208 + t382) * t217 + (t211 * t338 + t104 + t185 + 0.35e2 * t206) * t215 + (t180 + (t186 + t337) * t208 + t211 * t288) * t123) * t119 + (0.7e1 * t200 + (0.35e2 * t208 + 0.15e2 * t211 + t337) * t217 + (0.21e2 * t206 + t104 + 0.9e1 * t210 + (t176 + t377) * t211) * t215 + t358) * t370) * t238 + (0.16e2 * (t318 + t281 + (-0.8e1 * t206 + 0.12e2 * t348) * t130 + (0.4e1 * pkin(1) * t221 - 0.12e2 * pkin(7) * t212) * t164 - 0.6e1 * t348 + t333) * t357 + 0.32e2 * (t284 + (-0.4e1 * t212 * t310 + t379 + (t375 + t174 + t186) * t208) * t130 + (-t208 + t253 + t383) * t303 + t268 * t353 + t125 * t103) * t301 + 0.24e2 * (t344 * t318 + 0.14e2 * (-0.32e2 / 0.21e2 * (t211 + t215 / 0.4e1 + t208 / 0.4e1 - t198 / 0.8e1) * t279 + 0.5e1 / 0.42e2 * t217 + (0.16e2 / 0.21e2 * t208 + t341) * t215 + t206 / 0.7e1 + t341 * t208 + t210 - 0.3e1 / 0.7e1 * t349 + t197 / 0.42e2) * t350 + t115 * t255 - t332 * t217 + (t112 - 0.10e2 / 0.3e1 * t206 + 0.2e1 * t210 - t349) * t215 + t90 * t353 + ((-0.2e1 / 0.3e1 * t279 + t141 + t342) * t307 + (-0.8e1 / 0.3e1 * (t343 + t383) * t279 + 0.5e1 / 0.18e2 * t217 + (0.4e1 / 0.3e1 * t211 + t154 + t142) * t215 + t210 + 0.2e1 / 0.3e1 * t348 - 0.2e1 / 0.3e1 * t349 - t206 / 0.3e1 + t197 / 0.18e2) * t320) * pkin(7)) * t346 + 0.8e1 * (t100 + (t103 * t354 + t93) * t308 + (t255 + (t182 + t336) * t215 + t244) * t302 + t261) * t272 + 0.16e2 * (t211 * t377 + t330) * t351 + 0.32e2 * (t103 * t122 + t268 * t354) * t319 + 0.24e2 * (t114 * t255 - t200 + (-t131 + t329) * t217 + (t112 + t217 / 0.6e1 - t197 / 0.6e1 + t331) * t215 + t90 * t211) * t350 + 0.8e1 * t261 * t324 - 0.8e1 * ((t145 + t189 + 0.7e1 * t208) * t217 + (t180 + (t175 + 0.10e2 * t211) * t208 + t266) * t215 + t360) * t279 + t217 ^ 2 + (t174 + t188 + 0.28e2 * t208) * t200 + (t121 * t208 + 0.70e2 * t206 + t249) * t217 + (t121 * t206 + t210 * t176 + t182 * t249 + t190 * t335 + 0.28e2 * t212 ^ 2 + 0.4e1 * t221 ^ 2) * t215 + t105 * t358) * t97) / ((t276 * t370 - 0.4e1 * (0.2e1 * t245 - t332 * t119 + (0.2e1 * pkin(7) * t309 + t161 * (t183 + t215)) * pkin(1)) * t346 - 0.4e1 * (-0.2e1 * t130 * t311 + (t119 - t370) * t110 + t262) * t272 + 0.8e1 * pkin(7) * t273 + ((pkin(3) * t379 + 0.8e1 * t208 * t216) * t163 + 0.4e1 * t212 * t300) * t130 - 0.4e1 * t262 * t324 - (t215 * t339 + t181 + t330 + 0.6e1 * t348) * t119 + (t177 + (t168 + t187) * t215 + t118) * t370) * t238 + (0.8e1 * (t110 + t317 + t125) * t301 + 0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t279 + 0.4e1 / 0.9e1 * t215 - t198 / 0.9e1 + t343) * t350 + t115 * t268 + t101 * t353 + (t347 + (t140 + t149 + t253) * t120) * t325) * t346 + 0.6e1 * (t327 * t317 + (t101 + t268) * t303 + t275) * t272 + t100 + (t101 * t354 + t93) * t308 + t275 * t302 + ((t131 + t292) * t215 + t359) * t270 + t200 + (-t198 + t215 + t340) * t217 + (t166 + (t173 + t176 + 0.6e1 * t215) * t208 + t185 + (t174 + t376) * t211) * t215 + t118 * t105) * t97);
t36 = (t232 * t368 - t238 * t237 / 0.4e1) * t352;
t37 = (t232 * t238 + t236 * t368) * t352;
t94 = -t161 * t371 - t355;
t95 = -t164 * t371 + t356;
t19 = atan2(t36 * t94 + t37 * t95, -t36 * t95 + t37 * t94);
t17 = sin(t19);
t18 = cos(t19);
t304 = t199 * t363;
t40 = atan2(t238 * t304, t304 * t368);
t38 = sin(t40);
t39 = cos(t40);
t25 = t38 * t55 + t39 * t54;
t283 = -t38 * t54 + t55 * t39;
t392 = t17 * t25 - t18 * t283;
t391 = t17 * t283 + t18 * t25;
t209 = 0.1e1 / pkin(1);
t364 = t209 * t82;
t315 = t158 * pkin(5) + 0;
t314 = t159 * pkin(5) + 0;
t108 = -t120 + 0;
t298 = t366 / 0.2e1;
t70 = atan2(t73 * t298, t72 * t298);
t66 = sin(t70);
t68 = cos(t70);
t62 = t161 * t68 + t164 * t66;
t63 = -t161 * t66 + t164 * t68;
t76 = atan2(t196 * t209 * t77 / 0.2e1, t92);
t74 = sin(t76);
t75 = cos(t76);
t282 = -t62 * t74 + t63 * t75;
t278 = t55 * pkin(3) + t108;
t277 = t55 * pkin(2) + t108;
t107 = 0 - t370;
t263 = pkin(6) * t260 + t277;
t258 = t62 * t75 + t63 * t74;
t257 = t54 * pkin(3) + t107;
t256 = t54 * pkin(2) + t107;
t251 = -pkin(6) * t9 + t256;
t88 = -pkin(1) * t92 + pkin(5);
t84 = t89 + t183;
t71 = atan2((pkin(1) * t84 * t91 + t77 * t88) * t364 / 0.2e1, -(-pkin(1) * t367 + t84 * t88) * t364 / 0.2e1);
t69 = cos(t71);
t67 = sin(t71);
t61 = -t158 * t67 + t159 * t69;
t60 = t158 * t69 + t159 * t67;
t1 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t164, t161, 0, 0; -t161, -t164, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t55, -t54, 0, t108; t54, t55, 0, t107; 0, 0, 1, 0; 0, 0, 0, 1; t260, t9, 0, t277; -t9, t260, 0, t256; 0, 0, 1, 0; 0, 0, 0, 1; t283, -t25, 0, t278; t25, t283, 0, t257; 0, 0, 1, 0; 0, 0, 0, 1; t61, -t60, 0, t314; t60, t61, 0, t315; 0, 0, 1, 0; 0, 0, 0, 1; t259, t22, 0, t108; -t22, t259, 0, t107; 0, 0, 1, 0; 0, 0, 0, 1; t371, t163, 0, pkin(7) + 0; -t163, t371, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t63, -t62, 0, t108; t62, t63, 0, t107; 0, 0, 1, 0; 0, 0, 0, 1; t395, -t2, 0, t263; t2, t395, 0, t251; 0, 0, 1, 0; 0, 0, 0, 1; t392, t391, 0, pkin(4) * t283 + t278; -t391, t392, 0, pkin(4) * t25 + t257; 0, 0, 1, 0; 0, 0, 0, 1; t282, -t258, 0, pkin(5) * t63 + t108; t258, t282, 0, pkin(5) * t62 + t107; 0, 0, 1, 0; 0, 0, 0, 1; t394, -t393, 0, pkin(6) * t259 + t108; t393, t394, 0, -pkin(6) * t22 + t107; 0, 0, 1, 0; 0, 0, 0, 1; t371, t163, 0, 0 + t267; -t163, t371, 0, -t119 + 0; 0, 0, 1, 0; 0, 0, 0, 1; t61, -t60, 0, pkin(1) * t61 + t314; t60, t61, 0, pkin(1) * t60 + t315; 0, 0, 1, 0; 0, 0, 0, 1; t395, -t2, 0, pkin(2) * t395 + t263; t2, t395, 0, pkin(2) * t2 + t251; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
