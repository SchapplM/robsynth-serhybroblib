% Calculate inertial parameters regressor of potential energy for
% picker2Dm1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% U_reg [1x(2*10)]
%   inertial parameter regressor of Potential energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-10 19:54
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function U_reg = picker2Dm1DE1_energypot_fixb_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1DE1_energypot_fixb_reg2_slag_vp: qJ has to be [2x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'picker2Dm1DE1_energypot_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1DE1_energypot_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From energy_potential_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 13:07:57
% EndTime: 2020-05-10 13:08:10
% DurationCPUTime: 11.95s
% Computational Cost: add. (173231->472), mult. (465769->626), div. (7180->12), fcn. (123736->38), ass. (0->286)
t1014 = 0.1e1 / pkin(3);
t798 = sin(pkin(8));
t799 = cos(pkin(8));
t801 = sin(qJ(1));
t804 = cos(qJ(1));
t735 = -t798 * t801 - t799 * t804;
t1004 = pkin(5) * t735;
t1013 = -2 * pkin(1);
t732 = t1004 * t1013;
t835 = pkin(5) ^ 2;
t726 = t732 + 0.2e1 * t835;
t730 = -pkin(1) + t1004;
t832 = 2 * pkin(1);
t979 = t732 + t835;
t720 = sqrt(-(-(t832 + pkin(5)) * pkin(5) + t979) * (pkin(5) * (t832 - pkin(5)) + t979));
t734 = t798 * t804 - t799 * t801;
t999 = t720 * t734;
t718 = -pkin(5) * t999 - t726 * t730;
t719 = pkin(5) * t726 * t734 - t720 * t730;
t853 = (pkin(3) ^ 2);
t1008 = 4 * t853;
t1001 = t1014 / 0.2e1;
t1021 = 0.1e1 / t1001;
t846 = pkin(1) ^ 2;
t844 = t846 ^ 2;
t849 = pkin(7) ^ 2;
t770 = t804 ^ 2;
t1006 = sin(qJ(2));
t940 = pkin(3) * t1006;
t914 = pkin(7) * t940;
t907 = 0.2e1 * t914;
t895 = t849 + t907;
t864 = t1006 ^ 2;
t984 = t853 * t864;
t948 = 0.2e1 * t984;
t880 = -t853 + t895 + t948;
t878 = t770 * t880;
t838 = pkin(4) ^ 2;
t886 = t846 + t895;
t884 = -t838 + t886;
t903 = t940 + pkin(7);
t888 = t903 * t804;
t803 = cos(qJ(2));
t994 = t803 * t801;
t944 = pkin(3) * t994;
t913 = pkin(1) * t944;
t1009 = 2 * t853;
t960 = t849 + t1009;
t923 = t838 - t960;
t961 = -t849 + t838;
t925 = t846 - t961;
t946 = pkin(1) * t994;
t947 = t1006 * pkin(7);
t964 = t846 - t849;
t876 = sqrt(-0.4e1 * pkin(1) * (0.2e1 * (-t946 + t947) * pkin(3) + t925) * t888 + 0.4e1 * t884 * t913 + 0.4e1 * t964 * t984 - 0.4e1 * t925 * t914 - t844 - (t849 - (t1021 + pkin(4)) * pkin(4)) * (t849 + (t1021 - pkin(4)) * pkin(4)) + (-0.4e1 * t878 + 0.2e1 * t923) * t846);
t879 = t888 - t944;
t877 = 0.1e1 / (t832 * t879 + t853 + t886);
t1011 = 3 * t846;
t900 = t1011 - t923;
t993 = t803 * t804;
t943 = pkin(3) * t993;
t872 = t877 * ((t801 * t903 + t943) * t876 + t878 * t1013 - ((-0.4e1 * t946 + 0.2e1 * t947) * pkin(3) + t900) * t888 + (t907 + t900) * t944 + (t948 - t907 - t1008 - t925) * pkin(1));
t870 = t872 / 0.4e1;
t759 = pkin(3) * t803;
t881 = t1009 + t884;
t760 = pkin(1) * t804;
t954 = 0.2e1 * t760;
t875 = t877 * ((pkin(1) + t879) * t876 + (t880 * t954 + t903 * t881) * t801 + (t881 * t804 + (0.4e1 * t770 - 0.2e1) * pkin(1) * t903) * t759);
t874 = t875 / 0.4e1;
t873 = t1014 * t874;
t725 = 0.1e1 / (t846 + t979);
t998 = t725 / pkin(5);
t703 = (t1014 * t718 * t870 + t719 * t873) * t998;
t871 = t1014 * t872;
t704 = (-t719 * t871 / 0.4e1 + t718 * t873) * t998;
t802 = sin(pkin(9));
t805 = cos(pkin(9));
t696 = t703 * t802 - t704 * t805;
t1002 = pkin(6) * t696;
t831 = 2 * pkin(2);
t695 = t703 * t805 + t704 * t802;
t1003 = pkin(6) * t695;
t694 = t1003 * t831;
t833 = pkin(6) ^ 2;
t983 = t694 + t833;
t681 = sqrt(-(-(t831 + pkin(6)) * pkin(6) + t983) * (pkin(6) * (t831 - pkin(6)) + t983));
t692 = t694 + 0.2e1 * t833;
t693 = -pkin(2) - t1003;
t1007 = 0.1e1 / pkin(6) / 0.2e1;
t920 = 0.1e1 / ((pkin(2) ^ 2) + t983) * t1007;
t669 = atan2((t692 * t1002 - t681 * t693) * t920, (-t681 * t1002 - t692 * t693) * t920);
t667 = sin(t669);
t668 = cos(t669);
t869 = atan2(t875 * t1001, t871 / 0.2e1);
t867 = sin(t869);
t868 = cos(t869);
t701 = -t801 * t868 - t804 * t867;
t702 = t801 * t867 - t804 * t868;
t665 = t667 * t702 + t668 * t701;
t679 = atan2(0.1e1 / pkin(2) * t681 * t1007, -t695);
t677 = sin(t679);
t678 = cos(t679);
t892 = t667 * t701 - t668 * t702;
t1025 = t665 * t677 + t678 * t892;
t1024 = t665 * t678 - t677 * t892;
t1005 = pkin(1) * t801;
t1010 = -6 * t853;
t1012 = 4 * t844;
t829 = 0.3e1 * t849;
t1015 = t829 - t838 - t853;
t781 = -t838 / 0.4e1;
t1016 = t781 + t853 / 0.2e1;
t855 = t853 ^ 2;
t837 = t838 ^ 2;
t848 = t849 ^ 2;
t965 = t844 + t848;
t830 = 0.2e1 * t849;
t968 = t830 - t838;
t987 = t849 * t838;
t885 = t968 * t846 + t837 / 0.6e1 + t965 - t987;
t733 = -t855 / 0.6e1 + t885;
t792 = -t853 / 0.3e1;
t756 = t792 + t849;
t904 = -0.2e1 * t913;
t736 = t756 * t904;
t741 = t760 + t903;
t762 = t849 - (3 * t853);
t769 = t804 * t770;
t850 = pkin(1) * t846;
t985 = t850 * t769;
t951 = pkin(7) * t985;
t918 = 0.8e1 * t951;
t744 = t762 * t918;
t788 = 0.4e1 / 0.3e1 * t853;
t763 = t846 + t849;
t782 = -t838 / 0.3e1;
t929 = t782 + t763;
t745 = t788 + t929;
t783 = -t838 / 0.2e1;
t958 = t853 + t849;
t922 = t846 + t958;
t747 = t783 + t922;
t808 = 10 * t846;
t748 = t1015 * t808;
t749 = -t838 + t922;
t752 = pkin(7) * t954;
t828 = 0.4e1 * t849;
t754 = (t828 + t838) * t846;
t757 = -t846 / 0.3e1 + t849;
t758 = t763 ^ 2;
t761 = -0.30e2 * t838 + 0.60e2 * t849;
t765 = -(3 * t846) + t849;
t771 = 0.10e2 / 0.3e1 * t846;
t772 = -0.20e2 / 0.3e1 * t846;
t780 = -t838 / 0.6e1;
t785 = -0.3e1 / 0.2e1 * t838;
t789 = 0.2e1 / 0.3e1 * t853;
t794 = 0.4e1 / 0.3e1 * t846;
t796 = t846 / 0.2e1;
t806 = 15 * t844;
t813 = 0.18e2 * t849;
t814 = -0.2e1 * t838;
t815 = -0.5e1 * t838;
t816 = -0.6e1 * t838;
t817 = 5 * t855;
t820 = 7 * t844;
t821 = 5 * t844;
t822 = 6 * t846;
t823 = 2 * t846;
t825 = 0.3e1 * t848;
t826 = 0.8e1 * t849;
t827 = 0.6e1 * t849;
t854 = pkin(3) * t853;
t840 = t854 ^ 2;
t859 = pkin(7) * t849;
t882 = 0.5e1 / 0.6e1 * t855 + t885;
t945 = t846 * t759;
t883 = t770 * (-t801 * t850 + t945);
t967 = t837 - t855;
t887 = 0.6e1 * t848 + t967 - 0.6e1 * t987;
t893 = t849 - t913;
t977 = t837 / 0.2e1 - t855 / 0.2e1;
t901 = -0.3e1 * t987 + t825 + t977;
t906 = -0.6e1 * t913;
t972 = (15 * t846) + t829;
t980 = t763 * ((t785 + t830) * t846 - 0.3e1 / 0.2e1 * t987 + t965 + t977) + t840;
t894 = ((t771 + t968) * t853 + t882) * t906 + (t806 + (t813 - 0.9e1 * t838) * t846 + t901) * t853 + (t785 + t972) * t855 + t980;
t905 = -0.4e1 * t913;
t896 = t747 * t905;
t921 = t1011 + t958;
t898 = -((3 * t853) + t763) * t1005 + t921 * t759;
t784 = -0.2e1 / 0.3e1 * t838;
t793 = -0.2e1 / 0.3e1 * t853;
t970 = t814 - (2 * t853);
t926 = t827 + t970;
t927 = t784 + t763;
t971 = t808 + t830;
t976 = t793 + t849;
t899 = -(t817 + (t808 + t926) * t853 + (t793 + t927) * t763) * t1005 + (t855 + (t784 + t793 + t971) * t853 + t821 + t926 * t846 + t849 * (t784 + t976)) * t759;
t928 = t784 + t789 + t830;
t978 = (t789 + t927) * t763 + t855;
t902 = t745 * t905 + (t822 + t928) * t853 + t978;
t751 = t760 + pkin(7);
t908 = t751 * t940;
t909 = t985 * t759;
t989 = t844 * t770 ^ 2;
t910 = t989 * t759;
t935 = t751 * t1006 * t864 * t854;
t912 = -0.8e1 * t935;
t941 = 0.16e2 * t985;
t917 = pkin(7) * t941;
t959 = -t853 + t849;
t924 = -t838 + t959;
t790 = t853 / 0.3e1;
t930 = t780 + t790 + t849;
t931 = t838 / 0.3e1 + t790 + t830;
t932 = 0.2e1 / 0.3e1 * t838 + t789 + t828;
t933 = 0.4e1 / 0.3e1 * t838 + t788 - 0.2e1 * t849;
t992 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t934 = t801 * t992;
t952 = 0.6e1 * t760;
t936 = pkin(7) * t952;
t953 = 0.4e1 * t760;
t937 = pkin(7) * t953;
t939 = -t1005 / 0.2e1;
t988 = t846 * t770;
t942 = 0.12e2 * t988;
t949 = 0.4e1 * t988;
t950 = 0.8e1 * t989;
t955 = 0.2e1 * t1005;
t956 = pkin(7) * t760;
t957 = 0.4e1 * pkin(7);
t962 = t848 + t855;
t963 = t848 - t844;
t969 = t815 - (5 * t853);
t973 = 0.4e1 / 0.7e1 * t849 - t838 / 0.7e1;
t974 = t796 + t849;
t975 = t846 / 0.3e1 + t849;
t986 = t849 * t846;
t991 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t995 = t864 ^ 2 * t855;
t996 = t758 * (t846 + t924);
t1000 = ((-0.24e2 * (0.4e1 / 0.3e1 * t988 + t752 + t757) * t995 * t1005 + (0.4e1 * t883 + (t759 + t955) * t752 + t765 * t759 + (t783 + t921) * t955) * t912 - 0.12e2 * (-0.8e1 / 0.3e1 * t910 + ((t794 + t930) * t759 - (0.7e1 / 0.6e1 * t853 + t780 + t974) * t1005) * t949 + (-t853 * t964 - 0.5e1 / 0.3e1 * t844 + t931 * t846 + t849 * (t782 + t756)) * t759 + (-t855 + (t772 + t932) * t853 - (3 * t844) + t933 * t846 + t848) * t939 + (-t801 * t844 * t769 + ((t846 + t930) * t759 + (-t846 + t960) * t939) * t760) * t957) * t984 - 0.6e1 * (-0.4e1 * ((0.5e1 / 0.6e1 * t853 + t796 + t780) * t803 * t1021 + pkin(1) * t934) * t988 + (-0.8e1 * t909 + ((t782 + t789 + t1011 + t849) * t759 - (0.8e1 / 0.3e1 * t853 + t929) * t1005) * t953) * pkin(7) + t899) * t908 + 0.24e2 * t756 * t910 + ((t849 + 0.5e1 / 0.2e1 * t853 + 0.3e1 / 0.2e1 * t846 + t783) * t759 + t762 * t1005 / 0.2e1) * t917 - 0.6e1 * ((-(3 * t855) + (t772 + t933) * t853 + t932 * t846 + t963) * t759 - 0.2e1 * (-0.5e1 / 0.3e1 * t855 + (-t846 + t931) * t853 + t849 * (t792 + t929)) * t1005) * t988 - 0.6e1 * t899 * t956 - (t840 + ((21 * t846) + t1015) * t855 + (t970 * t849 + t748 + t825 + (35 * t844)) * t853 + (t820 + (t826 + t969) * t846 + t849 * t924) * t763) * t759 + (0.7e1 * t840 + ((35 * t846) + 0.15e2 * t849 + t969) * t855 + ((21 * t844) + t748 + 0.9e1 * t848 + (t816 + t1010) * t849) * t853 + t996) * t1005) * t876 + (0.16e2 * (t950 + t917 + (-(8 * t844) + 0.12e2 * t986) * t770 + (0.4e1 * pkin(1) * t859 - 0.12e2 * pkin(7) * t850) * t804 - 0.6e1 * t986 + t965) * t995 + 0.32e2 * (t918 + (-0.4e1 * t850 * t944 + t1012 + (t1008 + t814 + t826) * t846) * t770 + (-t846 + t893 + t1016) * t937 + t904 * t991 + t765 * t747) * t935 + 0.24e2 * (t976 * t950 + 0.14e2 * (-0.32e2 / 0.21e2 * (t849 + t853 / 0.4e1 + t846 / 0.4e1 - t838 / 0.8e1) * t913 + 0.5e1 / 0.42e2 * t855 + (0.16e2 / 0.21e2 * t846 + t973) * t853 + t844 / 0.7e1 + t973 * t846 + t848 - 0.3e1 / 0.7e1 * t987 + t837 / 0.42e2) * t988 + t757 * t896 - t964 * t855 + (t754 - 0.10e2 / 0.3e1 * t844 + 0.2e1 * t848 - t987) * t853 + t733 * t991 + ((-0.2e1 / 0.3e1 * t913 + t781 + t974) * t941 + (-0.8e1 / 0.3e1 * (t975 + t1016) * t913 + 0.5e1 / 0.18e2 * t855 + (0.4e1 / 0.3e1 * t849 + t794 + t782) * t853 + t848 + 0.2e1 / 0.3e1 * t986 - 0.2e1 / 0.3e1 * t987 - t844 / 0.3e1 + t837 / 0.18e2) * t952) * pkin(7)) * t984 + 0.8e1 * (t744 + (t747 * t992 + t736) * t942 + (t896 + (t822 + t968) * t853 + t882) * t936 + t894) * t908 + 0.16e2 * (t849 * t1010 + t962) * t989 + 0.32e2 * (t747 * t762 + t904 * t992) * t951 + 0.24e2 * (t756 * t896 - t840 + (-t771 + t961) * t855 + (t754 + t855 / 0.6e1 - t837 / 0.6e1 + t963) * t853 + t733 * t849) * t988 + 0.8e1 * t894 * t956 - 0.8e1 * ((t785 + t829 + (7 * t846)) * t855 + (t820 + (t815 + 0.10e2 * t849) * t846 + t901) * t853 + t980) * t913 + (t855 ^ 2) + (t814 + t828 + (28 * t846)) * t840 + (t761 * t846 + (70 * t844) + t887) * t855 + (t761 * t844 + t848 * t816 + t887 * t822 + t967 * t830 + (28 * t850 ^ 2) + 0.4e1 * t859 ^ 2) * t853 + t749 * t996) * t741) / ((t912 * t1005 - 0.4e1 * (0.2e1 * t883 - t964 * t759 + (0.2e1 * pkin(7) * t943 + t801 * (t823 + t853)) * pkin(1)) * t984 - 0.4e1 * (-0.2e1 * t770 * t945 + (t759 - t1005) * t752 + t898) * t908 + 0.8e1 * pkin(7) * t909 + ((pkin(3) * t1012 + 0.8e1 * t846 * t854) * t803 + 0.4e1 * t850 * t934) * t770 - 0.4e1 * t898 * t956 - (t971 * t853 + t821 + t962 + 0.6e1 * t986) * t759 + (t817 + (t808 + t827) * t853 + t758) * t1005) * t876 + (0.8e1 * (t752 + t949 + t765) * t935 + 0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t913 + 0.4e1 / 0.9e1 * t853 - t838 / 0.9e1 + t975) * t988 + t757 * t904 + t745 * t991 + (t985 + (t780 + t789 + t893) * t760) * t957) * t984 + 0.6e1 * (t959 * t949 + (t745 + t904) * t937 + t902) * t908 + t744 + (t745 * t992 + t736) * t942 + t902 * t936 + ((t771 + t928) * t853 + t978) * t906 + t840 + (-t838 + t853 + t972) * t855 + (t806 + (t813 + t816 + (6 * t853)) * t846 + t825 + (t814 + t1009) * t849) * t853 + t758 * t749) * t741);
t839 = 0.1e1 / pkin(4);
t990 = t839 / t853;
t685 = (t870 * t1000 - t876 * t875 / 0.4e1) * t990;
t686 = (t874 * t1000 + t876 * t870) * t990;
t737 = -t1006 * t801 - t993;
t738 = -t1006 * t804 + t994;
t672 = atan2(t685 * t737 + t686 * t738, -t685 * t738 + t686 * t737);
t670 = sin(t672);
t671 = cos(t672);
t938 = t839 * t1001;
t689 = atan2(t876 * t938, t938 * t1000);
t687 = sin(t689);
t688 = cos(t689);
t674 = t687 * t702 + t688 * t701;
t911 = -t687 * t701 + t702 * t688;
t1023 = t670 * t674 - t671 * t911;
t1022 = t670 * t911 + t671 * t674;
t997 = t725 / pkin(1);
t982 = t702 * pkin(3) - t760;
t981 = t702 * pkin(2) - t760;
t919 = t998 / 0.2e1;
t916 = t701 * pkin(3) - t1005;
t915 = t701 * pkin(2) - t1005;
t897 = g(1) * t804 + g(2) * t801;
t684 = atan2(t696, t695);
t682 = sin(t684);
t683 = cos(t684);
t891 = t682 * t702 + t683 * t701;
t890 = t682 * t701 - t683 * t702;
t740 = t897 * pkin(1);
t731 = -pkin(1) * t735 + pkin(5);
t727 = t732 + t823;
t717 = atan2((pkin(1) * t727 * t734 + t720 * t731) * t997 / 0.2e1, -(-pkin(1) * t999 + t727 * t731) * t997 / 0.2e1);
t716 = atan2(t719 * t919, t718 * t919);
t715 = cos(t717);
t714 = cos(t716);
t713 = sin(t717);
t712 = sin(t716);
t709 = -t712 * t801 + t714 * t804;
t708 = t712 * t804 + t714 * t801;
t707 = -t713 * t798 + t715 * t799;
t706 = t713 * t799 + t715 * t798;
t1 = [0, 0, 0, 0, 0, 0, t897, -g(1) * t801 + g(2) * t804, -g(3), 0, 0, 0, 0, 0, 0, 0, -g(1) * t702 - g(2) * t701, g(1) * t701 - g(2) * t702, -g(3), t740, 0, 0, 0, 0, 0, 0, -g(1) * t892 + g(2) * t665, -g(1) * t665 - g(2) * t892, -g(3), -g(1) * t981 - g(2) * t915, 0, 0, 0, 0, 0, 0, -g(1) * t911 - g(2) * t674, g(1) * t674 - g(2) * t911, -g(3), -g(1) * t982 - g(2) * t916, 0, 0, 0, 0, 0, 0, -g(1) * t707 - g(2) * t706, g(1) * t706 - g(2) * t707, -g(3), (-g(1) * t799 - g(2) * t798) * pkin(5), 0, 0, 0, 0, 0, 0, -g(1) * t890 + g(2) * t891, -g(1) * t891 - g(2) * t890, -g(3), t740, 0, 0, 0, 0, 0, 0, -g(1) * t1006 + g(2) * t803, -g(1) * t803 - g(2) * t1006, -g(3), -g(1) * pkin(7), 0, 0, 0, 0, 0, 0, -g(1) * t709 - g(2) * t708, g(1) * t708 - g(2) * t709, -g(3), t740, 0, 0, 0, 0, 0, 0, g(1) * t1025 - g(2) * t1024, g(1) * t1024 + g(2) * t1025, -g(3), -g(1) * (pkin(6) * t892 + t981) - g(2) * (-pkin(6) * t665 + t915), 0, 0, 0, 0, 0, 0, -g(1) * t1023 + g(2) * t1022, -g(1) * t1022 - g(2) * t1023, -g(3), -g(1) * (pkin(4) * t911 + t982) - g(2) * (pkin(4) * t674 + t916);];
U_reg = t1;
