% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% picker2Dm1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   11:  mdh base (link 0) -> mdh frame (11-1), link (11-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-10 08:43
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_c_mdh = picker2Dm1TE_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1TE_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1TE_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 00:07:18
% EndTime: 2020-05-10 00:07:30
% DurationCPUTime: 11.47s
% Computational Cost: add. (169449->476), mult. (439180->633), div. (8010->12), fcn. (131050->14), ass. (0->299)
t139 = cos(pkin(9));
t136 = sin(qJ(1));
t185 = (pkin(7) ^ 2);
t165 = -2 * t185;
t171 = pkin(4) ^ 2;
t176 = pkin(3) ^ 2;
t182 = pkin(1) ^ 2;
t180 = t182 ^ 2;
t138 = cos(qJ(1));
t107 = t138 ^ 2;
t364 = sin(qJ(2));
t302 = pkin(3) * t364;
t279 = pkin(7) * t302;
t270 = 0.2e1 * t279;
t254 = t185 + t270;
t200 = t364 ^ 2;
t345 = t176 * t200;
t312 = 0.2e1 * t345;
t237 = -t176 + t254 + t312;
t231 = t107 * t237;
t245 = t182 + t254;
t243 = -t171 + t245;
t264 = t302 + pkin(7);
t249 = t264 * t138;
t137 = cos(qJ(2));
t350 = t137 * t136;
t306 = pkin(3) * t350;
t278 = pkin(1) * t306;
t100 = t182 + t185;
t287 = -t171 + t100;
t308 = pkin(1) * t350;
t309 = t364 * pkin(7);
t325 = t182 - t185;
t378 = 0.1e1 / pkin(3);
t355 = t378 / 0.2e1;
t386 = 0.1e1 / t355;
t216 = sqrt(-0.4e1 * pkin(1) * (0.2e1 * (-t308 + t309) * pkin(3) + t287) * t249 + 0.4e1 * t243 * t278 + 0.4e1 * t325 * t345 - 0.4e1 * t287 * t279 - t180 - (t185 - (t386 + pkin(4)) * pkin(4)) * (t185 + (t386 - pkin(4)) * pkin(4)) + (-0.4e1 * t231 + t165 + 0.2e1 * t171 - 0.4e1 * t176) * t182);
t167 = 0.2e1 * pkin(1);
t233 = t249 - t306;
t223 = 0.1e1 / (t167 * t233 + t176 + t245);
t322 = t185 + 0.3e1 * t182;
t375 = 0.2e1 * t176;
t262 = -t171 + t375 + t322;
t349 = t137 * t138;
t305 = pkin(3) * t349;
t374 = 0.4e1 * t176;
t209 = t223 * ((t136 * t264 + t305) * t216 - ((-0.4e1 * t308 + 0.2e1 * t309) * pkin(3) + t262) * t249 + (t270 + t262) * t306 + (-0.2e1 * t231 + t312 - t270 - t374 - t287) * pkin(1));
t208 = t378 * t209;
t194 = pkin(5) ^ 2;
t358 = sin(pkin(8));
t359 = cos(pkin(8));
t239 = t136 * t358 + t138 * t359;
t235 = pkin(5) * t239;
t232 = pkin(1) * t235;
t230 = 0.2e1 * t232;
t227 = 0.1e1 / (t230 + t182 + t194);
t377 = 0.1e1 / pkin(5);
t225 = t377 * t227;
t204 = t208 * t225;
t238 = t375 + t243;
t97 = pkin(1) * t138;
t318 = 0.2e1 * t97;
t96 = pkin(3) * t137;
t212 = t223 * ((pkin(1) + t233) * t216 + (t237 * t318 + t238 * t264) * t136 + (t138 * t238 + (0.4e1 * t107 - 0.2e1) * pkin(1) * t264) * t96);
t210 = t212 / 0.4e1;
t205 = t378 * t210 * t225;
t226 = 0.2e1 * t232 + 0.2e1 * t194;
t228 = -t235 - pkin(1);
t240 = -t136 * t359 + t138 * t358;
t236 = pkin(1) * t239;
t229 = -pkin(5) + 0.2e1 * t236;
t60 = sqrt(-(t194 + (-t167 + t229) * pkin(5)) * (t194 + (t167 + t229) * pkin(5)));
t234 = t60 * t240;
t219 = -pkin(5) * t234 - t226 * t228;
t220 = pkin(5) * t226 * t240 - t228 * t60;
t203 = t219 * t204 / 0.4e1 + t220 * t205;
t365 = sin(pkin(9));
t41 = -t220 * t204 / 0.4e1 + t219 * t205;
t38 = t139 * t203 + t365 * t41;
t168 = (pkin(6) ^ 2);
t166 = 2 * pkin(2);
t366 = pkin(6) * t38;
t37 = t366 * t166;
t33 = t37 + (2 * t168);
t35 = -pkin(2) - t366;
t354 = t168 + t37;
t26 = sqrt(-(-(t166 + pkin(6)) * pkin(6) + t354) * (pkin(6) * (t166 - pkin(6)) + t354));
t39 = t139 * t41 - t203 * t365;
t362 = t26 * t39;
t12 = pkin(6) * t362 - t33 * t35;
t14 = -pkin(6) * t33 * t39 - t26 * t35;
t169 = 0.1e1 / pkin(6);
t178 = pkin(2) ^ 2;
t32 = 0.1e1 / (t178 + t354);
t357 = t169 * t32;
t206 = -t208 / 0.2e1;
t211 = t378 * t212;
t48 = t138 * t206 + t136 * t211 / 0.2e1;
t367 = t48 / 0.2e1;
t47 = t136 * t206 - t138 * t211 / 0.2e1;
t368 = t47 / 0.2e1;
t381 = (t12 * t368 + t14 * t367) * t357;
t389 = t38 * t381;
t207 = t209 / 0.4e1;
t172 = 0.1e1 / pkin(4);
t346 = t172 / pkin(3) ^ 2;
t102 = -0.3e1 * t182 + t185;
t106 = t138 * t107;
t108 = 0.10e2 / 0.3e1 * t182;
t109 = -0.20e2 / 0.3e1 * t182;
t117 = -t171 / 0.6e1;
t118 = -t171 / 0.4e1;
t119 = -t171 / 0.3e1;
t120 = -t171 / 0.2e1;
t122 = -0.3e1 / 0.2e1 * t171;
t126 = 0.2e1 / 0.3e1 * t176;
t129 = -t176 / 0.3e1;
t131 = 0.4e1 / 0.3e1 * t182;
t133 = t182 / 0.2e1;
t140 = 0.15e2 * t180;
t142 = 0.10e2 * t182;
t147 = 18 * t185;
t148 = -0.2e1 * t171;
t149 = -0.5e1 * t171;
t150 = -0.6e1 * t171;
t190 = t176 ^ 2;
t151 = 0.5e1 * t190;
t154 = 0.7e1 * t180;
t155 = 0.5e1 * t180;
t156 = 0.6e1 * t182;
t157 = 0.2e1 * t182;
t184 = t185 ^ 2;
t159 = 3 * t184;
t160 = 8 * t185;
t161 = 6 * t185;
t162 = 4 * t185;
t163 = 3 * t185;
t164 = 2 * t185;
t170 = t171 ^ 2;
t189 = pkin(3) * t176;
t173 = t189 ^ 2;
t186 = pkin(1) * t182;
t195 = pkin(7) * t185;
t326 = t180 + t184;
t330 = t164 - t171;
t342 = t185 * t171;
t244 = t330 * t182 + t170 / 0.6e1 + t326 - t342;
t241 = 0.5e1 / 0.6e1 * t190 + t244;
t307 = t182 * t96;
t242 = t107 * (-t136 * t186 + t307);
t329 = t170 - t190;
t247 = (6 * t184) + t329 - 0.6e1 * t342;
t253 = t185 - t278;
t266 = -0.4e1 * t278;
t286 = t176 + t100;
t80 = t120 + t286;
t255 = t80 * t266;
t339 = t170 / 0.2e1 - t190 / 0.2e1;
t263 = -0.3e1 * t342 + t159 + t339;
t267 = -0.6e1 * t278;
t334 = 0.15e2 * t182 + t163;
t353 = t173 + t100 * ((t122 + t164) * t182 - 0.3e1 / 0.2e1 * t342 + t326 + t339);
t258 = ((t108 + t330) * t176 + t241) * t267 + (t140 + (t147 - 0.9e1 * t171) * t182 + t263) * t176 + (t122 + t334) * t190 + t353;
t285 = t176 + t322;
t363 = pkin(1) * t136;
t259 = t285 * t96 - t363 * (0.3e1 * t176 + t100);
t121 = -0.2e1 / 0.3e1 * t171;
t130 = -0.2e1 / 0.3e1 * t176;
t332 = t148 - 0.2e1 * t176;
t288 = t161 + t332;
t289 = t121 + t100;
t333 = t142 + t164;
t338 = t130 + t185;
t260 = -t363 * (t151 + (t142 + t288) * t176 + (t130 + t289) * t100) + (t190 + (t121 + t130 + t333) * t176 + t155 + t288 * t182 + t185 * (t121 + t338)) * t96;
t265 = -0.2e1 * t278;
t340 = t186 * t106;
t272 = t340 * t96;
t344 = t180 * t107 ^ 2;
t273 = t344 * t96;
t86 = t97 + pkin(7);
t274 = t86 * t302;
t290 = t121 + t126 + t164;
t352 = t190 + (t126 + t289) * t100;
t125 = 0.4e1 / 0.3e1 * t176;
t291 = t119 + t100;
t78 = t125 + t291;
t275 = t78 * t266 + t352 + (t156 + t290) * t176;
t301 = t364 * t200 * t189 * t86;
t277 = -0.8e1 * t301;
t303 = 0.16e2 * t340;
t282 = pkin(7) * t303;
t313 = pkin(7) * t340;
t284 = 0.8e1 * t313;
t127 = t176 / 0.3e1;
t292 = t117 + t127 + t185;
t293 = t171 / 0.3e1 + t127 + t164;
t294 = 0.2e1 / 0.3e1 * t171 + t126 + t162;
t295 = 0.4e1 / 0.3e1 * t171 + t125 + t165;
t348 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t296 = t136 * t348;
t316 = 0.6e1 * t97;
t297 = pkin(7) * t316;
t317 = 0.4e1 * t97;
t298 = pkin(7) * t317;
t299 = -t363 / 0.2e1;
t343 = t182 * t107;
t304 = 0.12e2 * t343;
t310 = 0.4e1 * t343;
t311 = 0.8e1 * t344;
t319 = 0.2e1 * t363;
t320 = pkin(7) * t97;
t321 = 0.4e1 * pkin(7);
t323 = t184 + t190;
t324 = t184 - t180;
t327 = -t176 + t185;
t331 = t149 - 0.5e1 * t176;
t335 = 0.4e1 / 0.7e1 * t185 - t171 / 0.7e1;
t336 = t133 + t185;
t337 = t182 / 0.3e1 + t185;
t341 = t185 * t182;
t347 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t351 = t200 ^ 2 * t190;
t95 = t100 ^ 2;
t360 = t95 * (-t176 + t287);
t373 = 0.4e1 * t180;
t376 = -0.6e1 * t176;
t379 = t163 - t171 - t176;
t380 = t118 + t176 / 0.2e1;
t69 = -t190 / 0.6e1 + t244;
t91 = t129 + t185;
t70 = t91 * t265;
t74 = t97 + t264;
t99 = -0.3e1 * t176 + t185;
t77 = t99 * t284;
t81 = t379 * t142;
t82 = -t171 + t286;
t87 = pkin(7) * t318;
t89 = (t162 + t171) * t182;
t92 = -t182 / 0.3e1 + t185;
t98 = -0.30e2 * t171 + (60 * t185);
t361 = ((-0.24e2 * (0.4e1 / 0.3e1 * t343 + t87 + t92) * t351 * t363 + (0.4e1 * t242 + (t96 + t319) * t87 + t102 * t96 + (t120 + t285) * t319) * t277 - 0.12e2 * (-0.8e1 / 0.3e1 * t273 + ((t131 + t292) * t96 - (0.7e1 / 0.6e1 * t176 + t117 + t336) * t363) * t310 + (-t176 * t325 - 0.5e1 / 0.3e1 * t180 + t293 * t182 + t185 * (t119 + t91)) * t96 + (-t190 + (t109 + t294) * t176 - 0.3e1 * t180 + t295 * t182 + t184) * t299 + (-t136 * t180 * t106 + ((t182 + t292) * t96 + (t375 - t325) * t299) * t97) * t321) * t345 - 0.6e1 * (-0.4e1 * ((0.5e1 / 0.6e1 * t176 + t133 + t117) * t137 * t386 + pkin(1) * t296) * t343 + (-0.8e1 * t272 + ((t119 + t126 + t322) * t96 - (0.8e1 / 0.3e1 * t176 + t291) * t363) * t317) * pkin(7) + t260) * t274 + 0.24e2 * t91 * t273 + ((t185 + 0.5e1 / 0.2e1 * t176 + 0.3e1 / 0.2e1 * t182 + t120) * t96 + t99 * t363 / 0.2e1) * t282 - 0.6e1 * ((-0.3e1 * t190 + (t109 + t295) * t176 + t294 * t182 + t324) * t96 - 0.2e1 * (-0.5e1 / 0.3e1 * t190 + (-t182 + t293) * t176 + t185 * (t129 + t291)) * t363) * t343 - 0.6e1 * t260 * t320 - (t173 + (0.21e2 * t182 + t379) * t190 + (t185 * t332 + t159 + 0.35e2 * t180 + t81) * t176 + (t154 + (t160 + t331) * t182 + t185 * (-t171 + t327)) * t100) * t96 + (0.7e1 * t173 + (0.35e2 * t182 + (15 * t185) + t331) * t190 + (0.21e2 * t180 + t81 + (9 * t184) + (t150 + t376) * t185) * t176 + t360) * t363) * t216 + (0.16e2 * (t311 + t282 + (-0.8e1 * t180 + 0.12e2 * t341) * t107 + (0.4e1 * pkin(1) * t195 - 0.12e2 * pkin(7) * t186) * t138 - 0.6e1 * t341 + t326) * t351 + 0.32e2 * (t284 + (-0.4e1 * t186 * t306 + t373 + (t374 + t148 + t160) * t182) * t107 + (-t182 + t253 + t380) * t298 + t265 * t347 + t102 * t80) * t301 + 0.24e2 * (t338 * t311 + 0.14e2 * (-0.32e2 / 0.21e2 * (t185 + t176 / 0.4e1 + t182 / 0.4e1 - t171 / 0.8e1) * t278 + 0.5e1 / 0.42e2 * t190 + (0.16e2 / 0.21e2 * t182 + t335) * t176 + t180 / 0.7e1 + t335 * t182 + t184 - 0.3e1 / 0.7e1 * t342 + t170 / 0.42e2) * t343 + t92 * t255 - t325 * t190 + (-0.10e2 / 0.3e1 * t180 + (2 * t184) - t342 + t89) * t176 + t69 * t347 + ((-0.2e1 / 0.3e1 * t278 + t118 + t336) * t303 + (-0.8e1 / 0.3e1 * (t337 + t380) * t278 + 0.5e1 / 0.18e2 * t190 + (0.4e1 / 0.3e1 * t185 + t131 + t119) * t176 + t184 + 0.2e1 / 0.3e1 * t341 - 0.2e1 / 0.3e1 * t342 - t180 / 0.3e1 + t170 / 0.18e2) * t316) * pkin(7)) * t345 + 0.8e1 * (t77 + (t348 * t80 + t70) * t304 + (t255 + (t156 + t330) * t176 + t241) * t297 + t258) * t274 + 0.16e2 * (t185 * t376 + t323) * t344 + 0.32e2 * (t265 * t348 + t80 * t99) * t313 + 0.24e2 * (t91 * t255 - t173 + (-t185 + t171 - t108) * t190 + (t89 + t190 / 0.6e1 - t170 / 0.6e1 + t324) * t176 + t69 * t185) * t343 + 0.8e1 * t258 * t320 - 0.8e1 * ((t122 + t163 + 0.7e1 * t182) * t190 + (t154 + (t149 + (10 * t185)) * t182 + t263) * t176 + t353) * t278 + t190 ^ 2 + (t148 + t162 + 0.28e2 * t182) * t173 + (t182 * t98 + 0.70e2 * t180 + t247) * t190 + (t184 * t150 + t247 * t156 + t329 * t164 + t98 * t180 + 0.28e2 * t186 ^ 2 + 0.4e1 * t195 ^ 2) * t176 + t82 * t360) * t74) / ((t277 * t363 - 0.4e1 * (0.2e1 * t242 - t325 * t96 + (0.2e1 * pkin(7) * t305 + t136 * (t157 + t176)) * pkin(1)) * t345 - 0.4e1 * (-0.2e1 * t107 * t307 + (t96 - t363) * t87 + t259) * t274 + 0.8e1 * pkin(7) * t272 + ((pkin(3) * t373 + 0.8e1 * t182 * t189) * t137 + 0.4e1 * t186 * t296) * t107 - 0.4e1 * t259 * t320 - (t176 * t333 + t155 + t323 + 0.6e1 * t341) * t96 + (t151 + (t142 + t161) * t176 + t95) * t363) * t216 + (0.8e1 * (t87 + t310 + t102) * t301 + 0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t278 + 0.4e1 / 0.9e1 * t176 - t171 / 0.9e1 + t337) * t343 + t92 * t265 + t78 * t347 + (t340 + (t117 + t126 + t253) * t97) * t321) * t345 + 0.6e1 * (t327 * t310 + (t78 + t265) * t298 + t275) * t274 + t77 + (t348 * t78 + t70) * t304 + t275 * t297 + ((t108 + t290) * t176 + t352) * t267 + t173 + (-t171 + t176 + t334) * t190 + (t140 + (t147 + t150 + 0.6e1 * t176) * t182 + t159 + (t148 + t375) * t185) * t176 + t95 * t82) * t74);
t27 = (t207 * t361 - t216 * t212 / 0.4e1) * t346;
t28 = (t207 * t216 + t210 * t361) * t346;
t71 = -t136 * t364 - t349;
t72 = -t138 * t364 + t350;
t16 = t27 * t71 + t28 * t72;
t17 = t27 * t72 - t28 * t71;
t215 = t378 * t216;
t276 = t355 * t361;
t214 = (-t47 * t215 / 0.2e1 + t48 * t276) * t172;
t382 = (t215 * t367 + t276 * t47) * t172;
t388 = t16 * t382 + t17 * t214;
t387 = -t16 * t214 + t17 * t382;
t248 = (-t48 * t12 / 0.2e1 + t14 * t368) * t357;
t383 = t248 * t38;
t34 = t37 + (2 * t178);
t36 = pkin(2) * t38 + pkin(6);
t13 = pkin(2) * t362 + t34 * t36;
t372 = t13 / 0.2e1;
t15 = -pkin(2) * t34 * t39 + t26 * t36;
t371 = -t15 / 0.2e1;
t21 = t38 * t47 - t39 * t48;
t370 = -t21 / 0.2e1;
t283 = -t38 * t48 - t39 * t47;
t369 = t283 / 0.2e1;
t179 = 1 / pkin(2);
t356 = t179 * t32;
t315 = pkin(5) * t358 + 0;
t314 = pkin(5) * t359 + 0;
t85 = -t97 + 0;
t300 = t169 * t179 * t26;
t281 = pkin(3) * t48 + t85;
t280 = pkin(2) * t48 + t85;
t183 = 0.1e1 / pkin(1);
t271 = -t183 * t60 * t377 / 0.2e1;
t84 = 0 - t363;
t269 = -t300 / 0.2e1;
t268 = t300 / 0.2e1;
t261 = pkin(6) * t248 + t280;
t257 = pkin(3) * t47 + t84;
t256 = pkin(2) * t47 + t84;
t217 = t219 * t225 / 0.2e1;
t218 = t220 * t225;
t53 = t136 * t217 + t138 * t218 / 0.2e1;
t54 = t138 * t217 - t136 * t218 / 0.2e1;
t251 = -t239 * t54 + t271 * t53;
t250 = -pkin(6) * t381 + t256;
t224 = t239 * t53 + t271 * t54;
t65 = t230 + t157;
t68 = t236 + pkin(5);
t222 = t227 * (pkin(1) * t240 * t65 + t68 * t60);
t221 = -t227 * (-pkin(1) * t234 + t68 * t65) / 0.2e1;
t52 = (t359 * t221 - t358 * t222 / 0.2e1) * t183;
t51 = (t358 * t221 + t359 * t222 / 0.2e1) * t183;
t4 = t269 * t381 + t383;
t3 = t248 * t269 - t389;
t2 = t248 * t268 + t389;
t1 = -t268 * t381 + t383;
t5 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t138, t136, 0, 0; -t136, -t138, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t48, -t47, 0, t85; t47, t48, 0, t84; 0, 0, 1, 0; 0, 0, 0, 1; t248, t381, 0, t280; -t381, t248, 0, t256; 0, 0, 1, 0; 0, 0, 0, 1; t214, -t382, 0, t281; t382, t214, 0, t257; 0, 0, 1, 0; 0, 0, 0, 1; t52, -t51, 0, t314; t51, t52, 0, t315; 0, 0, 1, 0; 0, 0, 0, 1; t283, t21, 0, t85; -t21, t283, 0, t84; 0, 0, 1, 0; 0, 0, 0, 1; t364, t137, 0, pkin(7) + 0; -t137, t364, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t54, -t53, 0, t85; t53, t54, 0, t84; 0, 0, 1, 0; 0, 0, 0, 1; t4, t2, 0, t261; t3, t1, 0, t250; 0, 0, 1, 0; 0, 0, 0, 1; t388, -t387, 0, pkin(4) * t214 + t281; t387, t388, 0, pkin(4) * t382 + t257; 0, 0, 1, 0; 0, 0, 0, 1; t251, t224, 0, pkin(5) * t54 + t85; -t224, t251, 0, pkin(5) * t53 + t84; 0, 0, 1, 0; 0, 0, 0, 1; (t13 * t369 + t21 * t371) * t356, (t15 * t369 + t21 * t372) * t356, 0, pkin(6) * t283 + t85; (t13 * t370 + t283 * t371) * t356, (t15 * t370 + t283 * t372) * t356, 0, -pkin(6) * t21 + t84; 0, 0, 1, 0; 0, 0, 0, 1; t364, t137, 0, 0 + t264; -t137, t364, 0, -t96 + 0; 0, 0, 1, 0; 0, 0, 0, 1; t52, -t51, 0, pkin(1) * t52 + t314; t51, t52, 0, pkin(1) * t51 + t315; 0, 0, 1, 0; 0, 0, 0, 1; t4, t2, 0, pkin(2) * t4 + t261; t3, t1, 0, pkin(2) * t3 + t250; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t5;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
