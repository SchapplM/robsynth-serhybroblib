% Calculate homogenous joint transformation matrices for
% picker2Dm1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_mdh [4x4x15]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-10 08:43
% Revision: 73758128893bc0a8beabae04bd7e71472107ac81 (2020-05-07)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = picker2Dm1TE_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1TE_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1TE_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 00:07:30
% EndTime: 2020-05-10 00:07:36
% DurationCPUTime: 5.13s
% Computational Cost: add. (25276->415), mult. (68438->569), div. (1050->11), fcn. (18022->14), ass. (0->264)
t710 = 4 * pkin(1);
t547 = pkin(4) ^ 2;
t490 = -t547 / 0.4e1;
t552 = pkin(3) ^ 2;
t709 = t490 + t552 / 0.2e1;
t708 = 2 * pkin(7);
t540 = 2 * pkin(2);
t507 = sin(pkin(8));
t508 = cos(pkin(8));
t511 = sin(qJ(1));
t513 = cos(qJ(1));
t434 = t507 * t513 - t508 * t511;
t707 = 0.2e1 * t434;
t480 = t513 ^ 2;
t706 = -0.2e1 * t480;
t525 = 0.2e1 * t552;
t705 = 0.4e1 * t552;
t559 = pkin(1) ^ 2;
t557 = t559 ^ 2;
t704 = 4 * t557;
t703 = 2 * t559;
t529 = 6 * t559;
t562 = pkin(7) ^ 2;
t537 = 2 * t562;
t567 = t552 ^ 2;
t524 = 0.5e1 * t567;
t510 = sin(qJ(2));
t466 = pkin(3) * t510;
t456 = t466 * t708;
t477 = t510 ^ 2;
t675 = t552 * t477;
t638 = 0.2e1 * t675;
t653 = -t552 + t562;
t436 = t456 + t638 + t653;
t512 = cos(qJ(2));
t680 = t511 * t512;
t634 = pkin(3) * t680;
t601 = pkin(1) * t634;
t448 = -0.2e1 * t601;
t539 = 0.2e1 * pkin(3);
t472 = t559 + t562;
t612 = -t547 + t472;
t594 = t456 + t612;
t673 = t559 * t480;
t636 = -0.4e1 * t673;
t642 = -0.4e1 * t466;
t651 = t559 - t562;
t654 = t547 - t562;
t454 = t466 + pkin(7);
t686 = t454 * t513;
t418 = sqrt(t436 * t636 + 0.4e1 * t651 * t675 + pkin(7) * t612 * t642 - t557 + (-0.2e1 * t552 + t654) * t703 - (t562 - (t539 + pkin(4)) * pkin(4)) * (t562 + (t539 - pkin(4)) * pkin(4)) + (-(t448 + t594) * t686 + t594 * t634) * t710);
t590 = -pkin(1) + t634;
t530 = 3 * t559;
t591 = t525 + t530 - t654;
t596 = -0.4e1 * t601;
t679 = t512 * t513;
t633 = pkin(3) * t679;
t415 = (t454 * t511 + t633) * t418 - (t456 + t591 + t596) * t686 + t590 * t456 + t591 * t634 + (t436 * t706 - t612 + t638 - t705) * pkin(1);
t702 = t415 / 0.4e1;
t441 = t525 + t594;
t467 = pkin(3) * t512;
t468 = pkin(1) * t513;
t645 = 0.2e1 * t468;
t416 = (-t590 + t686) * t418 + (t436 * t645 + t441 * t454) * t511 + (t441 * t513 + (0.4e1 * t480 - 0.2e1) * t454 * pkin(1)) * t467;
t701 = t416 / 0.4e1;
t700 = -t507 / 0.2e1;
t455 = t468 + pkin(7);
t699 = sin(pkin(9));
t698 = pkin(1) * t511;
t435 = -t507 * t511 - t508 * t513;
t697 = pkin(5) * t435;
t544 = pkin(5) ^ 2;
t641 = pkin(1) * t697;
t589 = t544 - t641;
t610 = -pkin(1) + t697;
t541 = 2 * pkin(1);
t667 = -0.2e1 * t641 + t544;
t421 = sqrt(-(-(t541 + pkin(5)) * pkin(5) + t667) * (pkin(5) * (t541 - pkin(5)) + t667));
t691 = t421 * t434;
t580 = -pkin(5) * t691 - 0.2e1 * t589 * t610;
t581 = pkin(5) * t589 * t707 - t421 * t610;
t427 = 0.1e1 / (t559 + t667);
t545 = 0.1e1 / pkin(5);
t689 = t427 * t545;
t611 = t552 + t472;
t424 = 0.1e1 / (t454 * t645 + t448 + t456 + t611);
t553 = 0.1e1 / pkin(3);
t690 = t424 * t553;
t598 = t689 * t690;
t410 = (-t415 * t581 / 0.4e1 + t580 * t701) * t598;
t514 = cos(pkin(9));
t578 = (t580 * t702 + t581 * t701) * t598;
t407 = t410 * t699 + t514 * t578;
t696 = pkin(6) * t407;
t406 = t696 * t540;
t542 = pkin(6) ^ 2;
t669 = t406 + t542;
t396 = sqrt(-(-(t540 + pkin(6)) * pkin(6) + t669) * (pkin(6) * (t540 - pkin(6)) + t669));
t408 = t410 * t514 - t578 * t699;
t695 = t396 * t408;
t546 = t547 ^ 2;
t561 = t562 ^ 2;
t652 = t557 + t561;
t657 = t537 - t547;
t672 = t562 * t547;
t583 = t657 * t559 + t546 / 0.6e1 + t652 - t672;
t433 = -t567 / 0.6e1 + t583;
t501 = -t552 / 0.3e1;
t462 = t501 + t562;
t437 = t462 * t448;
t443 = t466 + t455;
t471 = -0.3e1 * t552 + t562;
t479 = t513 * t480;
t563 = pkin(1) * t559;
t670 = t563 * t479;
t640 = pkin(7) * t670;
t604 = 0.8e1 * t640;
t446 = t471 * t604;
t470 = -t547 - t552;
t536 = 3 * t562;
t458 = t536 + t470;
t685 = t458 * t559;
t447 = 0.10e2 * t685;
t497 = 0.4e1 / 0.3e1 * t552;
t491 = -t547 / 0.3e1;
t617 = t491 + t472;
t449 = t497 + t617;
t492 = -t547 / 0.2e1;
t451 = t492 + t611;
t452 = -t547 + t611;
t457 = pkin(7) * t645;
t535 = 4 * t562;
t460 = (t535 + t547) * t559;
t463 = -t559 / 0.3e1 + t562;
t464 = 0.10e2 / 0.3e1 * t559;
t465 = t472 ^ 2;
t469 = -0.30e2 * t547 + (60 * t562);
t474 = -3 * t559 + t562;
t489 = -t547 / 0.6e1;
t498 = 0.2e1 / 0.3e1 * t552;
t503 = 0.4e1 / 0.3e1 * t559;
t505 = t559 / 0.2e1;
t515 = 15 * t557;
t516 = 15 * t559;
t517 = 10 * t559;
t522 = -0.2e1 * t547;
t523 = -0.5e1 * t547;
t526 = 7 * t557;
t527 = 5 * t557;
t528 = 7 * t559;
t533 = 3 * t561;
t534 = 8 * t562;
t566 = pkin(3) * t552;
t549 = t566 ^ 2;
t571 = pkin(7) * t562;
t582 = 0.5e1 / 0.6e1 * t567 + t583;
t584 = t562 - t601;
t665 = t546 / 0.2e1 - t567 / 0.2e1;
t593 = -0.3e1 * t672 + t533 + t665;
t597 = -0.6e1 * t601;
t494 = -0.3e1 / 0.2e1 * t547;
t664 = t494 + t536;
t668 = t472 * ((t494 + t537) * t559 - 0.3e1 / 0.2e1 * t672 + t652 + t665) + t549;
t585 = ((t464 + t657) * t552 + t582) * t597 + (t515 + (-0.9e1 * t547 + (18 * t562)) * t559 + t593) * t552 + (t516 + t664) * t567 + t668;
t586 = t451 * t596;
t658 = t530 + t562;
t614 = t552 + t658;
t587 = -(0.3e1 * t552 + t472) * t698 + t614 * t467;
t493 = -0.2e1 / 0.3e1 * t547;
t502 = -0.2e1 / 0.3e1 * t552;
t615 = t493 + t472;
t659 = t517 + t537;
t663 = t502 + t562;
t588 = -(t524 + ((5 * t559) + t458) * t525 + (t502 + t615) * t472) * t698 + (t567 + (t493 + t502 + t659) * t552 + t527 + 0.2e1 * t685 + t562 * (t493 + t663)) * t467;
t656 = t546 - t567;
t592 = -0.6e1 * t672 + (6 * t561) + t656;
t616 = t493 + t498 + t537;
t666 = (t498 + t615) * t472 + t567;
t595 = t449 * t596 + (t529 + t616) * t552 + t666;
t632 = t563 * t467;
t599 = t479 * t632;
t674 = t557 * t480 ^ 2;
t600 = t674 * t467;
t629 = 0.16e2 * t670;
t602 = pkin(7) * t629;
t603 = 0.20e2 / 0.3e1 * t559;
t655 = -t547 + t552;
t613 = t536 + t655;
t499 = t552 / 0.3e1;
t618 = t489 + t499 + t562;
t619 = t547 / 0.3e1 + t499 + t537;
t620 = 0.2e1 / 0.3e1 * t547 + t498 + t535;
t621 = 0.4e1 / 0.3e1 * t547 + t497 - (2 * t562);
t678 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t624 = t511 * t678;
t643 = 0.6e1 * t468;
t626 = pkin(7) * t643;
t644 = 0.4e1 * t468;
t627 = pkin(7) * t644;
t628 = -t698 / 0.2e1;
t630 = 0.12e2 * t673;
t631 = t559 * t467;
t635 = 0.4e1 * t673;
t637 = 0.8e1 * t674;
t681 = t510 * t477 * t566;
t639 = -0.8e1 * t681;
t646 = 0.2e1 * t698;
t647 = pkin(7) * t468;
t648 = 4 * pkin(7);
t649 = t561 + t567;
t650 = t561 - t557;
t660 = 0.4e1 / 0.7e1 * t562 - t547 / 0.7e1;
t661 = t505 + t562;
t662 = t559 / 0.3e1 + t562;
t671 = t562 * t559;
t677 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t682 = t477 ^ 2 * t567;
t683 = t470 * t562;
t684 = t465 * (-t552 + t612);
t687 = (-t511 * t563 + t631) * t480;
t694 = ((-0.24e2 * (0.4e1 / 0.3e1 * t673 + t457 + t463) * t682 * t698 - 0.12e2 * (-0.8e1 / 0.3e1 * t600 + ((t503 + t618) * t467 - (0.7e1 / 0.6e1 * t552 + t489 + t661) * t698) * t635 + (-t552 * t651 - 0.5e1 / 0.3e1 * t557 + t619 * t559 + t562 * (t491 + t462)) * t467 + (-t567 + (-t603 + t620) * t552 - (3 * t557) + t621 * t559 + t561) * t628 + (-t511 * t557 * t479 + ((t559 + t618) * t467 + (t525 - t651) * t628) * t468) * t648) * t675 + 0.24e2 * t462 * t600 + ((t562 + 0.5e1 / 0.2e1 * t552 + 0.3e1 / 0.2e1 * t559 + t492) * t467 + t471 * t698 / 0.2e1) * t602 - 0.6e1 * ((-0.3e1 * t567 + (-t603 + t621) * t552 + t620 * t559 + t650) * t467 - 0.2e1 * (-0.5e1 / 0.3e1 * t567 + (-t559 + t619) * t552 + t562 * (t501 + t617)) * t698) * t673 - 0.6e1 * t588 * t647 - (t549 + ((21 * t559) + t458) * t567 + (t447 + t533 + (35 * t557) + 0.2e1 * t683) * t552 + (t526 + (t523 + t534 - 0.5e1 * t552) * t559 + t562 * (-t547 + t653)) * t472) * t467 + (0.7e1 * t549 + (t528 + t458) * t524 + (t447 + (21 * t557) + (9 * t561) + 0.6e1 * t683) * t552 + t684) * t698) * t418 + (0.16e2 * (t637 + t602 + (-8 * t557 + 12 * t671) * t480 + (-12 * pkin(7) * t563 + t571 * t710) * t513 - (6 * t671) + t652) * t682 + 0.24e2 * (t663 * t637 + 0.14e2 * (-0.32e2 / 0.21e2 * (t562 + t552 / 0.4e1 + t559 / 0.4e1 - t547 / 0.8e1) * t601 + 0.5e1 / 0.42e2 * t567 + (0.16e2 / 0.21e2 * t559 + t660) * t552 + t557 / 0.7e1 + t660 * t559 + t561 - 0.3e1 / 0.7e1 * t672 + t546 / 0.42e2) * t673 + t463 * t586 - t651 * t567 + (t460 - 0.10e2 / 0.3e1 * t557 + (2 * t561) - t672) * t552 + t433 * t677 + ((-0.2e1 / 0.3e1 * t601 + t490 + t661) * t629 + (-0.8e1 / 0.3e1 * (t662 + t709) * t601 + 0.5e1 / 0.18e2 * t567 + (0.4e1 / 0.3e1 * t562 + t503 + t491) * t552 + t561 + 0.2e1 / 0.3e1 * t671 - 0.2e1 / 0.3e1 * t672 - t557 / 0.3e1 + t546 / 0.18e2) * t643) * pkin(7)) * t675 + 0.16e2 * (-0.6e1 * t562 * t552 + t649) * t674 + 0.32e2 * (t448 * t678 + t451 * t471) * t640 + 0.24e2 * (t462 * t586 - t549 + (-t464 + t654) * t567 + (t460 + t567 / 0.6e1 - t546 / 0.6e1 + t650) * t552 + t433 * t562) * t673 + 0.8e1 * t585 * t647 - 0.8e1 * ((t528 + t664) * t567 + (t526 + (t523 + (10 * t562)) * t559 + t593) * t552 + t668) * t601 + t567 ^ 2 + (t522 + t535 + (28 * t559)) * t549 + (t469 * t559 + (70 * t557) + t592) * t567 + (t469 * t557 + t592 * t529 + t656 * t537 - 0.6e1 * t561 * t547 + (28 * t563 ^ 2) + (4 * t571 ^ 2)) * t552 + t452 * t684) * t443 + (((0.4e1 * t687 + (t467 + t646) * t457 + t474 * t467 + (t492 + t614) * t646) * t639 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t552 + t505 + t489) * t467 + pkin(1) * t624) * t636 + (-0.8e1 * t599 + ((t491 + t498 + t658) * t467 - (0.8e1 / 0.3e1 * t552 + t617) * t698) * t644) * pkin(7) + t588) * t466) * t418 + (0.32e2 * (t604 + (-0.4e1 * t511 * t632 + t704 + (t705 + t522 + t534) * t559) * t480 + (-t559 + t584 + t709) * t627 + t448 * t677 + t474 * t451) * t681 + 0.8e1 * (t446 + (t451 * t678 + t437) * t630 + (t586 + (t529 + t657) * t552 + t582) * t626 + t585) * t466) * t443) * t455) / ((-0.4e1 * (-t651 * t467 + 0.2e1 * t687 + (t633 * t708 + t511 * (t552 + t703)) * pkin(1)) * t675 + 0.8e1 * pkin(7) * t599 + ((pkin(3) * t704 + 0.8e1 * t559 * t566) * t512 + 0.4e1 * t563 * t624) * t480 - 0.4e1 * t587 * t647 - (t659 * t552 + t527 + t649 + (6 * t671)) * t467 + (t524 + (t517 + 6 * t562) * t552 + t465) * t698) * t418 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t601 + 0.4e1 / 0.9e1 * t552 - t547 / 0.9e1 + t662) * t673 + t463 * t448 + t449 * t677 + (t670 + (t489 + t498 + t584) * t468) * t648) * t675 + t446 + (t449 * t678 + t437) * t630 + t595 * t626 + ((t464 + t616) * t552 + t666) * t597 + t549 + (t516 + t613) * t567 + (t613 * t529 + t655 * t537 + t515 + t533) * t552 + t465 * t452) * t443 + ((t639 * t698 + (t631 * t706 + (t467 - t698) * t457 + t587) * t642) * t418 + (0.8e1 * (t457 + t635 + t474) * t681 + 0.6e1 * (t653 * t635 + (t448 + t449) * t627 + t595) * t466) * t443) * t455);
t555 = pkin(2) ^ 2;
t401 = 0.1e1 / (t555 + t669);
t543 = 0.1e1 / pkin(6);
t693 = t401 * t543;
t556 = 1 / pkin(2);
t692 = t401 * t556;
t560 = 1 / pkin(1);
t688 = t427 * t560;
t548 = 0.1e1 / pkin(4);
t676 = t548 * t553;
t625 = t424 * t548 / pkin(3) ^ 2;
t623 = t543 * t556 * t396;
t622 = t545 * t560 * t421;
t609 = t694 / 0.4e1;
t608 = -t693 / 0.2e1;
t607 = t692 / 0.2e1;
t606 = t690 / 0.2e1;
t605 = t676 / 0.2e1;
t579 = t581 * t689;
t439 = -t510 * t513 + t680;
t438 = -t510 * t511 - t679;
t431 = -pkin(1) * t435 + pkin(5);
t428 = t559 - t641;
t420 = pkin(1) * t428 * t707 + t421 * t431;
t419 = -pkin(1) * t691 + 0.2e1 * t428 * t431;
t417 = -t580 * t689 / 0.2e1;
t414 = t415 * t606;
t413 = (-t508 * t419 / 0.2e1 + t420 * t700) * t688;
t412 = (t419 * t700 + t508 * t420 / 0.2e1) * t688;
t405 = pkin(2) * t407 + pkin(6);
t404 = -pkin(2) - t696;
t403 = t406 + (2 * t555);
t402 = t406 + 0.2e1 * t542;
t399 = t605 * t694;
t398 = (t416 * t609 + t418 * t702) * t625;
t397 = (t415 * t609 - t416 * t418 / 0.4e1) * t625;
t395 = t397 * t439 - t398 * t438;
t394 = t397 * t438 + t398 * t439;
t393 = -pkin(2) * t403 * t408 + t396 * t405;
t392 = -pkin(6) * t402 * t408 - t396 * t404;
t391 = (pkin(2) * t695 + t403 * t405) * t607;
t390 = (pkin(6) * t695 - t402 * t404) * t608;
t1 = [-t513, t511, 0, 0; -t511, -t513, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t414, -t416 * t690 / 0.2e1, 0, pkin(1); t416 * t606, t414, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t390, t392 * t693 / 0.2e1, 0, pkin(2); t392 * t608, t390, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t399, -t418 * t676 / 0.2e1, 0, pkin(3); t418 * t605, t399, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t413, -t412, 0, t508 * pkin(5); t412, t413, 0, t507 * pkin(5); 0, 0, 1, 0; 0, 0, 0, 1; -t407, -t408, 0, 0; t408, -t407, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t510, t512, 0, pkin(7); -t512, t510, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t417, t579 / 0.2e1, 0, pkin(1); -t579 / 0.2e1, t417, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t407, t623 / 0.2e1, 0, pkin(6); -t623 / 0.2e1, t407, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t395, t394, 0, pkin(4); -t394, t395, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t435, -t622 / 0.2e1, 0, pkin(5); t622 / 0.2e1, t435, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t391, t393 * t607, 0, pkin(6); -t393 * t692 / 0.2e1, t391, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(3); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(1); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(2); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,15);             % numerisch
else,                         T_mdh = sym('xx', [4,4,15]); end % symbolisch

for i = 1:15
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
