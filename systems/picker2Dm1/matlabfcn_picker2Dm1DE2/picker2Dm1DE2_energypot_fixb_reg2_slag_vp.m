% Calculate inertial parameters regressor of potential energy for
% picker2Dm1DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% U_reg [1x(2*10)]
%   inertial parameter regressor of Potential energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-11 05:26
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function U_reg = picker2Dm1DE2_energypot_fixb_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1DE2_energypot_fixb_reg2_slag_vp: qJ has to be [2x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'picker2Dm1DE2_energypot_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1DE2_energypot_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From energy_potential_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 23:50:25
% EndTime: 2020-05-10 23:50:33
% DurationCPUTime: 7.87s
% Computational Cost: add. (65151->453), mult. (176679->593), div. (2626->11), fcn. (45644->38), ass. (0->266)
t991 = 4 * pkin(1);
t838 = pkin(4) ^ 2;
t780 = -t838 / 0.4e1;
t843 = pkin(3) ^ 2;
t990 = t780 + t843 / 0.2e1;
t989 = 2 * pkin(7);
t831 = 2 * pkin(2);
t797 = sin(pkin(8));
t798 = cos(pkin(8));
t801 = sin(qJ(1));
t804 = cos(qJ(1));
t723 = t797 * t804 - t798 * t801;
t988 = 0.2e1 * t723;
t770 = t804 ^ 2;
t987 = -0.2e1 * t770;
t816 = 0.2e1 * t843;
t986 = 0.4e1 * t843;
t848 = pkin(1) ^ 2;
t846 = t848 ^ 2;
t985 = 4 * t846;
t984 = 2 * t848;
t820 = 6 * t848;
t851 = pkin(7) ^ 2;
t828 = 2 * t851;
t856 = t843 ^ 2;
t815 = 0.5e1 * t856;
t835 = pkin(5) ^ 2;
t724 = -t797 * t801 - t798 * t804;
t980 = pkin(5) * t724;
t927 = pkin(1) * t980;
t715 = t835 - t927;
t719 = -pkin(1) + t980;
t832 = 2 * pkin(1);
t953 = -0.2e1 * t927 + t835;
t708 = sqrt(-(-(t832 + pkin(5)) * pkin(5) + t953) * (pkin(5) * (t832 - pkin(5)) + t953));
t976 = t708 * t723;
t706 = -pkin(5) * t976 - 0.2e1 * t715 * t719;
t983 = t706 / 0.4e1;
t982 = 0.1e1 / pkin(6) / 0.2e1;
t758 = pkin(1) * t804;
t745 = t758 + pkin(7);
t981 = pkin(1) * t801;
t800 = sin(qJ(2));
t756 = pkin(3) * t800;
t803 = cos(qJ(2));
t757 = pkin(3) * t803;
t746 = t756 * t989;
t767 = t800 ^ 2;
t965 = t767 * t843;
t924 = 0.2e1 * t965;
t939 = -t843 + t851;
t725 = t746 + t924 + t939;
t964 = t801 * t803;
t920 = pkin(3) * t964;
t888 = pkin(1) * t920;
t738 = -0.2e1 * t888;
t830 = 0.2e1 * pkin(3);
t762 = t848 + t851;
t900 = -t838 + t762;
t881 = t746 + t900;
t959 = t848 * t770;
t922 = -0.4e1 * t959;
t928 = -0.4e1 * t756;
t937 = t848 - t851;
t940 = t838 - t851;
t744 = t756 + pkin(7);
t971 = t744 * t804;
t705 = sqrt(t725 * t922 + 0.4e1 * t937 * t965 + pkin(7) * t900 * t928 - t846 + (-0.2e1 * t843 + t940) * t984 - (t851 - (t830 + pkin(4)) * pkin(4)) * (t851 + (t830 - pkin(4)) * pkin(4)) + (-(t738 + t881) * t971 + t881 * t920) * t991);
t877 = -pkin(1) + t920;
t821 = 3 * t848;
t878 = t816 + t821 - t940;
t883 = -0.4e1 * t888;
t963 = t803 * t804;
t919 = pkin(3) * t963;
t703 = (t744 * t801 + t919) * t705 - (t746 + t878 + t883) * t971 + t877 * t746 + t878 * t920 + (t725 * t987 - t900 + t924 - t986) * pkin(1);
t730 = t816 + t881;
t931 = 0.2e1 * t758;
t704 = (-t877 + t971) * t705 + (t725 * t931 + t730 * t744) * t801 + (t730 * t804 + (0.4e1 * t770 - 0.2e1) * t744 * pkin(1)) * t757;
t707 = pkin(5) * t715 * t988 - t708 * t719;
t714 = 0.1e1 / (t848 + t953);
t974 = t714 / pkin(5);
t899 = t843 + t762;
t711 = 0.1e1 / (t744 * t931 + t738 + t746 + t899);
t844 = 0.1e1 / pkin(3);
t975 = t711 * t844;
t885 = t974 * t975;
t690 = (t703 * t983 + t704 * t707 / 0.4e1) * t885;
t691 = (-t703 * t707 / 0.4e1 + t704 * t983) * t885;
t802 = sin(pkin(9));
t805 = cos(pkin(9));
t688 = t690 * t805 + t691 * t802;
t979 = pkin(6) * t688;
t689 = t690 * t802 - t691 * t805;
t978 = pkin(6) * t689;
t837 = t838 ^ 2;
t850 = t851 ^ 2;
t938 = t846 + t850;
t943 = t828 - t838;
t958 = t851 * t838;
t868 = t943 * t848 + t837 / 0.6e1 + t938 - t958;
t722 = -t856 / 0.6e1 + t868;
t791 = -t843 / 0.3e1;
t752 = t791 + t851;
t726 = t752 * t738;
t733 = t756 + t745;
t761 = -0.3e1 * t843 + t851;
t769 = t804 * t770;
t852 = pkin(1) * t848;
t956 = t852 * t769;
t926 = pkin(7) * t956;
t893 = 0.8e1 * t926;
t736 = t761 * t893;
t760 = -t838 - t843;
t827 = 3 * t851;
t748 = t827 + t760;
t970 = t748 * t848;
t737 = 0.10e2 * t970;
t787 = 0.4e1 / 0.3e1 * t843;
t781 = -t838 / 0.3e1;
t905 = t781 + t762;
t739 = t787 + t905;
t782 = -t838 / 0.2e1;
t741 = t782 + t899;
t742 = -t838 + t899;
t747 = pkin(7) * t931;
t826 = 4 * t851;
t750 = (t826 + t838) * t848;
t753 = -t848 / 0.3e1 + t851;
t754 = 0.10e2 / 0.3e1 * t848;
t755 = t762 ^ 2;
t759 = -0.30e2 * t838 + (60 * t851);
t764 = -3 * t848 + t851;
t779 = -t838 / 0.6e1;
t788 = 0.2e1 / 0.3e1 * t843;
t793 = 0.4e1 / 0.3e1 * t848;
t795 = t848 / 0.2e1;
t806 = 15 * t846;
t807 = 15 * t848;
t808 = 10 * t848;
t813 = -0.2e1 * t838;
t814 = -0.5e1 * t838;
t817 = 7 * t846;
t818 = 5 * t846;
t819 = 7 * t848;
t824 = 3 * t850;
t825 = 8 * t851;
t855 = pkin(3) * t843;
t840 = t855 ^ 2;
t860 = pkin(7) * t851;
t867 = 0.5e1 / 0.6e1 * t856 + t868;
t869 = t851 - t888;
t951 = t837 / 0.2e1 - t856 / 0.2e1;
t880 = -0.3e1 * t958 + t824 + t951;
t884 = -0.6e1 * t888;
t784 = -0.3e1 / 0.2e1 * t838;
t950 = t784 + t827;
t954 = t762 * ((t784 + t828) * t848 - 0.3e1 / 0.2e1 * t958 + t938 + t951) + t840;
t870 = ((t754 + t943) * t843 + t867) * t884 + (t806 + (-0.9e1 * t838 + (18 * t851)) * t848 + t880) * t843 + (t807 + t950) * t856 + t954;
t871 = t741 * t883;
t944 = t821 + t851;
t902 = t843 + t944;
t875 = -(0.3e1 * t843 + t762) * t981 + t902 * t757;
t783 = -0.2e1 / 0.3e1 * t838;
t792 = -0.2e1 / 0.3e1 * t843;
t903 = t783 + t762;
t945 = t808 + t828;
t949 = t792 + t851;
t876 = -(t815 + ((5 * t848) + t748) * t816 + (t792 + t903) * t762) * t981 + (t856 + (t783 + t792 + t945) * t843 + t818 + 0.2e1 * t970 + t851 * (t783 + t949)) * t757;
t942 = t837 - t856;
t879 = -0.6e1 * t958 + (6 * t850) + t942;
t904 = t783 + t788 + t828;
t952 = (t788 + t903) * t762 + t856;
t882 = t739 * t883 + (t820 + t904) * t843 + t952;
t918 = t852 * t757;
t886 = t769 * t918;
t960 = t846 * t770 ^ 2;
t887 = t960 * t757;
t915 = 0.16e2 * t956;
t891 = pkin(7) * t915;
t892 = 0.20e2 / 0.3e1 * t848;
t941 = -t838 + t843;
t901 = t827 + t941;
t789 = t843 / 0.3e1;
t906 = t779 + t789 + t851;
t907 = t838 / 0.3e1 + t789 + t828;
t908 = 0.2e1 / 0.3e1 * t838 + t788 + t826;
t909 = 0.4e1 / 0.3e1 * t838 + t787 - (2 * t851);
t962 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t910 = t801 * t962;
t929 = 0.6e1 * t758;
t912 = pkin(7) * t929;
t930 = 0.4e1 * t758;
t913 = pkin(7) * t930;
t914 = -t981 / 0.2e1;
t916 = 0.12e2 * t959;
t917 = t848 * t757;
t921 = 0.4e1 * t959;
t923 = 0.8e1 * t960;
t966 = t800 * t767 * t855;
t925 = -0.8e1 * t966;
t932 = 0.2e1 * t981;
t933 = pkin(7) * t758;
t934 = 4 * pkin(7);
t935 = t850 + t856;
t936 = t850 - t846;
t946 = 0.4e1 / 0.7e1 * t851 - t838 / 0.7e1;
t947 = t795 + t851;
t948 = t848 / 0.3e1 + t851;
t957 = t851 * t848;
t961 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t967 = t767 ^ 2 * t856;
t968 = t760 * t851;
t969 = t755 * (-t843 + t900);
t972 = (-t801 * t852 + t917) * t770;
t977 = ((-0.24e2 * (0.4e1 / 0.3e1 * t959 + t747 + t753) * t967 * t981 - 0.12e2 * (-0.8e1 / 0.3e1 * t887 + ((t793 + t906) * t757 - (0.7e1 / 0.6e1 * t843 + t779 + t947) * t981) * t921 + (-t843 * t937 - 0.5e1 / 0.3e1 * t846 + t907 * t848 + t851 * (t781 + t752)) * t757 + (-t856 + (-t892 + t908) * t843 - (3 * t846) + t909 * t848 + t850) * t914 + (-t801 * t846 * t769 + ((t848 + t906) * t757 + (t816 - t937) * t914) * t758) * t934) * t965 + 0.24e2 * t752 * t887 + ((t851 + 0.5e1 / 0.2e1 * t843 + 0.3e1 / 0.2e1 * t848 + t782) * t757 + t761 * t981 / 0.2e1) * t891 - 0.6e1 * ((-0.3e1 * t856 + (-t892 + t909) * t843 + t908 * t848 + t936) * t757 - 0.2e1 * (-0.5e1 / 0.3e1 * t856 + (-t848 + t907) * t843 + t851 * (t791 + t905)) * t981) * t959 - 0.6e1 * t876 * t933 - (t840 + ((21 * t848) + t748) * t856 + (t737 + t824 + (35 * t846) + 0.2e1 * t968) * t843 + (t817 + (t814 + t825 - 0.5e1 * t843) * t848 + t851 * (-t838 + t939)) * t762) * t757 + (0.7e1 * t840 + (t819 + t748) * t815 + (t737 + (21 * t846) + (9 * t850) + 0.6e1 * t968) * t843 + t969) * t981) * t705 + (0.16e2 * (t923 + t891 + (-8 * t846 + 12 * t957) * t770 + (-12 * pkin(7) * t852 + t860 * t991) * t804 - (6 * t957) + t938) * t967 + 0.24e2 * (t949 * t923 + 0.14e2 * (-0.32e2 / 0.21e2 * (t851 + t843 / 0.4e1 + t848 / 0.4e1 - t838 / 0.8e1) * t888 + 0.5e1 / 0.42e2 * t856 + (0.16e2 / 0.21e2 * t848 + t946) * t843 + t846 / 0.7e1 + t946 * t848 + t850 - 0.3e1 / 0.7e1 * t958 + t837 / 0.42e2) * t959 + t753 * t871 - t937 * t856 + (t750 - 0.10e2 / 0.3e1 * t846 + (2 * t850) - t958) * t843 + t722 * t961 + ((-0.2e1 / 0.3e1 * t888 + t780 + t947) * t915 + (-0.8e1 / 0.3e1 * (t948 + t990) * t888 + 0.5e1 / 0.18e2 * t856 + (0.4e1 / 0.3e1 * t851 + t793 + t781) * t843 + t850 + 0.2e1 / 0.3e1 * t957 - 0.2e1 / 0.3e1 * t958 - t846 / 0.3e1 + t837 / 0.18e2) * t929) * pkin(7)) * t965 + 0.16e2 * (-0.6e1 * t851 * t843 + t935) * t960 + 0.32e2 * (t738 * t962 + t741 * t761) * t926 + 0.24e2 * (t752 * t871 - t840 + (-t754 + t940) * t856 + (t750 + t856 / 0.6e1 - t837 / 0.6e1 + t936) * t843 + t722 * t851) * t959 + 0.8e1 * t870 * t933 - 0.8e1 * ((t819 + t950) * t856 + (t817 + (t814 + (10 * t851)) * t848 + t880) * t843 + t954) * t888 + t856 ^ 2 + (t813 + t826 + (28 * t848)) * t840 + (t759 * t848 + (70 * t846) + t879) * t856 + (t759 * t846 + t879 * t820 + t942 * t828 - 0.6e1 * t850 * t838 + (28 * t852 ^ 2) + (4 * t860 ^ 2)) * t843 + t742 * t969) * t733 + (((0.4e1 * t972 + (t757 + t932) * t747 + t764 * t757 + (t782 + t902) * t932) * t925 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t843 + t795 + t779) * t757 + pkin(1) * t910) * t922 + (-0.8e1 * t886 + ((t781 + t788 + t944) * t757 - (0.8e1 / 0.3e1 * t843 + t905) * t981) * t930) * pkin(7) + t876) * t756) * t705 + (0.32e2 * (t893 + (-0.4e1 * t801 * t918 + t985 + (t986 + t813 + t825) * t848) * t770 + (-t848 + t869 + t990) * t913 + t738 * t961 + t764 * t741) * t966 + 0.8e1 * (t736 + (t741 * t962 + t726) * t916 + (t871 + (t820 + t943) * t843 + t867) * t912 + t870) * t756) * t733) * t745) / ((-0.4e1 * (-t937 * t757 + 0.2e1 * t972 + (t919 * t989 + t801 * (t843 + t984)) * pkin(1)) * t965 + 0.8e1 * pkin(7) * t886 + ((pkin(3) * t985 + 0.8e1 * t848 * t855) * t803 + 0.4e1 * t852 * t910) * t770 - 0.4e1 * t875 * t933 - (t945 * t843 + t818 + t935 + (6 * t957)) * t757 + (t815 + (t808 + 6 * t851) * t843 + t755) * t981) * t705 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t888 + 0.4e1 / 0.9e1 * t843 - t838 / 0.9e1 + t948) * t959 + t753 * t738 + t739 * t961 + (t956 + (t779 + t788 + t869) * t758) * t934) * t965 + t736 + (t739 * t962 + t726) * t916 + t882 * t912 + ((t754 + t904) * t843 + t952) * t884 + t840 + (t807 + t901) * t856 + (t901 * t820 + t941 * t828 + t806 + t824) * t843 + t755 * t742) * t733 + ((t925 * t981 + (t917 * t987 + (t757 - t981) * t747 + t875) * t928) * t705 + (0.8e1 * (t747 + t921 + t764) * t966 + 0.6e1 * (t939 * t921 + (t738 + t739) * t913 + t882) * t756) * t733) * t745);
t973 = t714 / pkin(1);
t896 = t975 / 0.2e1;
t695 = qJ(1) + atan2(t704 * t896, t703 * t896);
t687 = t979 * t831;
t833 = pkin(6) ^ 2;
t955 = t687 + t833;
t839 = 0.1e1 / pkin(4);
t911 = t711 * t839 / pkin(3) ^ 2;
t676 = sqrt(-(-(t831 + pkin(6)) * pkin(6) + t955) * (pkin(6) * (t831 - pkin(6)) + t955));
t685 = t687 + 0.2e1 * t833;
t686 = -pkin(2) - t979;
t897 = 0.1e1 / ((pkin(2) ^ 2) + t955) * t982;
t668 = atan2((-t676 * t686 + t685 * t978) * t897, (-t676 * t978 - t685 * t686) * t897) + t695;
t894 = t839 * t844 / 0.2e1;
t679 = atan2(t705 * t894, t894 * t977) + t695;
t898 = t977 / 0.4e1;
t895 = t974 / 0.2e1;
t694 = cos(t695);
t890 = -pkin(2) * t694 - t758;
t889 = -pkin(3) * t694 - t758;
t693 = sin(t695);
t874 = -pkin(2) * t693 - t981;
t873 = -pkin(3) * t693 - t981;
t872 = g(1) * t804 + g(2) * t801;
t731 = t872 * pkin(1);
t728 = -t800 * t804 + t964;
t727 = -t800 * t801 - t963;
t720 = -pkin(1) * t724 + pkin(5);
t716 = t848 - t927;
t702 = qJ(1) + atan2(t707 * t895, t706 * t895);
t701 = pkin(8) + atan2((pkin(1) * t716 * t988 + t708 * t720) * t973 / 0.2e1, -(-pkin(1) * t976 + 0.2e1 * t716 * t720) * t973 / 0.2e1);
t700 = cos(t702);
t699 = sin(t702);
t698 = cos(t701);
t697 = sin(t701);
t681 = (t703 * t705 / 0.4e1 + t704 * t898) * t911;
t680 = (t703 * t898 - t704 * t705 / 0.4e1) * t911;
t678 = cos(t679);
t677 = sin(t679);
t675 = atan2(t689, t688) + t695;
t674 = cos(t675);
t673 = sin(t675);
t672 = atan2(t680 * t727 + t681 * t728, -t680 * t728 + t681 * t727) + t679;
t671 = cos(t672);
t670 = sin(t672);
t667 = cos(t668);
t666 = sin(t668);
t665 = atan2(0.1e1 / pkin(2) * t676 * t982, -t688) + t668;
t664 = cos(t665);
t663 = sin(t665);
t1 = [0, 0, 0, 0, 0, 0, t872, -g(1) * t801 + g(2) * t804, -g(3), 0, 0, 0, 0, 0, 0, 0, g(1) * t694 + g(2) * t693, -g(1) * t693 + g(2) * t694, -g(3), t731, 0, 0, 0, 0, 0, 0, -g(1) * t667 - g(2) * t666, g(1) * t666 - g(2) * t667, -g(3), -g(1) * t890 - g(2) * t874, 0, 0, 0, 0, 0, 0, g(1) * t678 + g(2) * t677, -g(1) * t677 + g(2) * t678, -g(3), -g(1) * t889 - g(2) * t873, 0, 0, 0, 0, 0, 0, -g(1) * t698 - g(2) * t697, g(1) * t697 - g(2) * t698, -g(3), (-g(1) * t798 - g(2) * t797) * pkin(5), 0, 0, 0, 0, 0, 0, -g(1) * t674 - g(2) * t673, g(1) * t673 - g(2) * t674, -g(3), t731, 0, 0, 0, 0, 0, 0, -g(1) * t800 + g(2) * t803, -g(1) * t803 - g(2) * t800, -g(3), -g(1) * pkin(7), 0, 0, 0, 0, 0, 0, -g(1) * t700 - g(2) * t699, g(1) * t699 - g(2) * t700, -g(3), t731, 0, 0, 0, 0, 0, 0, g(1) * t664 + g(2) * t663, -g(1) * t663 + g(2) * t664, -g(3), -g(2) * (pkin(6) * t666 + t874) - g(1) * (pkin(6) * t667 + t890), 0, 0, 0, 0, 0, 0, -g(1) * t671 - g(2) * t670, g(1) * t670 - g(2) * t671, -g(3), -g(2) * (-pkin(4) * t677 + t873) - g(1) * (-pkin(4) * t678 + t889);];
U_reg = t1;
