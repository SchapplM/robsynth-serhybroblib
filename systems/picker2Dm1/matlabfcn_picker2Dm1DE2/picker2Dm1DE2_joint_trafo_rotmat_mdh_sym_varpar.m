% Calculate homogenous joint transformation matrices for
% picker2Dm1DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_mdh [4x4x15]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-11 05:26
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = picker2Dm1DE2_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1DE2_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1DE2_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 20:17:26
% EndTime: 2020-05-10 20:17:33
% DurationCPUTime: 6.88s
% Computational Cost: add. (50565->433), mult. (136866->558), div. (2100->11), fcn. (36114->44), ass. (0->276)
t682 = 4 * pkin(1);
t531 = pkin(4) ^ 2;
t473 = -t531 / 0.4e1;
t536 = pkin(3) ^ 2;
t681 = t473 + t536 / 0.2e1;
t680 = 2 * pkin(7);
t524 = 2 * pkin(2);
t490 = sin(pkin(8));
t491 = cos(pkin(8));
t494 = sin(qJ(1));
t497 = cos(qJ(1));
t417 = t490 * t497 - t491 * t494;
t679 = 0.2e1 * t417;
t463 = t497 ^ 2;
t678 = -0.2e1 * t463;
t509 = 0.2e1 * t536;
t677 = 0.4e1 * t536;
t543 = pkin(1) ^ 2;
t541 = t543 ^ 2;
t676 = 4 * t541;
t675 = 2 * t543;
t513 = 6 * t543;
t546 = pkin(7) ^ 2;
t521 = 2 * t546;
t551 = t536 ^ 2;
t508 = 0.5e1 * t551;
t528 = pkin(5) ^ 2;
t418 = -t490 * t494 - t491 * t497;
t672 = pkin(5) * t418;
t617 = pkin(1) * t672;
t409 = t528 - t617;
t413 = -pkin(1) + t672;
t525 = 2 * pkin(1);
t643 = -0.2e1 * t617 + t528;
t402 = sqrt(-(-(t525 + pkin(5)) * pkin(5) + t643) * (pkin(5) * (t525 - pkin(5)) + t643));
t666 = t402 * t417;
t397 = -pkin(5) * t666 - 0.2e1 * t409 * t413;
t674 = t397 / 0.4e1;
t673 = 0.1e1 / pkin(6) / 0.2e1;
t451 = pkin(1) * t497;
t438 = t451 + pkin(7);
t493 = sin(qJ(2));
t449 = pkin(3) * t493;
t496 = cos(qJ(2));
t450 = pkin(3) * t496;
t439 = t449 * t680;
t460 = t493 ^ 2;
t651 = t536 * t460;
t614 = 0.2e1 * t651;
t629 = -t536 + t546;
t419 = t439 + t614 + t629;
t655 = t494 * t496;
t610 = pkin(3) * t655;
t580 = pkin(1) * t610;
t431 = -0.2e1 * t580;
t523 = 0.2e1 * pkin(3);
t455 = t543 + t546;
t590 = -t531 + t455;
t573 = t439 + t590;
t649 = t543 * t463;
t612 = -0.4e1 * t649;
t619 = -0.4e1 * t449;
t627 = t543 - t546;
t630 = t531 - t546;
t437 = t449 + pkin(7);
t661 = t437 * t497;
t396 = sqrt(t419 * t612 + 0.4e1 * t627 * t651 + pkin(7) * t590 * t619 - t541 + (-0.2e1 * t536 + t630) * t675 - (t546 - (t523 + pkin(4)) * pkin(4)) * (t546 + (t523 - pkin(4)) * pkin(4)) + (-(t431 + t573) * t661 + t573 * t610) * t682);
t569 = -pkin(1) + t610;
t514 = 3 * t543;
t570 = t509 + t514 - t630;
t575 = -0.4e1 * t580;
t654 = t496 * t497;
t609 = pkin(3) * t654;
t394 = (t437 * t494 + t609) * t396 - (t439 + t570 + t575) * t661 + t569 * t439 + t570 * t610 + (t419 * t678 - t590 + t614 - t677) * pkin(1);
t424 = t509 + t573;
t622 = 0.2e1 * t451;
t395 = (-t569 + t661) * t396 + (t419 * t622 + t424 * t437) * t494 + (t424 * t497 + (0.4e1 * t463 - 0.2e1) * t437 * pkin(1)) * t450;
t398 = pkin(5) * t409 * t679 - t402 * t413;
t408 = 0.1e1 / (t543 + t643);
t529 = 0.1e1 / pkin(5);
t664 = t408 * t529;
t589 = t536 + t455;
t405 = 0.1e1 / (t437 * t622 + t431 + t439 + t589);
t537 = 0.1e1 / pkin(3);
t665 = t405 * t537;
t577 = t664 * t665;
t380 = (t394 * t674 + t395 * t398 / 0.4e1) * t577;
t381 = (-t394 * t398 / 0.4e1 + t395 * t674) * t577;
t495 = sin(pkin(9));
t498 = cos(pkin(9));
t378 = t380 * t498 + t381 * t495;
t671 = pkin(6) * t378;
t670 = t494 * pkin(1);
t377 = t671 * t524;
t526 = pkin(6) ^ 2;
t645 = t377 + t526;
t362 = sqrt(-(-(t524 + pkin(6)) * pkin(6) + t645) * (pkin(6) * (t524 - pkin(6)) + t645));
t379 = t380 * t495 - t381 * t498;
t669 = t362 * t379;
t530 = t531 ^ 2;
t545 = t546 ^ 2;
t628 = t541 + t545;
t633 = t521 - t531;
t648 = t546 * t531;
t563 = t633 * t543 + t530 / 0.6e1 + t628 - t648;
t416 = -t551 / 0.6e1 + t563;
t484 = -t536 / 0.3e1;
t445 = t484 + t546;
t420 = t445 * t431;
t426 = t449 + t438;
t454 = -0.3e1 * t536 + t546;
t462 = t497 * t463;
t547 = pkin(1) * t543;
t646 = t547 * t462;
t616 = pkin(7) * t646;
t583 = 0.8e1 * t616;
t429 = t454 * t583;
t453 = -t531 - t536;
t520 = 3 * t546;
t441 = t520 + t453;
t660 = t441 * t543;
t430 = 0.10e2 * t660;
t480 = 0.4e1 / 0.3e1 * t536;
t474 = -t531 / 0.3e1;
t595 = t474 + t455;
t432 = t480 + t595;
t475 = -t531 / 0.2e1;
t434 = t475 + t589;
t435 = -t531 + t589;
t440 = pkin(7) * t622;
t519 = 4 * t546;
t443 = (t519 + t531) * t543;
t446 = -t543 / 0.3e1 + t546;
t447 = 0.10e2 / 0.3e1 * t543;
t448 = t455 ^ 2;
t452 = -0.30e2 * t531 + (60 * t546);
t457 = -3 * t543 + t546;
t472 = -t531 / 0.6e1;
t481 = 0.2e1 / 0.3e1 * t536;
t486 = 0.4e1 / 0.3e1 * t543;
t488 = t543 / 0.2e1;
t499 = 15 * t541;
t500 = 15 * t543;
t501 = 10 * t543;
t506 = -0.2e1 * t531;
t507 = -0.5e1 * t531;
t510 = 7 * t541;
t511 = 5 * t541;
t512 = 7 * t543;
t517 = 3 * t545;
t518 = 8 * t546;
t550 = pkin(3) * t536;
t533 = t550 ^ 2;
t555 = pkin(7) * t546;
t562 = 0.5e1 / 0.6e1 * t551 + t563;
t564 = t546 - t580;
t641 = t530 / 0.2e1 - t551 / 0.2e1;
t572 = -0.3e1 * t648 + t517 + t641;
t576 = -0.6e1 * t580;
t477 = -0.3e1 / 0.2e1 * t531;
t640 = t477 + t520;
t644 = t455 * ((t477 + t521) * t543 - 0.3e1 / 0.2e1 * t648 + t628 + t641) + t533;
t565 = ((t447 + t633) * t536 + t562) * t576 + (t499 + (-0.9e1 * t531 + (18 * t546)) * t543 + t572) * t536 + (t500 + t640) * t551 + t644;
t566 = t434 * t575;
t634 = t514 + t546;
t592 = t536 + t634;
t567 = -(0.3e1 * t536 + t455) * t670 + t592 * t450;
t476 = -0.2e1 / 0.3e1 * t531;
t485 = -0.2e1 / 0.3e1 * t536;
t593 = t476 + t455;
t635 = t501 + t521;
t639 = t485 + t546;
t568 = -(t508 + ((5 * t543) + t441) * t509 + (t485 + t593) * t455) * t670 + (t551 + (t476 + t485 + t635) * t536 + t511 + 0.2e1 * t660 + t546 * (t476 + t639)) * t450;
t632 = t530 - t551;
t571 = -0.6e1 * t648 + (6 * t545) + t632;
t594 = t476 + t481 + t521;
t642 = (t481 + t593) * t455 + t551;
t574 = t432 * t575 + (t513 + t594) * t536 + t642;
t608 = t547 * t450;
t578 = t462 * t608;
t650 = t541 * t463 ^ 2;
t579 = t650 * t450;
t605 = 0.16e2 * t646;
t581 = pkin(7) * t605;
t582 = 0.20e2 / 0.3e1 * t543;
t631 = -t531 + t536;
t591 = t520 + t631;
t482 = t536 / 0.3e1;
t596 = t472 + t482 + t546;
t597 = t531 / 0.3e1 + t482 + t521;
t598 = 0.2e1 / 0.3e1 * t531 + t481 + t519;
t599 = 0.4e1 / 0.3e1 * t531 + t480 - (2 * t546);
t653 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t600 = t494 * t653;
t620 = 0.6e1 * t451;
t602 = pkin(7) * t620;
t621 = 0.4e1 * t451;
t603 = pkin(7) * t621;
t604 = -t670 / 0.2e1;
t606 = 0.12e2 * t649;
t607 = t543 * t450;
t611 = 0.4e1 * t649;
t613 = 0.8e1 * t650;
t656 = t493 * t460 * t550;
t615 = -0.8e1 * t656;
t618 = 0.2e1 * t670;
t623 = pkin(7) * t451;
t624 = 4 * pkin(7);
t625 = t545 + t551;
t626 = t545 - t541;
t636 = 0.4e1 / 0.7e1 * t546 - t531 / 0.7e1;
t637 = t488 + t546;
t638 = t543 / 0.3e1 + t546;
t647 = t546 * t543;
t652 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t657 = t460 ^ 2 * t551;
t658 = t453 * t546;
t659 = t448 * (-t536 + t590);
t662 = (-t494 * t547 + t607) * t463;
t668 = ((-0.24e2 * (0.4e1 / 0.3e1 * t649 + t440 + t446) * t657 * t670 - 0.12e2 * (-0.8e1 / 0.3e1 * t579 + ((t486 + t596) * t450 - (0.7e1 / 0.6e1 * t536 + t472 + t637) * t670) * t611 + (-t536 * t627 - 0.5e1 / 0.3e1 * t541 + t597 * t543 + t546 * (t474 + t445)) * t450 + (-t551 + (-t582 + t598) * t536 - (3 * t541) + t599 * t543 + t545) * t604 + (-t494 * t541 * t462 + ((t543 + t596) * t450 + (t509 - t627) * t604) * t451) * t624) * t651 + 0.24e2 * t445 * t579 + ((t546 + 0.5e1 / 0.2e1 * t536 + 0.3e1 / 0.2e1 * t543 + t475) * t450 + t454 * t670 / 0.2e1) * t581 - 0.6e1 * ((-0.3e1 * t551 + (-t582 + t599) * t536 + t598 * t543 + t626) * t450 - 0.2e1 * (-0.5e1 / 0.3e1 * t551 + (-t543 + t597) * t536 + t546 * (t484 + t595)) * t670) * t649 - 0.6e1 * t568 * t623 - (t533 + ((21 * t543) + t441) * t551 + (t430 + t517 + (35 * t541) + 0.2e1 * t658) * t536 + (t510 + (t507 + t518 - 0.5e1 * t536) * t543 + t546 * (-t531 + t629)) * t455) * t450 + (0.7e1 * t533 + (t512 + t441) * t508 + (t430 + (21 * t541) + (9 * t545) + 0.6e1 * t658) * t536 + t659) * t670) * t396 + (0.16e2 * (t613 + t581 + (-8 * t541 + 12 * t647) * t463 + (-12 * pkin(7) * t547 + t555 * t682) * t497 - (6 * t647) + t628) * t657 + 0.24e2 * (t639 * t613 + 0.14e2 * (-0.32e2 / 0.21e2 * (t546 + t536 / 0.4e1 + t543 / 0.4e1 - t531 / 0.8e1) * t580 + 0.5e1 / 0.42e2 * t551 + (0.16e2 / 0.21e2 * t543 + t636) * t536 + t541 / 0.7e1 + t636 * t543 + t545 - 0.3e1 / 0.7e1 * t648 + t530 / 0.42e2) * t649 + t446 * t566 - t627 * t551 + (t443 - 0.10e2 / 0.3e1 * t541 + (2 * t545) - t648) * t536 + t416 * t652 + ((-0.2e1 / 0.3e1 * t580 + t473 + t637) * t605 + (-0.8e1 / 0.3e1 * (t638 + t681) * t580 + 0.5e1 / 0.18e2 * t551 + (0.4e1 / 0.3e1 * t546 + t486 + t474) * t536 + t545 + 0.2e1 / 0.3e1 * t647 - 0.2e1 / 0.3e1 * t648 - t541 / 0.3e1 + t530 / 0.18e2) * t620) * pkin(7)) * t651 + 0.16e2 * (-0.6e1 * t546 * t536 + t625) * t650 + 0.32e2 * (t431 * t653 + t434 * t454) * t616 + 0.24e2 * (t445 * t566 - t533 + (-t447 + t630) * t551 + (t443 + t551 / 0.6e1 - t530 / 0.6e1 + t626) * t536 + t416 * t546) * t649 + 0.8e1 * t565 * t623 - 0.8e1 * ((t512 + t640) * t551 + (t510 + (t507 + (10 * t546)) * t543 + t572) * t536 + t644) * t580 + t551 ^ 2 + (t506 + t519 + (28 * t543)) * t533 + (t452 * t543 + (70 * t541) + t571) * t551 + (t452 * t541 + t571 * t513 + t632 * t521 - 0.6e1 * t545 * t531 + (28 * t547 ^ 2) + (4 * t555 ^ 2)) * t536 + t435 * t659) * t426 + (((0.4e1 * t662 + (t450 + t618) * t440 + t457 * t450 + (t475 + t592) * t618) * t615 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t536 + t488 + t472) * t450 + pkin(1) * t600) * t612 + (-0.8e1 * t578 + ((t474 + t481 + t634) * t450 - (0.8e1 / 0.3e1 * t536 + t595) * t670) * t621) * pkin(7) + t568) * t449) * t396 + (0.32e2 * (t583 + (-0.4e1 * t494 * t608 + t676 + (t677 + t506 + t518) * t543) * t463 + (-t543 + t564 + t681) * t603 + t431 * t652 + t457 * t434) * t656 + 0.8e1 * (t429 + (t434 * t653 + t420) * t606 + (t566 + (t513 + t633) * t536 + t562) * t602 + t565) * t449) * t426) * t438) / ((-0.4e1 * (-t627 * t450 + 0.2e1 * t662 + (t609 * t680 + t494 * (t536 + t675)) * pkin(1)) * t651 + 0.8e1 * pkin(7) * t578 + ((pkin(3) * t676 + 0.8e1 * t543 * t550) * t496 + 0.4e1 * t547 * t600) * t463 - 0.4e1 * t567 * t623 - (t635 * t536 + t511 + t625 + (6 * t647)) * t450 + (t508 + (t501 + 6 * t546) * t536 + t448) * t670) * t396 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t580 + 0.4e1 / 0.9e1 * t536 - t531 / 0.9e1 + t638) * t649 + t446 * t431 + t432 * t652 + (t646 + (t472 + t481 + t564) * t451) * t624) * t651 + t429 + (t432 * t653 + t420) * t606 + t574 * t602 + ((t447 + t594) * t536 + t642) * t576 + t533 + (t500 + t591) * t551 + (t591 * t513 + t631 * t521 + t499 + t517) * t536 + t448 * t435) * t426 + ((t615 * t670 + (t607 * t678 + (t450 - t670) * t440 + t567) * t619) * t396 + (0.8e1 * (t440 + t611 + t457) * t656 + 0.6e1 * (t629 * t611 + (t431 + t432) * t603 + t574) * t449) * t426) * t438);
t539 = pkin(2) ^ 2;
t372 = 0.1e1 / (t539 + t645);
t540 = 1 / pkin(2);
t667 = t372 * t540;
t544 = 1 / pkin(1);
t663 = t408 * t544;
t532 = 0.1e1 / pkin(4);
t601 = t405 * t532 / pkin(3) ^ 2;
t588 = t668 / 0.4e1;
t587 = t372 * t673;
t586 = t665 / 0.2e1;
t585 = t664 / 0.2e1;
t584 = t532 * t537 / 0.2e1;
t422 = -t493 * t497 + t655;
t421 = -t493 * t494 - t654;
t414 = -pkin(1) * t418 + pkin(5);
t410 = t543 - t617;
t401 = atan2(t529 * t544 * t402 / 0.2e1, t418);
t400 = cos(t401);
t399 = sin(t401);
t393 = atan2((pkin(1) * t410 * t679 + t402 * t414) * t663 / 0.2e1, -(-pkin(1) * t666 + 0.2e1 * t410 * t414) * t663 / 0.2e1);
t392 = atan2(t398 * t585, t397 * t585);
t391 = cos(t393);
t390 = cos(t392);
t389 = sin(t393);
t388 = sin(t392);
t387 = atan2(t395 * t586, t394 * t586);
t386 = cos(t387);
t385 = sin(t387);
t384 = -t389 * t490 + t391 * t491;
t383 = t389 * t491 + t391 * t490;
t376 = pkin(2) * t378 + pkin(6);
t375 = -pkin(2) - t671;
t374 = t377 + (2 * t539);
t373 = t377 + 0.2e1 * t526;
t370 = atan2(t396 * t584, t584 * t668);
t369 = cos(t370);
t368 = sin(t370);
t367 = (t394 * t396 / 0.4e1 + t395 * t588) * t601;
t366 = (t394 * t588 - t395 * t396 / 0.4e1) * t601;
t365 = atan2(t379, t378);
t364 = cos(t365);
t363 = sin(t365);
t361 = atan2(t540 * t362 * t673, -t378);
t360 = cos(t361);
t359 = sin(t361);
t358 = atan2(t366 * t421 + t367 * t422, -t366 * t422 + t367 * t421);
t357 = cos(t358);
t356 = sin(t358);
t355 = atan2((pkin(2) * t374 * t379 + t362 * t376) * t667 / 0.2e1, -(-pkin(2) * t669 + t374 * t376) * t667 / 0.2e1);
t354 = atan2((pkin(6) * t373 * t379 - t362 * t375) * t587, (-pkin(6) * t669 - t373 * t375) * t587);
t353 = cos(t355);
t352 = cos(t354);
t351 = sin(t355);
t350 = sin(t354);
t1 = [-t497, t494, 0, 0; -t494, -t497, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t386, -t385, 0, pkin(1); t385, t386, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t352, t350, 0, pkin(2); -t350, -t352, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t369, -t368, 0, pkin(3); t368, t369, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t384, -t383, 0, t491 * pkin(5); t383, t384, 0, t490 * pkin(5); 0, 0, 1, 0; 0, 0, 0, 1; -t364, t363, 0, 0; -t363, -t364, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t493, t496, 0, pkin(7); -t496, t493, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t390, t388, 0, pkin(1); -t388, -t390, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t360, t359, 0, pkin(6); -t359, -t360, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t357, t356, 0, pkin(4); -t356, -t357, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t400, -t399, 0, pkin(5); t399, t400, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t353, t351, 0, pkin(6); -t351, -t353, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(3); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(1); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(2); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,15);             % numerisch
else,                         T_mdh = sym('xx', [4,4,15]); end % symbolisch

for i = 1:15
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
