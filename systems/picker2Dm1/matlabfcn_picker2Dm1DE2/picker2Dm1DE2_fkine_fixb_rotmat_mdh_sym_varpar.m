% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% picker2Dm1DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05,phi1]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   11:  mdh base (link 0) -> mdh frame (11-1), link (11-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-11 05:26
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = picker2Dm1DE2_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'picker2Dm1DE2_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'picker2Dm1DE2_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-10 20:17:14
% EndTime: 2020-05-10 20:17:26
% DurationCPUTime: 10.83s
% Computational Cost: add. (119855->469), mult. (312578->570), div. (5590->11), fcn. (91862->44), ass. (0->285)
t349 = 4 * pkin(1);
t191 = pkin(4) ^ 2;
t133 = -t191 / 0.4e1;
t196 = pkin(3) ^ 2;
t348 = t133 + t196 / 0.2e1;
t347 = 2 * pkin(7);
t184 = 2 * pkin(2);
t150 = sin(pkin(8));
t151 = cos(pkin(8));
t154 = sin(qJ(1));
t157 = cos(qJ(1));
t73 = t150 * t157 - t151 * t154;
t346 = 0.2e1 * t73;
t123 = t157 ^ 2;
t345 = -0.2e1 * t123;
t169 = 0.2e1 * t196;
t344 = 0.4e1 * t196;
t203 = pkin(1) ^ 2;
t201 = t203 ^ 2;
t343 = 4 * t201;
t342 = 2 * t203;
t173 = 6 * t203;
t206 = pkin(7) ^ 2;
t181 = 2 * t206;
t211 = t196 ^ 2;
t168 = 0.5e1 * t211;
t185 = 2 * pkin(1);
t188 = pkin(5) ^ 2;
t74 = -t150 * t154 - t151 * t157;
t340 = pkin(5) * t74;
t288 = pkin(1) * t340;
t324 = t188 - 0.2e1 * t288;
t58 = sqrt(-(-(t185 + pkin(5)) * pkin(5) + t324) * (pkin(5) * (t185 - pkin(5)) + t324));
t334 = t58 * t73;
t65 = t188 - t288;
t69 = -pkin(1) + t340;
t56 = -pkin(5) * t334 - 0.2e1 * t65 * t69;
t341 = t56 / 0.4e1;
t155 = sin(pkin(9));
t158 = cos(pkin(9));
t197 = 0.1e1 / pkin(3);
t115 = t203 + t206;
t249 = t196 + t115;
t111 = pkin(1) * t157;
t286 = 0.2e1 * t111;
t156 = cos(qJ(2));
t317 = t154 * t156;
t274 = pkin(3) * t317;
t244 = pkin(1) * t274;
t87 = -0.2e1 * t244;
t153 = sin(qJ(2));
t109 = pkin(3) * t153;
t95 = t109 + pkin(7);
t97 = t109 * t347;
t61 = 0.1e1 / (t286 * t95 + t249 + t87 + t97);
t330 = t197 * t61;
t189 = 0.1e1 / pkin(5);
t64 = 0.1e1 / (t203 + t324);
t331 = t189 * t64;
t240 = t330 * t331;
t233 = -pkin(1) + t274;
t174 = 3 * t203;
t297 = t191 - t206;
t234 = t169 + t174 - t297;
t237 = -0.4e1 * t244;
t250 = -t191 + t115;
t316 = t156 * t157;
t273 = pkin(3) * t316;
t120 = t153 ^ 2;
t318 = t120 * t196;
t280 = 0.2e1 * t318;
t332 = t157 * t95;
t183 = 0.2e1 * pkin(3);
t239 = t97 + t250;
t312 = t203 * t123;
t278 = -0.4e1 * t312;
t283 = -0.4e1 * t109;
t294 = t203 - t206;
t296 = -t196 + t206;
t75 = t97 + t280 + t296;
t55 = sqrt(t75 * t278 + 0.4e1 * t294 * t318 + pkin(7) * t250 * t283 - t201 + (-0.2e1 * t196 + t297) * t342 - (t206 - (t183 + pkin(4)) * pkin(4)) * (t206 + (t183 - pkin(4)) * pkin(4)) + (-(t87 + t239) * t332 + t239 * t274) * t349);
t53 = (t154 * t95 + t273) * t55 - (t234 + t97 + t237) * t332 + t233 * t97 + t234 * t274 + (t75 * t345 - t250 + t280 - t344) * pkin(1);
t110 = pkin(3) * t156;
t80 = t169 + t239;
t54 = (-t233 + t332) * t55 + (t286 * t75 + t80 * t95) * t154 + (t157 * t80 + (0.4e1 * t123 - 0.2e1) * t95 * pkin(1)) * t110;
t57 = pkin(5) * t346 * t65 - t58 * t69;
t36 = (t53 * t341 + t54 * t57 / 0.4e1) * t240;
t37 = (-t53 * t57 / 0.4e1 + t54 * t341) * t240;
t34 = t155 * t37 + t158 * t36;
t339 = pkin(6) * t34;
t338 = 0.1e1 / pkin(6) / 0.2e1;
t96 = t111 + pkin(7);
t337 = pkin(1) * t154;
t186 = pkin(6) ^ 2;
t33 = t339 * t184;
t325 = t186 + t33;
t19 = sqrt(-(-(t184 + pkin(6)) * pkin(6) + t325) * (pkin(6) * (t184 - pkin(6)) + t325));
t35 = t155 * t36 - t158 * t37;
t336 = t19 * t35;
t179 = 4 * t206;
t101 = (t179 + t191) * t203;
t144 = -t196 / 0.3e1;
t103 = t144 + t206;
t104 = -t203 / 0.3e1 + t206;
t107 = 0.10e2 / 0.3e1 * t203;
t108 = t115 ^ 2;
t112 = -0.30e2 * t191 + (60 * t206);
t114 = -0.3e1 * t196 + t206;
t117 = -3 * t203 + t206;
t122 = t157 * t123;
t132 = -t191 / 0.6e1;
t134 = -t191 / 0.3e1;
t135 = -t191 / 0.2e1;
t141 = 0.2e1 / 0.3e1 * t196;
t146 = 0.4e1 / 0.3e1 * t203;
t148 = t203 / 0.2e1;
t159 = 15 * t201;
t160 = 15 * t203;
t161 = 10 * t203;
t166 = -0.2e1 * t191;
t167 = -0.5e1 * t191;
t170 = 7 * t201;
t171 = 5 * t201;
t172 = 7 * t203;
t205 = t206 ^ 2;
t177 = 3 * t205;
t178 = 8 * t206;
t190 = t191 ^ 2;
t210 = pkin(3) * t196;
t193 = t210 ^ 2;
t207 = pkin(1) * t203;
t215 = pkin(7) * t206;
t295 = t201 + t205;
t300 = t181 - t191;
t311 = t206 * t191;
t223 = t300 * t203 + t190 / 0.6e1 + t295 - t311;
t222 = 0.5e1 / 0.6e1 * t211 + t223;
t226 = t206 - t244;
t90 = t135 + t249;
t227 = t90 * t237;
t308 = t190 / 0.2e1 - t211 / 0.2e1;
t236 = -0.3e1 * t311 + t177 + t308;
t238 = -0.6e1 * t244;
t137 = -0.3e1 / 0.2e1 * t191;
t180 = 3 * t206;
t307 = t137 + t180;
t323 = t193 + t115 * ((t137 + t181) * t203 - 0.3e1 / 0.2e1 * t311 + t295 + t308);
t230 = ((t107 + t300) * t196 + t222) * t238 + (t159 + (-0.9e1 * t191 + (18 * t206)) * t203 + t236) * t196 + (t160 + t307) * t211 + t323;
t301 = t174 + t206;
t252 = t196 + t301;
t231 = -(0.3e1 * t196 + t115) * t337 + t252 * t110;
t136 = -0.2e1 / 0.3e1 * t191;
t145 = -0.2e1 / 0.3e1 * t196;
t253 = t136 + t115;
t302 = t161 + t181;
t306 = t145 + t206;
t113 = -t191 - t196;
t99 = t180 + t113;
t326 = t99 * t203;
t232 = -t337 * (t168 + ((5 * t203) + t99) * t169 + (t145 + t253) * t115) + (t211 + (t136 + t145 + t302) * t196 + t171 + 0.2e1 * t326 + t206 * (t136 + t306)) * t110;
t299 = t190 - t211;
t235 = -0.6e1 * t311 + (6 * t205) + t299;
t272 = t207 * t110;
t241 = t122 * t272;
t313 = t201 * t123 ^ 2;
t242 = t313 * t110;
t254 = t136 + t141 + t181;
t322 = t211 + (t141 + t253) * t115;
t140 = 0.4e1 / 0.3e1 * t196;
t255 = t134 + t115;
t88 = t140 + t255;
t243 = t88 * t237 + t322 + (t173 + t254) * t196;
t309 = t207 * t122;
t269 = 0.16e2 * t309;
t245 = pkin(7) * t269;
t246 = 0.20e2 / 0.3e1 * t203;
t282 = pkin(7) * t309;
t247 = 0.8e1 * t282;
t298 = -t191 + t196;
t251 = t180 + t298;
t142 = t196 / 0.3e1;
t256 = t132 + t142 + t206;
t257 = t191 / 0.3e1 + t142 + t181;
t258 = 0.2e1 / 0.3e1 * t191 + t141 + t179;
t259 = 0.4e1 / 0.3e1 * t191 + t140 - (2 * t206);
t315 = (pkin(7) + pkin(3)) * (pkin(7) - pkin(3));
t263 = t154 * t315;
t284 = 0.6e1 * t111;
t264 = pkin(7) * t284;
t285 = 0.4e1 * t111;
t265 = pkin(7) * t285;
t267 = -t337 / 0.2e1;
t270 = 0.12e2 * t312;
t271 = t203 * t110;
t277 = 0.4e1 * t312;
t279 = 0.8e1 * t313;
t319 = t153 * t120 * t210;
t281 = -0.8e1 * t319;
t287 = 0.2e1 * t337;
t289 = pkin(7) * t111;
t291 = 4 * pkin(7);
t292 = t205 + t211;
t293 = t205 - t201;
t303 = 0.4e1 / 0.7e1 * t206 - t191 / 0.7e1;
t304 = t148 + t206;
t305 = t203 / 0.3e1 + t206;
t310 = t206 * t203;
t314 = (pkin(7) + pkin(1)) * (pkin(7) - pkin(1));
t320 = t120 ^ 2 * t211;
t321 = t113 * t206;
t327 = (-t154 * t207 + t271) * t123;
t333 = t108 * (-t196 + t250);
t72 = -t211 / 0.6e1 + t223;
t76 = t103 * t87;
t82 = t109 + t96;
t85 = t114 * t247;
t86 = 0.10e2 * t326;
t91 = -t191 + t249;
t98 = pkin(7) * t286;
t335 = ((-0.24e2 * (0.4e1 / 0.3e1 * t312 + t98 + t104) * t320 * t337 - 0.12e2 * (-0.8e1 / 0.3e1 * t242 + ((t146 + t256) * t110 - (0.7e1 / 0.6e1 * t196 + t132 + t304) * t337) * t277 + (-t196 * t294 - 0.5e1 / 0.3e1 * t201 + t257 * t203 + t206 * (t134 + t103)) * t110 + (-t211 + (-t246 + t258) * t196 - (3 * t201) + t259 * t203 + t205) * t267 + (-t154 * t201 * t122 + ((t203 + t256) * t110 + (t169 - t294) * t267) * t111) * t291) * t318 + 0.24e2 * t103 * t242 + ((t206 + 0.5e1 / 0.2e1 * t196 + 0.3e1 / 0.2e1 * t203 + t135) * t110 + t114 * t337 / 0.2e1) * t245 - 0.6e1 * ((-0.3e1 * t211 + (-t246 + t259) * t196 + t258 * t203 + t293) * t110 - 0.2e1 * (-0.5e1 / 0.3e1 * t211 + (-t203 + t257) * t196 + t206 * (t144 + t255)) * t337) * t312 - 0.6e1 * t232 * t289 - (t193 + ((21 * t203) + t99) * t211 + (t177 + (35 * t201) + t86 + 0.2e1 * t321) * t196 + (t170 + (t167 + t178 - 0.5e1 * t196) * t203 + t206 * (-t191 + t296)) * t115) * t110 + (0.7e1 * t193 + (t172 + t99) * t168 + ((21 * t201) + (9 * t205) + t86 + 0.6e1 * t321) * t196 + t333) * t337) * t55 + (0.16e2 * (t279 + t245 + (-8 * t201 + 12 * t310) * t123 + (-12 * pkin(7) * t207 + t215 * t349) * t157 - (6 * t310) + t295) * t320 + 0.24e2 * (t306 * t279 + 0.14e2 * (-0.32e2 / 0.21e2 * (t206 + t196 / 0.4e1 + t203 / 0.4e1 - t191 / 0.8e1) * t244 + 0.5e1 / 0.42e2 * t211 + (0.16e2 / 0.21e2 * t203 + t303) * t196 + t201 / 0.7e1 + t303 * t203 + t205 - 0.3e1 / 0.7e1 * t311 + t190 / 0.42e2) * t312 + t104 * t227 - t294 * t211 + (t101 - 0.10e2 / 0.3e1 * t201 + (2 * t205) - t311) * t196 + t72 * t314 + ((-0.2e1 / 0.3e1 * t244 + t133 + t304) * t269 + (-0.8e1 / 0.3e1 * (t305 + t348) * t244 + 0.5e1 / 0.18e2 * t211 + (0.4e1 / 0.3e1 * t206 + t146 + t134) * t196 + t205 + 0.2e1 / 0.3e1 * t310 - 0.2e1 / 0.3e1 * t311 - t201 / 0.3e1 + t190 / 0.18e2) * t284) * pkin(7)) * t318 + 0.16e2 * (-0.6e1 * t206 * t196 + t292) * t313 + 0.32e2 * (t114 * t90 + t315 * t87) * t282 + 0.24e2 * (t103 * t227 - t193 + (-t107 + t297) * t211 + (t101 + t211 / 0.6e1 - t190 / 0.6e1 + t293) * t196 + t72 * t206) * t312 + 0.8e1 * t230 * t289 - 0.8e1 * ((t172 + t307) * t211 + (t170 + (t167 + (10 * t206)) * t203 + t236) * t196 + t323) * t244 + t211 ^ 2 + (t166 + t179 + (28 * t203)) * t193 + (t112 * t203 + (70 * t201) + t235) * t211 + (t112 * t201 + t235 * t173 + t299 * t181 - 0.6e1 * t205 * t191 + (28 * t207 ^ 2) + (4 * t215 ^ 2)) * t196 + t91 * t333) * t82 + (((0.4e1 * t327 + (t110 + t287) * t98 + t117 * t110 + (t135 + t252) * t287) * t281 - 0.6e1 * ((0.2e1 * (0.5e1 / 0.6e1 * t196 + t148 + t132) * t110 + pkin(1) * t263) * t278 + (-0.8e1 * t241 + ((t134 + t141 + t301) * t110 - (0.8e1 / 0.3e1 * t196 + t255) * t337) * t285) * pkin(7) + t232) * t109) * t55 + (0.32e2 * (t247 + (-0.4e1 * t154 * t272 + t343 + (t344 + t166 + t178) * t203) * t123 + (-t203 + t226 + t348) * t265 + t87 * t314 + t117 * t90) * t319 + 0.8e1 * (t85 + (t315 * t90 + t76) * t270 + (t227 + (t173 + t300) * t196 + t222) * t264 + t230) * t109) * t82) * t96) / ((-0.4e1 * (-t294 * t110 + 0.2e1 * t327 + (t273 * t347 + t154 * (t196 + t342)) * pkin(1)) * t318 + 0.8e1 * pkin(7) * t241 + ((pkin(3) * t343 + 0.8e1 * t203 * t210) * t156 + 0.4e1 * t207 * t263) * t123 - 0.4e1 * t231 * t289 - (t196 * t302 + t171 + t292 + (6 * t310)) * t110 + (t168 + (t161 + 6 * t206) * t196 + t108) * t337) * t55 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t244 + 0.4e1 / 0.9e1 * t196 - t191 / 0.9e1 + t305) * t312 + t104 * t87 + t88 * t314 + (t309 + (t132 + t141 + t226) * t111) * t291) * t318 + t85 + (t315 * t88 + t76) * t270 + t243 * t264 + ((t107 + t254) * t196 + t322) * t238 + t193 + (t160 + t251) * t211 + (t251 * t173 + t298 * t181 + t159 + t177) * t196 + t108 * t91) * t82 + ((t281 * t337 + (t271 * t345 + (t110 - t337) * t98 + t231) * t283) * t55 + (0.8e1 * (t98 + t277 + t117) * t319 + 0.6e1 * (t296 * t277 + (t87 + t88) * t265 + t243) * t109) * t82) * t96);
t200 = 1 / pkin(2);
t199 = pkin(2) ^ 2;
t28 = 0.1e1 / (t199 + t325);
t329 = t200 * t28;
t204 = 1 / pkin(1);
t328 = t204 * t64;
t260 = t330 / 0.2e1;
t41 = qJ(1) + atan2(t54 * t260, t53 * t260);
t261 = t331 / 0.2e1;
t51 = qJ(1) + atan2(t57 * t261, t56 * t261);
t290 = pkin(7) + 0;
t276 = t150 * pkin(5) + 0;
t275 = t151 * pkin(5) + 0;
t94 = -t111 + 0;
t262 = t28 * t338;
t29 = t33 + 0.2e1 * t186;
t31 = -pkin(2) - t339;
t11 = atan2((pkin(6) * t29 * t35 - t19 * t31) * t262, (-pkin(6) * t336 - t29 * t31) * t262) + t41;
t18 = atan2(t35, t34) + t41;
t192 = 0.1e1 / pkin(4);
t248 = t192 * t197 / 0.2e1;
t23 = atan2(t55 * t248, t248 * t335) + t41;
t268 = t192 / pkin(3) ^ 2 * t61;
t266 = t335 / 0.4e1;
t93 = 0 - t337;
t40 = cos(t41);
t229 = -pkin(2) * t40 + t94;
t228 = -pkin(3) * t40 + t94;
t39 = sin(t41);
t225 = -pkin(2) * t39 + t93;
t224 = -pkin(3) * t39 + t93;
t78 = -t153 * t157 + t317;
t77 = -t153 * t154 - t316;
t70 = -pkin(1) * t74 + pkin(5);
t66 = t203 - t288;
t50 = pkin(8) + atan2((pkin(1) * t346 * t66 + t58 * t70) * t328 / 0.2e1, -(-pkin(1) * t334 + 0.2e1 * t66 * t70) * t328 / 0.2e1);
t49 = cos(t51);
t48 = sin(t51);
t47 = cos(t50);
t46 = sin(t50);
t45 = atan2(t189 * t204 * t58 / 0.2e1, t74) + t51;
t44 = cos(t45);
t43 = sin(t45);
t32 = pkin(2) * t34 + pkin(6);
t30 = t33 + (2 * t199);
t25 = (t53 * t55 / 0.4e1 + t54 * t266) * t268;
t24 = (t53 * t266 - t54 * t55 / 0.4e1) * t268;
t22 = cos(t23);
t21 = sin(t23);
t17 = cos(t18);
t16 = sin(t18);
t15 = atan2(t24 * t77 + t25 * t78, -t24 * t78 + t25 * t77) + t23;
t14 = cos(t15);
t13 = sin(t15);
t10 = cos(t11);
t9 = sin(t11);
t8 = pkin(6) * t10;
t7 = pkin(6) * t9;
t6 = atan2((pkin(2) * t30 * t35 + t19 * t32) * t329 / 0.2e1, -(-pkin(2) * t336 + t30 * t32) * t329 / 0.2e1) + t18;
t5 = cos(t6);
t4 = sin(t6);
t3 = atan2(t200 * t19 * t338, -t34) + t11;
t2 = cos(t3);
t1 = sin(t3);
t12 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t157, t154, 0, 0; -t154, -t157, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t40, t39, 0, t94; -t39, -t40, 0, t93; 0, 0, 1, 0; 0, 0, 0, 1; t10, -t9, 0, t229; t9, t10, 0, t225; 0, 0, 1, 0; 0, 0, 0, 1; -t22, t21, 0, t228; -t21, -t22, 0, t224; 0, 0, 1, 0; 0, 0, 0, 1; t47, -t46, 0, t275; t46, t47, 0, t276; 0, 0, 1, 0; 0, 0, 0, 1; t17, -t16, 0, t94; t16, t17, 0, t93; 0, 0, 1, 0; 0, 0, 0, 1; t153, t156, 0, t290; -t156, t153, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t49, -t48, 0, t94; t48, t49, 0, t93; 0, 0, 1, 0; 0, 0, 0, 1; -t2, t1, 0, t229 + t8; -t1, -t2, 0, t225 + t7; 0, 0, 1, 0; 0, 0, 0, 1; t14, -t13, 0, -pkin(4) * t22 + t228; t13, t14, 0, -pkin(4) * t21 + t224; 0, 0, 1, 0; 0, 0, 0, 1; t44, -t43, 0, pkin(5) * t49 + t94; t43, t44, 0, pkin(5) * t48 + t93; 0, 0, 1, 0; 0, 0, 0, 1; -t5, t4, 0, pkin(6) * t17 + t94; -t4, -t5, 0, pkin(6) * t16 + t93; 0, 0, 1, 0; 0, 0, 0, 1; t153, t156, 0, t109 + t290; -t156, t153, 0, -t110 + 0; 0, 0, 1, 0; 0, 0, 0, 1; t47, -t46, 0, pkin(1) * t47 + t275; t46, t47, 0, pkin(1) * t46 + t276; 0, 0, 1, 0; 0, 0, 0, 1; -t2, t1, 0, t8 + (-t2 - t40) * pkin(2) + t94; -t1, -t2, 0, t7 + (-t1 - t39) * pkin(2) + t93; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t12;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
