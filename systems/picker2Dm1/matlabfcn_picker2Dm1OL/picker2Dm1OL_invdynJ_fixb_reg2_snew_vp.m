% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% picker2Dm1OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [12x1]
%   Generalized joint coordinates (joint angles)
% qJD [12x1]
%   Generalized joint velocities
% qJDD [12x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05]';
% 
% Output:
% tauJ_reg [12x(12*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-11 05:46
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = picker2Dm1OL_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(12,1),zeros(12,1),zeros(12,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [12 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_snew_vp: qJ has to be [12x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [12 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_snew_vp: qJD has to be [12x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [12 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_snew_vp: qJDD has to be [12x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-11 05:45:13
% EndTime: 2020-05-11 05:45:21
% DurationCPUTime: 1.24s
% Computational Cost: add. (3409->129), mult. (4445->199), div. (0->0), fcn. (2710->22), ass. (0->112)
t117 = sin(qJ(4));
t126 = cos(qJ(4));
t108 = sin(qJ(10));
t110 = cos(qJ(10));
t105 = qJDD(1) + qJDD(2);
t96 = qJDD(4) + t105;
t86 = qJDD(10) + t96;
t107 = qJD(1) + qJD(2);
t99 = qJD(4) + t107;
t90 = qJD(10) + t99;
t87 = t90 ^ 2;
t145 = t108 * t86 + t110 * t87;
t59 = t108 * t87 - t110 * t86;
t39 = -t117 * t59 + t126 * t145;
t118 = sin(qJ(3));
t127 = cos(qJ(3));
t112 = sin(qJ(9));
t121 = cos(qJ(9));
t97 = qJDD(3) + t105;
t88 = qJDD(9) + t97;
t100 = qJD(3) + t107;
t91 = qJD(9) + t100;
t89 = t91 ^ 2;
t144 = t112 * t88 + t121 * t89;
t63 = t112 * t89 - t121 * t88;
t41 = t118 * t63 - t127 * t144;
t40 = t117 * t145 + t126 * t59;
t155 = t118 * t144 + t127 * t63;
t119 = sin(qJ(2));
t128 = cos(qJ(2));
t120 = sin(qJ(1));
t129 = cos(qJ(1));
t146 = -t120 * g(1) + t129 * g(2);
t80 = qJDD(1) * pkin(1) + t146;
t136 = -t129 * g(1) - t120 * g(2);
t81 = -qJD(1) ^ 2 * pkin(1) - t136;
t51 = -t119 * t81 + t128 * t80;
t45 = t105 * pkin(3) + t51;
t103 = t107 ^ 2;
t53 = t119 * t80 + t128 * t81;
t47 = -t103 * pkin(3) + t53;
t29 = -t117 * t47 + t126 * t45;
t25 = t96 * pkin(4) + t29;
t31 = t117 * t45 + t126 * t47;
t93 = t99 ^ 2;
t27 = -t93 * pkin(4) + t31;
t11 = t108 * t27 - t110 * t25;
t12 = t108 * t25 + t110 * t27;
t7 = t108 * t12 - t110 * t11;
t8 = t108 * t11 + t110 * t12;
t2 = t117 * t8 + t126 * t7;
t5 = pkin(4) * t7;
t150 = pkin(3) * t2 + t5;
t46 = t105 * pkin(2) + t51;
t48 = -t103 * pkin(2) + t53;
t30 = t118 * t48 - t127 * t46;
t26 = t97 * pkin(6) + t30;
t32 = t118 * t46 + t127 * t48;
t94 = t100 ^ 2;
t28 = -t94 * pkin(6) - t32;
t13 = t112 * t28 - t121 * t26;
t14 = t112 * t26 + t121 * t28;
t10 = t112 * t13 + t121 * t14;
t9 = t112 * t14 - t121 * t13;
t4 = -t118 * t10 - t127 * t9;
t6 = pkin(6) * t9;
t149 = pkin(2) * t4 + t6;
t148 = pkin(4) * t145 + t12;
t147 = pkin(6) * t144 + t14;
t115 = sin(qJ(6));
t124 = cos(qJ(6));
t98 = qJD(6) + t107;
t92 = t98 ^ 2;
t95 = qJDD(6) + t105;
t143 = t115 * t95 + t124 * t92;
t72 = t118 * t97 + t127 * t94;
t113 = sin(qJ(8));
t122 = cos(qJ(8));
t50 = t113 * t81 - t122 * t80;
t33 = t115 * t53 - t124 * t51;
t142 = pkin(3) * t39 + t148;
t141 = pkin(2) * t41 + t147;
t140 = pkin(4) * t59 + t11;
t134 = t117 * t93 - t126 * t96;
t139 = -pkin(3) * t134 + t29;
t138 = pkin(6) * t63 + t13;
t73 = t118 * t94 - t127 * t97;
t137 = pkin(2) * t73 + t30;
t52 = t113 * t80 + t122 * t81;
t34 = t115 * t51 + t124 * t53;
t135 = t115 * t92 - t124 * t95;
t70 = -t117 * t96 - t126 * t93;
t133 = pkin(3) * t40 + t140;
t132 = -pkin(2) * t155 + t138;
t131 = pkin(3) * t70 - t31;
t130 = pkin(2) * t72 + t32;
t125 = cos(qJ(5));
t123 = cos(qJ(7));
t116 = sin(qJ(5));
t114 = sin(qJ(7));
t111 = cos(pkin(8));
t109 = sin(pkin(8));
t106 = qJD(1) + qJD(8);
t104 = qJDD(1) + qJDD(8);
t102 = t106 ^ 2;
t79 = -t109 * t116 + t111 * t125;
t78 = t109 * t125 + t111 * t116;
t18 = t118 * t32 - t127 * t30;
t17 = t117 * t31 + t126 * t29;
t16 = pkin(2) * t18;
t15 = pkin(3) * t17;
t1 = [0, 0, 0, 0, 0, qJDD(1), t146, t136, 0, 0, 0, 0, 0, 0, 0, t105, pkin(1) * (-t119 * t103 + t128 * t105) + t51, pkin(1) * (-t128 * t103 - t119 * t105) - t53, 0, pkin(1) * (t119 * t53 + t128 * t51), 0, 0, 0, 0, 0, t97, pkin(1) * (t119 * t72 + t128 * t73) + t137, pkin(1) * (-t119 * t73 + t128 * t72) + t130, 0, pkin(1) * (t119 * (t118 * t30 + t127 * t32) + t128 * t18) + t16, 0, 0, 0, 0, 0, t96, pkin(1) * (t119 * t70 - t128 * t134) + t139, pkin(1) * (t119 * t134 + t128 * t70) + t131, 0, pkin(1) * (t119 * (-t117 * t29 + t126 * t31) + t128 * t17) + t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, pkin(1) * (t119 * t143 + t128 * t135) + t33, pkin(1) * (-t119 * t135 + t128 * t143) + t34, 0, pkin(1) * (t119 * (t115 * t33 + t124 * t34) + t128 * (t115 * t34 - t124 * t33)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, pkin(1) * (t113 * t102 - t122 * t104) + t50, pkin(1) * (t122 * t102 + t113 * t104) + t52, 0, pkin(1) * (t113 * t52 - t122 * t50), 0, 0, 0, 0, 0, t88, pkin(1) * (t119 * t41 - t128 * t155) + t132, pkin(1) * (t119 * t155 + t128 * t41) + t141, 0, pkin(1) * (t119 * (-t127 * t10 + t118 * t9) + t128 * t4) + t149, 0, 0, 0, 0, 0, t86, pkin(1) * (t119 * t39 + t128 * t40) + t133, pkin(1) * (-t119 * t40 + t128 * t39) + t142, 0, pkin(1) * (t119 * (-t117 * t7 + t126 * t8) + t128 * t2) + t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, t51, -t53, 0, 0, 0, 0, 0, 0, 0, t97, t137, t130, 0, t16, 0, 0, 0, 0, 0, t96, t139, t131, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, t33, t34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, t132, t141, 0, t149, 0, 0, 0, 0, 0, t86, t133, t142, 0, t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t30, t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, t138, t147, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t29, -t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t140, t148, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(5), t78 * g(1) - t79 * g(2), t79 * g(1) + t78 * g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, t33, t34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(7), -t123 * g(1) - t114 * g(2), t114 * g(1) - t123 * g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, t50, t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, t13, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t11, t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
tauJ_reg = t1;
