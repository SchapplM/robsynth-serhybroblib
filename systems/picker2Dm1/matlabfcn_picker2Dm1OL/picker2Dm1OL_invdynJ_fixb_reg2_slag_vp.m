% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% picker2Dm1OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [12x1]
%   Generalized joint coordinates (joint angles)
% qJD [12x1]
%   Generalized joint velocities
% qJDD [12x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[L1,L2,L3,L4,L5,L6,e,phi05]';
% 
% Output:
% tau_reg [12x(12*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-11 05:46
% Revision: 52c9de996ed1e2eb3528e92ec0df589a9be0640a (2020-05-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = picker2Dm1OL_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(12,1),zeros(12,1),zeros(12,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [12 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_slag_vp: qJ has to be [12x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [12 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_slag_vp: qJD has to be [12x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [12 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_slag_vp: qJDD has to be [12x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'picker2Dm1OL_invdynJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-11 05:45:14
% EndTime: 2020-05-11 05:45:38
% DurationCPUTime: 3.44s
% Computational Cost: add. (2657->334), mult. (4764->438), div. (0->0), fcn. (2678->34), ass. (0->221)
t184 = sin(qJ(2));
t247 = qJDD(1) * t184;
t192 = cos(qJ(2));
t258 = qJD(2) * t192;
t299 = (qJD(1) * t258 + t247) * pkin(1);
t182 = sin(qJ(4));
t190 = cos(qJ(4));
t170 = qJDD(1) + qJDD(2);
t246 = qJDD(1) * t192;
t148 = pkin(1) * t246;
t259 = qJD(1) * t184;
t243 = pkin(1) * t259;
t228 = qJD(2) * t243;
t209 = t148 - t228;
t64 = t170 * pkin(3) + t209;
t277 = pkin(1) * qJD(1);
t150 = t192 * t277;
t172 = qJD(1) + qJD(2);
t87 = t172 * pkin(3) + t150;
t298 = -t182 * t64 - (qJD(4) * t87 + t299) * t190;
t297 = -t170 * pkin(2) + qJD(3) * t243 - t209;
t242 = qJD(6) * t277;
t294 = t192 * t242 + t299;
t181 = sin(qJ(6));
t244 = qJD(2) + qJD(6);
t293 = t181 * t259 * t244;
t175 = qJ(1) + qJ(2);
t165 = qJ(4) + t175;
t137 = sin(t165);
t140 = cos(t165);
t292 = -g(1) * t137 + g(2) * t140;
t166 = qJ(3) + t175;
t138 = sin(t166);
t141 = cos(t166);
t291 = g(1) * t138 - g(2) * t141;
t161 = sin(t175);
t163 = cos(t175);
t218 = -g(1) * t161 + g(2) * t163;
t290 = pkin(1) * t244;
t289 = pkin(2) * t163;
t152 = qJDD(4) + t170;
t288 = pkin(3) * t152;
t287 = pkin(3) * t163;
t185 = sin(qJ(1));
t284 = g(1) * t185;
t167 = t185 * pkin(1);
t193 = cos(qJ(1));
t282 = t193 * pkin(1);
t143 = t190 * pkin(3) + pkin(4);
t176 = sin(qJ(10));
t177 = cos(qJ(10));
t248 = qJD(10) * t182;
t249 = qJD(10) * t177;
t270 = t176 * t182;
t263 = t184 * t190;
t213 = -t182 * t192 - t263;
t70 = t213 * t277;
t267 = t182 * t184;
t212 = t190 * t192 - t267;
t72 = t212 * t277;
t281 = -t176 * t70 - t177 * t72 + t143 * t249 - (t176 * t248 + (-t177 * t190 + t270) * qJD(4)) * pkin(3);
t250 = qJD(10) * t176;
t269 = t177 * t182;
t280 = -t176 * t72 + t177 * t70 + t143 * t250 + (t177 * t248 + (t176 * t190 + t269) * qJD(4)) * pkin(3);
t191 = cos(qJ(3));
t144 = -t191 * pkin(2) + pkin(6);
t178 = sin(qJ(9));
t183 = sin(qJ(3));
t186 = cos(qJ(9));
t251 = qJD(9) * t186;
t252 = qJD(9) * t178;
t268 = t178 * t183;
t262 = t184 * t191;
t211 = t183 * t192 + t262;
t71 = t211 * t277;
t109 = t183 * t243;
t73 = -t191 * t150 + t109;
t279 = -t178 * t71 - t186 * t73 + t144 * t251 - (-t183 * t252 + (t186 * t191 - t268) * qJD(3)) * pkin(2);
t265 = t183 * t186;
t278 = -t178 * t73 + t186 * t71 + t144 * t252 + (-t183 * t251 + (-t178 * t191 - t265) * qJD(3)) * pkin(2);
t60 = t182 * t87 + t190 * t243;
t276 = t176 * t60;
t275 = t177 * t60;
t88 = t172 * pkin(2) + t150;
t61 = t183 * t88 + t191 * t243;
t274 = t178 * t61;
t272 = t186 * t61;
t266 = t183 * t184;
t189 = cos(qJ(6));
t264 = t184 * t189;
t134 = pkin(3) * t161;
t261 = t134 + t167;
t171 = qJD(1) + qJD(8);
t260 = qJD(1) * t171;
t257 = qJD(3) * t183;
t256 = qJD(3) * t191;
t255 = qJD(4) * t182;
t254 = qJD(4) * t190;
t253 = qJD(8) * t171;
t245 = qJDD(1) * pkin(1) ^ 2;
t241 = qJD(8) * t277;
t238 = t184 * t254;
t236 = t189 * t246;
t135 = pkin(2) * t161;
t235 = -pkin(6) * t138 + t135;
t157 = qJD(3) + t172;
t156 = qJD(4) + t172;
t59 = -t191 * t88 + t109;
t168 = t192 * pkin(1);
t146 = t168 + pkin(2);
t78 = pkin(1) * t266 - t191 * t146;
t234 = -t181 * t148 - t294 * t189;
t233 = qJD(1) * (-qJD(2) + t172);
t232 = qJD(2) * (-qJD(1) - t172);
t153 = qJDD(3) + t170;
t230 = qJD(4) * t243;
t174 = qJ(1) + qJ(8);
t160 = sin(t174);
t162 = cos(t174);
t179 = sin(qJ(8));
t187 = cos(qJ(8));
t226 = t179 * qJDD(1) * pkin(1) + g(1) * t162 + g(2) * t160 + t187 * t241;
t154 = g(2) * t282;
t225 = -g(1) * t167 + t154;
t145 = t168 + pkin(3);
t77 = -pkin(1) * t267 + t190 * t145;
t224 = t148 + t218;
t223 = g(1) * t160 - g(2) * t162 + t179 * t241;
t222 = t294 * t181 + t189 * t228 + t242 * t264;
t221 = -t282 - t289;
t220 = -pkin(4) * t140 - t287;
t219 = -g(1) * t163 - g(2) * t161;
t66 = pkin(4) + t77;
t80 = pkin(1) * t263 + t182 * t145;
t34 = t176 * t80 - t177 * t66;
t217 = t176 * t66 + t177 * t80;
t67 = pkin(6) + t78;
t81 = -pkin(1) * t262 - t183 * t146;
t38 = t178 * t81 - t186 * t67;
t216 = t178 * t67 + t186 * t81;
t63 = t190 * t64;
t21 = -t87 * t255 + t63 + (-t182 * t247 + (-t182 * t258 - t238) * qJD(1)) * pkin(1);
t13 = t152 * pkin(4) + t21;
t97 = t182 * t230;
t20 = -t298 - t97;
t58 = -t182 * t243 + t190 * t87;
t54 = t156 * pkin(4) + t58;
t2 = -t177 * t13 + t176 * t20 + t60 * t249 + t54 * t250;
t23 = t183 * t299 + t297 * t191 + t88 * t257;
t14 = t153 * pkin(6) + t23;
t22 = t297 * t183 - t191 * t299 - t88 * t256;
t55 = t157 * pkin(6) + t59;
t4 = -t186 * t14 + t178 * t22 - t61 * t251 + t55 * t252;
t215 = t181 * t192 + t264;
t214 = t181 * t184 - t189 * t192;
t210 = -g(1) * t140 - g(2) * t137 + t97;
t208 = t178 * t14 + t186 * t22 + t55 * t251 + t61 * t252;
t1 = -t176 * t13 - t177 * t20 - t54 * t249 + t60 * t250;
t85 = t214 * pkin(1);
t149 = qJ(9) + t166;
t122 = sin(t149);
t123 = cos(t149);
t205 = -g(1) * t122 + g(2) * t123 + t4;
t142 = qJ(10) + t165;
t119 = sin(t142);
t120 = cos(t142);
t204 = g(1) * t119 - g(2) * t120 + t2;
t203 = g(1) * t120 + g(2) * t119 - t1;
t202 = t23 + t291;
t201 = -g(1) * t123 - g(2) * t122 + t208;
t200 = g(1) * t141 + g(2) * t138 - t22;
t164 = qJ(6) + t175;
t136 = sin(t164);
t139 = cos(t164);
t199 = -pkin(1) * t236 + g(1) * t136 - g(2) * t139 + t222;
t198 = -pkin(1) * t293 + g(1) * t139 + g(2) * t136 - t234;
t197 = (-pkin(3) * t156 - t87) * qJD(4) - t299;
t196 = t210 + t298;
t195 = t21 + t292;
t188 = cos(qJ(7));
t180 = sin(qJ(7));
t173 = pkin(8) + qJ(5);
t169 = qJDD(1) + qJDD(8);
t159 = cos(t173);
t158 = sin(t173);
t155 = qJD(1) + t244;
t151 = qJDD(6) + t170;
t129 = qJD(9) + t157;
t128 = qJD(10) + t156;
t124 = qJDD(9) + t153;
t121 = qJDD(10) + t152;
t118 = pkin(4) * t137;
t117 = pkin(6) * t141;
t86 = t215 * pkin(1);
t79 = pkin(2) * t265 - t178 * t144;
t76 = -pkin(2) * t268 - t186 * t144;
t75 = -pkin(3) * t269 - t176 * t143;
t74 = pkin(3) * t270 - t177 * t143;
t69 = t215 * t277;
t68 = qJD(1) * t85;
t53 = t215 * t290;
t52 = t214 * t290;
t47 = t146 * t257 + (qJD(2) * t211 + t184 * t256) * pkin(1);
t46 = -t146 * t256 + (t184 * t257 + (-t191 * t192 + t266) * qJD(2)) * pkin(1);
t45 = -t145 * t255 + (qJD(2) * t213 - t238) * pkin(1);
t44 = t145 * t254 + (qJD(2) * t212 - t184 * t255) * pkin(1);
t31 = -t186 * t59 - t274;
t30 = t178 * t59 - t272;
t29 = -t177 * t58 + t276;
t28 = t176 * t58 + t275;
t27 = t178 * t55 - t272;
t26 = -t186 * t55 - t274;
t25 = t176 * t54 + t275;
t24 = -t177 * t54 + t276;
t10 = t68 * t155 + t198;
t9 = -t69 * t155 + t199;
t8 = qJD(9) * t216 + t178 * t46 - t186 * t47;
t7 = qJD(9) * t38 - t178 * t47 - t186 * t46;
t6 = qJD(10) * t217 + t176 * t44 - t177 * t45;
t5 = qJD(10) * t34 - t176 * t45 - t177 * t44;
t3 = [0, 0, 0, 0, 0, qJDD(1), g(2) * t193 - t284, -g(1) * t193 - g(2) * t185, 0, 0, 0, 0, 0, 0, 0, t170, (t170 * t192 + t184 * t232) * pkin(1) + t224, ((-qJDD(1) - t170) * t184 + t192 * t232) * pkin(1) + t219, 0, (t184 ^ 2 + t192 ^ 2) * t245 + t225, 0, 0, 0, 0, 0, t153, t78 * t153 + t47 * t157 + t202, -t81 * t153 - t46 * t157 + t200, 0, t22 * t81 - t61 * t46 + t23 * t78 + t59 * t47 - g(2) * t221 - g(1) * (t135 + t167), 0, 0, 0, 0, 0, t152, t77 * t152 + t45 * t156 + t195, -t80 * t152 - t44 * t156 + t196, 0, t20 * t80 + t60 * t44 + t21 * t77 + t58 * t45 - g(2) * (-t282 - t287) - g(1) * t261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, t85 * t151 + t53 * t155 + t199, t86 * t151 - t52 * t155 + t198, 0, -t234 * t86 - t69 * t52 + t222 * t85 + t68 * t53 + t154 + (-t236 * t85 - t86 * t293 - t284) * pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, (t179 * t253 + (-qJDD(1) - t169) * t187) * pkin(1) + t223, (t169 * t179 + t187 * t253) * pkin(1) + t226, 0, (t179 ^ 2 + t187 ^ 2) * t245 + t225, 0, 0, 0, 0, 0, t124, t38 * t124 + t8 * t129 + t205, t124 * t216 - t7 * t129 + t201, 0, t208 * t216 - t27 * t7 + t4 * t38 + t26 * t8 - g(2) * (t117 + t221) - g(1) * (t167 + t235), 0, 0, 0, 0, 0, t121, t34 * t121 + t6 * t128 + t204, t121 * t217 - t5 * t128 + t203, 0, -t1 * t217 - t25 * t5 + t2 * t34 + t24 * t6 - g(2) * (t220 - t282) - g(1) * (t118 + t261); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, pkin(1) * t184 * t233 + t224, (t192 * t233 - t247) * pkin(1) + t219, 0, 0, 0, 0, 0, 0, 0, t153, -t71 * t157 + (-t153 * t191 + t157 * t257) * pkin(2) + t202, t73 * t157 + (t153 * t183 + t157 * t256) * pkin(2) + t200, 0, -t59 * t71 + t61 * t73 + (-t183 * t22 - t191 * t23 + (t183 * t59 + t191 * t61) * qJD(3) + t218) * pkin(2), 0, 0, 0, 0, 0, t152, -t70 * t156 + t63 + (-t230 + t288) * t190 + t197 * t182 + t292, t72 * t156 + (-t64 - t288) * t182 + t197 * t190 + t210, 0, -t58 * t70 - t60 * t72 + (t182 * t20 + t190 * t21 + (-t182 * t58 + t190 * t60) * qJD(4) + t218) * pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, t9, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, t76 * t124 + t278 * t129 + t205, -t79 * t124 + t279 * t129 + t201, 0, -t208 * t79 + t4 * t76 - g(2) * (t117 - t289) - g(1) * t235 + t279 * t27 + t278 * t26, 0, 0, 0, 0, 0, t121, t74 * t121 + t280 * t128 + t204, -t75 * t121 + t281 * t128 + t203, 0, t1 * t75 + t2 * t74 - g(2) * t220 - g(1) * (t134 + t118) + t281 * t25 + t280 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, -t61 * t157 + t202, t59 * t157 + t200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, -t30 * t129 + (-t124 * t186 + t129 * t252) * pkin(6) + t205, t31 * t129 + (t124 * t178 + t129 * t251) * pkin(6) + t201, 0, -t26 * t30 + t27 * t31 + (t178 * t208 - t186 * t4 + (t178 * t26 + t186 * t27) * qJD(9) + t291) * pkin(6), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, t60 * t156 + t195, t58 * t156 + t196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, -t28 * t128 + (-t121 * t177 + t128 * t250) * pkin(4) + t204, t29 * t128 + (t121 * t176 + t128 * t249) * pkin(4) + t203, 0, -t24 * t28 + t25 * t29 + (-t1 * t176 - t177 * t2 + (t176 * t24 + t177 * t25) * qJD(10) + t292) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(5), g(1) * t158 - g(2) * t159, g(1) * t159 + g(2) * t158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, t9, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(7), -g(1) * t188 - g(2) * t180, g(1) * t180 - g(2) * t188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, (-qJDD(1) * t187 - t179 * t260) * pkin(1) + t223, -t187 * pkin(1) * t260 + t226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, -t27 * t129 + t205, t26 * t129 + t201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, -t25 * t128 + t204, t24 * t128 + t203, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
tau_reg = t3;
