% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% palh2m1OL
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-03 00:53
% Revision: 702b02ffee4f47164fa6a11b998f1d39ead3f7a6 (2020-05-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = palh2m1OL_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'palh2m1OL_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'palh2m1OL_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'palh2m1OL_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh2m1OL_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'palh2m1OL_invdynf_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-03 00:53:07
% EndTime: 2020-05-03 00:53:39
% DurationCPUTime: 34.74s
% Computational Cost: add. (4184->708), mult. (7378->921), div. (0->0), fcn. (3763->10), ass. (0->476)
t6822 = (qJD(1) ^ 2);
t6796 = (qJD(3) + qJD(4));
t6820 = (qJD(3) ^ 2);
t6821 = (qJD(2) ^ 2);
t7105 = 2 * qJD(2);
t6862 = -t6796 * t7105 - t6820 - t6821 + (-2 * qJD(3) - qJD(4)) * qJD(4);
t6624 = t6822 - t6862;
t6818 = (qJD(5) ^ 2);
t6615 = t6818 + t6624;
t6807 = sin(qJ(4));
t6795 = qJDD(2) + qJDD(3);
t6768 = qJDD(4) + t6795;
t6812 = cos(qJ(4));
t7027 = t6768 * t6812;
t6583 = -t6807 * t6615 + t7027;
t6730 = t6807 * t6768;
t6808 = sin(qJ(3));
t6809 = sin(qJ(2));
t6813 = cos(qJ(3));
t6814 = cos(qJ(2));
t7003 = t6808 * t6812;
t7202 = ((t6615 * t6812 + t6730) * t6813 + t6808 * t6583) * t6814 - (-t6583 * t6813 + t6615 * t7003) * t6809;
t6810 = sin(qJ(1));
t7200 = 0.2e1 * t6810;
t6815 = cos(qJ(1));
t7199 = -0.2e1 * t6815;
t6811 = cos(qJ(5));
t6798 = t6811 ^ 2;
t6799 = t6812 ^ 2;
t6769 = t6799 - 0.1e1 / 0.2e1;
t7002 = t6808 * t6813;
t6926 = t6769 * t7002;
t6800 = t6813 ^ 2;
t6970 = t6800 - 0.1e1 / 0.2e1;
t7017 = t6807 * t6812;
t6606 = t6970 * t7017 + t6926;
t6983 = t6813 * t6812;
t7004 = t6808 * t6807;
t6887 = t6983 * t7004;
t6778 = t6799 * t6822;
t6801 = t6814 ^ 2;
t6780 = t6801 * t6822;
t7026 = t6769 * t6800;
t6608 = t7026 - t6887 - t6799 / 0.2e1 + 0.1e1 / 0.4e1;
t7173 = 0.4e1 * t6608;
t6917 = t6780 * t7173 + t6778 - (0.2e1 * t6778 - t6822) * t6800;
t6991 = t6809 * t6822;
t6923 = t6814 * t6991;
t7171 = 2 * t6822;
t6865 = -0.4e1 * t6606 * t6923 + t6887 * t7171 + t6917;
t6773 = qJD(2) + t6796;
t7028 = (qJD(1) - t6773) * (qJD(1) + t6773);
t7197 = (t6865 - t7028) * t6798;
t6878 = g(1) * t6815 + t6810 * g(2);
t6995 = t6809 * t6808;
t6952 = 0.2e1 * t6995;
t6622 = (pkin(3) * t6952 - pkin(1)) * t6822 - t6878;
t6787 = t6809 * g(3);
t7080 = t6821 * pkin(2);
t6739 = -t6787 + t7080;
t6700 = t6739 * t6813;
t6747 = pkin(2) * t6991 + g(3);
t6711 = t6808 * t6747;
t6802 = qJDD(2) * pkin(2);
t7079 = t6822 * pkin(1);
t6688 = t6878 + t7079;
t7038 = t6688 * t6809;
t6627 = t7038 + t6802;
t6614 = t6627 * t6808;
t6797 = qJD(2) + qJD(3);
t6794 = t6797 ^ 2;
t6751 = t6794 + t6822;
t6735 = pkin(3) * t6751;
t6979 = t6614 - t6735;
t7094 = pkin(2) / 0.2e1;
t6521 = t6979 + (t6622 * t6813 + t6711) * t6814 + t6822 * (t6800 * pkin(3) - 0.2e1 * (t6970 * pkin(3) + t6813 * t7094) * t6801) - t6700;
t6752 = t6768 * pkin(6);
t6602 = (t6624 * pkin(4)) - t6752;
t6772 = t6821 + t6822;
t6709 = qJD(3) * t7105 + t6772 + t6820;
t7082 = t6768 * pkin(4);
t7120 = pkin(6) * t6624 + t7082;
t7196 = -pkin(3) * t6709 - t6602 * t6812 - t6807 * t7120;
t6767 = t6773 ^ 2;
t6737 = t6767 + t6822;
t6618 = -t6737 * t6807 + t7027;
t6619 = t6737 * t6812 + t6730;
t7124 = t6618 * t6808 + t6619 * t6813;
t7166 = -t6618 * t6813 + t6808 * t6619;
t6518 = t7124 * t6809 + t7166 * t6814;
t7070 = qJD(1) * t6812;
t6937 = t6773 * t7070;
t6964 = t6807 * qJDD(1);
t6647 = t6937 + t6964 / 0.2e1;
t7074 = qJD(1) * t6773;
t6954 = -2 * t7074;
t6962 = t6812 * qJDD(1);
t6656 = t6807 * t6954 + t6962;
t7007 = t6808 * t6656;
t6565 = t6647 * t6813 + t7007 / 0.2e1;
t7043 = t6656 * t6813;
t7172 = -0.2e1 * t6808;
t6568 = t6647 * t7172 + t7043;
t6996 = t6809 * t6568;
t6533 = t6565 * t6814 + t6996 / 0.2e1;
t7195 = t6518 * t6810 + t6533 * t7199;
t7194 = t6518 * t6815 + t6533 * t7200;
t6791 = pkin(3) * t6807;
t6816 = -pkin(6) / 0.2e1;
t6950 = pkin(4) * t7017;
t7083 = pkin(6) * t6799;
t6632 = t7083 - t6950 - t6791 / 0.2e1 + t6816;
t6779 = t6800 * t6822;
t6793 = pkin(2) * t6808;
t7086 = pkin(4) * t6799;
t6942 = -pkin(4) + 0.2e1 * t7086;
t7015 = t6807 * t6822;
t6944 = pkin(4) * t7015;
t7001 = t6808 * t6822;
t7016 = t6807 * t6813;
t6790 = pkin(6) * t6807;
t6756 = t6790 + pkin(3) / 0.2e1;
t7029 = t6756 * t6812;
t7085 = pkin(4) * t6807;
t7092 = 0.4e1 * t6799 - 0.2e1;
t7101 = 0.2e1 * t6800;
t6663 = t6767 * pkin(6) + t7082;
t7123 = -t6822 * pkin(6) - t6663;
t6762 = t6791 + pkin(6);
t7134 = -t6762 + 0.2e1 * t7083;
t7154 = 0.2e1 * t6790 + pkin(3);
t6699 = t6739 * t6808;
t6770 = t6795 * pkin(3);
t7168 = t6699 + t6770;
t7193 = t6979 * t6807 - (t6627 * t6812 + t6739 * t6807 - t7001 * (t6812 * t7154 + t6942)) * t6813 + (-t6944 - t7168) * t6812 + pkin(6) * t6778 - ((-t7134 + 0.2e1 * t6950) * t7101 + pkin(2) * t7016 + (t6793 - 0.2e1 * t7085) * t6812 + (pkin(4) * t7092 + 0.4e1 * t7029) * t7002 + t7134) * t6780 - 0.2e1 * t6632 * t6779 + t7123;
t6746 = t6813 * t7001;
t6993 = t6809 * t6814;
t6826 = (t6801 * t7002 + t6970 * t6993) * t7171 - t6746;
t6823 = t6826 + t6795;
t6579 = qJDD(4) + t6823;
t6566 = t6579 * t6812;
t6984 = t6813 * t6809;
t6683 = t6814 * t6808 + t6984;
t7104 = 0.2e1 * t6779;
t6914 = 0.2e1 * t6746 * t6993 + t6779 - (t7104 - t6822) * t6801;
t6882 = t6767 + t6914;
t7068 = qJD(5) * qJD(1);
t7170 = 2 * t7068;
t7192 = -t6683 * t7170 + (t6818 + t6882) * t6807 - t6566;
t7098 = 0.2e1 * t6808;
t6643 = t6944 * t7098 + t6739;
t6664 = (t6767 * pkin(4)) - t6752;
t7191 = t6979 * t6812 + t6739 * t7004 + t6770 * t6807 + (t6627 * t6807 - t6643 * t6812) * t6813 - t6664;
t6522 = t6865 - t6737;
t6589 = t6624 * t6812 + t6730;
t6591 = -t6624 * t6807 + t7027;
t7187 = t6589 * t6813 + t6591 * t6808;
t7186 = t6579 * t6807 + t6812 * t6882;
t7122 = pkin(6) * t6737 + t7082;
t6637 = (t6737 * pkin(4)) - t6752;
t7148 = t6637 * t6812;
t7185 = -t6807 * t7122 - t6735 - t7148;
t7164 = t6589 * t6808 - t6591 * t6813;
t7183 = t6809 * t7187 + t7164 * t6814;
t6943 = pkin(4) * t6991;
t6891 = t6808 * t6943;
t6817 = -pkin(4) / 0.2e1;
t7048 = (t6817 + t7029 + t7086) * t6800;
t7110 = t7002 * t7092 - 0.2e1 * t7017;
t7182 = -(-pkin(3) * t6812 + pkin(6) * t7110 - t6942 + 0.4e1 * t7048) * t6991 + (t6622 * t6807 + (0.4e1 * t6807 * t6891 - t6747) * t6812) * t6813;
t7091 = t7101 - 0.1e1;
t7181 = t6818 + t6917;
t6915 = t6663 * t6812 - t6664 * t6807 + t6770;
t6985 = t6812 * qJD(5);
t6935 = t6773 * t6985;
t6965 = qJDD(5) * t6807;
t6654 = 0.2e1 * t6935 + t6965;
t7045 = t6654 * t6813;
t6777 = qJDD(5) * t6812;
t7067 = qJD(5) * t6773;
t6930 = t6807 * t7067;
t7127 = 0.2e1 * t6930 - t6777;
t7176 = -t6808 * t7127 + t7045;
t6623 = t6818 - t6862;
t6588 = t6623 * t6812 + t6730;
t6590 = -t6623 * t6807 + t7027;
t7175 = (t6808 * t6588 - t6590 * t6813) * t6814 + t6809 * (t6588 * t6813 + t6590 * t6808);
t7174 = 2 * qJD(1);
t6784 = -2 * t7068;
t6655 = 0.2e1 * t6937 + t6964;
t7169 = (-t6808 * t6655 + t7043) * t6814;
t7130 = pkin(4) * t6812 + pkin(3) + t6790;
t6634 = -t6807 * t6767 + t7027;
t6636 = t6767 * t6812 + t6730;
t7167 = -t6634 * t6813 + t6808 * t6636;
t6750 = t6795 * t6813;
t6853 = t6751 * t6808 - t6750;
t6749 = t6808 * t6795;
t6893 = t6751 * t6813 + t6749;
t6558 = t6853 * t6809 - t6814 * t6893;
t6616 = t6808 * t6709 - t6750;
t6895 = t6709 * t6813 + t6749;
t7163 = t6809 * t6616 - t6814 * t6895;
t6660 = t6808 * t6794 - t6750;
t7024 = t6794 * t6813;
t6661 = t6749 + t7024;
t6572 = t6660 * t6814 + t6661 * t6809;
t6873 = -qJDD(2) + t6923;
t6698 = -qJDD(3) + t6873;
t6679 = -qJDD(4) + t6698;
t6644 = t6807 * t6679;
t6701 = t6780 + t6767;
t6599 = t6701 * t6812 - t6644;
t7041 = t6679 * t6812;
t6855 = t6701 * t6807 + t7041;
t7161 = t6599 * t6808 + t6813 * t6855;
t6872 = qJDD(2) + t6923;
t6697 = qJDD(3) + t6872;
t6678 = qJDD(4) + t6697;
t6645 = t6678 * t6812;
t6676 = t6780 - t6737;
t6586 = t6807 * t6676 + t6645;
t7020 = t6807 * t6678;
t6856 = t6676 * t6812 - t7020;
t7160 = -t6586 * t6808 + t6813 * t6856;
t6607 = t6780 - t6615;
t6999 = t6809 * qJD(5);
t7159 = t6813 * (-t6807 * t6607 - t6645) - (t6607 * t6812 - t7020) * t6808 - t6999 * t7174;
t6969 = t6818 + t6822;
t6710 = t6767 + t6969;
t6612 = t6807 * t6710 - t7027;
t7158 = ((t6710 * t6812 + t6730) * t6813 - t6808 * t6612) * t6814 - (t6612 * t6813 + t6710 * t7003) * t6809;
t6725 = pkin(6) * t6812 - t7085;
t7157 = 0.2e1 * t7130 * t7002 + (-0.2e1 * t6800 + 0.1e1) * t6725;
t6956 = 2 * qJD(5);
t7153 = t6568 * t6814;
t6682 = t6983 - t7004;
t7040 = t6682 * t6814;
t7142 = (t6807 * t6984 - t7040) * t6956;
t6920 = t6606 * t6780;
t6592 = 0.4e1 * t6920;
t6745 = t6812 * t7015;
t6885 = t6800 * t6745;
t6707 = -0.2e1 * t6885;
t7136 = t6592 + t6707;
t7072 = qJD(1) * t6808;
t6927 = t6797 * t7072;
t6966 = qJDD(1) * t6813;
t6669 = -0.2e1 * t6927 + t6966;
t6641 = t6669 * t6814;
t7073 = qJD(1) * t6797;
t6936 = t6813 * t7073;
t6967 = qJDD(1) * t6808;
t6666 = 0.2e1 * t6936 + t6967;
t6584 = -t6666 * t6809 + t6641;
t7119 = 0.4e1 * t6790 + 0.2e1 * pkin(3);
t7135 = -t7154 + (-0.4e1 * pkin(4) * t7004 + pkin(2)) * t6813 + t7119 * t6800;
t7132 = -t6780 - t6821;
t7131 = t7091 * t7130;
t6963 = t6809 * qJDD(2);
t7025 = t6772 * t6814;
t6668 = -t6963 - t7025;
t6879 = -pkin(4) * t6923 + pkin(6) * t6780;
t7121 = -t6879 + t7122;
t7118 = t6777 / 0.2e1 - t6930;
t6928 = t6807 * t6995;
t6876 = t6928 * t6956;
t6994 = t6809 * t6812;
t6922 = qJD(1) * t6994;
t6886 = qJD(5) * t6922;
t7000 = t6809 * qJD(1);
t7093 = 0.2e1 * t6799 - 0.1e1;
t7117 = -qJD(1) * (-0.4e1 * ((t7016 / 0.2e1 + t7003 / 0.2e1) * qJD(5) + t6608 * t7000) * t6814 + t6876) - (t7093 * t7001 - 0.2e1 * t6886) * t6813 + t6745 + t6768;
t6652 = t6688 * t6808;
t7116 = t6747 * t6813 + t6652;
t7044 = t6655 * t6813;
t6535 = t6814 * (t7007 + t7044) + t6996;
t7088 = pkin(2) * t6807;
t7111 = -t7134 * t7002 + pkin(6) * t7017 + (t7135 * t6812 + ((-0.2e1 * t6762 + 0.4e1 * t7083) * t6813 - t7088) * t6808 + (t6800 * t7092 - t7093) * pkin(4)) * t6801 - 0.2e1 * t7048 + t7086;
t6675 = t6818 + t6701;
t7108 = t6808 * (t6807 * t6675 + t7041) - t6813 * (t6675 * t6812 - t6644) + t6814 * t6784;
t7106 = -2 * qJD(1);
t6806 = sin(qJ(5));
t7100 = -0.2e1 * t6806;
t7099 = -0.2e1 * t6807;
t7097 = -0.2e1 * t6809;
t7096 = 0.2e1 * t6809;
t7095 = 0.2e1 * t6811;
t7090 = pkin(1) * t6813;
t7089 = pkin(2) * t6772;
t7081 = t6800 * pkin(4);
t6960 = t6815 * qJDD(1);
t7078 = pkin(1) * t6960 - g(2);
t6805 = qJDD(1) * pkin(1);
t7077 = qJDD(1) * pkin(3);
t7076 = qJDD(1) * pkin(4);
t7075 = qJD(1) * qJD(2);
t7071 = qJD(1) * t6811;
t6949 = pkin(6) * t7074;
t6685 = t6949 + t7076 / 0.2e1;
t6948 = pkin(3) * t7073;
t6803 = qJDD(1) * pkin(6);
t6951 = pkin(4) * t7074;
t6686 = t6951 - t6803 / 0.2e1;
t7039 = t6686 * t6812;
t6567 = t6685 * t6807 + t6948 + t7039;
t6850 = t6686 * t6807 - t7077 / 0.2e1;
t6576 = t6685 * t6812 - t6850;
t6782 = pkin(2) * t7075;
t7066 = (t6567 * t6813 + t6576 * t6808 + t6782) * t6809;
t6804 = qJDD(1) * pkin(2);
t7065 = (t6576 * t6813 - t6567 * t6808 + t6804 / 0.2e1) * t6814;
t6925 = qJD(1) * t6995;
t7018 = t6807 * t6800;
t7063 = (t6922 * t7018 + (-t6985 / 0.2e1 + t6769 * t6925) * t6813 - t6807 * (-t6808 * qJD(5) + t6922) / 0.2e1) * t6814;
t6824 = t6826 - t6795;
t6580 = -qJDD(4) + t6824;
t7060 = t6580 * t6807;
t7059 = t6580 * t6812;
t6662 = t6936 + t6967 / 0.2e1;
t7052 = (pkin(3) * t6662 + t6782) * t6809;
t6842 = -t6966 / 0.2e1 + t6927;
t7049 = (-t6804 / 0.2e1 + t6842 * pkin(3)) * t6814;
t6646 = t6935 + t6965 / 0.2e1;
t7047 = t6646 * t6813;
t6691 = t6780 - t6751;
t7037 = t6691 * t6808;
t6712 = t6747 * t6807;
t6681 = t7003 + t7016;
t6594 = t6681 * t6814 + t6809 * t6682;
t6555 = qJDD(1) * t6594 - (2 * t7067);
t7023 = t6806 * t6555;
t7022 = t6806 * t6773;
t7009 = t6808 * t6646;
t6992 = t6809 * t6821;
t6989 = t6810 * t6822;
t6988 = t6811 * t6555;
t6987 = t6811 * t6773;
t6986 = t6811 * t6822;
t6651 = t6814 * t6688;
t6982 = 0.4e1 * (t6778 / 0.4e1 - t7028 / 0.4e1 + (t6608 * t6801 - t6606 * t6993 - t7026 / 0.2e1 + t6887 / 0.2e1) * t6822) * t6806 * t6811 + t6594 * t6798 * t6954;
t6694 = 0.2e1 * t6949 + t7076;
t6695 = -t6803 + (2 * t6951);
t6832 = t6694 * t6812 - t6695 * t6807 + t7077;
t6981 = t6832 * t6813 + t6804;
t6977 = -t6651 + t6787;
t6665 = t6768 * t6928;
t6976 = t6665 + t6784;
t6974 = -t6694 * t6807 - 0.2e1 * t6948;
t6972 = t7170 - t6665;
t6788 = t6814 * g(3);
t6971 = t6788 + t6802;
t6684 = t6814 * t6813 - t6995;
t6968 = qJDD(1) * t6684;
t6775 = t6809 * qJDD(1);
t6776 = t6814 * qJDD(1);
t6961 = t6814 * qJDD(2);
t6958 = t6773 * t6876 + qJDD(1);
t6908 = t6808 * t6962;
t6957 = t6809 * t6908 - qJDD(5);
t6955 = 0.2e1 * t6815;
t6947 = pkin(2) * t6780;
t6946 = pkin(4) * t7002;
t6945 = pkin(6) * t7002;
t6934 = (qJD(1) * t7003 - t6999) * t7016;
t6933 = t6773 * t7004;
t6932 = t6809 * t6987;
t6931 = t6799 * t7001;
t6929 = t6688 * t7004;
t6924 = qJD(2) * t7000;
t6918 = -qJD(1) * t6806 / 0.2e1;
t6911 = t6807 * t6775;
t6910 = t6809 * t6962;
t6909 = t6808 * t6777;
t6889 = t6807 * t6925;
t6877 = -0.2e1 * t6889;
t6907 = t6773 * t6877 + t6957;
t6904 = g(1) * t6810 - t6815 * g(2);
t6903 = t7022 * t7096;
t6902 = 0.2e1 * t6933;
t6901 = -0.2e1 * t6924;
t6900 = -0.4e1 * t6920;
t6899 = -((t6952 * t7154 - pkin(1)) * t6822 - t6878) * t6812 - t6712;
t6631 = t7127 * t6813;
t6569 = -t6808 * t6654 - t6631;
t6897 = -0.4e1 * t6632 * t6800 - t6762;
t6892 = -0.2e1 * t6799 + 0.4e1 * t7026;
t6888 = t6594 * t6806 * t6987;
t6883 = -t6822 + t6914;
t6881 = t6808 * t6911;
t6687 = t6805 + t6904;
t6875 = 0.2e1 * t6885;
t6869 = t6808 * t6886;
t6867 = t6814 * t7116 + t6699;
t6574 = -t6767 + t6883;
t6864 = -t6914 + t6737;
t6562 = t6808 * t6634 + t6636 * t6813;
t6526 = t6562 * t6814 - t7167 * t6809;
t6717 = -t6810 * qJDD(1) - t6815 * t6822;
t6715 = -t6961 + t6992;
t6740 = pkin(2) * t6901;
t6851 = t6687 + t6740;
t6848 = t6808 * t6725;
t6847 = t6684 * t6784 + t7060;
t6843 = 0.2e1 * t6924 - t6776;
t6689 = 0.2e1 * t6869;
t6838 = 0.4e1 * qJD(1) * t7063 + t6934 * t7106 + t6689 - t7181;
t6835 = 0.2e1 * t6848;
t6834 = pkin(2) * t7132 + t6977;
t6833 = -t6813 * t6878 + t6711;
t6830 = -pkin(2) * t7025 - t6802 * t6809 - t7079;
t6564 = t6682 * t6776 - t6813 * t6911 - t6957;
t6628 = pkin(2) * t6668 - t7079;
t6827 = t6745 + (t6993 * t7173 - 0.2e1 * t6926) * t6822 + t7136;
t6792 = pkin(3) * t6813;
t6771 = -2 * t6782;
t6764 = pkin(2) * t6776;
t6763 = t6792 + pkin(2);
t6728 = -0.2e1 * t6891;
t6727 = t6943 * t7099;
t6724 = t6780 + t6794;
t6716 = -t6960 + t6989;
t6714 = t6814 * t6821 + t6963;
t6693 = 0.2e1 * t6814 * t7075 + t6775;
t6692 = t6776 + t6901;
t6690 = -0.2e1 * t6869;
t6677 = pkin(2) * t6715 - g(3);
t6667 = t6772 * t6809 - t6961;
t6659 = t6683 * qJDD(1);
t6611 = -pkin(3) * t7001 + t6627;
t6610 = t6764 + t6851;
t6605 = pkin(4) * t6701 + pkin(6) * t6923 - t6752;
t6604 = -t6879 - t6663;
t6601 = t6968 - t7127;
t6600 = -t6654 + t6659;
t6595 = (pkin(4) * t6801 + pkin(6) * t6993) * t6822 - t6637;
t6578 = t6662 * t7097 + t6641;
t6577 = -t6666 * t6814 + t6842 * t7096;
t6575 = t6662 * t6814 + t6809 * t6669 / 0.2e1;
t6573 = -t6660 * t6809 + t6661 * t6814;
t6570 = -t6695 * t6812 + t6974;
t6563 = t6794 * pkin(3) + t6663 * t6807 + t6664 * t6812;
t6559 = t6893 * t6809 + t6814 * t6853;
t6557 = t6569 + t6776;
t6556 = t6775 - t7176;
t6554 = -qJD(1) * t7142 + t6690 + t6969;
t6553 = pkin(2) * t6992 + pkin(3) * t6572 - t6802 * t6814 - g(3);
t6552 = t6822 / 0.2e1 + t6818 / 0.2e1 + (-t6681 * t6809 + t7040) * t7068;
t6551 = t6637 * t6807 - t6812 * t7122 - t6770;
t6546 = t6584 * pkin(3) + t6771 * t6809 + t6804 * t6814 + t6687;
t6545 = t6558 * pkin(3) + t6830;
t6543 = t6602 * t6807 - t6812 * t7120 - t6770;
t6537 = t6569 * t6809 + t7176 * t6814;
t6534 = t6565 * t7097 + t7153;
t6530 = t6569 * t6814 + (-t6909 - t7045) * t6809 + t6958;
t6529 = t6655 * t6984 + t6907 - t7169;
t6528 = t7169 + (qJD(1) * t6902 - t7044) * t6809 - t6957;
t6525 = t6562 * t6809 + t7167 * t6814;
t6524 = (-t6813 * t7118 + t7009) * t6814 - qJDD(1) / 0.2e1 + (t6808 * t7118 + t7047) * t6809;
t6523 = t6827 - t6768;
t6520 = t6611 * t6813 + t6770 + ((t6792 + t7094) * t6801 * t7098 + t7091 * pkin(3) * t6993) * t6822 + t6867;
t6519 = t6809 * t7166 - t6814 * t7124;
t6515 = t6976 - t7158;
t6514 = t6528 * t6806 + t6811 * t6554;
t6513 = t6529 * t6806 - 0.2e1 * t6552 * t6811;
t6512 = t6528 * t6811 + t6552 * t7100;
t6511 = t6875 + t6900 - t7117;
t6510 = t7117 + t7136;
t6509 = (t6570 * t6808 + t6981) * t6814 + (t6570 * t6813 - t6808 * t6832 + t6771) * t6809 + t6687;
t6508 = (t6563 * t6808 - t6915 * t6813 - t6802) * t6814 + (t6563 * t6813 + t6808 * t6915 + t7080) * t6809 - g(3);
t6507 = ((t6974 - 0.2e1 * t7039) * t6808 + t6981) * t6814 - 0.2e1 * t6567 * t6984 + t6685 * t6994 * t7172 + t6850 * t6952 + t6851;
t6506 = (t6972 + t7158) * t6806 + t6524 * t7095;
t6505 = (t6551 * t6808 + t7185 * t6813 - t7089) * t6814 + (t6551 * t6813 - t7185 * t6808 - t6802) * t6809 - t7079;
t6504 = t6537 * t6806 + t7175 * t6811;
t6503 = t6537 * t6811 - t7175 * t6806;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t6717, t6716, 0, -g(1), 0, 0, 0, 0, 0, 0, t6668 * t6815 + t6810 * t6843, t6667 * t6815 + t6810 * t6693, t6716, pkin(1) * t6717 - g(1), 0, 0, 0, 0, 0, 0, t6558 * t6815 - t6578 * t6810, t6559 * t6815 + t6575 * t7200, t6716, t6628 * t6815 - g(1) + (pkin(2) * t6843 - t6805) * t6810, 0, 0, 0, 0, 0, 0, t6519 * t6815 - t6810 * t6534, t7194, t6716, t6545 * t6815 - g(1) + (0.2e1 * t7049 + 0.2e1 * t7052 - t6805) * t6810, 0, 0, 0, 0, 0, 0, (t6515 * t6811 + 0.2e1 * t6524 * t6806) * t6815 + (t6529 * t6811 + t6554 * t6806) * t6810, t6506 * t6815 + t6810 * t6514, -t7194, t6505 * t6815 - g(1) + (-0.2e1 * t7065 + 0.2e1 * t7066 - t6805) * t6810; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t6716, t6717, 0, -g(2), 0, 0, 0, 0, 0, 0, t6668 * t6810 - t6815 * t6843, t6667 * t6810 - t6815 * t6693, t6717, -pkin(1) * t6989 + t7078, 0, 0, 0, 0, 0, 0, t6558 * t6810 + t6578 * t6815, t6559 * t6810 + t6575 * t7199, t6717, t6628 * t6810 + (t6740 + t6764 + t6805) * t6815 - g(2), 0, 0, 0, 0, 0, 0, t6519 * t6810 + t6815 * t6534, t7195, t6717, t6545 * t6810 + (-t7049 - t7052) * t6955 + t7078, 0, 0, 0, 0, 0, 0, (t6515 * t6810 + t6528 * t6815) * t6811 - (((-t6631 - 0.2e1 * t7009) * t6814 + (-t6909 - 0.2e1 * t7047) * t6809 + t6958) * t6810 + t6554 * t6815) * t6806, t6506 * t6810 - t6514 * t6815, -t7195, t6505 * t6810 + (t7065 - t7066) * t6955 + t7078; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t6715, t6714, 0, -g(3), 0, 0, 0, 0, 0, 0, t6572, t6573, 0, t6677, 0, 0, 0, 0, 0, 0, t6525, t6526, 0, t6553, 0, 0, 0, 0, 0, 0, t6504, t6503, -t6526, t6508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6822, -qJDD(1), 0, -t6878, 0, 0, 0, 0, 0, 0, t6668, t6667, -qJDD(1), -t6688, 0, 0, 0, 0, 0, 0, t7163, t6616 * t6814 + t6809 * t6895, -qJDD(1), t6628 - t6878, 0, 0, 0, 0, 0, 0, t6809 * t7164 - t7187 * t6814, t7183, -qJDD(1), pkin(3) * t7163 + t6830 - t6878, 0, 0, 0, 0, 0, 0, (t6976 - t7202) * t6811 - t6806 * t6530, (t6972 + t7202) * t6806 - t6530 * t6811, -t7183, (t6543 * t6808 + t7196 * t6813 - t7089) * t6814 + (t6543 * t6813 - t7196 * t6808 - t6802) * t6809 - t6688; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t6822, 0, t6904, 0, 0, 0, 0, 0, 0, t6692, -t6693, -t6822, t6687, 0, 0, 0, 0, 0, 0, t6584, t6577, -t6822, t6610, 0, 0, 0, 0, 0, 0, t6534, -t6535, -t6822, t6546, 0, 0, 0, 0, 0, 0, t6512, t6513, t6535, t6509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t6715, t6714, 0, -g(3), 0, 0, 0, 0, 0, 0, t6572, t6573, 0, t6677, 0, 0, 0, 0, 0, 0, t6525, t6526, 0, t6553, 0, 0, 0, 0, 0, 0, t6504, t6503, -t6526, t6508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7132, t6873, -t6776, t6977, 0, 0, 0, 0, 0, 0, t6808 * t6698 - t6724 * t6813, t6813 * t6698 + t6724 * t6808, -t6776, t6834, 0, 0, 0, 0, 0, 0, -t6599 * t6813 + t6808 * t6855, t7161, -t6776, -t6763 * t6780 - t6651 + (-t7024 + (-t6795 + t6923) * t6808) * pkin(3) - t6739, 0, 0, 0, 0, 0, 0, -t6557 * t6806 + t6811 * t7108, -t6557 * t6811 - t6806 * t7108, -t7161, (-pkin(3) * t6724 + t6604 * t6807 - t6605 * t6812) * t6813 + (pkin(3) * t6698 + t6604 * t6812 + t6605 * t6807) * t6808 + t6834; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6872, t6780 - t6772, t6775, t7038 + t6788, 0, 0, 0, 0, 0, 0, t6813 * t6697 + t7037, t6691 * t6813 - t6808 * t6697, t6775, ((pkin(2) * t6814 + pkin(1)) * t6822 + t6878) * t6809 + t6971, 0, 0, 0, 0, 0, 0, t6586 * t6813 + t6808 * t6856, t7160, t6775, ((t6763 * t6814 + pkin(1)) * t6822 + t6878) * t6809 + (t6750 + t7037) * pkin(3) + t6971, 0, 0, 0, 0, 0, 0, t6556 * t6806 - t6811 * t7159, t6556 * t6811 + t6806 * t7159, -t7160, (t6691 * pkin(3) + t6595 * t6812 - t6807 * t7121) * t6808 + (pkin(3) * t6697 + t6595 * t6807 + t6812 * t7121) * t6813 + t6747 * t6814 + t6627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6692, -t6693, -t6822, t6687, 0, 0, 0, 0, 0, 0, t6584, t6577, -t6822, t6610, 0, 0, 0, 0, 0, 0, t6534, -t6535, -t6822, t6546, 0, 0, 0, 0, 0, 0, t6512, t6513, t6535, t6509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6794 + t6883, t6824, -t6968, -t6813 * t6947 + (-t6688 * t6813 + t6711) * t6814 - t6700 + t6614, 0, 0, 0, 0, 0, 0, t6574 * t6812 + t7060, t6807 * t6864 + t7059, -t6968, t6521, 0, 0, 0, 0, 0, 0, ((-t6818 + t6574) * t6812 + t6847) * t6811 - t6806 * t6601, ((t6818 + t6864) * t6812 - t6847) * t6806 - t6601 * t6811, t6574 * t6807 - t7059, -((pkin(2) + t6835) * t6813 + t7131) * t6780 + ((t6809 * t7157 - t7090) * t6822 + t6833) * t6814 + t7130 * t6779 + (t6822 * t6848 - t6739) * t6813 - t7148 + t7123 * t6807 + t6979; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6823, -t6794 - t6914, t6659, t6627 * t6813 + t6808 * t6947 + t6867, 0, 0, 0, 0, 0, 0, -t6807 * t6882 + t6566, -t7186, t6659, t6520, 0, 0, 0, 0, 0, 0, t6806 * t6600 - t6811 * t7192, t6811 * t6600 + t6806 * t7192, t7186, (t6793 + t7157) * t6780 + ((t6813 * t6835 + t7131) * t6991 + t7116) * t6814 + t6725 * t6779 + (-t7001 * t7130 + t6627) * t6813 + t6699 + t6915; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6584, t6577, -t6822, t6610, 0, 0, 0, 0, 0, 0, t6534, -t6535, -t6822, t6546, 0, 0, 0, 0, 0, 0, t6512, t6513, t6535, t6509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6767 - t6865, t6523, (t6807 * t6683 - t6812 * t6684) * qJDD(1), t6807 * t6520 + t6521 * t6812, 0, 0, 0, 0, 0, 0, (-t6767 + t6838) * t6811 - t6564 * t6806, (t6690 + t6767 + (0.2e1 * t6934 - 0.4e1 * t7063) * qJD(1) + t7181) * t6806 - t6811 * t6564, -t6523, -0.4e1 * ((t6817 + t6945 + t7081) * t6801 + (t6800 * pkin(6) + t6816 - t6946) * t6993 - t7081 / 0.2e1 - t6945 / 0.2e1 + pkin(4) / 0.4e1) * t6778 + (-t7135 * t6780 + (t6727 + (-t7090 + (0.4e1 * pkin(4) * t7018 + t7002 * t7119) * t6809) * t6822 + t6833) * t6814 + t6756 * t7104 - t6643 * t6813 - pkin(6) * t7015 + t6979) * t6812 + (t7091 * pkin(4) + (0.2e1 * t6762 * t6813 + t7088) * t6808) * t6780 + ((t6712 + t6728) * t6813 + t6652 * t6807 + t7091 * t6991 * t6762) * t6814 - pkin(4) * t6779 + (-pkin(6) * t7001 + t6611 * t6807) * t6813 + t7168 * t6807 - t6664; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6827 + t6768, t6522, (t6683 * t6812 + t6807 * t6684) * qJDD(1), t6520 * t6812 - t6521 * t6807, 0, 0, 0, 0, 0, 0, t6510 * t6811 + t7023, t6511 * t6806 + t6988, -t6522, (t6652 * t6812 - t6747 * t7004 - t7182) * t6814 - t7193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6534, -t6535, -t6822, t6546, 0, 0, 0, 0, 0, 0, t6512, t6513, t6535, t6509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t7197 + t6689 + (-0.2e1 * t6888 + t7142) * qJD(1) - t6969, 0.2e1 * t6647 * t6984 + t6907 + t6982 - t7153, t6811 * t6900 + ((0.4e1 * (t6811 * t6889 + t7022 / 0.2e1) * t7070 + t6806 * t6964) * t6813 + t6806 * t6908 - qJD(1) * (t6806 * t6902 + t6811 * t7000) - t6892 * t6809 * t6986) * t6814 + t6811 * t6875 + (t6931 * t7095 + t6806 * t6910 - qJD(1) * (t6807 * t6903 + t6808 * t7071)) * t6813 - (t6807 * t7071 + t6808 * t6903) * t7070 + t6811 * t6768 - t6806 * t6881, (((t6728 - t6899) * t6813 + (t6711 + t6727) * t6812 + t6929) * t6814 + t7191) * t6811 + t6806 * t6507 + (((0.2e1 * pkin(6) + 0.4e1 * t6946) * t6799 + t6897) * t6993 - t7111) * t6986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6564 + t6982, t6888 * t7174 + t6838 + t6862 + t7197, t6806 * t6592 + ((0.2e1 * (t6806 * t6877 + t6987) * t7070 + t6811 * t6964) * t6813 + t6811 * t6908 + (t6809 * t6918 + t6811 * t6933) * t7106 + t6892 * t6806 * t6991) * t6814 + t6806 * t6707 + (t6811 * t6910 + t6931 * t7100 + (t6806 * t7072 + t6932 * t7099) * qJD(1)) * t6813 - 0.2e1 * (t6807 * t6918 + t6808 * t6932) * t7070 - t6811 * t6881 - t6806 * t6768, t6811 * t6507 + ((-t6747 * t7003 + t6813 * t6899 - t6929) * t6814 + ((-pkin(4) * t7110 - t6897 - 0.2e1 * t7083) * t6993 + t7111) * t6822 - t7191) * t6806; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6511 * t6811 - t7023, t6806 * t6510 - t6988, t6522, ((-t6688 * t6812 + t6712) * t6808 + t7182) * t6814 + t7193;];
f_new_reg = t1;
