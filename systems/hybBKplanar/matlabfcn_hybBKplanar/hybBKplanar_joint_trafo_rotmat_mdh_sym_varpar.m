% Calculate homogenous joint transformation matrices for
% hybBKplanar
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [3x1]
%   Generalized joint coordinates (joint angles)
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,CF,ED]';
% 
% Output:
% T_mdh [4x4x7]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)
% T_stack [(7+1)*3 x 4]
%   stacked matrices from T_mdh into one 2D array, last row left out.
%   Last row only contains [0 0 0 1].

% Quelle: HybrDyn-Toolbox
% Datum: 2020-07-01 10:09
% Revision: b9e8aa5c608190a7b43c48aaebfd2074f0379b0d (2020-06-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_mdh, T_stack] = hybBKplanar_joint_trafo_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [3 1]), ...
  'hybBKplanar_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'hybBKplanar_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-07-01 09:57:27
% EndTime: 2020-07-01 09:57:30
% DurationCPUTime: 3.36s
% Computational Cost: add. (8484->385), mult. (25200->471), div. (74->5), fcn. (2924->8), ass. (0->209)
t554 = 4 * pkin(3);
t412 = pkin(6) ^ 2;
t361 = -t412 / 0.3e1;
t415 = pkin(4) ^ 2;
t553 = t361 - t415 / 0.3e1;
t411 = t412 ^ 2;
t414 = t415 ^ 2;
t552 = -t411 / 0.6e1 + t414 / 0.6e1;
t384 = cos(qJ(2));
t347 = t384 ^ 2;
t551 = -0.2e1 * t347;
t420 = pkin(3) ^ 2;
t418 = t420 ^ 2;
t550 = 4 * t418;
t549 = 2 * t420;
t398 = 6 * t420;
t424 = (pkin(2) ^ 2);
t548 = 2 * t424;
t426 = (pkin(1) ^ 2);
t409 = 2 * t426;
t431 = t424 ^ 2;
t401 = 5 * t431;
t547 = -pkin(4) - pkin(6);
t546 = -pkin(4) + pkin(6);
t382 = sin(qJ(1));
t339 = pkin(2) * t382;
t385 = cos(qJ(1));
t545 = pkin(2) * t385;
t381 = sin(qJ(2));
t544 = pkin(3) * t381;
t338 = pkin(3) * t384;
t500 = pkin(1) * t545;
t328 = -0.2e1 * t500;
t350 = t385 ^ 2;
t534 = t350 * t424;
t497 = 0.2e1 * t534;
t507 = -t424 + t426;
t308 = t328 + t497 + t507;
t533 = t381 * t382;
t492 = pkin(2) * t533;
t464 = pkin(3) * t492;
t320 = -0.2e1 * t464;
t403 = -3 * t424;
t341 = t420 + t426;
t470 = -t412 + t341;
t324 = -t415 + t470;
t446 = t424 + t324;
t445 = t328 + t446;
t510 = t412 - t426;
t472 = t415 + t510;
t527 = t420 * t347;
t495 = -0.4e1 * t527;
t508 = t420 - t426;
t325 = pkin(1) - t545;
t540 = t325 * t384;
t298 = sqrt(t308 * t495 + 0.4e1 * t508 * t534 + 0.4e1 * t446 * t500 - t418 + (t403 + t472) * t549 - (t426 + (pkin(2) - t547) * (pkin(2) + t547)) * (t426 + (pkin(2) - t546) * (pkin(2) + t546)) + (-(t320 + t445) * t540 + t445 * t492) * t554);
t425 = t426 ^ 2;
t509 = t418 + t425;
t514 = t409 - t412;
t526 = t426 * t412;
t306 = t514 * t420 + t509 - t526 - t552;
t334 = t426 - t424 / 0.3e1;
t309 = t334 * t320;
t369 = t415 / 0.3e1;
t506 = t424 + t426;
t471 = t420 + t506;
t313 = t361 + t369 + t471;
t314 = t325 + t338;
t344 = t403 + t426;
t346 = t384 * t347;
t434 = pkin(3) * t420;
t524 = t434 * t346;
t493 = pkin(1) * t524;
t465 = 0.8e1 * t493;
t317 = t344 * t465;
t408 = 3 * t426;
t511 = t412 + t415;
t329 = t408 - t511;
t539 = t329 * t420;
t319 = 0.10e2 * t539;
t362 = -t412 / 0.2e1;
t322 = t362 + t471;
t323 = t415 + t470;
t326 = pkin(1) + t338;
t499 = pkin(1) * t338;
t327 = 0.2e1 * t499;
t407 = 4 * t426;
t331 = (t407 + t412) * t420;
t333 = -t420 / 0.3e1 + t426;
t335 = t341 ^ 2;
t336 = 0.10e2 / 0.3e1 * t420;
t337 = -0.30e2 * t412 + (60 * t426);
t343 = -3 * t420 + t426;
t359 = -t412 / 0.6e1;
t360 = -t412 / 0.4e1;
t374 = 0.4e1 / 0.3e1 * t420;
t375 = t420 / 0.3e1;
t376 = t420 / 0.2e1;
t390 = 15 * t418;
t391 = 15 * t420;
t392 = 10 * t420;
t393 = -0.2e1 * t412;
t394 = -0.5e1 * t412;
t395 = 7 * t418;
t396 = 5 * t418;
t397 = 7 * t420;
t399 = 3 * t420;
t402 = 3 * t424;
t405 = 3 * t425;
t406 = 8 * t426;
t430 = pkin(2) * t424;
t421 = t430 ^ 2;
t427 = pkin(1) * t426;
t443 = t306 + t431;
t378 = t424 / 0.2e1;
t517 = t378 + t426;
t444 = -t464 + t517;
t521 = t411 / 0.2e1 - t414 / 0.2e1;
t457 = -0.3e1 * t526 + t405 + t521;
t460 = -0.6e1 * t464;
t364 = -0.3e1 / 0.2e1 * t412;
t518 = t364 + t408;
t523 = ((t364 + t409) * t420 - 0.3e1 / 0.2e1 * t526 + t509 + t521) * t341 + t421;
t448 = ((t336 + t514) * t424 + t443) * t460 + (t390 + (-0.9e1 * t412 + (18 * t426)) * t420 + t457) * t424 + (t391 + t518) * t431 + t523;
t459 = -0.4e1 * t464;
t449 = t322 * t459;
t474 = t399 + t506;
t450 = -(t402 + t341) * t544 + t474 * t339;
t373 = -0.2e1 / 0.3e1 * t415;
t363 = -0.2e1 / 0.3e1 * t412;
t475 = t363 + t341;
t515 = t392 + t409;
t519 = t363 + t373;
t451 = -(t401 + ((5 * t420) + t329) * t548 + t341 * (t373 + t475)) * t544 + (t431 + (t515 + t519) * t424 + t396 + 0.2e1 * t539 + t426 * (t426 + t519)) * t339;
t478 = t426 + t553;
t454 = t420 + t478;
t520 = t359 - t415 / 0.6e1;
t479 = t426 + t520;
t455 = t378 + t479;
t513 = t411 - t414;
t456 = -0.6e1 * t526 + (6 * t425) + t513;
t368 = 0.2e1 / 0.3e1 * t415;
t476 = t363 + t368 + t409;
t522 = (t368 + t475) * t341 + t431;
t458 = t313 * t459 + (t398 + t476) * t424 + t522;
t490 = t434 * t339;
t461 = t346 * t490;
t528 = t418 * t347 ^ 2;
t462 = t528 * t339;
t488 = 0.16e2 * t524;
t463 = pkin(1) * t488;
t466 = 0.20e2 / 0.3e1 * t420;
t512 = -t412 + t415;
t473 = t408 + t512;
t477 = t362 - t415 / 0.2e1 + t426;
t480 = t412 / 0.3e1 + t369 + t409;
t481 = 0.2e1 / 0.3e1 * t412 + t368 + t407;
t482 = 0.4e1 / 0.3e1 * t412 + 0.4e1 / 0.3e1 * t415 - (2 * t426);
t483 = 0.6e1 * t499;
t484 = 0.4e1 * t499;
t530 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t485 = t381 * t530;
t487 = -t544 / 0.2e1;
t489 = 0.12e2 * t527;
t491 = t420 * t339;
t494 = 0.4e1 * t527;
t496 = 0.8e1 * t528;
t535 = t385 * t350 * t430;
t498 = 0.8e1 * t535;
t502 = 0.2e1 * t544;
t503 = 0.4e1 * pkin(1);
t504 = t425 + t431;
t505 = t425 - t418;
t516 = 0.4e1 / 0.7e1 * t426 - t412 / 0.7e1;
t525 = t426 * t420;
t531 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t536 = t350 ^ 2 * t431;
t537 = t511 * t426;
t538 = t335 * t324;
t541 = (-t381 * t434 + t491) * t347;
t543 = ((-0.24e2 * (0.4e1 / 0.3e1 * t527 + t327 + t333) * t536 * t544 - 0.12e2 * (-0.8e1 / 0.3e1 * t462 + ((t374 + t455) * t339 - (0.4e1 / 0.3e1 * t424 + t376 + t479) * t544) * t494 + (-(t424 * t508) - 0.5e1 / 0.3e1 * t418 + t480 * t420 + t426 * t478) * t339 + (-t431 + (-t466 + t481) * t424 - (3 * t418) + t482 * t420 + t425) * t487 + (-t381 * t418 * t346 + ((t420 + t455) * t339 + (t548 - t508) * t487) * t338) * t503) * t534 + 0.24e2 * t334 * t462 + ((t402 + 0.3e1 / 0.2e1 * t420 + t477) * t339 + t344 * t544 / 0.2e1) * t463 - 0.6e1 * ((-(3 * t431) + (-t466 + t482) * t424 + t481 * t420 + t505) * t339 - 0.2e1 * (-0.5e1 / 0.3e1 * t431 + (-t420 + t480) * t424 + t426 * t454) * t544) * t527 - 0.6e1 * t451 * t499 - (t421 + ((21 * t420) + t329) * t431 + (t319 + t405 + (35 * t418) - 0.2e1 * t537) * t424 + (t395 + (t394 + t406 - 0.5e1 * t415) * t420 - t426 * t472) * t341) * t339 + (0.7e1 * t421 + (t397 + t329) * t401 + (t319 + (21 * t418) + (9 * t425) - 0.6e1 * t537) * t424 + t538) * t544) * t298 + (0.16e2 * (t496 + t463 + (-8 * t418 + 12 * t525) * t347 + (-0.12e2 * pkin(1) * t434 + t427 * t554) * t384 - (6 * t525) + t509) * t536 + 0.24e2 * ((t426 - 0.2e1 / 0.3e1 * t424) * t496 + 0.14e2 * (-0.32e2 / 0.21e2 * (t426 + t424 / 0.4e1 + t420 / 0.4e1 - t412 / 0.8e1) * t464 + t431 / 0.7e1 + (0.16e2 / 0.21e2 * t420 + t516) * t424 + t418 / 0.7e1 + t516 * t420 + t425 - 0.3e1 / 0.7e1 * t526 + t411 / 0.42e2 - t414 / 0.42e2) * t527 + t333 * t449 - (t508 * t431) + (t331 - 0.10e2 / 0.3e1 * t418 + (2 * t425) - t526) * t424 + t306 * t531 + ((-0.2e1 / 0.3e1 * t464 + t426 + t376 + t360) * t488 + 0.6e1 * (-0.8e1 / 0.3e1 * (t360 + t375 + t517) * t464 + t431 / 0.3e1 + (0.4e1 / 0.3e1 * t426 + t374 + t361) * t424 + t425 + 0.2e1 / 0.3e1 * t525 - 0.2e1 / 0.3e1 * t526 - t418 / 0.3e1 + t411 / 0.18e2 - t414 / 0.18e2) * t338) * pkin(1)) * t534 + 0.16e2 * (-6 * t426 * t424 + t504) * t528 + 0.32e2 * (t320 * t530 + t322 * t344) * t493 + 0.24e2 * (t334 * t449 - t421 + (-t336 + t510) * t431 + (t331 + t505 + t552) * t424 + t306 * t426) * t527 + 0.8e1 * t448 * t499 - 0.8e1 * ((t397 + t518) * t431 + (t395 + (t394 + (10 * t426)) * t420 + t457) * t424 + t523) * t464 + (t431 ^ 2) + (t393 + t407 + (28 * t420)) * t421 + (t337 * t420 + (70 * t418) + t456) * t431 + (t337 * t418 + t456 * t398 + t513 * t409 - 0.6e1 * t425 * t412 + 0.4e1 * t427 ^ 2 + (28 * t434 ^ 2)) * t424 + t323 * t538) * t314 + (((0.4e1 * t541 + (t339 + t502) * t327 + t343 * t339 + (0.3e1 / 0.2e1 * t424 + t399 + t477) * t502) * t498 + 0.6e1 * ((0.2e1 * (t376 + t424 + t520) * t339 + pkin(3) * t485) * t495 + (-0.8e1 * t461 + 0.4e1 * ((t474 + t553) * t339 - (t402 + t454) * t544) * t338) * pkin(1) + t451) * t545) * t298 + (-0.32e2 * (t465 + (-0.4e1 * t381 * t490 + t550 + ((4 * t424) + t393 + t406) * t420) * t347 + (t360 - t420 + t444) * t484 + t320 * t531 + t343 * t322) * t535 - 0.8e1 * (t317 + (t322 * t530 + t309) * t489 + (t449 + (t398 + t514) * t424 + t443) * t483 + t448) * t545) * t314) * t326) / ((-0.4e1 * (0.2e1 * t541 + (t549 + t424) * t544 + (-t508 + t327) * t339) * t534 + 0.8e1 * pkin(1) * t461 + ((pkin(2) * t550 + 0.8e1 * t420 * t430) * t382 + 0.4e1 * t434 * t485) * t347 - 0.4e1 * t450 * t499 - (t515 * t424 + t396 + t504 + 6 * t525) * t339 + (t401 + (t392 + 6 * t426) * t424 + t335) * t544) * t298 + t314 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t464 + t426 + t424 / 0.3e1 + t375 + t415 / 0.9e1 - t412 / 0.9e1) * t527 + t333 * t320 + t313 * t531 + (t524 + (t415 / 0.6e1 + t359 + t444) * t338) * t503) * t534 + t317 + (t313 * t530 + t309) * t489 + t458 * t483 + ((t336 + t476) * t424 + t522) * t460 + t421 + (t391 + t473) * t431 + (t473 * t398 + t512 * t409 + t390 + t405) * t424 + t335 * t323) + ((t498 * t544 + 0.4e1 * (t491 * t551 + (t339 - t544) * t327 + t450) * t545) * t298 + t314 * (-0.8e1 * (t327 + t494 + t343) * t535 - 0.6e1 * (t507 * t494 + (t320 + t313) * t484 + t458) * t545)) * t326);
t501 = 0.2e1 * t338;
t301 = 0.1e1 / (t325 * t501 + t320 + t328 + t471);
t416 = 0.1e1 / pkin(4);
t542 = t301 * t416;
t532 = t382 * t384;
t413 = 0.1e1 / pkin(6);
t529 = t413 * t416;
t486 = t301 * t413 / pkin(4) ^ 2;
t469 = t543 / 0.4e1;
t468 = -t542 / 0.2e1;
t467 = t529 / 0.2e1;
t453 = t506 + t512;
t452 = -pkin(3) + t492;
t447 = t399 + t453;
t383 = cos(qJ(3));
t380 = sin(qJ(3));
t312 = t384 * t385 + t533;
t311 = t381 * t385 - t532;
t307 = t328 + t420 + t453;
t297 = (-t452 + t540) * t298 + (t307 * t325 + t308 * t501) * t381 + (t307 * t384 + (0.4e1 * t347 - 0.2e1) * t325 * pkin(3)) * t339;
t296 = (pkin(2) * t532 + t325 * t381) * t298 - (t328 + t447 + t459) * t540 + t452 * t328 + t447 * t492 + (t308 * t551 - t323 - t402 + t497) * pkin(3);
t295 = t296 * t468;
t292 = t467 * t543;
t291 = (t296 * t298 / 0.4e1 + t297 * t469) * t486;
t290 = (t296 * t469 - t297 * t298 / 0.4e1) * t486;
t289 = -t290 * t312 + t291 * t311;
t288 = t290 * t311 + t291 * t312;
t1 = [t385, -t382, 0, 0; t382, t385, 0, 0; 0, 0, 1, 0; t289, t288, 0, pkin(2); -t288, t289, 0, 0; 0, 0, 1, 0; t384, -t381, 0, pkin(1); t381, t384, 0, 0; 0, 0, 1, 0; t295, t297 * t542 / 0.2e1, 0, pkin(3); t297 * t468, t295, 0, 0; 0, 0, 1, 0; t383, -t380, 0, pkin(5); t380, t383, 0, 0; 0, 0, 1, 0; t292, -t298 * t529 / 0.2e1, 0, -pkin(4); t298 * t467, t292, 0, 0; 0, 0, 1, 0; 1, 0, 0, pkin(6); 0, 1, 0, 0; 0, 0, 1, 0;];
T_stack = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,7);             % numerisch
else,                         T_mdh = sym('xx', [4,4,7]); end % symbolisch

for i = 1:7
  T_mdh(:,:,i) = [T_stack((i-1)*3+1 : 3*i, :);[0 0 0 1]];
end
