% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% hybBKplanar
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [3x1]
%   Generalized joint coordinates (joint angles)
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,CF,ED]';
% 
% Output:
% T_c_mdh [4x4x(7+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   7:  mdh base (link 0) -> mdh frame (7-1), link (7-1)
%   ...
%   7+1:  mdh base (link 0) -> mdh frame (7)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-11 19:03
% Revision: 6ae2d958c5b90587a0d08029b131cb7b66342a68 (2020-04-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_c_mdh = hybBKplanar_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [3 1]), ...
  'hybBKplanar_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'hybBKplanar_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-11 18:53:32
% EndTime: 2020-04-11 18:53:37
% DurationCPUTime: 5.09s
% Computational Cost: add. (40248->408), mult. (117044->501), div. (396->5), fcn. (14406->8), ass. (0->219)
t287 = 2 * pkin(3);
t286 = 4 * pkin(3);
t133 = pkin(4) ^ 2;
t130 = pkin(6) ^ 2;
t79 = -t130 / 0.3e1;
t285 = t79 - t133 / 0.3e1;
t102 = cos(qJ(2));
t134 = 0.1e1 / pkin(4);
t142 = (pkin(2) ^ 2);
t120 = 3 * t142;
t103 = cos(qJ(1));
t57 = pkin(2) * t103;
t277 = -t57 + pkin(1);
t197 = t277 * t102;
t138 = pkin(3) ^ 2;
t144 = pkin(1) ^ 2;
t238 = t142 + t144;
t201 = t138 + t238;
t100 = sin(qJ(1));
t99 = sin(qJ(2));
t267 = t100 * t99;
t223 = pkin(2) * t267;
t192 = pkin(3) * t223;
t37 = -0.2e1 * t192;
t233 = pkin(1) * t57;
t44 = -0.2e1 * t233;
t165 = 0.1e1 / (t197 * t287 + t201 + t37 + t44);
t68 = t103 ^ 2;
t264 = t142 * t68;
t229 = 0.2e1 * t264;
t239 = -t142 + t144;
t173 = t44 + t229 + t239;
t65 = t102 ^ 2;
t167 = t173 * t65;
t117 = 3 * t138;
t199 = -t130 + t238;
t175 = t117 + t133 + t199;
t121 = -3 * t142;
t136 = t138 ^ 2;
t179 = t138 + t199;
t174 = -t133 + t179;
t170 = t44 + t174;
t242 = t130 - t144;
t202 = t133 + t242;
t240 = t138 - t144;
t278 = -pkin(4) + pkin(6);
t279 = -pkin(4) - pkin(6);
t281 = 2 * t138;
t18 = sqrt(-0.4e1 * t138 * t167 + 0.4e1 * t240 * t264 + 0.4e1 * t174 * t233 - t136 + (t121 + t202) * t281 - (t144 + (pkin(2) - t278) * (pkin(2) + t278)) * (t144 + (pkin(2) - t279) * (pkin(2) + t279)) + (-(t37 + t170) * t197 + t170 * t223) * t286);
t181 = -pkin(3) + t223;
t183 = -0.4e1 * t192;
t254 = t100 * t102;
t59 = t138 + t144;
t200 = -t130 + t59;
t40 = t133 + t200;
t163 = t165 * ((pkin(2) * t254 + t277 * t99) * t18 - (t175 + t44 + t183) * t197 + t181 * t44 + t175 * t223 + (-0.2e1 * t167 + t229 - t120 - t40) * pkin(3));
t162 = -t163 / 0.2e1;
t169 = t133 + t44 + t179;
t55 = pkin(3) * t102;
t56 = pkin(2) * t100;
t164 = t165 * ((t197 - t181) * t18 + (t169 * t277 + 0.2e1 * t173 * t55) * t99 + (t102 * t169 + (0.4e1 * t65 - 0.2e1) * pkin(3) * t277) * t56);
t14 = (t99 * t162 - t102 * t164 / 0.2e1) * t134;
t15 = (t102 * t162 + t99 * t164 / 0.2e1) * t134;
t108 = 15 * t136;
t109 = 15 * t138;
t110 = 10 * t138;
t111 = -0.2e1 * t130;
t112 = -0.5e1 * t130;
t113 = 7 * t136;
t114 = 5 * t136;
t115 = 7 * t138;
t116 = 6 * t138;
t149 = t142 ^ 2;
t119 = 5 * t149;
t143 = t144 ^ 2;
t123 = 0.3e1 * t143;
t124 = 0.8e1 * t144;
t125 = 0.4e1 * t144;
t127 = 0.2e1 * t144;
t129 = t130 ^ 2;
t132 = t133 ^ 2;
t148 = pkin(2) * t142;
t139 = t148 ^ 2;
t145 = pkin(1) * t144;
t152 = pkin(3) * t138;
t241 = t136 + t143;
t246 = t127 - t130;
t249 = t144 * t130;
t283 = -t129 / 0.6e1 + t132 / 0.6e1;
t25 = t246 * t138 + t241 - t249 - t283;
t166 = t149 + t25;
t96 = t142 / 0.2e1;
t257 = t144 + t96;
t171 = -t192 + t257;
t80 = -t130 / 0.2e1;
t39 = t80 + t201;
t177 = t39 * t183;
t184 = -0.6e1 * t192;
t271 = t129 / 0.2e1 - t132 / 0.2e1;
t188 = t123 - 0.3e1 * t249 + t271;
t126 = 0.3e1 * t144;
t82 = -0.3e1 / 0.2e1 * t130;
t255 = t82 + t126;
t258 = t139 + ((t82 + t127) * t138 - 0.3e1 / 0.2e1 * t249 + t241 + t271) * t59;
t52 = 0.10e2 / 0.3e1 * t138;
t178 = ((t52 + t246) * t142 + t166) * t184 + (t108 + (-0.9e1 * t130 + 0.18e2 * t144) * t138 + t188) * t142 + (t109 + t255) * t149 + t258;
t81 = -0.2e1 / 0.3e1 * t130;
t207 = t81 + t59;
t247 = t110 + t127;
t243 = t130 + t133;
t45 = t126 - t243;
t259 = t45 * t138;
t91 = -0.2e1 / 0.3e1 * t133;
t269 = t81 + t91;
t280 = 2 * t142;
t54 = pkin(3) * t99;
t180 = -(t119 + ((5 * t138) + t45) * t280 + (t91 + t207) * t59) * t54 + (t149 + (t247 + t269) * t142 + t114 + 0.2e1 * t259 + t144 * (t144 + t269)) * t56;
t245 = t129 - t132;
t182 = 0.6e1 * t143 - 0.6e1 * t249 + t245;
t211 = t144 + t285;
t185 = t138 + t211;
t77 = -t130 / 0.6e1;
t270 = t77 - t133 / 0.6e1;
t216 = t144 + t270;
t186 = t96 + t216;
t86 = 0.2e1 / 0.3e1 * t133;
t217 = t127 + t81 + t86;
t256 = t149 + (t86 + t207) * t59;
t87 = t133 / 0.3e1;
t30 = t79 + t87 + t201;
t187 = t30 * t183 + t256 + (t116 + t217) * t142;
t219 = t152 * t56;
t64 = t102 * t65;
t189 = t64 * t219;
t266 = t136 * t65 ^ 2;
t190 = t266 * t56;
t260 = t152 * t64;
t221 = 0.16e2 * t260;
t191 = pkin(1) * t221;
t193 = 0.20e2 / 0.3e1 * t138;
t224 = pkin(1) * t260;
t196 = 0.8e1 * t224;
t244 = -t130 + t133;
t203 = t126 + t244;
t204 = t117 + t238;
t232 = pkin(1) * t55;
t205 = 0.6e1 * t232;
t206 = 0.4e1 * t232;
t252 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t209 = t99 * t252;
t212 = t130 / 0.3e1 + t87 + t127;
t213 = 0.2e1 / 0.3e1 * t130 + t86 + t125;
t214 = 0.4e1 / 0.3e1 * t130 + 0.4e1 / 0.3e1 * t133 - 0.2e1 * t144;
t215 = t144 + t80 - t133 / 0.2e1;
t218 = -t54 / 0.2e1;
t220 = t138 * t56;
t265 = t138 * t65;
t222 = 0.12e2 * t265;
t262 = t148 * t103 * t68;
t228 = 0.8e1 * t262;
t230 = 0.4e1 * t265;
t231 = 0.8e1 * t266;
t235 = 0.4e1 * pkin(1);
t236 = t143 + t149;
t237 = t143 - t136;
t248 = t144 * t138;
t253 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t50 = t144 - t142 / 0.3e1;
t26 = t50 * t37;
t261 = t149 * t68 ^ 2;
t263 = t144 * t243;
t268 = 0.4e1 / 0.7e1 * t144 - t130 / 0.7e1;
t272 = t99 * (t120 + t59);
t51 = t59 ^ 2;
t273 = t51 * (-t133 + t200);
t274 = (-t152 * t99 + t220) * t65;
t276 = pkin(1) * t102;
t282 = 4 * t136;
t31 = t55 + t277;
t62 = t121 + t144;
t34 = t62 * t196;
t35 = t204 * t56;
t36 = 0.10e2 * t259;
t42 = pkin(1) + t55;
t43 = 0.2e1 * t232;
t47 = (t125 + t130) * t138;
t49 = -t138 / 0.3e1 + t144;
t53 = -0.30e2 * t130 + 0.60e2 * t144;
t61 = -(3 * t138) + t144;
t78 = -t130 / 0.4e1;
t92 = 0.4e1 / 0.3e1 * t138;
t93 = t138 / 0.3e1;
t94 = t138 / 0.2e1;
t275 = ((-0.24e2 * (0.4e1 / 0.3e1 * t265 + t43 + t49) * t261 * t54 - 0.12e2 * (-0.8e1 / 0.3e1 * t190 + ((t92 + t186) * t56 - (0.4e1 / 0.3e1 * t142 + t94 + t216) * t54) * t230 + (-t142 * t240 - 0.5e1 / 0.3e1 * t136 + t212 * t138 + t144 * t211) * t56 + (-t149 + (-t193 + t213) * t142 - (3 * t136) + t214 * t138 + t143) * t218 + (-t99 * t136 * t64 + ((t138 + t186) * t56 + (t280 - t240) * t218) * t55) * t235) * t264 + 0.24e2 * t50 * t190 + ((t120 + 0.3e1 / 0.2e1 * t138 + t215) * t56 + t62 * t54 / 0.2e1) * t191 - 0.6e1 * ((-(3 * t149) + (-t193 + t214) * t142 + t213 * t138 + t237) * t56 - 0.2e1 * (-0.5e1 / 0.3e1 * t149 + (-t138 + t212) * t142 + t144 * t185) * t54) * t265 - 0.6e1 * t180 * t232 - (t139 + ((21 * t138) + t45) * t149 + (t123 + (35 * t136) + t36 - 0.2e1 * t263) * t142 + (t113 + (t112 + t124 - 0.5e1 * t133) * t138 - t144 * t202) * t59) * t56 + (0.7e1 * t139 + (t115 + t45) * t119 + ((21 * t136) + 0.9e1 * t143 + t36 - 0.6e1 * t263) * t142 + t273) * t54) * t18 + t31 * (0.16e2 * (t231 + t191 + (-(8 * t136) + 0.12e2 * t248) * t65 + (-0.12e2 * pkin(1) * t152 + t145 * t286) * t102 - 0.6e1 * t248 + t241) * t261 + 0.24e2 * ((t144 - 0.2e1 / 0.3e1 * t142) * t231 + 0.14e2 * (-0.32e2 / 0.21e2 * (t144 + t142 / 0.4e1 + t138 / 0.4e1 - t130 / 0.8e1) * t192 + t149 / 0.7e1 + (0.16e2 / 0.21e2 * t138 + t268) * t142 + t136 / 0.7e1 + t268 * t138 + t143 - 0.3e1 / 0.7e1 * t249 + t129 / 0.42e2 - t132 / 0.42e2) * t265 + t49 * t177 - t240 * t149 + (-0.10e2 / 0.3e1 * t136 + 0.2e1 * t143 - t249 + t47) * t142 + t25 * t253 + ((-0.2e1 / 0.3e1 * t192 + t144 + t94 + t78) * t221 + 0.6e1 * (-0.8e1 / 0.3e1 * (t78 + t93 + t257) * t192 + t149 / 0.3e1 + (0.4e1 / 0.3e1 * t144 + t92 + t79) * t142 + t143 + 0.2e1 / 0.3e1 * t248 - 0.2e1 / 0.3e1 * t249 - t136 / 0.3e1 + t129 / 0.18e2 - t132 / 0.18e2) * t55) * pkin(1)) * t264 + 0.16e2 * (-0.6e1 * t144 * t142 + t236) * t266 + 0.32e2 * (t252 * t37 + t39 * t62) * t224 + 0.24e2 * (t50 * t177 - t139 + (-t52 + t242) * t149 + (t47 + t237 + t283) * t142 + t144 * t25) * t265 + 0.8e1 * t178 * t232 - 0.8e1 * ((t115 + t255) * t149 + (t113 + (t112 + 0.10e2 * t144) * t138 + t188) * t142 + t258) * t192 + (t149 ^ 2) + (t111 + t125 + (28 * t138)) * t139 + (t138 * t53 + (70 * t136) + t182) * t149 + (t182 * t116 + t245 * t127 - 0.6e1 * t143 * t130 + t53 * t136 + 0.4e1 * t145 ^ 2 + (28 * t152 ^ 2)) * t142 + t40 * t273) + (((t61 * t56 + 0.4e1 * t274 + ((t56 + 0.2e1 * t54) * t276 + (0.3e1 / 0.2e1 * t142 + t117 + t215) * t99) * t287) * t228 + 0.6e1 * (-0.4e1 * (0.2e1 * (t94 + t142 + t270) * t56 + pkin(3) * t209) * t265 + (-0.8e1 * t189 + 0.4e1 * ((t204 + t285) * t56 - (t120 + t185) * t54) * t55) * pkin(1) + t180) * t57) * t18 + t31 * (-0.32e2 * (t196 + (-0.4e1 * t99 * t219 + t282 + ((4 * t142) + t111 + t124) * t138) * t65 + (-t138 + t171 + t78) * t206 + t37 * t253 + t39 * t61) * t262 - 0.8e1 * (t34 + (t252 * t39 + t26) * t222 + (t177 + (t116 + t246) * t142 + t166) * t205 + t178) * t57)) * t42) / ((-0.4e1 * (0.2e1 * t274 + (t281 + t142) * t54 + (-t240 + t43) * t56) * t264 + 0.8e1 * pkin(1) * t189 + ((pkin(2) * t282 + 0.8e1 * t138 * t148) * t100 + 0.4e1 * t152 * t209) * t65 - 0.4e1 * (-pkin(3) * t272 + t35) * t232 - (t247 * t142 + t114 + t236 + 0.6e1 * t248) * t56 + (t119 + (t110 + 0.6e1 * t144) * t142 + t51) * t54) * t18 + t31 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t192 + t144 + t142 / 0.3e1 + t93 + t133 / 0.9e1 - t130 / 0.9e1) * t265 + t49 * t37 + t30 * t253 + (t260 + (t133 / 0.6e1 + t77 + t171) * t55) * t235) * t264 + t34 + (t252 * t30 + t26) * t222 + t187 * t205 + ((t52 + t217) * t142 + t256) * t184 + t139 + (t109 + t203) * t149 + (t203 * t116 + t244 * t127 + t108 + t123) * t142 + t51 * t40) + ((t228 * t54 + 0.4e1 * (-0.2e1 * t65 * t220 + t35 + (0.2e1 * (-t54 + t56) * t276 - t272) * pkin(3)) * t57) * t18 + t31 * (-0.8e1 * (t43 + t230 + t61) * t262 - 0.6e1 * (t239 * t230 + (t37 + t30) * t206 + t187) * t57)) * t42);
t208 = t275 / 0.2e1;
t131 = 0.1e1 / pkin(6);
t251 = t131 * t134;
t284 = (t14 * t208 + t15 * t18 / 0.2e1) * t251;
t250 = t131 / pkin(4) ^ 2;
t234 = pkin(1) + 0;
t227 = t54 + 0;
t226 = t56 + 0;
t225 = t57 + 0;
t28 = t103 * t99 - t254;
t29 = t102 * t103 + t267;
t161 = t163 / 0.4e1;
t8 = (t161 * t275 - t18 * t164 / 0.4e1) * t250;
t9 = (t18 * t161 + t164 * t275 / 0.4e1) * t250;
t6 = t28 * t8 + t29 * t9;
t7 = t28 * t9 - t29 * t8;
t198 = t100 * t6 + t103 * t7;
t195 = t55 + t234;
t101 = cos(qJ(3));
t98 = sin(qJ(3));
t194 = t15 * t101 - t14 * t98;
t2 = t100 * t7 - t103 * t6;
t176 = t101 * t14 + t15 * t98;
t172 = (-t14 * t18 / 0.2e1 + t15 * t208) * t251;
t1 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t103, -t100, 0, 0; t100, t103, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t198, -t2, 0, t225; t2, t198, 0, t226; 0, 0, 1, 0; 0, 0, 0, 1; t102, -t99, 0, t234; t99, t102, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t15, -t14, 0, t195; t14, t15, 0, t227; 0, 0, 1, 0; 0, 0, 0, 1; t194, -t176, 0, pkin(5) * t15 + t195; t176, t194, 0, pkin(5) * t14 + t227; 0, 0, 1, 0; 0, 0, 0, 1; t172, -t284, 0, -pkin(4) * t15 + t195; t284, t172, 0, -pkin(4) * t14 + t227; 0, 0, 1, 0; 0, 0, 0, 1; t198, -t2, 0, pkin(6) * t198 + t225; t2, t198, 0, pkin(6) * t2 + t226; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,7+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,7+1]); end % symbolisch
for i = 1:7+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
