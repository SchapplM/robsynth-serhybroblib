% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% palh2m2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[A2Off,A3Off,A4Off,L1,L2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-06-06 14:46
% Revision: 7254ec7b167830f9592b38d39d95d449e6fd98ef (2019-06-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = palh2m2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh2m2_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh2m2_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'palh2m2_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh2m2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'palh2m2_invdynB_fixb_reg2_snew_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-06-06 14:45:33
% EndTime: 2019-06-06 14:45:46
% DurationCPUTime: 13.42s
% Computational Cost: add. (77940->514), mult. (195540->851), div. (0->0), fcn. (112655->8), ass. (0->423)
t632 = sin(qJ(1));
t636 = cos(qJ(1));
t612 = g(1) * t636 + g(2) * t632;
t639 = qJD(1) ^ 2;
t595 = -pkin(1) * t639 - t612;
t631 = sin(qJ(2));
t635 = cos(qJ(2));
t575 = g(3) * t635 + t595 * t631;
t617 = t635 * t639 * t631;
t609 = qJDD(2) + t617;
t551 = t609 * pkin(4) - t575;
t576 = -g(3) * t631 + t635 * t595;
t628 = t635 ^ 2;
t621 = t628 * t639;
t638 = qJD(2) ^ 2;
t616 = -t621 - t638;
t558 = pkin(4) * t616 + t576;
t527 = -t551 * t631 + t635 * t558;
t625 = t631 ^ 2;
t672 = t625 + t628;
t607 = t672 * qJD(1);
t602 = t607 ^ 2;
t515 = -pkin(2) * t602 + t527;
t697 = t551 * t635;
t526 = t558 * t631 + t697;
t630 = sin(qJ(3));
t634 = cos(qJ(3));
t484 = t634 * t515 + t630 * t526;
t637 = qJD(3) ^ 2;
t627 = t634 ^ 2;
t685 = t602 * t627;
t582 = -t637 - t685;
t474 = pkin(5) * t582 + t484;
t483 = t515 * t630 - t634 * t526;
t583 = t634 * t602 * t630;
t577 = qJDD(3) + t583;
t473 = pkin(5) * t577 - t483;
t704 = t473 * t634;
t429 = t474 * t630 + t704;
t427 = t634 * t429;
t430 = -t473 * t630 + t634 * t474;
t379 = -t430 * t630 + t427;
t734 = t379 * t630;
t733 = t379 * t634;
t624 = t630 ^ 2;
t673 = t624 + t627;
t563 = t673 * t607;
t559 = qJD(4) + t563;
t557 = t559 ^ 2;
t629 = sin(qJ(4));
t633 = cos(qJ(4));
t666 = qJD(1) * qJD(2);
t656 = t635 * t666;
t665 = qJDD(1) * t631;
t599 = t656 + t665;
t620 = t635 * qJDD(1);
t657 = t631 * t666;
t600 = t620 - t657;
t553 = t599 * t631 + t600 * t635;
t546 = t634 * t553;
t588 = t631 * t600;
t592 = t607 * qJD(2);
t687 = t599 * t635;
t537 = -t588 - t592 + t687;
t667 = qJD(3) * t607;
t652 = t537 + t667;
t500 = -t630 * t652 + t546;
t696 = t553 * t630;
t502 = t634 * t652 + t696;
t463 = t500 * t634 + t502 * t630;
t640 = qJDD(4) + t463;
t452 = t633 * t557 + t629 * t640;
t732 = t452 * t632;
t731 = t452 * t636;
t437 = t483 * t634 - t484 * t630;
t730 = t437 * t631;
t729 = t437 * t635;
t486 = t526 * t635 - t527 * t631;
t728 = t486 * t631;
t727 = t486 * t635;
t719 = t629 * t557 - t633 * t640;
t726 = t630 * t719;
t725 = t634 * t719;
t724 = -t630 * t667 + t500;
t723 = t600 - t657;
t560 = t563 ^ 2;
t530 = t673 * t560;
t720 = t672 * t530;
t722 = -t463 * t636 + t632 * t720;
t721 = t463 * t632 + t636 * t720;
t644 = t673 * t672;
t426 = t630 * t429;
t381 = t634 * t430 + t426;
t718 = pkin(4) * t602;
t717 = pkin(5) * t560;
t716 = t632 * g(3);
t715 = t636 * g(3);
t713 = t719 * t632;
t712 = t452 * t630;
t498 = t630 * t500;
t703 = t502 * t634;
t458 = -t563 * qJD(3) - t498 + t703;
t711 = t458 * t630;
t710 = t458 * t634;
t709 = t463 * t630;
t611 = g(1) * t632 - t636 * g(2);
t594 = qJDD(1) * pkin(1) + t611;
t548 = t723 * pkin(4) + t594;
t529 = pkin(2) * t553 + t548;
t471 = t724 * pkin(5) + t529;
t706 = t471 * t630;
t705 = t471 * t634;
t702 = t529 * t634;
t701 = t537 * t631;
t700 = t537 * t635;
t699 = t548 * t631;
t698 = t548 * t635;
t695 = t553 * t631;
t694 = t560 * t632;
t693 = t577 * t630;
t578 = qJDD(3) - t583;
t692 = t578 * t630;
t691 = t578 * t634;
t690 = t594 * t632;
t689 = t594 * t635;
t688 = t594 * t636;
t686 = t602 * t624;
t684 = t602 * t632;
t683 = t609 * t631;
t610 = qJDD(2) - t617;
t682 = t610 * t631;
t681 = t610 * t635;
t680 = t625 * t639;
t678 = t630 * t631;
t677 = t630 * t633;
t676 = t630 * t635;
t675 = t632 * t458;
t674 = t632 * t537;
t532 = t575 * t635 - t576 * t631;
t671 = pkin(1) * t532;
t670 = pkin(2) * t635;
t669 = pkin(3) * t458;
t668 = pkin(3) * t634;
t664 = qJDD(1) * t632;
t663 = qJDD(1) * t636;
t662 = pkin(4) * t699;
t661 = t629 * t711;
t660 = t458 * t629 * t633;
t659 = t629 * t710;
t655 = pkin(5) + t668;
t422 = -pkin(3) * t560 + t430;
t424 = -pkin(3) * t463 - t471;
t374 = t422 * t629 + t424 * t633;
t375 = t422 * t633 - t424 * t629;
t654 = t374 * t629 + t633 * t375;
t438 = t483 * t630 + t634 * t484;
t488 = t526 * t631 + t635 * t527;
t533 = t575 * t631 + t635 * t576;
t653 = -t611 * t632 - t636 * t612;
t651 = t537 + 0.2e1 * t667;
t650 = t632 * t660;
t649 = t636 * t660;
t648 = t632 * t583;
t647 = t636 * t583;
t646 = t632 * t617;
t645 = t636 * t617;
t337 = t374 * t633 - t375 * t629;
t564 = t672 * t602;
t643 = t553 * t636 - t564 * t632;
t642 = t553 * t632 + t564 * t636;
t641 = t611 * t636 - t612 * t632;
t366 = t458 * t644;
t626 = t633 ^ 2;
t623 = t629 ^ 2;
t615 = t621 - t638;
t614 = -t638 - t680;
t613 = t638 - t680;
t608 = t621 - t680;
t606 = t621 + t680;
t605 = -t632 * t639 + t663;
t604 = t636 * t639 + t664;
t603 = t672 * qJDD(1);
t601 = t620 - 0.2e1 * t657;
t598 = 0.2e1 * t656 + t665;
t593 = t635 * t609;
t591 = t636 * t602;
t581 = -t637 + t685;
t580 = -t637 - t686;
t579 = t637 - t686;
t574 = t634 * t577;
t573 = -t625 * t666 + t687;
t572 = -t628 * t666 - t588;
t570 = -t614 * t631 - t681;
t569 = -t613 * t631 + t593;
t568 = t616 * t635 - t683;
t567 = t615 * t635 - t682;
t566 = t614 * t635 - t682;
t565 = t616 * t631 + t593;
t562 = (-t624 + t627) * t602;
t561 = t673 * t602;
t554 = -t598 * t631 + t601 * t635;
t552 = t636 * t560;
t547 = t635 * t553;
t545 = -t580 * t630 - t691;
t544 = -t579 * t630 + t574;
t543 = t582 * t634 - t693;
t542 = t581 * t634 - t692;
t541 = t580 * t634 - t692;
t540 = t579 * t634 + t693;
t539 = t582 * t630 + t574;
t538 = t581 * t630 + t691;
t536 = t636 * t537;
t535 = -pkin(1) * t566 + t576;
t534 = -pkin(1) * t565 + t575;
t528 = t644 * t667;
t525 = pkin(4) * t553 + t698;
t521 = t547 - t701;
t520 = t547 + t701;
t519 = -t537 * t634 - t696;
t518 = -t695 - t700;
t517 = -t695 + t700;
t516 = t537 * t630 - t546;
t514 = -pkin(4) * t537 + t699;
t513 = -t697 + (-t558 - t718) * t631;
t511 = t541 * t631 + t545 * t635;
t510 = t540 * t631 + t544 * t635;
t509 = t539 * t631 + t543 * t635;
t508 = t538 * t631 + t542 * t635;
t507 = t541 * t635 - t545 * t631;
t506 = t540 * t635 - t544 * t631;
t505 = t539 * t635 - t543 * t631;
t504 = t538 * t635 - t542 * t631;
t503 = t672 * t537;
t501 = t634 * t651 + t696;
t499 = t630 * t651 - t546;
t497 = (-t525 + t698) * t631;
t496 = -t624 * t667 + t703;
t495 = -t627 * t667 - t498;
t494 = (t634 * t667 + t502) * t630;
t493 = t724 * t634;
t492 = -t514 * t631 - t548 * t628;
t489 = (pkin(4) + t670) * t529;
t485 = t488 + t718;
t481 = -pkin(2) * t499 + t702;
t480 = -pkin(2) * t501 - t529 * t630;
t479 = -t518 * t631 + t521 * t635;
t478 = -t517 * t631 + t520 * t635;
t477 = -t516 * t634 - t519 * t630;
t476 = t518 * t635 + t521 * t631;
t475 = -t516 * t630 + t519 * t634;
t470 = -t507 * t631 + t511 * t635;
t469 = -t506 * t631 + t510 * t635;
t468 = -t505 * t631 + t509 * t635;
t467 = -t504 * t631 + t508 * t635;
t466 = t507 * t635 + t511 * t631;
t465 = t505 * t635 + t509 * t631;
t464 = -t499 * t634 - t501 * t630;
t462 = -t499 * t630 + t501 * t634;
t461 = t634 * t463;
t459 = (t529 * t670 - t489) * t631;
t457 = t636 * t458;
t456 = t633 * t710;
t455 = t458 * t677;
t450 = t494 * t631 + t496 * t635;
t449 = t493 * t631 + t495 * t635;
t448 = t494 * t635 - t496 * t631;
t447 = t493 * t635 - t495 * t631;
t446 = t636 * t719;
t445 = t634 * t452;
t444 = t480 * t631 - t635 * t702;
t443 = t481 * t631 - t529 * t676;
t442 = -pkin(1) * t476 - pkin(4) * t518;
t441 = t488 * t635 - t728;
t440 = t488 * t631 + t727;
t439 = -t485 * t631 - t727;
t435 = -pkin(4) * t501 + t480 * t635 + t631 * t702;
t434 = -pkin(4) * t499 + t481 * t635 + t529 * t678;
t433 = t475 * t631 + t477 * t635;
t432 = t475 * t635 - t477 * t631;
t431 = pkin(2) * t561 + t438;
t425 = (pkin(5) * t634 + pkin(2)) * t471;
t423 = pkin(5) * t463 + t705;
t421 = t462 * t631 + t464 * t635;
t420 = t462 * t635 - t464 * t631;
t417 = -pkin(5) * t458 + t706;
t416 = t461 - t711;
t415 = t461 + t711;
t414 = -t709 - t710;
t413 = -t709 + t710;
t412 = -pkin(1) * t440 - pkin(4) * t486;
t411 = -pkin(4) * t530 * t631 - t704 + (-t474 - t717) * t630;
t409 = (-t623 + t626) * t458;
t408 = (t623 + t626) * t458;
t404 = t455 + t725;
t403 = t455 - t725;
t402 = -t445 - t661;
t401 = -t445 + t661;
t400 = t456 - t726;
t399 = t456 + t726;
t398 = -t659 + t712;
t397 = t659 + t712;
t396 = -pkin(1) * t466 - pkin(2) * t541 - pkin(4) * t507 + t484;
t395 = -pkin(1) * t465 - pkin(2) * t539 - pkin(4) * t505 + t483;
t394 = -t448 * t631 + t450 * t635;
t393 = -t447 * t631 + t449 * t635;
t392 = -pkin(5) * t471 * t676 + t425 * t631;
t391 = (-t423 + t705) * t630;
t390 = -t435 * t631 + t444 * t635;
t389 = -t434 * t631 + t443 * t635;
t388 = -t417 * t630 - t471 * t627;
t387 = t438 * t635 - t730;
t386 = -t438 * t631 - t729;
t385 = t431 * t631 + t729;
t384 = -t432 * t631 + t433 * t635;
t383 = t432 * t635 + t433 * t631;
t382 = pkin(4) * t561 + t431 * t635 - t730;
t378 = t425 * t635 + (pkin(5) * t678 + pkin(4)) * t471;
t377 = t717 + t381;
t376 = pkin(2) * t463 + t423 * t634 + t471 * t624;
t372 = -t420 * t631 + t421 * t635;
t371 = -pkin(2) * t458 + (t417 - t706) * t634;
t370 = -t414 * t630 + t416 * t634;
t369 = -t413 * t630 + t415 * t634;
t368 = t414 * t634 + t416 * t630;
t367 = t413 * t634 + t415 * t630;
t365 = t626 * t366;
t364 = t623 * t366;
t363 = -t400 * t630 + t404 * t634;
t362 = -t399 * t630 + t403 * t634;
t361 = -t398 * t630 + t402 * t634;
t360 = -t397 * t630 + t401 * t634;
t359 = t400 * t634 + t404 * t630;
t358 = t399 * t634 + t403 * t630;
t357 = t398 * t634 + t402 * t630;
t356 = t397 * t634 + t401 * t630;
t355 = -0.2e1 * t660 * t644;
t354 = -pkin(3) * t452 - t375;
t353 = -pkin(3) * t719 - t374;
t352 = -pkin(1) * t383 - pkin(2) * t475 - pkin(4) * t432;
t351 = -t378 * t631 + t392 * t635;
t350 = -t386 * t631 + t387 * t635;
t349 = t386 * t635 + t387 * t631;
t348 = t376 * t631 + t391 * t635;
t347 = t354 * t630 + t633 * t427;
t346 = t353 * t630 + t629 * t427;
t345 = -t382 * t631 + t385 * t635;
t344 = t371 * t631 + t388 * t635;
t343 = t381 * t634 - t734;
t342 = t381 * t630 + t733;
t341 = -t377 * t630 - t733;
t340 = pkin(2) * t560 + t377 * t634 - t734;
t339 = pkin(4) * t463 + t376 * t635 - t391 * t631;
t334 = -pkin(5) * t452 + t354 * t634 - t429 * t677;
t333 = -pkin(5) * t719 + t353 * t634 - t629 * t426;
t332 = -pkin(4) * t458 + t371 * t635 - t388 * t631;
t331 = t368 * t631 + t370 * t635;
t330 = t367 * t631 + t369 * t635;
t329 = t368 * t635 - t370 * t631;
t328 = t367 * t635 - t369 * t631;
t327 = t359 * t631 + t363 * t635;
t326 = t358 * t631 + t362 * t635;
t325 = t357 * t631 + t361 * t635;
t324 = t356 * t631 + t360 * t635;
t323 = t359 * t635 - t363 * t631;
t322 = t358 * t635 - t362 * t631;
t321 = t357 * t635 - t361 * t631;
t320 = t356 * t635 - t360 * t631;
t319 = t634 * t654 + t426;
t318 = -t630 * t654 + t427;
t317 = -pkin(3) * t408 * t630 + t337 * t634;
t316 = -pkin(1) * t349 + pkin(2) * t437 - pkin(4) * t386;
t315 = -t337 * t630 - t408 * t655;
t314 = -t339 * t631 + t348 * t635;
t313 = t342 * t631 + t343 * t635;
t312 = t342 * t635 - t343 * t631;
t311 = t340 * t631 + t341 * t635;
t310 = -t334 * t630 + t347 * t634;
t309 = -t333 * t630 + t346 * t634;
t308 = pkin(4) * t560 + t340 * t635 - t341 * t631;
t307 = -t332 * t631 + t344 * t635;
t306 = t655 * t337;
t305 = -pkin(2) * t452 + t334 * t634 + t347 * t630;
t304 = -pkin(2) * t719 + t333 * t634 + t346 * t630;
t303 = -t329 * t631 + t331 * t635;
t302 = -t328 * t631 + t330 * t635;
t301 = t329 * t635 + t331 * t631;
t300 = -t323 * t631 + t327 * t635;
t299 = -t322 * t631 + t326 * t635;
t298 = -t321 * t631 + t325 * t635;
t297 = -t320 * t631 + t324 * t635;
t296 = t323 * t635 + t327 * t631;
t295 = t320 * t635 + t324 * t631;
t294 = -t318 * t630 + t319 * t634;
t293 = t318 * t634 + t319 * t630;
t292 = -t315 * t630 + t317 * t634;
t291 = (-t337 * t668 + t306) * t630;
t290 = -pkin(2) * t408 + t315 * t634 + t317 * t630;
t289 = -t312 * t631 + t313 * t635;
t288 = t312 * t635 + t313 * t631;
t287 = -t308 * t631 + t311 * t635;
t286 = -t306 * t634 - (pkin(3) * t624 + pkin(2)) * t337;
t285 = t305 * t631 + t310 * t635;
t284 = t304 * t631 + t309 * t635;
t283 = -pkin(4) * t452 + t305 * t635 - t310 * t631;
t282 = -pkin(4) * t719 + t304 * t635 - t309 * t631;
t281 = -pkin(1) * t301 - pkin(2) * t368 - pkin(4) * t329 - pkin(5) * t414;
t280 = t293 * t631 + t294 * t635;
t279 = t293 * t635 - t294 * t631;
t278 = -pkin(1) * t296 - pkin(2) * t359 - pkin(4) * t323 - pkin(5) * t400 + t429 * t629 - t633 * t669;
t277 = -pkin(1) * t295 - pkin(2) * t356 - pkin(4) * t320 - pkin(5) * t397 - t429 * t633 - t629 * t669;
t276 = t290 * t631 + t292 * t635;
t275 = -pkin(4) * t408 + t290 * t635 - t292 * t631;
t274 = t286 * t631 + t291 * t635;
t273 = -pkin(1) * t288 - pkin(2) * t342 - pkin(4) * t312 - pkin(5) * t379;
t272 = -pkin(4) * t337 + t286 * t635 - t291 * t631;
t271 = -t283 * t631 + t285 * t635;
t270 = -t282 * t631 + t284 * t635;
t269 = -t279 * t631 + t280 * t635;
t268 = t279 * t635 + t280 * t631;
t267 = -t275 * t631 + t276 * t635;
t266 = -t272 * t631 + t274 * t635;
t265 = -pkin(1) * t268 - pkin(2) * t293 - pkin(3) * t429 - pkin(4) * t279 - pkin(5) * t318;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t604, -t605, 0, t653, 0, 0, 0, 0, 0, 0, t568 * t636 - t601 * t632, t570 * t636 + t598 * t632, t603 * t636 - t606 * t632, t533 * t636 - t690, 0, 0, 0, 0, 0, 0, -t642, t674, t479 * t636 - t684, t441 * t636 - t548 * t632, 0, 0, 0, 0, 0, 0, t468 * t636 + t499 * t632, t470 * t636 + t501 * t632, t384 * t636 - t561 * t632, t350 * t636 - t529 * t632, 0, 0, 0, 0, 0, 0, -t721, t675, t303 * t636 - t694, t289 * t636 - t471 * t632, 0, 0, 0, 0, 0, 0, t297 * t636 + t713, t300 * t636 + t732, t632 * t408, t269 * t636 + t337 * t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t605, -t604, 0, t641, 0, 0, 0, 0, 0, 0, t568 * t632 + t601 * t636, t570 * t632 - t598 * t636, t603 * t632 + t606 * t636, t533 * t632 + t688, 0, 0, 0, 0, 0, 0, t643, -t536, t479 * t632 + t591, t441 * t632 + t548 * t636, 0, 0, 0, 0, 0, 0, t468 * t632 - t499 * t636, t470 * t632 - t501 * t636, t384 * t632 + t561 * t636, t350 * t632 + t529 * t636, 0, 0, 0, 0, 0, 0, -t722, -t457, t303 * t632 + t552, t289 * t632 + t471 * t636, 0, 0, 0, 0, 0, 0, t297 * t632 - t446, t300 * t632 - t731, -t636 * t408, t269 * t632 - t337 * t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t565, t566, 0, -t532, 0, 0, 0, 0, 0, 0, 0, 0, t476, t440, 0, 0, 0, 0, 0, 0, t465, t466, t383, t349, 0, 0, 0, 0, 0, 0, 0, 0, t301, t288, 0, 0, 0, 0, 0, 0, t295, t296, 0, t268; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t605, 0, -t604, 0, -t716, -t715, -t641, 0, t573 * t636 - t646, t554 * t636 - t608 * t632, t569 * t636 + t631 * t664, t572 * t636 + t646, t567 * t636 + t620 * t632, qJDD(2) * t632 + t592 * t636, -t534 * t632 - t631 * t688, -t535 * t632 - t635 * t688, t636 * t532, -t632 * t671, t636 * t503, t478 * t636 - t684, t674, 0, t642, 0, t497 * t636 - t513 * t632, t492 * t636 - t527 * t632, t439 * t636 - t442 * t632, -t412 * t632 - t636 * t662, t394 * t636 - t648, t372 * t636 - t562 * t632, t469 * t636 - t519 * t632, t393 * t636 + t648, t467 * t636 - t516 * t632, qJDD(3) * t632 + t528 * t636, t389 * t636 - t395 * t632, t390 * t636 - t396 * t632, t345 * t636 - t352 * t632, -t316 * t632 + t459 * t636, t636 * t366, t302 * t636 - t694, t675, 0, t721, 0, t314 * t636 - t411 * t632, t307 * t636 - t430 * t632, -t281 * t632 + t287 * t636, -t273 * t632 + t351 * t636, t365 * t636 - t650, t355 * t636 - t409 * t632, t299 * t636 - t732, t364 * t636 + t650, t298 * t636 + t713, 0, t270 * t636 - t277 * t632, t271 * t636 - t278 * t632, t267 * t636 - t632 * t654, -t265 * t632 + t266 * t636; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t604, 0, t605, 0, t715, -t716, t653, 0, t573 * t632 + t645, t554 * t632 + t608 * t636, t569 * t632 - t631 * t663, t572 * t632 - t645, t567 * t632 - t620 * t636, -qJDD(2) * t636 + t592 * t632, t534 * t636 - t631 * t690, t535 * t636 - t632 * t689, t632 * t532, t636 * t671, t632 * t503, t478 * t632 + t591, -t536, 0, -t643, 0, t497 * t632 + t513 * t636, t492 * t632 + t527 * t636, t439 * t632 + t442 * t636, t412 * t636 - t632 * t662, t394 * t632 + t647, t372 * t632 + t562 * t636, t469 * t632 + t519 * t636, t393 * t632 - t647, t467 * t632 + t516 * t636, -qJDD(3) * t636 + t528 * t632, t389 * t632 + t395 * t636, t390 * t632 + t396 * t636, t345 * t632 + t352 * t636, t316 * t636 + t459 * t632, t632 * t366, t302 * t632 + t552, -t457, 0, t722, 0, t314 * t632 + t411 * t636, t307 * t632 + t430 * t636, t281 * t636 + t287 * t632, t273 * t636 + t351 * t632, t365 * t632 + t649, t355 * t632 + t409 * t636, t299 * t632 + t731, t364 * t632 - t649, t298 * t632 - t446, 0, t270 * t632 + t277 * t636, t271 * t632 + t278 * t636, t267 * t632 + t636 * t654, t265 * t636 + t266 * t632; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t611, t612, 0, 0, (t599 + t656) * t631, t598 * t635 + t601 * t631, t613 * t635 + t683, t723 * t635, t615 * t631 + t681, 0, pkin(1) * t601 + t689, -pkin(1) * t598 - t594 * t631, pkin(1) * t606 + t533, pkin(1) * t594, 0, t517 * t635 + t520 * t631, 0, t672 * t553, 0, 0, pkin(1) * t553 + t525 * t635 + t548 * t625, -pkin(1) * t537 + (t514 - t699) * t635, pkin(1) * t602 + t485 * t635 - t728, (pkin(4) * t635 + pkin(1)) * t548, t448 * t635 + t450 * t631, t420 * t635 + t421 * t631, t506 * t635 + t510 * t631, t447 * t635 + t449 * t631, t504 * t635 + t508 * t631, 0, -pkin(1) * t499 + t434 * t635 + t443 * t631, -pkin(1) * t501 + t435 * t635 + t444 * t631, pkin(1) * t561 + t382 * t635 + t385 * t631, t489 * t635 + (pkin(2) * t625 + pkin(1)) * t529, 0, t328 * t635 + t330 * t631, 0, t463 * t644, 0, 0, pkin(1) * t463 + t339 * t635 + t348 * t631, -pkin(1) * t458 + t332 * t635 + t344 * t631, pkin(1) * t560 + t308 * t635 + t311 * t631, pkin(1) * t471 + t378 * t635 + t392 * t631, 0, 0, t322 * t635 + t326 * t631, 0, t321 * t635 + t325 * t631, t640 * t644, -pkin(1) * t719 + t282 * t635 + t284 * t631, -pkin(1) * t452 + t283 * t635 + t285 * t631, -pkin(1) * t408 + t275 * t635 + t276 * t631, -pkin(1) * t337 + t272 * t635 + t274 * t631;];
tauB_reg  = t1;
