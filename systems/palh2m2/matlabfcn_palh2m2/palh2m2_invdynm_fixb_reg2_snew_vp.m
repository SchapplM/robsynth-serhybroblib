% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% palh2m2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[A2Off,A3Off,A4Off,L1,L2]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-06-06 14:46
% Revision: 7254ec7b167830f9592b38d39d95d449e6fd98ef (2019-06-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = palh2m2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh2m2_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh2m2_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'palh2m2_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh2m2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'palh2m2_invdynm_fixb_reg2_snew_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-06-06 14:45:46
% EndTime: 2019-06-06 14:46:04
% DurationCPUTime: 18.42s
% Computational Cost: add. (136731->564), mult. (343539->817), div. (0->0), fcn. (197895->8), ass. (0->444)
t1114 = sin(qJ(3));
t1118 = cos(qJ(3));
t1115 = sin(qJ(2));
t1109 = t1115 ^ 2;
t1119 = cos(qJ(2));
t1112 = t1119 ^ 2;
t1158 = t1109 + t1112;
t1091 = t1158 * qJD(1);
t1088 = t1091 ^ 2;
t1069 = t1118 * t1088 * t1114;
t1063 = qJDD(3) + t1069;
t1116 = sin(qJ(1));
t1120 = cos(qJ(1));
t1096 = g(1) * t1120 + g(2) * t1116;
t1123 = qJD(1) ^ 2;
t1082 = -pkin(1) * t1123 - t1096;
t1062 = -t1115 * g(3) + t1119 * t1082;
t1105 = t1112 * t1123;
t1122 = qJD(2) ^ 2;
t1208 = -t1105 - t1122;
t1045 = pkin(4) * t1208 + t1062;
t1061 = t1119 * g(3) + t1115 * t1082;
t1099 = t1119 * t1123 * t1115;
t1093 = qJDD(2) + t1099;
t1035 = pkin(4) * t1093 - t1061;
t1161 = t1119 * t1035;
t1009 = t1045 * t1115 + t1161;
t1010 = -t1115 * t1035 + t1045 * t1119;
t997 = -pkin(2) * t1088 + t1010;
t968 = -t1118 * t1009 + t1114 * t997;
t957 = pkin(5) * t1063 - t968;
t1111 = t1118 ^ 2;
t1077 = t1111 * t1088;
t1121 = qJD(3) ^ 2;
t1068 = -t1077 - t1121;
t969 = t1114 * t1009 + t1118 * t997;
t958 = pkin(5) * t1068 + t969;
t910 = t1114 * t958 + t1118 * t957;
t907 = t1118 * t910;
t911 = -t1114 * t957 + t1118 * t958;
t853 = -t1114 * t911 + t907;
t1218 = t1114 * t853;
t1217 = t1118 * t853;
t917 = t1114 * t969 - t1118 * t968;
t1216 = t1115 * t917;
t1215 = t1119 * t917;
t971 = t1009 * t1119 - t1010 * t1115;
t1214 = t1119 * t971;
t1182 = qJD(3) * t1091;
t1149 = t1114 * t1182;
t1103 = t1119 * qJDD(1);
t1183 = qJD(1) * qJD(2);
t1148 = t1115 * t1183;
t1086 = t1103 - t1148;
t1073 = t1115 * t1086;
t1079 = t1091 * qJD(2);
t1101 = t1119 * t1183;
t1102 = t1115 * qJDD(1);
t1085 = t1102 + t1101;
t1178 = t1085 * t1119;
t1022 = -t1073 - t1079 + t1178;
t1037 = t1085 * t1115 + t1086 * t1119;
t1032 = t1118 * t1037;
t984 = t1032 + (-t1022 - t1182) * t1114;
t1213 = t984 - t1149;
t1212 = t1086 - t1148;
t1113 = sin(qJ(4));
t1117 = cos(qJ(4));
t1108 = t1114 ^ 2;
t1076 = t1108 * t1091;
t1078 = t1111 * t1091;
t1050 = t1076 + t1078;
t1001 = t1022 * t1118 + t1037 * t1114;
t1074 = t1118 * t1182;
t986 = t1001 + t1074;
t1189 = t1118 * t986;
t982 = t1114 * t984;
t943 = -t1050 * qJD(3) + t1189 - t982;
t941 = t1117 * t943;
t936 = t1113 * t941;
t1211 = 0.2e1 * t936;
t1046 = qJD(4) + t1050;
t1044 = t1046 ^ 2;
t949 = t1114 * t986 + t1118 * t984;
t947 = qJDD(4) + t949;
t1130 = t1044 * t1113 - t1117 * t947;
t1210 = t1114 * t1130;
t1209 = t1118 * t1130;
t1207 = pkin(4) * t971;
t1019 = t1119 * t1022;
t1167 = t1115 * t1037;
t1000 = -t1019 - t1167;
t1206 = pkin(4) * t1000;
t1205 = pkin(4) * t1088;
t1204 = t1116 * g(3);
t1203 = t1120 * g(3);
t906 = t1114 * t910;
t855 = t1118 * t911 + t906;
t811 = t1114 * t855 + t1217;
t852 = pkin(5) * t853;
t1202 = pkin(2) * t811 + t852;
t1193 = t1114 * t949;
t942 = t1118 * t943;
t892 = -t942 - t1193;
t1194 = t1114 * t943;
t946 = t1118 * t949;
t894 = t946 - t1194;
t839 = t1114 * t894 + t1118 * t892;
t890 = pkin(5) * t892;
t1201 = pkin(2) * t839 + t890;
t1047 = t1050 ^ 2;
t901 = -pkin(3) * t1047 + t911;
t1095 = g(1) * t1116 - t1120 * g(2);
t1081 = qJDD(1) * pkin(1) + t1095;
t1034 = pkin(4) * t1212 + t1081;
t1012 = pkin(2) * t1037 + t1034;
t956 = pkin(5) * t1213 + t1012;
t904 = -pkin(3) * t949 - t956;
t847 = t1113 * t901 + t1117 * t904;
t848 = -t1113 * t904 + t1117 * t901;
t1131 = t1113 * t847 + t1117 * t848;
t788 = -t1114 * t1131 + t907;
t909 = pkin(3) * t910;
t1200 = pkin(5) * t788 + t909;
t1107 = t1113 ^ 2;
t1199 = t1107 * t943;
t1198 = t1113 * t910;
t1197 = t1113 * t943;
t932 = t1044 * t1117 + t1113 * t947;
t1195 = t1114 * t932;
t1192 = t1114 * t956;
t1191 = t1117 * t910;
t1190 = t1118 * t956;
t1016 = t1061 * t1119 - t1062 * t1115;
t1188 = pkin(1) * t1016;
t1187 = pkin(2) * t1012;
t1186 = pkin(2) * t1119;
t1185 = pkin(3) * t1114;
t1184 = pkin(3) * t1118;
t1181 = t1063 * t1114;
t1064 = qJDD(3) - t1069;
t1180 = t1064 * t1114;
t1179 = t1064 * t1118;
t1177 = t1088 * t1108;
t1176 = t1113 * t1114;
t1175 = t1113 * t1118;
t1174 = t1114 * t1012;
t1173 = t1114 * t1047;
t1172 = t1114 * t1115;
t1171 = t1114 * t1117;
t1159 = t1108 + t1111;
t1013 = t1159 * t1047;
t1170 = t1115 * t1013;
t1169 = t1115 * t1022;
t1168 = t1115 * t1034;
t1166 = t1115 * t1081;
t1094 = qJDD(2) - t1099;
t1165 = t1115 * t1094;
t1164 = t1117 * t1118;
t1163 = t1118 * t1012;
t1162 = t1119 * t1034;
t1160 = t1119 * t1081;
t1157 = pkin(5) * t1192;
t1156 = pkin(4) * t1168;
t789 = t1118 * t1131 + t906;
t764 = t1114 * t789 + t1118 * t788;
t1155 = pkin(2) * t764 + t1200;
t1154 = t943 * t1176;
t1153 = t943 * t1175;
t937 = t943 * t1164;
t1066 = -t1121 - t1177;
t1026 = t1066 * t1118 - t1180;
t1152 = pkin(2) * t1026 - t969;
t919 = t1114 * t968 + t1118 * t969;
t860 = -t1115 * t919 + t1215;
t916 = pkin(2) * t917;
t1151 = pkin(4) * t860 + t916;
t998 = t1022 * t1114 - t1032;
t961 = -t1001 * t1118 - t1114 * t998;
t963 = t1001 * t1114 - t1118 * t998;
t913 = -t1115 * t963 + t1119 * t961;
t959 = pkin(2) * t961;
t1150 = pkin(4) * t913 + t959;
t1147 = pkin(5) + t1184;
t1146 = pkin(3) * t941 - t1198;
t1145 = pkin(3) * t1197 + t1191;
t887 = t1159 * t943;
t1144 = t1009 * t1115 + t1119 * t1010;
t812 = t1118 * t855 - t1218;
t782 = -t1115 * t812 + t1119 * t811;
t1143 = pkin(4) * t782 + t1202;
t841 = -t1114 * t892 + t1118 * t894;
t797 = -t1115 * t841 + t1119 * t839;
t1142 = pkin(4) * t797 + t1201;
t1141 = t1116 * t936;
t1140 = t1120 * t936;
t1139 = t1116 * t1069;
t1138 = t1120 * t1069;
t1137 = t1116 * t1099;
t1136 = t1120 * t1099;
t877 = t937 - t1210;
t1135 = -pkin(5) * t877 - t1146;
t874 = t1153 + t1195;
t1134 = pkin(5) * t874 + t1145;
t1060 = t1118 * t1063;
t1024 = t1068 * t1114 + t1060;
t1133 = -pkin(2) * t1024 + t968;
t765 = -t1114 * t788 + t1118 * t789;
t751 = -t1115 * t765 + t1119 * t764;
t1132 = pkin(4) * t751 + t1155;
t803 = t1113 * t848 - t1117 * t847;
t1030 = -t1066 * t1114 - t1179;
t991 = t1026 * t1119 - t1030 * t1115;
t1129 = pkin(4) * t991 + t1152;
t935 = t943 * t1171;
t881 = t935 + t1209;
t828 = t1114 * t881 + t1118 * t877;
t1128 = -pkin(2) * t828 + t1135;
t926 = t1118 * t932;
t878 = -t926 + t1154;
t825 = t1114 * t878 + t1118 * t874;
t1127 = pkin(2) * t825 + t1134;
t900 = pkin(5) * t1173 + t910;
t1028 = t1068 * t1118 - t1181;
t989 = t1024 * t1119 - t1028 * t1115;
t1126 = pkin(4) * t989 - t1133;
t832 = -t1114 * t877 + t1118 * t881;
t793 = -t1115 * t832 + t1119 * t828;
t1125 = pkin(4) * t793 - t1128;
t829 = -t1114 * t874 + t1118 * t878;
t790 = -t1115 * t829 + t1119 * t825;
t1124 = pkin(4) * t790 + t1127;
t1110 = t1117 ^ 2;
t1104 = t1109 * t1123;
t1098 = t1105 - t1122;
t1097 = -t1104 + t1122;
t1092 = t1105 - t1104;
t1090 = qJDD(1) * t1120 - t1116 * t1123;
t1089 = qJDD(1) * t1116 + t1120 * t1123;
t1087 = t1103 - 0.2e1 * t1148;
t1084 = t1102 + 0.2e1 * t1101;
t1080 = t1119 * t1093;
t1075 = pkin(1) * t1081;
t1067 = t1077 - t1121;
t1065 = t1121 - t1177;
t1059 = -t1109 * t1183 + t1178;
t1058 = -t1112 * t1183 - t1073;
t1057 = -t1097 * t1115 + t1080;
t1056 = t1098 * t1119 - t1165;
t1055 = t1093 * t1115 + t1097 * t1119;
t1054 = t1094 * t1119 + t1098 * t1115;
t1053 = (t1085 + t1101) * t1115;
t1052 = t1212 * t1119;
t1051 = t1158 * t1088;
t1049 = -t1077 + t1177;
t1048 = t1077 + t1177;
t1042 = t1159 * t1182;
t1041 = pkin(1) * t1087 + t1160;
t1040 = -pkin(1) * t1084 - t1166;
t1039 = -t1084 * t1115 + t1087 * t1119;
t1038 = t1084 * t1119 + t1087 * t1115;
t1033 = t1119 * t1037;
t1029 = -t1065 * t1114 + t1060;
t1027 = t1067 * t1118 - t1180;
t1025 = t1065 * t1118 + t1181;
t1023 = t1067 * t1114 + t1179;
t1018 = -pkin(1) * (-t1165 + t1119 * (-t1104 - t1122)) + t1062;
t1017 = -pkin(1) * (t1115 * t1208 + t1080) + t1061;
t1014 = t1115 * t1061 + t1119 * t1062 + pkin(1) * (t1104 + t1105);
t1011 = t1158 * t1042;
t1008 = t1158 * t1037;
t1007 = pkin(4) * t1037 + t1162;
t1003 = (pkin(4) * t1119 + pkin(1)) * t1034;
t1002 = t1033 + t1169;
t999 = t1019 - t1167;
t996 = -pkin(4) * t1022 + t1168;
t995 = t1161 + (t1045 + t1205) * t1115;
t993 = t1025 * t1115 + t1029 * t1119;
t992 = t1023 * t1115 + t1027 * t1119;
t990 = t1025 * t1119 - t1029 * t1115;
t988 = t1023 * t1119 - t1027 * t1115;
t987 = t1158 * t1022;
t985 = t1001 + 0.2e1 * t1074;
t983 = -t1032 + (t1022 + 0.2e1 * t1182) * t1114;
t981 = (-t1007 + t1162) * t1115;
t980 = -qJD(3) * t1076 + t1189;
t979 = -qJD(3) * t1078 - t982;
t978 = (t986 + t1074) * t1114;
t977 = t1213 * t1118;
t976 = -t1034 * t1112 - t1115 * t996;
t975 = t1158 * t1013;
t974 = (pkin(4) + t1186) * t1012;
t973 = pkin(1) * t1037 + t1007 * t1119 + t1034 * t1109;
t970 = t1144 + t1205;
t966 = -pkin(2) * t983 + t1163;
t965 = -pkin(2) * t985 - t1174;
t964 = t1002 * t1119 - t1115 * t999;
t962 = t1002 * t1115 + t1119 * t999;
t960 = -pkin(1) * t1022 + (t996 - t1168) * t1119;
t954 = -t1115 * t990 + t1119 * t993;
t953 = -t1115 * t988 + t1119 * t992;
t952 = t1115 * t993 + t1119 * t990;
t951 = t1115 * t992 + t1119 * t988;
t950 = -t1114 * t985 - t1118 * t983;
t948 = -t1114 * t983 + t1118 * t985;
t944 = (t1012 * t1186 - t974) * t1115;
t940 = t1110 * t943;
t930 = t1115 * t978 + t1119 * t980;
t929 = t1115 * t977 + t1119 * t979;
t928 = -t1115 * t980 + t1119 * t978;
t927 = -t1115 * t979 + t1119 * t977;
t925 = t1115 * t965 - t1119 * t1163;
t924 = t1115 * t966 - t1119 * t1174;
t923 = -pkin(1) * (t1115 * (t1033 - t1169) + t1119 * t1000) - t1206;
t922 = t1119 * t974 + (pkin(2) * t1109 + pkin(1)) * t1012;
t921 = -t1115 * t970 - t1214;
t920 = pkin(1) * t1088 - t1115 * t971 + t1119 * t970;
t915 = -pkin(4) * t985 + t1115 * t1163 + t1119 * t965;
t914 = -pkin(4) * t983 + t1012 * t1172 + t1119 * t966;
t912 = pkin(2) * t1048 + t919;
t905 = (pkin(5) * t1118 + pkin(2)) * t956;
t902 = pkin(5) * t949 + t1190;
t899 = t1115 * t948 + t1119 * t950;
t898 = -t1115 * t950 + t1119 * t948;
t897 = t1159 * t949;
t896 = t1159 * t947;
t895 = -pkin(5) * t943 + t1192;
t893 = t946 + t1194;
t891 = t942 - t1193;
t889 = -pkin(1) * (t1115 * t1144 + t1214) - t1207;
t888 = -pkin(4) * t1170 - t900;
t886 = -t940 + t1199;
t885 = t940 + t1199;
t884 = t1110 * t887;
t883 = t1107 * t887;
t882 = t1159 * t1211;
t880 = t935 - t1209;
t879 = -t926 - t1154;
t876 = t937 + t1210;
t875 = -t1153 + t1195;
t871 = -pkin(1) * (t1115 * (t1026 * t1115 + t1030 * t1119) + t1119 * t991) - t1129;
t870 = -pkin(1) * (t1115 * (t1024 * t1115 + t1028 * t1119) + t1119 * t989) - t1126;
t869 = -t1115 * t928 + t1119 * t930;
t868 = -t1115 * t927 + t1119 * t929;
t867 = t1115 * t930 + t1119 * t928;
t866 = t1115 * t929 + t1119 * t927;
t865 = t1115 * t905 - t1119 * t1157;
t864 = (-t902 + t1190) * t1114;
t863 = -t1115 * t915 + t1119 * t925;
t862 = -t1115 * t914 + t1119 * t924;
t861 = -t1111 * t956 - t1114 * t895;
t859 = t1115 * t912 - t1215;
t858 = -pkin(1) * t985 + t1115 * t925 + t1119 * t915;
t857 = -pkin(1) * t983 + t1115 * t924 + t1119 * t914;
t856 = pkin(4) * t1048 + t1119 * t912 + t1216;
t851 = t1119 * t905 + (pkin(5) * t1172 + pkin(4)) * t956;
t850 = pkin(5) * t1047 + t855;
t849 = pkin(2) * t949 + t1108 * t956 + t1118 * t902;
t846 = -t1115 * t898 + t1119 * t899;
t845 = t1115 * t899 + t1119 * t898;
t844 = t1158 * t897;
t843 = t1158 * t896;
t842 = -pkin(2) * t943 + (t895 - t1192) * t1118;
t840 = -t1114 * t891 + t1118 * t893;
t838 = t1114 * t893 + t1118 * t891;
t836 = t1158 * t887;
t835 = t1158 * t884;
t834 = t1158 * t883;
t833 = t1158 * t882;
t831 = -t1114 * t876 + t1118 * t880;
t830 = -t1114 * t875 + t1118 * t879;
t827 = t1114 * t880 + t1118 * t876;
t826 = t1114 * t879 + t1118 * t875;
t822 = -pkin(3) * t932 - t848;
t821 = -pkin(3) * t1130 - t847;
t820 = -pkin(1) * (t1115 * (t1115 * t961 + t1119 * t963) + t1119 * t913) - t1150;
t819 = -t1115 * t851 + t1119 * t865;
t818 = t1115 * t849 + t1119 * t864;
t817 = t1114 * t822 + t1164 * t910;
t816 = t1114 * t821 + t1175 * t910;
t815 = -t1115 * t856 + t1119 * t859;
t814 = pkin(1) * t1048 + t1115 * t859 + t1119 * t856;
t813 = t1115 * t842 + t1119 * t861;
t809 = pkin(1) * t956 + t1115 * t865 + t1119 * t851;
t808 = -t1114 * t850 - t1217;
t807 = pkin(2) * t1047 + t1118 * t850 - t1218;
t806 = pkin(4) * t949 - t1115 * t864 + t1119 * t849;
t801 = -pkin(5) * t932 + t1118 * t822 - t1171 * t910;
t800 = -pkin(5) * t1130 + t1118 * t821 - t1176 * t910;
t799 = -pkin(4) * t943 - t1115 * t861 + t1119 * t842;
t798 = t1115 * t838 + t1119 * t840;
t796 = -t1115 * t840 + t1119 * t838;
t795 = t1115 * t827 + t1119 * t831;
t794 = t1115 * t826 + t1119 * t830;
t792 = -t1115 * t831 + t1119 * t827;
t791 = -t1115 * t830 + t1119 * t826;
t786 = -t1118 * t803 - t1185 * t885;
t785 = -pkin(1) * (t1115 * (t1119 * t919 + t1216) + t1119 * t860) - t1151;
t784 = t1114 * t803 - t1147 * t885;
t783 = -t1115 * t806 + t1119 * t818;
t781 = t1115 * t807 + t1119 * t808;
t780 = -t1114 * t801 + t1118 * t817;
t779 = -t1114 * t800 + t1118 * t816;
t778 = pkin(4) * t1047 - t1115 * t808 + t1119 * t807;
t777 = pkin(1) * t949 + t1115 * t818 + t1119 * t806;
t776 = -t1115 * t799 + t1119 * t813;
t775 = t1147 * t803;
t774 = -pkin(2) * t932 + t1114 * t817 + t1118 * t801;
t773 = -pkin(2) * t1130 + t1114 * t816 + t1118 * t800;
t772 = -pkin(1) * t943 + t1115 * t813 + t1119 * t799;
t771 = -t1115 * t796 + t1119 * t798;
t770 = t1115 * t798 + t1119 * t796;
t769 = -t1115 * t792 + t1119 * t795;
t768 = -t1115 * t791 + t1119 * t794;
t767 = t1115 * t795 + t1119 * t792;
t766 = t1115 * t794 + t1119 * t791;
t762 = -t1114 * t784 + t1118 * t786;
t761 = (t1184 * t803 - t775) * t1114;
t760 = -pkin(2) * t885 + t1114 * t786 + t1118 * t784;
t759 = -t1115 * t778 + t1119 * t781;
t758 = pkin(1) * t1047 + t1115 * t781 + t1119 * t778;
t757 = t1118 * t775 + (pkin(3) * t1108 + pkin(2)) * t803;
t756 = t1115 * t774 + t1119 * t780;
t755 = t1115 * t773 + t1119 * t779;
t754 = -pkin(4) * t932 - t1115 * t780 + t1119 * t774;
t753 = -pkin(4) * t1130 - t1115 * t779 + t1119 * t773;
t752 = -pkin(1) * (t1115 * (t1115 * t839 + t1119 * t841) + t1119 * t797) - t1142;
t750 = -pkin(1) * (t1115 * (t1115 * t828 + t1119 * t832) + t1119 * t793) - t1125;
t749 = -pkin(1) * (t1115 * (t1115 * t825 + t1119 * t829) + t1119 * t790) - t1124;
t748 = t1115 * t760 + t1119 * t762;
t747 = -pkin(4) * t885 - t1115 * t762 + t1119 * t760;
t746 = t1115 * t757 + t1119 * t761;
t745 = -pkin(1) * (t1115 * (t1115 * t811 + t1119 * t812) + t1119 * t782) - t1143;
t744 = pkin(4) * t803 - t1115 * t761 + t1119 * t757;
t743 = -t1115 * t754 + t1119 * t756;
t742 = -t1115 * t753 + t1119 * t755;
t741 = -pkin(1) * t932 + t1115 * t756 + t1119 * t754;
t740 = -pkin(1) * t1130 + t1115 * t755 + t1119 * t753;
t739 = -t1115 * t747 + t1119 * t748;
t738 = -pkin(1) * t885 + t1115 * t748 + t1119 * t747;
t737 = -t1115 * t744 + t1119 * t746;
t736 = pkin(1) * t803 + t1115 * t746 + t1119 * t744;
t735 = -pkin(1) * (t1115 * (t1115 * t764 + t1119 * t765) + t1119 * t751) - t1132;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1090, 0, -t1089, 0, -t1204, -t1203, -t1095 * t1120 + t1096 * t1116, 0, t1059 * t1120 - t1137, t1039 * t1120 - t1092 * t1116, t1057 * t1120 + t1102 * t1116, t1058 * t1120 + t1137, t1056 * t1120 + t1103 * t1116, qJDD(2) * t1116 + t1079 * t1120, -t1017 * t1116 - t1120 * t1166, -t1018 * t1116 - t1120 * t1160, t1120 * t1016, -t1116 * t1188, t1120 * t987, -t1088 * t1116 + t1120 * t964, t1116 * t1022, 0, t1037 * t1116 + t1051 * t1120, 0, t1116 * t995 + t1120 * t981, -t1010 * t1116 + t1120 * t976, -t1116 * t923 + t1120 * t921, -t1116 * t889 - t1120 * t1156, t1120 * t869 - t1139, t1049 * t1116 + t1120 * t846, t1001 * t1116 + t1120 * t954, t1120 * t868 + t1139, -t1116 * t998 + t1120 * t953, qJDD(3) * t1116 + t1011 * t1120, -t1116 * t870 + t1120 * t862, -t1116 * t871 + t1120 * t863, -t1116 * t820 + t1120 * t815, -t1116 * t785 + t1120 * t944, t1120 * t836, -t1047 * t1116 + t1120 * t771, t1116 * t943, 0, t1116 * t949 + t1120 * t975, 0, -t1116 * t888 + t1120 * t783, -t1116 * t911 + t1120 * t776, -t1116 * t752 + t1120 * t759, -t1116 * t745 + t1120 * t819, t1120 * t835 - t1141, t1116 * t886 - t1120 * t833, -t1116 * t932 + t1120 * t769, t1120 * t834 + t1141, t1116 * t1130 + t1120 * t768, 0, -t1116 * t749 + t1120 * t742, -t1116 * t750 + t1120 * t743, -t1116 * t1131 + t1120 * t739, -t1116 * t735 + t1120 * t737; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1089, 0, t1090, 0, t1203, -t1204, -t1095 * t1116 - t1096 * t1120, 0, t1059 * t1116 + t1136, t1039 * t1116 + t1092 * t1120, t1057 * t1116 - t1102 * t1120, t1058 * t1116 - t1136, t1056 * t1116 - t1103 * t1120, -qJDD(2) * t1120 + t1079 * t1116, t1017 * t1120 - t1116 * t1166, t1018 * t1120 - t1116 * t1160, t1116 * t1016, t1120 * t1188, t1116 * t987, t1088 * t1120 + t1116 * t964, -t1120 * t1022, 0, -t1037 * t1120 + t1051 * t1116, 0, t1116 * t981 - t1120 * t995, t1010 * t1120 + t1116 * t976, t1116 * t921 + t1120 * t923, -t1116 * t1156 + t1120 * t889, t1116 * t869 + t1138, -t1049 * t1120 + t1116 * t846, -t1001 * t1120 + t1116 * t954, t1116 * t868 - t1138, t1116 * t953 + t1120 * t998, -qJDD(3) * t1120 + t1011 * t1116, t1116 * t862 + t1120 * t870, t1116 * t863 + t1120 * t871, t1116 * t815 + t1120 * t820, t1116 * t944 + t1120 * t785, t1116 * t836, t1047 * t1120 + t1116 * t771, -t1120 * t943, 0, t1116 * t975 - t1120 * t949, 0, t1116 * t783 + t1120 * t888, t1116 * t776 + t1120 * t911, t1116 * t759 + t1120 * t752, t1116 * t819 + t1120 * t745, t1116 * t835 + t1140, -t1116 * t833 - t1120 * t886, t1116 * t769 + t1120 * t932, t1116 * t834 - t1140, t1116 * t768 - t1120 * t1130, 0, t1116 * t742 + t1120 * t749, t1116 * t743 + t1120 * t750, t1116 * t739 + t1120 * t1131, t1116 * t737 + t1120 * t735; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1095, t1096, 0, 0, t1053, t1038, t1055, t1052, t1054, 0, t1041, t1040, t1014, t1075, 0, t962, 0, t1008, 0, 0, t973, t960, t920, t1003, t867, t845, t952, t866, t951, 0, t857, t858, t814, t922, 0, t770, 0, t844, 0, 0, t777, t772, t758, t809, 0, 0, t767, 0, t766, t843, t740, t741, t738, t736; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1123, 0, 0, -g(3), -t1095, 0, t1059, t1039, t1057, t1058, t1056, t1079, -t1166, -t1160, t1016, 0, t987, t964, 0, 0, t1051, 0, t981, t976, t921, -t1156, t869, t846, t954, t868, t953, t1011, t862, t863, t815, t944, t836, t771, 0, 0, t975, 0, t783, t776, t759, t819, t835, -t833, t769, t834, t768, 0, t742, t743, t739, t737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1123, 0, qJDD(1), 0, g(3), 0, -t1096, 0, t1099, t1092, -t1102, -t1099, -t1103, -qJDD(2), t1017, t1018, 0, t1188, 0, t1088, -t1022, 0, -t1037, 0, -t995, t1010, t923, t889, t1069, -t1049, -t1001, -t1069, t998, -qJDD(3), t870, t871, t820, t785, 0, t1047, -t943, 0, -t949, 0, t888, t911, t752, t745, t936, -t886, t932, -t936, -t1130, 0, t749, t750, t1131, t735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1095, t1096, 0, 0, t1053, t1038, t1055, t1052, t1054, 0, t1041, t1040, t1014, t1075, 0, t962, 0, t1008, 0, 0, t973, t960, t920, t1003, t867, t845, t952, t866, t951, 0, t857, t858, t814, t922, 0, t770, 0, t844, 0, 0, t777, t772, t758, t809, 0, 0, t767, 0, t766, t843, t740, t741, t738, t736; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1085, t1087, t1093, -t1101, t1098, t1101, 0, -t1081, t1061, 0, t1019, t1002, 0, t1167, t1119 * t1088, 0, t1168, -t1162, -t971, 0, t930, t899, t993, t929, t992, t1119 * t1042, t924, t925, t859, t1115 * t1187, t1119 * t887, t798, 0, t1115 * t897, t1119 * t1013, 0, t818, t813, t781, t865, t1119 * t884, -t1119 * t882, t795, t1119 * t883, t794, t1115 * t896, t755, t756, t748, t746; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1148, t1084, t1097, t1086, t1094, -t1148, t1081, 0, t1062, 0, -t1169, t999, 0, t1033, -t1115 * t1088, 0, t1007, t996, t970, pkin(4) * t1034, t928, t898, t990, t927, t988, -t1115 * t1042, t914, t915, t856, t974, -t1115 * t887, t796, 0, t1119 * t897, -t1170, 0, t806, t799, t778, t851, -t1115 * t884, t1115 * t882, t792, -t1115 * t883, t791, t1119 * t896, t753, t754, t747, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1099, -t1092, t1102, t1099, t1103, qJDD(2), -t1061, -t1062, 0, 0, 0, -t1088, t1022, 0, t1037, 0, t995, -t1010, t1206, t1207, -t1069, t1049, t1001, t1069, -t998, qJDD(3), t1126, t1129, t1150, t1151, 0, -t1047, t943, 0, t949, 0, -t888, -t911, t1142, t1143, -t936, t886, -t932, t936, t1130, 0, t1124, t1125, -t1131, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, t1037, 0, 0, t1088, 0, 0, -t1034, -t1009, 0, t980, t950, t1029, t979, t1027, t1042, -t1174, -t1163, -t917, 0, t887, t840, 0, 0, t1013, 0, t864, t861, t808, -t1157, t884, -t882, t831, t883, t830, 0, t779, t780, t762, t761; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, 0, t1037, 0, 0, t1034, 0, t1010, 0, t978, t948, t1025, t977, t1023, 0, t966, t965, t912, t1187, 0, t838, 0, t897, 0, 0, t849, t842, t807, t905, 0, 0, t827, 0, t826, t896, t773, t774, t760, t757; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1088, t1022, 0, t1037, 0, t1009, -t1010, 0, 0, -t1069, t1049, t1001, t1069, -t998, qJDD(3), -t1133, t1152, t959, t916, 0, -t1047, t943, 0, t949, 0, t900, -t911, t1201, t1202, -t936, t886, -t932, t936, t1130, 0, t1127, -t1128, -t1131, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t986, -t983, t1063, -t1074, t1067, t1074, 0, -t1012, t968, 0, t942, t893, 0, t1193, t1118 * t1047, 0, t1192, -t1190, -t853, 0, t1110 * t942, -0.2e1 * t1113 * t937, t880, t1107 * t942, t879, t1114 * t947, t816, t817, t786, t803 * t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1149, t985, t1065, t984, t1064, -t1149, t1012, 0, t969, 0, -t1194, t891, 0, t946, -t1173, 0, t902, t895, t850, pkin(5) * t956, -t1110 * t1194, t1114 * t1211, t876, -t1107 * t1194, t875, t1118 * t947, t800, t801, t784, t775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1069, t1049, t1001, t1069, -t998, qJDD(3), -t968, -t969, 0, 0, 0, -t1047, t943, 0, t949, 0, t900, -t911, t890, t852, -t936, t886, -t932, t936, t1130, 0, t1134, -t1135, -t1131, t1200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, t949, 0, 0, t1047, 0, 0, -t956, -t910, 0, t940, -0.2e1 * t936, -t1130, t1199, -t932, 0, t1198, t1191, -t803, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, 0, t949, 0, 0, t956, 0, t911, 0, 0, 0, t941, 0, -t1197, t947, t821, t822, -pkin(3) * t885, pkin(3) * t803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1047, t943, 0, t949, 0, t910, -t911, 0, 0, -t936, t886, -t932, t936, t1130, 0, t1145, t1146, -t1131, t909; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t941, -t1197, t947, 0, -t1044, 0, 0, t910, t847, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t941, t1044, -t1197, t947, 0, -t910, 0, t848, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t941, 0, -t1197, t947, -t847, -t848, 0, 0;];
m_new_reg  = t1;
