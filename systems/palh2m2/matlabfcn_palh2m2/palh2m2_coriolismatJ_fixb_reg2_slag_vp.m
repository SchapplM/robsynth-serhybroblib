% Calculate inertial parameters regressor of coriolis matrix for
% palh2m2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[A2Off,A3Off,A4Off,L1,L2]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-06-06 14:46
% Revision: 7254ec7b167830f9592b38d39d95d449e6fd98ef (2019-06-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = palh2m2_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh2m2_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh2m2_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'palh2m2_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-06-06 14:45:23
% EndTime: 2019-06-06 14:45:25
% DurationCPUTime: 1.08s
% Computational Cost: add. (1042->96), mult. (3159->191), div. (0->0), fcn. (2382->6), ass. (0->106)
t64 = sin(qJ(4));
t67 = cos(qJ(4));
t131 = t64 ^ 2 + t67 ^ 2;
t147 = 0.1e1 - t131;
t65 = sin(qJ(3));
t66 = sin(qJ(2));
t68 = cos(qJ(3));
t69 = cos(qJ(2));
t48 = (t65 * t66 + t68 * t69) * pkin(4);
t138 = t66 * pkin(4);
t142 = pkin(4) * t69;
t49 = t68 * t138 - t65 * t142;
t30 = t48 * t68 - t49 * t65;
t123 = qJD(2) * t30;
t140 = pkin(5) * t65;
t60 = t66 ^ 2;
t63 = t69 ^ 2;
t53 = t60 + t63;
t59 = t65 ^ 2;
t62 = t68 ^ 2;
t41 = (t59 + t62) * t53;
t145 = t140 * (t53 / 0.2e1 + t41 / 0.2e1);
t141 = pkin(5) * t41;
t139 = pkin(5) * t68;
t87 = -t48 * t65 - t68 * t49;
t137 = t139 * t87;
t136 = t30 * t65;
t134 = t87 * t68;
t133 = t64 * t41;
t132 = t65 * t53;
t102 = t138 / 0.2e1;
t92 = -t87 * t41 / 0.2e1;
t72 = t102 + t92;
t9 = t72 * t64;
t130 = qJD(1) * t9;
t129 = qJD(3) * pkin(5);
t57 = -pkin(1) - t142;
t38 = (-pkin(2) - t139) * t53 + t57;
t21 = -pkin(3) * t41 + t38;
t90 = t21 * t131;
t3 = pkin(5) * t90 * t132;
t128 = t3 * qJD(1);
t4 = t90 * t138;
t127 = t4 * qJD(1);
t11 = t72 * t67;
t126 = qJD(1) * t11;
t125 = qJD(1) * t66;
t124 = qJD(1) * t68;
t122 = qJD(3) * t65;
t121 = qJD(3) * t68;
t22 = t64 * t145;
t120 = t22 * qJD(1);
t24 = t67 * t145;
t119 = t24 * qJD(1);
t117 = t41 * qJD(1);
t52 = t53 ^ 2;
t42 = (-t59 + t62) * t52;
t116 = t42 * qJD(1);
t54 = t63 - t60;
t115 = t54 * qJD(1);
t114 = t64 * qJD(4);
t113 = t66 * qJD(2);
t112 = t67 * qJD(4);
t111 = t69 * qJD(2);
t110 = pkin(1) * qJD(2);
t109 = qJD(1) * pkin(1);
t108 = t30 * t140;
t107 = pkin(4) * t125;
t106 = pkin(4) * t113;
t105 = qJD(4) * t140;
t104 = -t140 / 0.2e1;
t103 = t140 / 0.2e1;
t101 = t21 * t117;
t100 = qJD(1) * t132;
t99 = t64 * t123;
t98 = t67 * t123;
t97 = t64 * t121;
t96 = t65 * t121;
t95 = t67 * t121;
t94 = t53 * t122;
t93 = t66 * t111;
t89 = t66 * t109;
t88 = t69 * t109;
t86 = pkin(5) * t100;
t85 = t38 * t107;
t44 = -pkin(2) * t53 + t57;
t84 = t44 * t107;
t83 = t57 * t107;
t82 = t41 * t107;
t81 = t53 * t107;
t80 = t44 * t100;
t79 = t44 * t53 * t124;
t78 = t52 * t96;
t77 = t38 * t86;
t76 = t41 * t86;
t75 = t65 * t81;
t74 = t68 * t81;
t73 = t21 * (qJD(4) + t117);
t71 = pkin(5) * t94 + t106;
t55 = t69 * t125;
t47 = t65 * t52 * t124;
t25 = (t103 * t41 + t104 * t53) * t67;
t23 = t64 * t53 * t103 + t104 * t133;
t12 = (t92 - t138 / 0.2e1) * t67;
t10 = t87 * t133 / 0.2e1 + t64 * t102;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, t54 * qJD(2), 0, -t93, 0, 0, -t66 * t110, -t69 * t110, 0, 0, 0, 0, 0, 0, 0, 0, -t53 * t106, 0, 0, t57 * t106, t78, t42 * qJD(3), 0, -t78, 0, 0, (-t106 * t68 + t44 * t122) * t53, (t106 * t65 + t44 * t121) * t53, 0, t44 * t106, 0, 0, 0, 0, 0, 0, -t71 * t41, 0, 0, t71 * t38, 0, 0, 0, 0, 0, 0, (t21 * t114 - t67 * t71) * t41, (t112 * t21 + t64 * t71) * t41, 0, qJD(2) * t4 + qJD(3) * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, t115, t111, -t55, -t113, 0, -t89, -t88, 0, 0, 0, 0, 0, 0, 0, 0, -t81, 0, -pkin(4) * t53 * t111, t83, 0, 0, 0, 0, 0, 0, -t74, t75, -t53 * t123, t84, 0, 0, 0, 0, 0, 0, -t82, 0, -t41 * t123, t85, 0, 0, 0, 0, 0, 0, qJD(4) * t12 + (-t107 * t67 + t99) * t41, qJD(4) * t10 + (t107 * t64 + t98) * t41, 0, t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, t116, t53 * t121, -t47, -t94, 0, t80, t79, 0, 0, 0, 0, 0, 0, 0, 0, -t76, 0, -t121 * t141, t77, 0, 0, 0, 0, 0, 0, t25 * qJD(4) + (-t100 * t67 + t97) * t141, t23 * qJD(4) + (t100 * t64 + t95) * t141, 0, t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t12 + qJD(3) * t25 + t64 * t73, qJD(2) * t10 + qJD(3) * t23 + t67 * t73, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, -t115, 0, t55, 0, 0, t89, t88, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, -t83, 0, 0, 0, 0, 0, 0, t74, -t75, 0, -t84, 0, 0, 0, 0, 0, 0, t82, 0, 0, -t85, 0, 0, 0, 0, 0, 0, qJD(4) * t11 + t67 * t82, -qJD(4) * t9 - t64 * t82, 0, -t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147 * t87 * t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * qJD(3), -t48 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-t134 - t136) * t129, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-t131 * t134 - t136) * t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t112 * t87 + t126, t114 * t87 - t130, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t116, 0, t47, 0, 0, -t80, -t79, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, 0, -t77, 0, 0, 0, 0, 0, 0, t24 * qJD(4) + t67 * t76, -t22 * qJD(4) - t64 * t76, 0, -t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49 * qJD(2), t48 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t108 + t137) * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, (t131 * t108 + t137) * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t147 * pkin(5) ^ 2 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * t67 + t119, -t105 * t64 - t120, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t11 - qJD(3) * t24 - t101 * t64, qJD(2) * t9 + qJD(3) * t22 - t101 * t67, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99 - t126, t98 + t130, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, pkin(5) * t97 - t119, pkin(5) * t95 + t120, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t1;
