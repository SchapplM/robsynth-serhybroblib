% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% palh2m2OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[A2Off,A3Off,A4Off,L1,L2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-03 06:35
% Revision: 702b02ffee4f47164fa6a11b998f1d39ead3f7a6 (2020-05-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = palh2m2OL_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'palh2m2OL_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'palh2m2OL_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'palh2m2OL_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh2m2OL_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'palh2m2OL_invdynJ_fixb_reg2_slag_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-03 02:57:01
% EndTime: 2020-05-03 02:58:11
% DurationCPUTime: 14.91s
% Computational Cost: add. (17518->663), mult. (41016->869), div. (0->0), fcn. (35740->18), ass. (0->354)
t218 = sin(qJ(6));
t374 = qJD(6) * t218;
t219 = sin(qJ(5));
t220 = sin(qJ(3));
t221 = sin(qJ(2));
t380 = qJD(1) * t221;
t224 = cos(qJ(3));
t225 = cos(qJ(2));
t394 = t224 * t225;
t149 = qJD(1) * t394 - t220 * t380;
t296 = t220 * t225 + t221 * t224;
t150 = t296 * qJD(1);
t457 = sin(qJ(4));
t459 = cos(qJ(4));
t275 = -t457 * t149 - t459 * t150;
t276 = t459 * t149 - t457 * t150;
t458 = cos(qJ(5));
t68 = t219 * t275 + t276 * t458;
t518 = t218 * t68;
t524 = t374 + t518;
t223 = cos(qJ(6));
t360 = -qJDD(4) - qJDD(5);
t314 = -qJDD(3) + t360;
t297 = qJDD(2) - t314;
t489 = t219 * t276 - t458 * t275;
t214 = qJD(2) + qJD(3);
t243 = t214 * t296;
t295 = t220 * t221 - t394;
t280 = t295 * qJDD(1);
t237 = -qJD(1) * t243 - t280;
t242 = t214 * t295;
t238 = -qJD(1) * t242 + qJDD(1) * t296;
t232 = -t459 * t237 + t457 * t238;
t492 = qJD(4) * t275;
t231 = -t232 + t492;
t337 = qJD(5) * t458;
t375 = qJD(5) * t219;
t338 = qJD(4) * t457;
t339 = qJD(4) * t459;
t41 = -t149 * t339 + t150 * t338 - t457 * t237 - t459 * t238;
t230 = -t219 * t231 - t275 * t375 - t276 * t337 + t458 * t41;
t362 = -qJD(4) - qJD(5);
t325 = -qJD(3) + t362;
t304 = qJD(2) - t325;
t493 = qJD(6) * t304 + t230;
t10 = t218 * t297 + t493 * t223 + t374 * t489;
t373 = qJD(6) * t223;
t11 = -t493 * t218 + t223 * t297 + t373 * t489;
t516 = qJD(6) + t68;
t58 = t218 * t489 + t223 * t304;
t499 = t516 * t58;
t60 = -t218 * t304 + t223 * t489;
t57 = t60 * t374;
t523 = (t10 + t499) * t223 + t57 + (t60 * t68 + t11) * t218;
t336 = t459 * pkin(2);
t195 = t336 + pkin(5);
t345 = t457 * t219;
t265 = t458 * t459 - t345;
t104 = t195 * t337 + (qJD(4) * t265 - qJD(5) * t345) * pkin(2);
t309 = t458 * t457;
t137 = pkin(2) * t309 + t195 * t219;
t290 = t104 * qJD(3) + t137 * qJDD(3);
t455 = pkin(4) * t224;
t196 = pkin(2) + t455;
t344 = t457 * t220;
t147 = -pkin(4) * t344 + t196 * t459;
t136 = pkin(5) + t147;
t347 = t459 * t220;
t146 = pkin(4) * t347 + t196 * t457;
t346 = t458 * t146;
t283 = -t136 * t219 - t346;
t274 = t459 * t224 - t344;
t108 = t196 * t339 + (qJD(3) * t274 - t220 * t338) * pkin(4);
t343 = t457 * t224;
t273 = t343 + t347;
t109 = -t196 * t338 + (-qJD(3) * t273 - t220 * t339) * pkin(4);
t411 = t146 * t219;
t92 = t136 * t458 - t411;
t49 = t92 * qJD(5) + t458 * t108 + t109 * t219;
t293 = t49 * qJD(2) - qJDD(2) * t283;
t254 = t290 + t293;
t305 = qJD(4) * t337;
t484 = pkin(5) * (qJDD(4) * t219 + t305);
t25 = t254 + t484;
t454 = pkin(5) * t219;
t75 = -qJD(2) * t283 + qJD(3) * t137 + qJD(4) * t454;
t328 = t219 * t41 + t458 * t231;
t17 = qJD(5) * t489 - t328;
t194 = t459 * pkin(5) + pkin(2);
t279 = -pkin(5) * t344 + t224 * t194;
t135 = -pkin(4) - t279;
t189 = pkin(5) * t343;
t145 = t194 * t220 + t189;
t87 = t135 * t225 + t145 * t221 - pkin(1);
t372 = qJDD(1) * t87;
t334 = t457 * qJD(3);
t376 = qJD(3) * t194;
t377 = qJD(2) * t225;
t378 = qJD(2) * t221;
t48 = -t135 * t378 + t145 * t377 + (t220 * t376 + (qJD(4) * t273 + t224 * t334) * pkin(5)) * t225 + (t224 * t376 + (qJD(4) * t274 - t220 * t334) * pkin(5)) * t221;
t419 = qJD(1) * t48;
t476 = t372 + t419;
t9 = pkin(3) * t17 + t476;
t332 = qJD(6) * t75 + t9;
t418 = qJD(1) * t87;
t44 = -pkin(3) * t68 + t418;
t285 = -t223 * t332 + t44 * t374;
t4 = -t218 * t25 + t285;
t2 = t4 * t218;
t29 = -t218 * t75 - t223 * t44;
t30 = -t218 * t44 + t223 * t75;
t222 = sin(qJ(1));
t226 = cos(qJ(1));
t180 = g(1) * t226 + g(2) * t222;
t217 = qJ(2) + qJ(3);
t211 = qJ(4) + t217;
t205 = qJ(5) + t211;
t187 = sin(t205);
t182 = g(3) * t187;
t188 = cos(t205);
t352 = t180 * t188 + t182;
t522 = t29 * t373 + t524 * t30 + t2 + t352;
t435 = t11 * t223;
t521 = -t524 * t58 + t435;
t16 = -qJDD(6) + t17;
t434 = t16 * t218;
t508 = t223 * t516;
t520 = t489 * t60 - t508 * t516 + t434;
t61 = t516 * t374;
t330 = t16 * t223 + t61;
t519 = -t489 * t58 + t516 * t518 + t330;
t441 = t68 * t87;
t517 = t489 * t68;
t515 = t489 ^ 2 - t68 ^ 2;
t514 = -t304 * t68 - t230;
t436 = t10 * t218;
t513 = -t508 * t60 + t436;
t264 = -t459 * t219 - t309;
t105 = -t195 * t375 + (qJD(4) * t264 - qJD(5) * t309) * pkin(2);
t340 = pkin(2) * t457;
t138 = t195 * t458 - t219 * t340;
t359 = pkin(5) * t458;
t50 = t283 * qJD(5) - t108 * t219 + t109 * t458;
t303 = t50 * qJD(2) + t105 * qJD(3) + t92 * qJDD(2) + t138 * qJDD(3) + qJDD(4) * t359;
t358 = pkin(5) * t375;
t26 = -qJD(4) * t358 + t303;
t24 = pkin(3) * t297 + t26;
t289 = t180 * t187;
t272 = -t24 - t289;
t449 = g(3) * t188;
t329 = t218 * t449 - t30 * t489;
t77 = t92 * qJD(2) + t138 * qJD(3) + qJD(4) * t359;
t70 = pkin(3) * t304 + t77;
t512 = t218 * t272 - t70 * t508 + t329;
t443 = t489 * t87;
t507 = t516 * t489;
t506 = pkin(3) * t489;
t406 = t187 * t226;
t407 = t187 * t222;
t494 = g(1) * t406 + g(2) * t407;
t294 = t29 * t489 + (t24 + t494) * t223;
t3 = qJD(6) * t29 - t218 * t9 + t223 * t25;
t505 = (t29 * t68 - t3) * t223 + t522;
t208 = qJD(4) + t214;
t503 = t489 * t208 + t328;
t212 = t225 * pkin(4);
t472 = -pkin(1) - t212;
t176 = t472 * qJD(1);
t498 = t176 * t214;
t496 = t276 * t275;
t39 = t275 ^ 2 - t276 ^ 2;
t34 = -t208 * t275 + t231;
t412 = t145 * t225;
t90 = -t135 * t221 + t412;
t323 = -qJD(1) * t90 - qJD(6) * t283 - t506;
t483 = t323 * t516;
t368 = qJD(1) * qJD(2);
t333 = t221 * t368;
t361 = qJDD(1) * pkin(1);
t363 = t225 * qJDD(1);
t144 = -t361 + (t333 - t363) * pkin(4);
t313 = qJDD(1) * t472 + t144;
t478 = t313 * t224;
t153 = t274 * pkin(4);
t154 = t273 * pkin(4);
t111 = -t153 * t219 - t154 * t458;
t317 = -t111 * qJD(2) + t105;
t477 = t459 * t295 + t457 * t296;
t384 = pkin(2) * t224;
t197 = -pkin(4) - t384;
t385 = pkin(2) * t220;
t132 = t197 * t225 + t221 * t385 - pkin(1);
t367 = qJDD(1) * t132;
t106 = -t197 * t378 + (qJD(3) * t296 + t220 * t377) * pkin(2);
t382 = qJD(1) * t106;
t475 = t382 + t367;
t474 = -g(1) * t222 + g(2) * t226;
t326 = t457 * qJDD(3);
t335 = t459 * qJD(3);
t473 = pkin(2) * (qJD(4) * t335 + t326);
t471 = -t449 + t494;
t201 = sin(t211);
t404 = t201 * t226;
t405 = t201 * t222;
t202 = cos(t211);
t448 = g(3) * t202;
t470 = g(1) * t404 + g(2) * t405 - t448;
t469 = pkin(4) * (t220 ^ 2 + t224 ^ 2);
t33 = -t208 * t276 - t41;
t467 = -t223 * t449 + t294;
t227 = qJD(2) ^ 2;
t463 = qJDD(2) * t221 + t225 * t227;
t114 = -t457 * t295 + t459 * t296;
t235 = t457 * t242 - t459 * t243;
t233 = qJD(4) * t114 - t235;
t462 = qJD(4) * t477 + t459 * t242 + t457 * t243;
t456 = pkin(4) * t221;
t447 = g(3) * t225;
t446 = t3 * t223;
t445 = t60 * t58;
t437 = pkin(4) * qJD(2);
t432 = t218 * t58;
t431 = t218 * t60;
t427 = t218 * t70;
t426 = t223 * t29;
t425 = t223 * t58;
t424 = t223 * t60;
t228 = qJD(1) ^ 2;
t422 = t228 * t87;
t417 = qJD(6) * t516;
t416 = t276 * t132;
t413 = t132 * t228;
t410 = t149 * t214;
t409 = t150 * t149;
t408 = t150 * t214;
t403 = t202 * t222;
t402 = t202 * t226;
t401 = t218 * t222;
t400 = t218 * t226;
t396 = t222 * t223;
t395 = t223 * t226;
t186 = pkin(5) * t202;
t210 = cos(t217);
t193 = pkin(2) * t210;
t389 = t193 + t186;
t388 = t193 + t212;
t215 = t221 ^ 2;
t216 = t225 ^ 2;
t387 = t215 - t216;
t209 = sin(t217);
t386 = pkin(2) * t209;
t383 = pkin(3) * t187;
t381 = qJD(1) * t132;
t379 = qJD(2) * t154;
t110 = t458 * t153 - t154 * t219;
t371 = t110 * qJD(2);
t181 = t188 * pkin(3);
t369 = pkin(2) * qJD(3);
t365 = t146 * qJDD(2);
t364 = t221 * qJDD(1);
t213 = qJDD(2) + qJDD(3);
t356 = t137 * t417;
t253 = t219 * t477;
t74 = t458 * t114 - t253;
t355 = t74 * t373;
t354 = t221 * t228 * t225;
t353 = t109 * qJD(2) + t147 * qJDD(2) + qJDD(3) * t336;
t351 = g(1) * t402 + g(2) * t403 + g(3) * t201;
t350 = t186 + t388;
t349 = t218 * t458;
t348 = t223 * t458;
t342 = t193 - t472;
t341 = -t25 + t182;
t327 = t516 * t70;
t316 = qJD(2) * (-qJD(3) + t214);
t315 = qJD(3) * (-qJD(2) - t214);
t312 = qJD(1) * t214;
t311 = -0.2e1 * pkin(1) * t368;
t310 = t516 * t337;
t308 = t225 * t333;
t307 = -g(1) * t407 + g(2) * t406;
t306 = pkin(2) * t334;
t250 = t458 * t477;
t21 = qJD(5) * t250 + t114 * t375 + t219 * t233 + t458 * t462;
t301 = t16 * t74 + t21 * t516;
t300 = t489 * t75 + t77 * t68;
t299 = -t218 * t30 - t426;
t298 = t218 * t29 - t223 * t30;
t152 = -pkin(5) * t201 - t386;
t291 = t108 * qJD(2) + t365;
t288 = t180 * t201;
t155 = t295 * g(2);
t157 = t295 * g(1);
t282 = t296 * g(3) - t149 * t176 - t155 * t222 - t157 * t226;
t278 = t68 * t426 + t522;
t277 = pkin(1) * t228 + t180;
t271 = -t474 + 0.2e1 * t361;
t115 = t146 * qJD(2) + t306;
t22 = -qJD(5) * t253 + t114 * t337 - t219 * t462 + t458 * t233;
t14 = pkin(3) * t22 + t48;
t73 = t114 * t219 + t250;
t52 = pkin(3) * t73 + t87;
t268 = qJD(6) * t70 * t74 - t14 * t516 + t16 * t52;
t267 = -t21 * t70 + t24 * t74 + t52 * t417;
t266 = -t225 * t312 - t364;
t263 = -t16 * t283 - t49 * t516 - t327;
t262 = -t104 * t516 + t137 * t16 - t327;
t260 = t132 * t275;
t72 = -qJD(4) * t306 + t353;
t156 = t296 * g(2);
t158 = t296 * g(1);
t257 = t295 * g(3) + qJDD(2) * t455 - t150 * t176 + t156 * t222 + t158 * t226;
t256 = 0.2e1 * t498;
t252 = qJD(6) * t299 - t2 + t446;
t251 = -t436 - t435 + (t424 + t432) * qJD(6);
t117 = pkin(2) * t335 + t147 * qJD(2);
t249 = -t115 * t275 + t117 * t276;
t248 = t352 - t484;
t247 = t72 + t470;
t246 = t26 + t471;
t245 = t351 - t473;
t240 = t220 * t313 + t224 * t256;
t239 = t248 - t290;
t207 = qJDD(4) + t213;
t198 = t359 + pkin(3);
t184 = t225 * t385;
t151 = t221 * t384 + t184;
t139 = -t197 * t221 + t184;
t133 = t152 - t456;
t131 = pkin(3) + t138;
t129 = t188 * t395 - t401;
t128 = -t188 * t400 - t396;
t127 = -t188 * t396 - t400;
t126 = t188 * t401 - t395;
t122 = t186 + t342;
t112 = t189 * t225 + (t221 * t274 + t225 * t347) * pkin(5);
t93 = t221 * t279 + t412;
t88 = pkin(3) + t92;
t84 = -t149 ^ 2 + t150 ^ 2;
t81 = (-t147 * t219 - t346) * qJD(2) + t264 * t369;
t80 = (t458 * t147 - t411) * qJD(2) + t265 * t369;
t79 = t237 + t408;
t78 = t238 - t410;
t71 = t291 + t473;
t51 = qJD(1) * t112 + t506;
t46 = qJD(1) * t93 + t506;
t38 = -t218 * t506 + t223 * t77;
t37 = -t218 * t77 - t223 * t506;
t36 = -t218 * t46 + t223 * t371;
t35 = -t218 * t371 - t223 * t46;
t32 = -t218 * t51 + t223 * t80;
t31 = -t218 * t80 - t223 * t51;
t7 = -t424 * t516 + t436;
t1 = [0, 0, 0, 0, 0, qJDD(1), -t474, t180, 0, 0, qJDD(1) * t215 + 0.2e1 * t308, 0.2e1 * t221 * t363 - 0.2e1 * t368 * t387, t463, qJDD(1) * t216 - 0.2e1 * t308, qJDD(2) * t225 - t221 * t227, 0, t221 * t311 + t225 * t271, -t221 * t271 + t225 * t311, -t180, (-t474 + t361) * pkin(1), -t150 * t242 + t238 * t296, (t242 * t295 - t243 * t296) * qJD(1) - 0.2e1 * t296 * t280 + t214 * (-t149 * t295 - t150 * t296), t213 * t296 - t214 * t242, -t149 * t243 - t237 * t295, -t213 * t295 - t214 * t243, 0, t155 * t226 - t157 * t222 + (t220 * t256 - t478) * t225 + (-t149 * t437 + t240) * t221, t156 * t226 - t158 * t222 + t240 * t225 + (t150 * t437 + t478 + (-t312 * t472 - t498) * t220) * t221, -t463 * t469 - t180, pkin(4) * t176 * t378 + (t144 + t474) * t472, -t41 * t114 + t275 * t462, -t275 * t235 + t41 * t477 - t462 * t276 + (-t232 + 0.2e1 * t492) * t114, t114 * t207 - t208 * t462, -t231 * t477 - t233 * t276, -t207 * t477 - t208 * t233, 0, g(1) * t403 - g(2) * t402 - t106 * t276 - t132 * t231 + t233 * t381 + t475 * t477, -g(1) * t405 + g(2) * t404 - t106 * t275 + t114 * t475 - t132 * t41 - t381 * t462, -t72 * t114 - t115 * t233 + t117 * t462 - t477 * t71 - t180, -t474 * t342 + (t367 + 0.2e1 * t382) * t132, -t21 * t489 - t230 * t74, -t74 * t17 - t21 * t68 - t22 * t489 + t230 * t73, -t21 * t304 + t297 * t74, t17 * t73 - t22 * t68, -t22 * t304 - t297 * t73, 0, (qJD(1) * t73 - t68) * t48 - t474 * t188 + (qJD(1) * t22 + qJDD(1) * t73 + t17) * t87, -t21 * t418 - t230 * t87 + t476 * t74 + t48 * t489 + t307, t21 * t77 - t22 * t75 - t25 * t73 - t26 * t74 - t180, (t372 + 0.2e1 * t419) * t87 - t474 * t122, -t74 * t57 + (-t10 * t74 - t21 * t60) * t223, (t425 + t431) * t21 + (t436 - t435 + (-t424 + t432) * qJD(6)) * t74, t10 * t73 - t22 * t60 - t223 * t301 - t61 * t74, t58 * t355 + (t11 * t74 - t21 * t58) * t218, t11 * t73 + t218 * t301 + t22 * t58 - t355 * t516, t16 * t73 - t22 * t516, -g(1) * t127 - g(2) * t129 + t218 * t267 - t22 * t29 + t223 * t268 - t4 * t73, -g(1) * t126 - g(2) * t128 - t218 * t268 + t22 * t30 + t223 * t267 + t3 * t73, (-t10 * t52 + t14 * t60 + t21 * t29 - t4 * t74 + (-t30 * t74 + t52 * t58) * qJD(6)) * t223 + (t11 * t52 + t14 * t58 + t21 * t30 - t3 * t74 + (t29 * t74 - t52 * t60) * qJD(6)) * t218 + t307, t299 * t14 + (qJD(6) * t298 - t3 * t218 - t4 * t223) * t52 - t474 * (t122 + t181); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t354, t387 * t228, t364, t354, t363, qJDD(2), t221 * t277 - t447, g(3) * t221 + t225 * t277, 0, 0, -t409, t84, t78, t409, t79, t213, (t149 * t380 + t213 * t224 + t220 * t315) * pkin(4) + t257, (-t150 * t380 + (-qJDD(2) - t213) * t220 + t224 * t315) * pkin(4) + t282, ((t224 * t266 + t410) * t224 + (t220 * t266 + t408) * t220) * pkin(4), (-t447 + (-qJD(1) * t176 + t180) * t221 + qJDD(2) * t469) * pkin(4), t496, t39, t33, -t496, t34, t207, t109 * t208 + t147 * t207 + (t139 * t276 + t260) * qJD(1) + t247, (-qJDD(2) - t207) * t146 + (-qJD(2) - t208) * t108 + (t139 * t275 - t416) * qJD(1) + t245, t108 * t276 + t109 * t275 + t146 * t231 + t147 * t41 + t249, t71 * t146 + t115 * t108 + t72 * t147 + t117 * t109 - t139 * t413 - g(3) * t388 - t180 * (-t386 - t456), -t517, t515, t514, t517, t503, t297, t50 * t304 + t92 * t297 + (t68 * t90 - t443) * qJD(1) + t246, -(-0.2e1 * qJDD(2) + t314) * t283 + (-0.2e1 * qJD(2) + t325) * t49 + (-t489 * t90 - t441) * qJD(1) + t239, t17 * t283 + t230 * t92 - t489 * t50 + t49 * t68 + t300, -g(3) * t350 - t133 * t180 - t25 * t283 + t26 * t92 - t422 * t90 + t75 * t49 + t77 * t50, t7, t523, t520, t521, t519, t507, t11 * t88 + t50 * t58 + (-t449 - t483) * t223 + t263 * t218 + t294, -t10 * t88 + t50 * t60 + t263 * t223 + (t272 + t483) * t218 + t329, (t10 * t283 + t323 * t58 + t49 * t60) * t218 + (t11 * t283 + t323 * t60 - t49 * t58 - t3) * t223 + t278, t24 * t88 + t70 * t50 - g(3) * (t181 + t350) + (-t283 * t3 - t29 * t323 + t30 * t49) * t223 + (t283 * t4 - t29 * t49 - t30 * t323) * t218 + t180 * (-t133 + t383); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t409, t84, t78, t409, t79, t213, pkin(4) * t220 * t316 + t257, (-qJDD(2) * t220 + t224 * t316) * pkin(4) + t282, 0, 0, t496, t39, t33, -t496, t34, t207, t208 * t379 + (t151 * t276 + t260) * qJD(1) + (t459 * t207 + (-t457 * t208 - t334) * qJD(4)) * pkin(2) + t353 + t470, -t365 + (t153 * t208 - t108) * qJD(2) + (t151 * t275 - t416) * qJD(1) + (-t326 - t457 * t207 + (-t459 * t208 - t335) * qJD(4)) * pkin(2) + t351, t231 * t340 + t336 * t41 + t249 - (pkin(2) * t338 - t379) * t275 + (-t153 * qJD(2) + qJD(4) * t336) * t276, -t151 * t413 + (-t115 * t153 + t117 * t154) * qJD(2) + (t457 * t71 + t459 * t72 - g(3) * t210 + t180 * t209 + (t115 * t459 - t457 * t117) * qJD(4)) * pkin(2), -t517, t515, t514, t517, t503, t297, t138 * t297 + (t68 * t93 - t443) * qJD(1) + t246 + t317 * t304, t304 * t371 + (-qJDD(2) - 0.2e1 * qJDD(3) + t360) * t137 + (-qJD(2) - 0.2e1 * qJD(3) + t362) * t104 + (-t489 * t93 - t441) * qJD(1) + t248 - t293, -t137 * t17 + t138 * t230 + t300 - t317 * t489 - (-t104 + t371) * t68, t25 * t137 + t75 * t104 + t26 * t138 + t77 * t105 - t93 * t422 - g(3) * t389 - t180 * t152 + (-t110 * t75 - t111 * t77) * qJD(2), t7, t523, t520, t521, t519, t507, t11 * t131 - t35 * t516 + t317 * t58 + (-t356 - t449) * t223 + t262 * t218 + t294, -t10 * t131 + t36 * t516 + t317 * t60 + t262 * t223 + (t272 + t356) * t218 + t329, -t446 + t35 * t60 + t36 * t58 + (-t425 + t431) * t104 + t251 * t137 + t278, t24 * t131 - t30 * t36 - t29 * t35 - g(3) * (t181 + t389) + t317 * t70 - t298 * t104 + t252 * t137 + t180 * (-t152 + t383); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, t39, t33, -t496, t34, t207, t115 * t208 + t275 * t381 + t247, t117 * t208 - t276 * t381 + t245 - t291, 0, 0, -t517, t515, t514, t517, t503, t297, -t81 * t304 + (t112 * t68 - t443) * qJD(1) + (t458 * t297 + (-0.2e1 * qJD(4) - qJD(5) - t214) * t375) * pkin(5) + t303 + t471, t80 * t304 + (-t112 * t489 - t441) * qJD(1) + (-t304 * t337 - t305 + (-0.2e1 * qJDD(4) - qJDD(5) - t213) * t219) * pkin(5) - t254 + t352, -t17 * t454 + t230 * t359 + (t75 + t358 + t81) * t489 - (-t337 * pkin(5) - t77 + t80) * t68, -t112 * t422 - t75 * t80 - t77 * t81 + (t458 * t26 - t448 + t219 * t25 + t288 + (-t219 * t77 + t458 * t75) * qJD(5)) * pkin(5), t513, t523, t520, t521, t519, t507, t198 * t11 - t31 * t516 - t81 * t58 - t516 * t427 + (-t218 * t310 + (-qJD(5) * t58 - t373 * t516 + t434) * t219) * pkin(5) + t467, -t198 * t10 + t32 * t516 - t81 * t60 + (-t223 * t310 + (-qJD(5) * t60 + t330) * t219) * pkin(5) + t512, t31 * t60 + t32 * t58 + ((-t348 * t58 + t349 * t60) * qJD(5) + t251 * t219) * pkin(5) + t505, t24 * t198 - t30 * t32 - t29 * t31 - t70 * t81 - g(3) * (t181 + t186) + pkin(3) * t289 + (t288 + (-t29 * t349 + t30 * t348) * qJD(5) + (-qJD(5) * t70 + t252) * t219) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t517, t515, t514, t517, t503, t297, t304 * t75 - t418 * t489 + t246, t304 * t77 - t418 * t68 + t239 - t293, 0, 0, t513, t523, t520, t521, t519, t507, pkin(3) * t11 + t58 * t75 + t467 + (-t37 - t427) * t516, -pkin(3) * t10 + t38 * t516 + t60 * t75 + t512, t37 * t60 + t38 * t58 + t505, -t29 * t37 - t30 * t38 + t70 * t75 + (-t449 - t272) * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, -t58 ^ 2 + t60 ^ 2, -t10 + t499, -t445, t516 * t60 - t11, -t16, -g(1) * t128 + g(2) * t126 + t218 * t341 + t30 * t516 - t60 * t70 + t285, g(1) * t129 - g(2) * t127 + t29 * t516 + t58 * t70 + t332 * t218 + (qJD(6) * t44 + t341) * t223, 0, 0;];
tau_reg = t1;
