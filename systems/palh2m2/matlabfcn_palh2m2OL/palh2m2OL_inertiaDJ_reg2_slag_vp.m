% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% palh2m2OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[A2Off,A3Off,A4Off,L1,L2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-03 06:35
% Revision: 702b02ffee4f47164fa6a11b998f1d39ead3f7a6 (2020-05-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = palh2m2OL_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'palh2m2OL_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'palh2m2OL_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'palh2m2OL_inertiaDJ_reg2_slag_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-03 02:57:11
% EndTime: 2020-05-03 02:57:31
% DurationCPUTime: 3.84s
% Computational Cost: add. (5350->253), mult. (12359->449), div. (0->0), fcn. (12603->10), ass. (0->159)
t176 = sin(qJ(3));
t75 = sin(qJ(2));
t150 = t176 * t75;
t179 = cos(qJ(3));
t77 = cos(qJ(2));
t102 = -t179 * t77 + t150;
t149 = t176 * t77;
t104 = t179 * t75 + t149;
t175 = sin(qJ(4));
t178 = cos(qJ(4));
t84 = t178 * t102 + t175 * t104;
t73 = sin(qJ(6));
t71 = t73 ^ 2;
t76 = cos(qJ(6));
t72 = t76 ^ 2;
t169 = t71 - t72;
t188 = t169 * qJD(6);
t74 = sin(qJ(5));
t165 = qJD(5) * t74;
t162 = pkin(5) * t165;
t168 = t71 + t72;
t177 = cos(qJ(5));
t103 = t168 * t177;
t193 = t103 * pkin(5);
t39 = -t175 * t102 + t178 * t104;
t160 = t179 * pkin(4);
t117 = t160 + pkin(2);
t124 = t178 * t176;
t54 = pkin(4) * t124 + t117 * t175;
t122 = t175 * t179;
t93 = t124 + t122;
t87 = t93 * qJD(3);
t37 = -pkin(4) * t87 - t54 * qJD(4);
t172 = t37 * t74;
t121 = t175 * t176;
t111 = qJD(3) * t121;
t125 = t178 * t179;
t60 = t117 * t178;
t36 = -qJD(4) * t60 + (-qJD(3) * t125 + qJD(4) * t121 + t111) * pkin(4);
t118 = t54 * t165 + t177 * t36;
t142 = qJD(5) * t177;
t55 = -pkin(4) * t121 + t60;
t48 = pkin(5) + t55;
t95 = t48 * t142 - t118;
t13 = t95 + t172;
t192 = t13 * t168;
t140 = t178 * pkin(2);
t120 = qJD(4) * t140;
t116 = t140 + pkin(5);
t59 = t116 * t177;
t170 = -qJD(5) * t59 - t177 * t120;
t143 = qJD(4) * t175;
t94 = (t175 * qJD(5) + t143) * pkin(2);
t32 = t74 * t94 + t170;
t191 = t168 * t32;
t190 = t93 * qJD(4);
t189 = t104 * qJD(3);
t81 = t177 * t84;
t22 = t74 * t39 + t81;
t83 = t74 * t84;
t23 = t177 * t39 - t83;
t98 = t102 * qJD(3);
t85 = -t102 * qJD(2) - t98;
t86 = -t104 * qJD(2) - t189;
t79 = qJD(4) * t39 + t175 * t85 - t178 * t86;
t80 = t84 * qJD(4) - t175 * t86 - t178 * t85;
t9 = -qJD(5) * t83 + t39 * t142 + t177 * t79 - t74 * t80;
t187 = (t177 * t22 - t23 * t74) * qJD(5) + t74 * t9;
t8 = qJD(5) * t81 + t39 * t165 + t177 * t80 + t74 * t79;
t186 = t23 * t8;
t139 = t176 * qJD(3);
t141 = t179 * qJD(3);
t166 = qJD(2) * t77;
t167 = qJD(2) * t75;
t66 = t178 * pkin(5) + pkin(2);
t47 = pkin(5) * t121 - t66 * t179 - pkin(4);
t53 = pkin(5) * t122 + t176 * t66;
t12 = -t47 * t167 + (t66 * t139 + (qJD(3) * t122 + t190) * pkin(5)) * t77 + (t66 * t141 + (-t111 + (t125 - t121) * qJD(4)) * pkin(5)) * t75 + t53 * t166;
t3 = t9 * pkin(3) + t12;
t185 = t73 * t3;
t184 = t73 * t9;
t182 = t75 * pkin(4);
t181 = t76 * t3;
t180 = t76 * t9;
t151 = t177 * t54;
t107 = -t48 * t74 - t151;
t145 = t37 * t177 + t36 * t74;
t14 = t107 * qJD(5) + t145;
t174 = t14 * t73;
t123 = t177 * t175;
t101 = -t178 * t74 - t123;
t88 = t101 * qJD(4);
t82 = (t101 * qJD(5) + t88) * pkin(2);
t33 = t82 - t162;
t173 = t33 * t73;
t171 = t73 * t76;
t70 = qJD(6) * t73;
t163 = qJD(6) * t76;
t161 = pkin(5) * t177;
t158 = t22 * t70;
t157 = t22 * t163;
t156 = t73 * t163;
t155 = t75 * t166;
t154 = -0.2e1 * pkin(1) * qJD(2);
t153 = -0.2e1 * pkin(3) * qJD(6);
t24 = t47 * t77 + t53 * t75 - pkin(1);
t43 = t48 * t177;
t152 = t168 * t3;
t146 = 0.4e1 * t23 * t171;
t27 = -t54 * t74 + t43;
t144 = pkin(2) * t175;
t138 = -0.2e1 * t162;
t25 = pkin(3) + t27;
t50 = -t74 * t144 + t59;
t45 = pkin(3) + t50;
t137 = qJD(6) * (-t25 - t45);
t68 = t161 + pkin(3);
t136 = qJD(6) * (-t25 - t68);
t135 = qJD(6) * (-t45 - t68);
t134 = t76 * t162;
t133 = qJD(6) * (-pkin(3) - t25);
t132 = qJD(6) * (-pkin(3) - t45);
t131 = qJD(6) * (-pkin(3) - t68);
t21 = t23 ^ 2;
t130 = t21 * t156;
t129 = pkin(5) * t142;
t128 = pkin(4) * t141;
t127 = pkin(4) * t139;
t126 = t76 * t142;
t119 = pkin(2) * t143;
t115 = -t107 * t22 + t23 * t25;
t112 = pkin(2) * t123;
t49 = t116 * t74 + t112;
t114 = t22 * t49 + t23 * t45;
t113 = -0.2e1 * t119;
t5 = t157 + t184;
t4 = -t158 + t180;
t110 = t23 * t163 - t73 * t8;
t109 = t23 * t70 + t76 * t8;
t106 = -t107 * t9 + t13 * t22 + t14 * t23;
t105 = -t32 * t22 + t33 * t23 + t49 * t9;
t97 = -t25 * t8 + t106;
t96 = -t45 * t8 + t105;
t52 = qJD(5) * t193;
t69 = -t77 * pkin(4) - pkin(1);
t67 = -t179 * pkin(2) - pkin(4);
t65 = -0.2e1 * t156;
t64 = 0.2e1 * t156;
t63 = t73 * t162;
t56 = -0.2e1 * t188;
t46 = pkin(2) * t150 + t67 * t77 - pkin(1);
t34 = -t67 * t167 + (qJD(2) * t149 + t189) * pkin(2);
t28 = t33 * t76;
t15 = t22 * pkin(3) + t24;
t11 = t14 * t76;
t6 = 0.2e1 * t22 * t9;
t2 = t8 * t171 + t23 * t188;
t1 = qJD(6) * t146 - t169 * t8;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t155, 0.2e1 * (-t75 ^ 2 + t77 ^ 2) * qJD(2), 0, -0.2e1 * t155, 0, 0, t75 * t154, t77 * t154, 0, 0, 0.2e1 * t104 * t85, -0.2e1 * t85 * t102 + 0.2e1 * t104 * t86, 0, -0.2e1 * t102 * t86, 0, 0, 0.2e1 * t69 * t189 + 0.2e1 * (t102 * t182 + t69 * t104) * qJD(2), -0.2e1 * t69 * t98 + 0.2e1 * (-t69 * t102 + t104 * t182) * qJD(2), 0, 0.2e1 * t69 * pkin(4) * t167, -0.2e1 * t39 * t80, -0.2e1 * t39 * t79 + 0.2e1 * t80 * t84, 0, 0.2e1 * t84 * t79, 0, 0, 0.2e1 * t34 * t84 + 0.2e1 * t46 * t79, 0.2e1 * t34 * t39 - 0.2e1 * t46 * t80, 0, 0.2e1 * t46 * t34, -0.2e1 * t186, 0.2e1 * t8 * t22 - 0.2e1 * t23 * t9, 0, t6, 0, 0, 0.2e1 * t12 * t22 + 0.2e1 * t24 * t9, 0.2e1 * t12 * t23 - 0.2e1 * t24 * t8, 0, 0.2e1 * t24 * t12, -0.2e1 * t72 * t186 - 0.2e1 * t130, t8 * t146 + 0.2e1 * t188 * t21, 0.2e1 * t109 * t22 - 0.2e1 * t23 * t180, -0.2e1 * t71 * t186 + 0.2e1 * t130, 0.2e1 * t110 * t22 + 0.2e1 * t23 * t184, t6, 0.2e1 * t15 * t4 + 0.2e1 * t22 * t181, -0.2e1 * t15 * t5 - 0.2e1 * t22 * t185, -0.2e1 * t15 * t168 * t8 + 0.2e1 * t152 * t23, 0.2e1 * t15 * t152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, 0, -t167, 0, 0, 0, 0, 0, 0, 0, t85, 0, t86, 0, 0, 0, (t86 + t189) * t176 * pkin(4) + (-t98 + (qJD(2) + qJD(3)) * t102) * t160, 0, 0, 0, -t80, 0, -t79, 0, 0, 0, t36 * t84 - t37 * t39 - t54 * t79 + t55 * t80, 0, 0, 0, -t8, 0, -t9, 0, 0, 0, t27 * t8 - t106, 0, t2, t1, t5, -t2, t4, 0, t115 * t163 + t73 * t97, -t115 * t70 + t76 * t97, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t127, -0.2e1 * t128, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t37, 0.2e1 * t36, 0, -0.2e1 * t54 * t36 + 0.2e1 * t55 * t37, 0, 0, 0, 0, 0, 0, 0.2e1 * t14, -0.2e1 * t13, 0, -0.2e1 * t107 * t13 + 0.2e1 * t27 * t14, t64, t56, 0, t65, 0, 0, -0.2e1 * t25 * t70 + 0.2e1 * t11, -0.2e1 * t163 * t25 - 0.2e1 * t174, -0.2e1 * t192, -0.2e1 * t107 * t192 + 0.2e1 * t25 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, t86, 0, 0, 0, 0, 0, 0, 0, -t80, 0, -t79, 0, 0, 0, t119 * t39 - t120 * t84 + t140 * t80 - t144 * t79, 0, 0, 0, -t8, 0, -t9, 0, 0, 0, t50 * t8 - t105, 0, t2, t1, t5, -t2, t4, 0, t114 * t163 + t73 * t96, -t114 * t70 + t76 * t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, -t128, 0, 0, 0, 0, 0, 0, 0, 0, t113 + (-t87 - t190) * pkin(4), -t120 + t36, 0, (t178 * t37 - t175 * t36 + (-t175 * t55 + t178 * t54) * qJD(4)) * pkin(2), 0, 0, 0, 0, 0, 0, pkin(2) * t88 + (-t112 - t151 + (-t48 - t116) * t74) * qJD(5) + t145, (-t37 + t94) * t74 - t95 + t170, 0, t107 * t32 + t13 * t49 + t14 * t50 + t27 * t33, t64, t56, 0, t65, 0, 0, t137 * t73 + t11 + t28, (-t14 - t33) * t73 + t76 * t137, t191 - t192, t107 * t191 + t14 * t45 + t192 * t49 + t25 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, -0.2e1 * t120, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t33, 0.2e1 * t32, 0, -0.2e1 * t49 * t32 + 0.2e1 * t50 * t33, t64, t56, 0, t65, 0, 0, -0.2e1 * t45 * t70 + 0.2e1 * t28, -0.2e1 * t163 * t45 - 0.2e1 * t173, 0.2e1 * t191, -0.2e1 * t191 * t49 + 0.2e1 * t45 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, 0, -t79, 0, 0, 0, 0, 0, 0, 0, -t8, 0, -t9, 0, 0, 0, (t177 * t8 - t187) * pkin(5), 0, t2, t1, t5, -t2, t4, 0, t110 * t68 + (t74 * t157 + t187 * t73) * pkin(5), -t109 * t68 + (t22 * t126 + (-t158 + (-qJD(5) * t23 + t9) * t76) * t74) * pkin(5), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, t36, 0, 0, 0, 0, 0, 0, 0, 0, (-t151 + (-pkin(5) - t48) * t74) * qJD(5) + t145, -t172 + (-t161 - t43) * qJD(5) + t118, 0, (t177 * t14 + t13 * t74 + (-t107 * t177 - t27 * t74) * qJD(5)) * pkin(5), t64, t56, 0, t65, 0, 0, t136 * t73 + t11 - t134, t136 * t76 - t174 + t63, -t192 - t52, t14 * t68 + (t74 * t192 + (-t103 * t107 - t25 * t74) * qJD(5)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t120, 0, 0, 0, 0, 0, 0, 0, 0, t82 + t138, -t129 + t32, 0, (t177 * t33 - t32 * t74 + (t177 * t49 - t50 * t74) * qJD(5)) * pkin(5), t64, t56, 0, t65, 0, 0, t135 * t73 - t134 + t28, t135 * t76 - t173 + t63, t191 - t52, t33 * t68 + (-t74 * t191 + (t103 * t49 - t45 * t74) * qJD(5)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, -0.2e1 * t129, 0, 0, t64, t56, 0, t65, 0, 0, -0.2e1 * t68 * t70 - 0.2e1 * t134, -0.2e1 * t163 * t68 + 0.2e1 * t63, -0.2e1 * t52, 0.2e1 * (-t68 + t193) * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8, 0, -t9, 0, 0, 0, 0, 0, t2, t1, t5, -t2, t4, 0, t110 * pkin(3), -t109 * pkin(3), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t13, 0, 0, t64, t56, 0, t65, 0, 0, t133 * t73 + t11, t133 * t76 - t174, -t192, t14 * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, t32, 0, 0, t64, t56, 0, t65, 0, 0, t132 * t73 + t28, t132 * t76 - t173, t191, t33 * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, -t129, 0, 0, t64, t56, 0, t65, 0, 0, t131 * t73 - t134, t131 * t76 + t63, -t52, -pkin(3) * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, t56, 0, t65, 0, 0, t73 * t153, t76 * t153, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, 0, -t110, -t9, t15 * t70 - t181, t15 * t163 + t185, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, 0, t70, 0, t107 * t163 - t73 * t13, -t107 * t70 - t76 * t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, 0, t70, 0, -t163 * t49 + t73 * t32, t76 * t32 + t49 * t70, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, 0, t70, 0, (-t142 * t73 - t163 * t74) * pkin(5), (t70 * t74 - t126) * pkin(5), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, 0, t70, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t7;
