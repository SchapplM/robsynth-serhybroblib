% Calculate inertial parameters regressor of joint inertia matrix for
% palh2m2OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[A2Off,A3Off,A4Off,L1,L2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-03 06:35
% Revision: 702b02ffee4f47164fa6a11b998f1d39ead3f7a6 (2020-05-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = palh2m2OL_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'palh2m2OL_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'palh2m2OL_inertiaJ_reg2_slag_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t54 = sin(qJ(6));
t51 = t54 ^ 2;
t59 = cos(qJ(6));
t53 = t59 ^ 2;
t77 = t51 + t53;
t55 = sin(qJ(5));
t91 = pkin(5) * t55;
t98 = t77 * t91;
t61 = cos(qJ(4));
t41 = t61 * pkin(5) + pkin(2);
t56 = sin(qJ(4));
t57 = sin(qJ(3));
t58 = sin(qJ(2));
t62 = cos(qJ(3));
t63 = cos(qJ(2));
t81 = t56 * t57;
t12 = (pkin(5) * t81 - t41 * t62 - pkin(4)) * t63 + (t62 * t56 * pkin(5) + t57 * t41) * t58 - pkin(1);
t80 = t57 * t58;
t34 = -t62 * t63 + t80;
t36 = t57 * t63 + t62 * t58;
t19 = -t61 * t34 - t56 * t36;
t20 = -t56 * t34 + t61 * t36;
t60 = cos(qJ(5));
t8 = -t60 * t19 + t55 * t20;
t3 = t8 * pkin(3) + t12;
t97 = 0.2e1 * t3;
t96 = 0.2e1 * t12;
t95 = 0.2e1 * t20;
t45 = -t63 * pkin(4) - pkin(1);
t94 = 0.2e1 * t45;
t93 = -0.2e1 * t54;
t92 = 0.2e1 * t63;
t49 = t62 * pkin(4);
t43 = t49 + pkin(2);
t32 = -pkin(4) * t81 + t43 * t61;
t28 = pkin(5) + t32;
t86 = t57 * pkin(4);
t73 = t61 * t86;
t31 = t43 * t56 + t73;
t78 = t60 * t31;
t16 = t28 * t55 + t78;
t90 = t16 * t8;
t47 = t61 * pkin(2);
t42 = t47 + pkin(5);
t76 = pkin(2) * t56;
t72 = t60 * t76;
t29 = t42 * t55 + t72;
t89 = t29 * t8;
t88 = t54 * t8;
t87 = t55 * t8;
t85 = t59 * t8;
t84 = t16 * t29;
t10 = t55 * t19 + t60 * t20;
t83 = t54 * t10;
t82 = t54 * t59;
t79 = t59 * t10;
t75 = pkin(3) * t54;
t48 = pkin(3) * t59;
t74 = -0.2e1 * t10 * t8;
t4 = t77 * t16;
t15 = t77 * t29;
t23 = t28 * t60;
t17 = -t31 * t55 + t23;
t71 = -t31 - t76;
t37 = t42 * t60;
t30 = -t55 * t76 + t37;
t13 = pkin(3) + t17;
t69 = t10 * t13 + t90;
t25 = pkin(3) + t30;
t68 = t10 * t25 + t89;
t50 = pkin(5) * t60;
t44 = t50 + pkin(3);
t67 = pkin(5) * t87 + t10 * t44;
t65 = pkin(5) ^ 2;
t52 = t55 ^ 2;
t40 = 0.2e1 * t82;
t39 = t44 * t59;
t27 = t29 ^ 2;
t26 = (-t62 * pkin(2) - pkin(4)) * t63 + pkin(2) * t80 - pkin(1);
t21 = t25 * t59;
t14 = t16 ^ 2;
t11 = t13 * t59;
t7 = t10 ^ 2;
t6 = t8 ^ 2;
t5 = t54 * t79;
t1 = (t51 - t53) * t10;
t2 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t58 ^ 2, t58 * t92, 0, t63 ^ 2, 0, 0, pkin(1) * t92, -0.2e1 * pkin(1) * t58, 0, pkin(1) ^ 2, t36 ^ 2, -0.2e1 * t36 * t34, 0, t34 ^ 2, 0, 0, t34 * t94, t36 * t94, 0, t45 ^ 2, t20 ^ 2, t19 * t95, 0, t19 ^ 2, 0, 0, -0.2e1 * t26 * t19, t26 * t95, 0, t26 ^ 2, t7, t74, 0, t6, 0, 0, t8 * t96, t10 * t96, 0, t12 ^ 2, t53 * t7, -0.2e1 * t7 * t82, t59 * t74, t51 * t7, 0.2e1 * t8 * t83, t6, t85 * t97, -0.2e1 * t3 * t88, t77 * t10 * t97, t77 * t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t63, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, 0, 0, 0, (-t34 * t57 - t36 * t62) * pkin(4), 0, 0, 0, t20, 0, t19, 0, 0, 0, t31 * t19 - t32 * t20, 0, 0, 0, t10, 0, -t8, 0, 0, 0, -t17 * t10 - t90, 0, -t5, t1, t88, t5, t85, 0, t69 * t54, t69 * t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t49, -0.2e1 * t86, 0, (t57 ^ 2 + t62 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t32, -0.2e1 * t31, 0, t31 ^ 2 + t32 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t17, -0.2e1 * t16, 0, t17 ^ 2 + t14, t51, t40, 0, t53, 0, 0, 0.2e1 * t11, t13 * t93, -0.2e1 * t4, t13 ^ 2 + t77 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, 0, 0, 0, 0, 0, 0, 0, t20, 0, t19, 0, 0, 0, (t19 * t56 - t20 * t61) * pkin(2), 0, 0, 0, t10, 0, -t8, 0, 0, 0, -t30 * t10 - t89, 0, -t5, t1, t88, t5, t85, 0, t68 * t54, t68 * t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t49, -t86, 0, 0, 0, 0, 0, 0, 0, 1, t32 + t47, -t73 + (-pkin(2) - t43) * t56, 0, (t31 * t56 + t32 * t61) * pkin(2), 0, 0, 0, 0, 0, 1, t71 * t55 + t23 + t37, t71 * t60 + (-t28 - t42) * t55, 0, t17 * t30 + t84, t51, t40, 0, t53, 0, 0, t21 + t11, (-t13 - t25) * t54, -t15 - t4, t13 * t25 + t77 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t47, -0.2e1 * t76, 0, (t56 ^ 2 + t61 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t30, -0.2e1 * t29, 0, t30 ^ 2 + t27, t51, t40, 0, t53, 0, 0, 0.2e1 * t21, t25 * t93, -0.2e1 * t15, t25 ^ 2 + t77 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, t19, 0, 0, 0, 0, 0, 0, 0, t10, 0, -t8, 0, 0, 0, (-t10 * t60 - t87) * pkin(5), 0, -t5, t1, t88, t5, t85, 0, t67 * t54, t67 * t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t32, -t31, 0, 0, 0, 0, 0, 0, 0, 1, t17 + t50, -t78 + (-pkin(5) - t28) * t55, 0, (t16 * t55 + t17 * t60) * pkin(5), t51, t40, 0, t53, 0, 0, t39 + t11, (-t13 - t44) * t54, -t4 - t98, t13 * t44 + t16 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t47, -t76, 0, 0, 0, 0, 0, 0, 0, 1, t30 + t50, -t72 + (-pkin(5) - t42) * t55, 0, (t29 * t55 + t30 * t60) * pkin(5), t51, t40, 0, t53, 0, 0, t39 + t21, (-t25 - t44) * t54, -t15 - t98, t25 * t44 + t29 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t50, -0.2e1 * t91, 0, (t60 ^ 2 + t52) * t65, t51, t40, 0, t53, 0, 0, 0.2e1 * t39, t44 * t93, -0.2e1 * t98, t77 * t65 * t52 + t44 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, -t8, 0, 0, 0, 0, 0, -t5, t1, t88, t5, t85, 0, t10 * t75, t10 * t48, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t17, -t16, 0, 0, t51, t40, 0, t53, 0, 0, t48 + t11, (-pkin(3) - t13) * t54, -t4, t13 * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t30, -t29, 0, 0, t51, t40, 0, t53, 0, 0, t48 + t21, (-pkin(3) - t25) * t54, -t15, t25 * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t50, -t91, 0, 0, t51, t40, 0, t53, 0, 0, t48 + t39, (-pkin(3) - t44) * t54, -t98, t44 * pkin(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t51, t40, 0, t53, 0, 0, 0.2e1 * t48, -0.2e1 * t75, 0, pkin(3) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, -t83, -t8, -t59 * t3, t54 * t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, -t59, 0, -t54 * t16, -t59 * t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, -t59, 0, -t54 * t29, -t59 * t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, -t59, 0, -t54 * t91, -t59 * t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, -t59, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t2;
