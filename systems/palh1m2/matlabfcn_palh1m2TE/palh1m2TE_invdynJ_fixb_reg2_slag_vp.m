% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% palh1m2TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [22x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi1,phi2,phi312,phi413,phi710,phi711]';
% 
% Output:
% tau_reg [4x(4*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-01 20:48
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = palh1m2TE_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(22,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh1m2TE_invdynJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh1m2TE_invdynJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'palh1m2TE_invdynJ_fixb_reg2_slag_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh1m2TE_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [22 1]), ...
  'palh1m2TE_invdynJ_fixb_reg2_slag_vp: pkin has to be [22x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-01 20:47:08
% EndTime: 2020-05-01 20:48:05
% DurationCPUTime: 13.00s
% Computational Cost: add. (12340->499), mult. (24138->794), div. (0->0), fcn. (29829->24), ass. (0->346)
t273 = sin(qJ(3));
t468 = pkin(1) * qJD(2);
t384 = t273 * t468;
t261 = qJD(2) + qJD(3);
t478 = pkin(5) * t261;
t324 = t384 + t478;
t390 = pkin(22) + pkin(21);
t246 = cos(t390);
t356 = sin(t390);
t274 = sin(qJ(2));
t456 = sin(pkin(20));
t458 = cos(pkin(20));
t484 = sin(pkin(18));
t486 = cos(pkin(18));
t188 = t484 * t456 + t486 * t458;
t277 = cos(qJ(3));
t320 = -t486 * t456 + t484 * t458;
t520 = t188 * t277 + t273 * t320;
t110 = -t273 * t188 + t277 * t320;
t278 = cos(qJ(2));
t87 = t110 * t278;
t364 = -t274 * t520 + t87;
t496 = t520 * t278;
t529 = t110 * t274 + t496;
t534 = t246 * t529 + t356 * t364;
t535 = t534 * t324;
t383 = t277 * t468;
t36 = t246 * t364 - t356 * t529;
t533 = t324 * t36;
t18 = t383 * t534 - t533;
t279 = cos(qJ(1));
t474 = g(2) * t279;
t275 = sin(qJ(1));
t477 = g(1) * t275;
t501 = t474 - t477;
t268 = sin(pkin(21));
t270 = cos(pkin(21));
t181 = -t458 * t268 - t456 * t270;
t182 = -t456 * t268 + t458 * t270;
t267 = sin(pkin(22));
t269 = cos(pkin(22));
t359 = t181 * t267 + t182 * t269;
t503 = t181 * t269 - t182 * t267;
t526 = t484 * t359 + t486 * t503;
t532 = t501 * t526;
t531 = t36 * t383 + t535;
t475 = g(2) * t275;
t476 = g(1) * t279;
t202 = t475 + t476;
t271 = cos(pkin(19));
t457 = sin(pkin(19));
t184 = t273 * t271 + t277 * t457;
t363 = pkin(2) * t261;
t116 = t184 * t363;
t186 = t271 * t277 - t273 * t457;
t118 = t186 * t363;
t165 = t184 * qJD(3);
t173 = pkin(2) * t186;
t480 = pkin(2) * t184;
t332 = -t173 * t278 + t274 * t480;
t166 = t186 * qJD(3);
t481 = pkin(2) * t166;
t109 = t184 * t278 + t186 * t274;
t500 = t109 * qJD(1);
t525 = pkin(2) * t500;
t260 = qJDD(2) + qJDD(3);
t59 = (-t165 * t261 + t186 * t260) * pkin(2);
t144 = qJD(2) * t481;
t164 = qJDD(2) * t480;
t418 = t144 + t164;
t419 = qJD(3) * t481 + qJDD(3) * t480;
t60 = t418 + t419;
t523 = -t184 * t274 + t186 * t278;
t315 = t523 * qJD(1);
t455 = qJD(1) * pkin(15);
t78 = -pkin(2) * t315 - t455;
t527 = -t78 * t525 - t118 * pkin(2) * t165 + t332 * g(3) + t116 * t481 + t59 * t173 + t60 * t480 + t202 * (t173 * t274 + t278 * t480);
t511 = t315 * t500;
t407 = qJD(1) * t278;
t524 = t500 * t407;
t280 = cos(pkin(17));
t485 = sin(pkin(17));
t190 = t484 * t280 - t486 * t485;
t192 = t280 * t486 + t485 * t484;
t506 = t190 * t274 + t192 * t278;
t82 = -t188 * t246 - t320 * t356;
t424 = t274 * t277;
t425 = t273 * t278;
t189 = t424 + t425;
t106 = t506 * qJD(2);
t519 = -t315 ^ 2 + t500 ^ 2;
t421 = t278 * t279;
t423 = t275 * t278;
t372 = g(1) * t421 + g(2) * t423 + g(3) * t274;
t252 = t278 * qJDD(1);
t299 = -qJD(2) * t109 - t166 * t274;
t393 = t274 * qJDD(1);
t44 = qJD(1) * t299 - t165 * t407 - t184 * t393 + t186 * t252;
t518 = t261 * t500 + t44;
t104 = t109 * g(1);
t105 = t109 * g(2);
t516 = -g(3) * t523 + t104 * t279 + t105 * t275 + t455 * t500;
t514 = 0.2e1 * qJD(2);
t408 = qJD(1) * t274;
t171 = -t273 * t408 + t277 * t407;
t422 = t277 * t278;
t426 = t273 * t274;
t326 = -t422 + t426;
t124 = t261 * t326;
t69 = -qJD(1) * t124 + qJDD(1) * t189;
t62 = -t171 * t261 + t69;
t258 = pkin(1) * t274;
t237 = t258 - pkin(15);
t205 = t237 * qJDD(1);
t400 = qJD(1) * qJD(2);
t369 = t278 * t400;
t219 = pkin(1) * t369;
t505 = t205 + t219;
t283 = pkin(1) ^ 2;
t504 = (t273 ^ 2 + t277 ^ 2) * qJDD(2) * t283;
t272 = sin(qJ(4));
t276 = cos(qJ(4));
t207 = t237 * qJD(1);
t127 = -pkin(5) * t171 + t207;
t81 = t188 * t356 - t246 * t320;
t79 = t81 * qJD(1);
t80 = t82 * qJD(1);
t46 = -pkin(9) * t80 - pkin(11) * t79 + t127;
t11 = -t272 * t18 + t276 * t46;
t12 = t276 * t18 + t272 * t46;
t502 = t11 * t276 + t12 * t272;
t409 = qJD(1) * t261;
t499 = -qJD(3) + t261;
t448 = t165 * t274;
t300 = qJD(2) * t523 - t448;
t45 = qJD(1) * t300 + t166 * t407 + t184 * t252 + t186 * t393;
t497 = -t261 * t315 + t45;
t495 = t109 * g(3) + t202 * t523 + t315 * t455;
t91 = t520 * qJD(3);
t460 = t91 * t274;
t97 = t110 * qJD(3);
t337 = t356 * (t364 * qJD(2) + t278 * t97 - t460);
t405 = qJD(2) * t278;
t406 = qJD(2) * t274;
t459 = t97 * t274;
t24 = (qJD(3) * t496 + t110 * t406 + t405 * t520 + t459) * t246 + t337;
t482 = pkin(1) * t277;
t380 = qJD(3) * t482;
t483 = pkin(1) * t273;
t417 = qJD(2) * t380 + qJDD(2) * t483;
t349 = pkin(5) * t260 + t417;
t395 = qJDD(2) * t277;
t40 = -qJD(2) * t529 - t278 * t91 - t459;
t25 = (-qJD(3) * t87 - t110 * t405 + t406 * t520 + t460) * t246 - t356 * t40;
t465 = t25 * t277;
t4 = t24 * t478 - t36 * t349 + (t534 * t395 + (-t465 + (-qJD(3) * t534 + t24) * t273) * qJD(2)) * pkin(1);
t342 = -t277 * t252 + t273 * t393;
t123 = t261 * t189;
t411 = qJD(1) * t123;
t68 = t342 + t411;
t63 = pkin(5) * t68 + t505;
t76 = t81 * qJDD(1);
t77 = t82 * qJDD(1);
t42 = -pkin(9) * t77 - pkin(11) * t76 + t63;
t1 = qJD(4) * t11 + t272 * t42 + t276 * t4;
t39 = t276 * t42;
t2 = -qJD(4) * t12 - t272 * t4 + t39;
t402 = qJD(4) * t276;
t403 = qJD(4) * t272;
t494 = t1 * t272 - t11 * t403 + t12 * t402 + t2 * t276;
t23 = t40 * t246 - t337;
t357 = t36 * t384;
t3 = -t25 * t324 + t534 * t349 - qJD(3) * t357 + (qJD(2) * t23 + qJDD(2) * t36) * t482;
t490 = t3 * t81;
t9 = -t357 + t533;
t489 = t79 * t9;
t241 = pkin(5) + t483;
t404 = qJD(3) * t273;
t381 = pkin(1) * t404;
t488 = t23 * t482 - t25 * t241 - t36 * t381 + t380 * t534 + t18;
t6 = t24 * t241 + (-t465 + (-t273 * t534 - t277 * t36) * qJD(3)) * pkin(1);
t487 = -t531 + t6;
t170 = qJD(1) * t189;
t479 = pkin(5) * t170;
t256 = g(3) * t278;
t471 = t76 * t82;
t382 = pkin(1) * t405;
t83 = pkin(5) * t123 + t382;
t470 = t83 * t79;
t307 = -t486 * t267 + t484 * t269;
t308 = t484 * t267 + t269 * t486;
t72 = (t268 * t307 + t270 * t308) * pkin(4) + t237;
t464 = t261 * t72;
t262 = t272 ^ 2;
t463 = t262 * t76;
t264 = t276 ^ 2;
t462 = t264 * t76;
t461 = t272 * t79;
t53 = -t165 * t278 + t299;
t454 = qJD(1) * t53;
t119 = t190 * t278 - t192 * t274;
t282 = qJD(1) ^ 2;
t450 = t119 * t282;
t449 = t506 * t282;
t447 = t170 * t171;
t446 = t170 * t261;
t240 = pkin(5) * t273 + pkin(1);
t434 = t240 * t274;
t433 = t240 * t278;
t266 = qJ(3) + qJ(2);
t254 = cos(t266);
t430 = t254 * t282;
t429 = t272 * t276;
t420 = t278 * t282;
t253 = sin(t266);
t247 = t253 ^ 2;
t248 = t254 ^ 2;
t416 = t247 - t248;
t415 = t262 - t264;
t263 = t274 ^ 2;
t265 = t278 ^ 2;
t414 = t263 - t265;
t413 = qJD(1) * t106;
t107 = qJD(2) * t119;
t412 = qJD(1) * t107;
t401 = qJDD(1) * pkin(15);
t399 = qJDD(1) * t109;
t398 = qJDD(1) * t119;
t397 = qJDD(1) * t506;
t228 = qJDD(1) * t254;
t227 = t253 * qJDD(1);
t392 = 2 * pkin(14);
t391 = 0.2e1 * pkin(15);
t389 = 0.2e1 * qJD(1);
t388 = pkin(1) * t420;
t387 = pkin(5) * t425;
t386 = pkin(5) * t424;
t220 = g(3) * t426;
t385 = g(3) * t422;
t379 = t253 * t282 * t72;
t378 = t72 * t430;
t75 = t79 ^ 2;
t377 = t75 * t429;
t376 = -0.2e1 * qJDD(1) * t307;
t373 = t372 * pkin(1);
t371 = t171 * t207;
t370 = t274 * t400;
t74 = -qJD(4) + t80;
t366 = t79 * (-qJD(4) - t74);
t85 = -pkin(2) * t523 - pkin(15);
t365 = qJD(1) * t85 + t78;
t177 = t326 * g(1);
t179 = t326 * g(2);
t362 = -t177 * t275 + t179 * t279;
t178 = t189 * g(1);
t180 = t189 * g(2);
t361 = -t178 * t275 + t180 * t279;
t355 = t402 * t461;
t354 = t253 * t254 * t409;
t353 = -pkin(5) * t422 - pkin(15);
t137 = pkin(5) * t326 + t237;
t352 = t274 * t369;
t351 = t506 * g(1);
t350 = t506 * g(2);
t348 = 0.2e1 * t219;
t20 = t241 * t534 + t36 * t482;
t21 = -t241 * t36 + t482 * t534;
t346 = t20 * t79 + t21 * t74;
t345 = -t25 * t79 + t534 * t76;
t344 = -t36 * t74 + t534 * t79;
t73 = -qJDD(4) + t77;
t343 = t73 * t81 + t471;
t330 = -t274 * t307 - t278 * t308;
t95 = t330 * qJD(2);
t114 = -t274 * t308 + t278 * t307;
t96 = t114 * qJD(2);
t341 = -t307 * t95 - t308 * t96;
t311 = t359 * t486 - t484 * t503;
t50 = t311 * g(1);
t51 = t311 * g(2);
t340 = -t50 * t275 + t51 * t279;
t339 = t178 * t279 + t180 * t275 + t220 + t417;
t338 = pkin(1) * t395 + g(3) * t189 - t177 * t279 - t179 * t275;
t333 = -t114 * t307 + t308 * t330;
t327 = -t253 * t273 - t254 * t277;
t209 = g(2) * t386;
t211 = g(1) * t386;
t325 = -t531 * t9 + (g(2) * t387 + t209) * t275 + (g(1) * t387 + t211) * t279 + pkin(5) * t220;
t323 = t20 * t76 + t488 * t79;
t322 = -t261 * t381 + t338;
t319 = qJD(4) * (t74 * t81 + t79 * t82);
t317 = -qJD(2) * t404 + t260 * t277;
t314 = t260 * t483 + t261 * t380 + t339;
t313 = -qJD(4) * t18 - t531 * t79 - t477;
t310 = -t237 * t388 + t373;
t305 = -t25 * t531 + t3 * t534 - t385;
t47 = -pkin(9) * t82 - pkin(11) * t81 + t137;
t304 = qJD(4) * t47 * t74 - t476 + t490;
t303 = -pkin(15) + (t484 * (t267 * t270 + t268 * t269) + t486 * (-t267 * t268 + t269 * t270)) * pkin(4);
t43 = -pkin(2) * t44 - t401;
t302 = -pkin(2) * t454 + qJDD(1) * t85 + t43 - t477;
t301 = t24 * t74 - t36 * t73 + t345;
t298 = t21 * t73 + t6 * t74 + t323;
t297 = -g(3) * t526 - qJD(4) * t46 - t275 * t51 - t279 * t50 - t4;
t295 = t499 * t384 + t338;
t200 = t456 * pkin(9) + pkin(11) * t458;
t201 = pkin(9) * t458 - pkin(11) * t456;
t125 = t200 * t270 + t201 * t268;
t126 = -t200 * t268 + t201 * t270;
t293 = t484 * (t125 * t269 + t126 * t267) + t486 * (-t125 * t267 + t126 * t269) + t353;
t292 = -t502 * qJD(4) + t1 * t276 - t2 * t272;
t290 = -pkin(5) * t385 + t488 * t531 + t20 * t3 + (g(1) * t433 + t211) * t279 + (g(2) * t433 + t209) * t275 + g(3) * t434;
t289 = (-t261 * t468 - t256) * t277 + t339;
t288 = qJD(4) * t531 * t81 - t47 * t73 - t83 * t74 + t340;
t286 = t370 * t480 + t118 * t407 + (-t399 + (t448 + (-qJD(2) * t186 - t166) * t278) * qJD(1)) * pkin(2);
t281 = qJD(2) ^ 2;
t259 = t261 ^ 2;
t257 = g(2) * t276;
t251 = g(1) * t258;
t250 = g(2) * t258;
t225 = g(2) * t421;
t223 = t274 * t474;
t215 = t274 * t420;
t199 = g(2) * t434;
t197 = g(1) * t434;
t196 = t414 * t282;
t195 = qJDD(2) * t278 - t274 * t281;
t194 = -qJDD(2) * t274 - t278 * t281;
t193 = t253 * t430;
t183 = t416 * t282;
t176 = qJDD(1) * t265 - 0.2e1 * t352;
t175 = qJDD(1) * t263 + 0.2e1 * t352;
t174 = (-t501 + t401) * pkin(15);
t129 = -0.2e1 * t252 * t274 + 0.2e1 * t400 * t414;
t128 = pkin(1) * t407 + t479;
t117 = t261 * t480;
t71 = -(-pkin(15) * g(1) + t251) * t275 + (-g(2) * pkin(15) + t250) * t279 + (t348 + t205) * t237;
t70 = t170 ^ 2 - t171 ^ 2;
t61 = -t189 * t409 - t342 + t446;
t54 = t166 * t278 + t300;
t14 = t128 * t272 + t276 * t531;
t13 = t128 * t276 - t272 * t531;
t10 = -t384 * t534 + t535;
t8 = t10 * t276 + t272 * t479;
t7 = -t10 * t272 + t276 * t479;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t501, t202, 0, 0, t176, t129, t195, t175, t194, 0, -t274 * t477 + t223 + (-t369 - t393) * t391, -g(1) * t423 + t225 + (t370 - t252) * t391, -t202, t174, -t124 * t170 + t189 * t69, -t123 * t170 - t124 * t171 - t189 * t68 - t326 * t69, -t124 * t261 + t189 * t260, -t123 * t171 + t326 * t68, -t123 * t261 - t260 * t326, 0, (qJD(1) * t326 - t171) * t382 + (qJDD(1) * t326 + t411 + t68) * t237 + t362, 0.2e1 * t170 * t382 + 0.2e1 * t237 * t69 + t361, ((-t189 * t273 + t277 * t326) * qJDD(2) + (t123 * t277 + t124 * t273 + (-t189 * t277 - t273 * t326) * qJD(3)) * qJD(2)) * pkin(1) - t202, t71, t76 * t81, t77 * t81 + t471, 0, t77 * t82, 0, 0, -t137 * t77 - t63 * t82 - t80 * t83 + t340, t137 * t76 + t63 * t81 + t470 - t532, t4 * t82 - t202 + t490, t63 * t137 + t127 * t83 - (g(1) * t353 + t197) * t275 + (g(2) * t353 + t199) * t279, (-0.2e1 * t355 + t462) * t81, 0.2e1 * (qJD(4) * t415 * t79 - t429 * t76) * t81, t272 * t319 - t276 * t343, (0.2e1 * t355 + t463) * t81, t272 * t343 + t276 * t319, t73 * t82, -t2 * t82 + (t304 - t475) * t272 + t288 * t276, t1 * t82 - t257 * t275 - t272 * t288 + t276 * t304, (-t262 - t264) * t470 + (-t462 - t463) * t47 + t532 - t494 * t81, -(g(1) * t293 + t197) * t275 + (g(2) * t293 + t199) * t279 + t502 * t83 + t494 * t47, (t397 + 0.2e1 * t412) * t506, 0.2e1 * t119 * t397 + 0.2e1 * (-t106 * t506 + t107 * t119) * qJD(1), qJD(2) * t107 + qJDD(2) * t506, -(-t398 + 0.2e1 * t413) * t119, -qJD(2) * t106 + qJDD(2) * t119, 0, (-t398 + t413) * t392 - t501 * t119, -t351 * t275 + t350 * t279 + (t397 + t412) * t392, -t202, (qJDD(1) * pkin(14) + t501) * pkin(14), t307 ^ 2 * qJDD(1), -t308 * t376, 0, t308 ^ 2 * qJDD(1), 0, 0, (t501 + 0.2e1 * t505) * t308, t237 * t376 + (-t348 - t501) * t307, (qJD(2) * t341 + qJDD(2) * t333) * pkin(1) - t202, t71, t109 * t45 + t500 * t54, t109 * t44 + t315 * t54 + t45 * t523 + t500 * t53, t109 * t260 + t261 * t54, t315 * t53 + t44 * t523, t260 * t523 + t261 * t53, 0, (qJDD(1) * t523 + t44 + t454) * pkin(15) - t501 * t523, -t104 * t275 + t105 * t279 + (-qJD(1) * t54 - t399 - t45) * pkin(15), -t202, t174, t176, t129, t195, t175, t194, 0, t274 * t302 + t365 * t405 + t223, t278 * t302 - t365 * t406 + t225, -t274 * t59 - t278 * t60 + (t116 * t274 - t118 * t278) * qJD(2) - t202, -t78 * t53 * pkin(2) + t43 * t85 + t501 * (-pkin(15) + t332), qJDD(1) * t247 + 0.2e1 * t354, 0.2e1 * t227 * t254 - 0.2e1 * t409 * t416, t253 * t260 + t254 * t259, qJDD(1) * t248 - 0.2e1 * t354, -t253 * t259 + t254 * t260, 0, -0.2e1 * t72 * t228 + (t253 * t464 - t254 * t382) * t389 + t362, 0.2e1 * t72 * t227 + (t253 * t382 + t254 * t464) * t389 + t361, (t327 * qJDD(2) + t499 * qJD(2) * (t253 * t277 - t254 * t273)) * pkin(1) - t202, -(g(1) * t303 + t251) * t275 + (g(2) * t303 + t250) * t279 + (qJDD(1) * t72 + t348) * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, -t196, t252, -t215, -t393, qJDD(2), pkin(15) * t420 + t372, t256 + (-pkin(15) * t282 - t202) * t274, 0, 0, -t447, t70, t62, t447, t61, t260, -t385 + (pkin(1) * t171 * t278 - t170 * t237) * qJD(1) + t314, -t371 + (-t170 * t407 + t317) * pkin(1) + t322, ((t68 - t446) * t277 - t62 * t273) * pkin(1), t310 + t504, 0, 0, 0, 0, 0, 0, t128 * t80, -t128 * t79, t21 * t77 + t487 * t80 + t323, -t127 * t128 + t487 * t18 + t21 * t4 + t290, 0, 0, 0, 0, 0, 0, t13 * t74 + t272 * t298 + t346 * t402, -t14 * t74 + t276 * t298 - t346 * t403, (t13 * t276 + t14 * t272) * t79, (t276 * t6 - t14) * t12 + (-t272 * t6 - t13) * t11 + t292 * t21 + t290, -t506 * t450, (-t119 ^ 2 + t506 ^ 2) * t282, t397, t119 * t449, t398, qJDD(2), -pkin(14) * t449 - g(3) * t119 + t275 * t350 + t279 * t351, -pkin(14) * t450 + g(3) * t506 + t119 * t202, 0, 0, 0, 0, 0, 0, 0, 0, -t308 * t388, t307 * t388, (t333 * qJDD(1) + ((t114 * t308 + t307 * t330) * qJD(2) + t341) * qJD(1)) * pkin(1), ((t114 ^ 2 + t330 ^ 2) * qJDD(2) + (t114 * t95 - t330 * t96) * t514) * t283 + t310, -t511, t519, t497, t511, t518, t260, t516, t495, 0, 0, t215, -t196, t252, -t215, -t393, qJDD(2), 0.2e1 * t144 + 0.2e1 * t164 + (-t274 * t525 - t278 * t78) * qJD(1) + t372 + t419, t256 + (qJD(1) * t78 - t202) * t274 + (-t524 + (-0.2e1 * qJDD(2) - qJDD(3)) * t186 + (t514 + qJD(3)) * t165) * pkin(2), -t116 * t408 + t286, t527, -t193, t183, t227, t193, t228, t260, -t379 + (pkin(1) * t430 - g(3) * t277) * t278 + t314, -t378 + (-t253 * t420 + t317) * pkin(1) + t322, t327 * qJDD(1) * pkin(1), -t388 * t72 + t373 + t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t447, t70, t62, t447, t61, t260, -t170 * t207 + t289, t295 - t371, 0, 0, 0, 0, 0, 0, 0, 0, t80 * t479, -t79 * t479, -t10 * t80 - t489 + (t24 * t80 - t36 * t77 + t345) * pkin(5), -t10 * t18 + (-t127 * t170 + t18 * t24 - t36 * t4 + t305) * pkin(5) + t325, 0, 0, 0, 0, 0, 0, -t9 * t461 + t7 * t74 + (t272 * t301 + t344 * t402) * pkin(5), -t276 * t489 - t74 * t8 + (t276 * t301 - t344 * t403) * pkin(5), (t272 * t8 + t276 * t7) * t79, -t11 * t7 - t12 * t8 + ((-t11 * t272 + t12 * t276) * t24 - t292 * t36 + t305) * pkin(5) + t325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t511, t519, t497, t511, t518, t260, t516, t495, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t118 - t408 * t525 + t418, -qJD(2) * t117 + (qJD(2) * t165 - qJDD(2) * t186 - t524) * pkin(2), -t117 * t408 + t286, (t117 - t116) * t118 + t527, -t193, t183, t227, t193, t228, t260, t289 - t379, t295 - t378, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t377, -t415 * t75, t272 * t366 + t276 * t76, -t377, -t272 * t76 + t276 * t366, -t73, -t12 * t74 + t257 * t279 + t272 * t297 + t276 * t313 + t39, -t11 * t74 + t297 * t276 + (-t313 - t42 - t474) * t272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
tau_reg = t5;
