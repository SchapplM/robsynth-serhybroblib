% Calculate inertial parameters regressor of gravitation load for
% palh1m2OL
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [13x1]
%   Generalized joint coordinates (joint angles)
% g_base [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [20x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi312,phi413,phi710,phi711]';
% 
% Output:
% taug_reg [13x(13*10)]
%   inertial parameter regressor of gravitation joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-02 23:30
% Revision: 702b02ffee4f47164fa6a11b998f1d39ead3f7a6 (2020-05-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taug_reg = palh1m2OL_gravloadJ_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(13,1),zeros(3,1),zeros(20,1)}
assert(isreal(qJ) && all(size(qJ) == [13 1]), ...
  'palh1m2OL_gravloadJ_reg2_slag_vp: qJ has to be [13x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh1m2OL_gravloadJ_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [20 1]), ...
  'palh1m2OL_gravloadJ_reg2_slag_vp: pkin has to be [20x1] (double)');

%% Symbolic Calculation
% From gravload_joint_fixb_regressor_matlab.m
t76 = sin(qJ(2));
t83 = cos(qJ(2));
t84 = cos(qJ(1));
t95 = sin(qJ(1));
t86 = -t84 * g(1) - t95 * g(2);
t37 = g(3) * t76 - t86 * t83;
t27 = t37 * pkin(1);
t82 = cos(qJ(3));
t103 = t82 * t86;
t43 = pkin(9) * g(3) - t86 * pkin(11);
t44 = -t86 * pkin(9) - pkin(11) * g(3);
t74 = sin(qJ(4));
t81 = cos(qJ(4));
t18 = -t43 * t81 + t74 * t44;
t102 = -pkin(5) * g(3) + t18;
t30 = -t81 * g(3) - t74 * t86;
t35 = t74 * g(3) - t81 * t86;
t75 = sin(qJ(3));
t12 = t30 * t82 + t35 * t75;
t15 = -t30 * t75 + t35 * t82;
t4 = t12 * t76 - t15 * t83;
t2 = t12 * t83 + t15 * t76;
t73 = sin(qJ(5));
t99 = t2 * t73;
t98 = t82 * g(3);
t19 = t74 * t43 + t44 * t81;
t7 = -pkin(5) * t86 + t19;
t97 = t102 * t82 + t7 * t75;
t96 = -t102 * t75 + t7 * t82;
t45 = t75 * t83 + t82 * t76;
t50 = -g(1) * t95 + g(2) * t84;
t87 = t75 * t76 - t82 * t83;
t93 = (t81 * t45 - t74 * t87) * t50;
t90 = t73 * t50;
t80 = cos(qJ(5));
t89 = t80 * t50;
t88 = t76 * pkin(1) - pkin(15);
t69 = qJ(2) + qJ(8);
t68 = pkin(19) - qJ(7);
t32 = -g(3) * t83 - t76 * t86;
t59 = sin(t68);
t60 = cos(t68);
t85 = pkin(4) * (t59 * t32 + t37 * t60);
t79 = cos(qJ(6));
t78 = cos(qJ(7));
t77 = cos(qJ(8));
t72 = sin(qJ(6));
t71 = sin(qJ(7));
t70 = sin(qJ(8));
t63 = qJ(9) + t69;
t61 = sin(t69);
t58 = t75 * pkin(5) + pkin(1);
t57 = cos(t63);
t56 = sin(t63);
t54 = -qJ(2) - qJ(10) + t68;
t53 = cos(t54);
t52 = sin(t54);
t51 = -pkin(9) * t74 + pkin(11) * t81;
t48 = pkin(9) * t81 + pkin(11) * t74 + pkin(5);
t47 = pkin(15) * t50;
t42 = t88 * t50;
t36 = t75 * g(3) - t103;
t34 = t71 * g(3) - t78 * t86;
t33 = t70 * g(3) - t77 * t86;
t31 = -t75 * t86 - t98;
t29 = t78 * g(3) + t71 * t86;
t28 = t77 * g(3) + t70 * t86;
t26 = -g(3) * t56 + t57 * t86;
t25 = -g(3) * t57 - t56 * t86;
t24 = pkin(2) * (t61 * g(3) - t86 * cos(t69));
t23 = (-t75 * t74 + t82 * t81) * t83 - t76 * (t82 * t74 + t81 * t75);
t21 = g(3) * t52 + t86 * t53;
t20 = -g(3) * t53 + t86 * t52;
t14 = t31 * t83 + t76 * t36;
t13 = -t31 * t76 + t83 * t36;
t11 = t29 * t76 + t34 * t83;
t10 = t28 * t76 + t33 * t83;
t9 = t29 * t83 - t76 * t34;
t8 = t28 * t83 - t76 * t33;
t1 = t2 * t80;
t3 = [0, 0, 0, 0, 0, 0, -t50, -t86, 0, 0, 0, 0, 0, 0, 0, 0, t50 * t76, t50 * t83, t86, -t47, 0, 0, 0, 0, 0, 0, t87 * t50, t50 * t45, t86, t42, 0, 0, 0, 0, 0, 0, (t74 * t45 + t81 * t87) * t50, t93, t86, t50 * (t87 * pkin(5) + t88), 0, 0, 0, 0, 0, 0, -t23 * t89 + t73 * t86, t23 * t90 + t80 * t86, -t93, ((t48 * t75 - t51 * t82 + pkin(1)) * t76 + (-t48 * t82 - t75 * t51) * t83 - pkin(15)) * t50, 0, 0, 0, 0, 0, 0, -t79 * t50, t72 * t50, t86, pkin(14) * t50, 0, 0, 0, 0, 0, 0, t50 * (t71 * t83 + t78 * t76), -t50 * (t71 * t76 - t78 * t83), t86, t42, 0, 0, 0, 0, 0, 0, t50 * (t70 * t83 + t77 * t76), -t50 * (t70 * t76 - t77 * t83), t86, -t47, 0, 0, 0, 0, 0, 0, -t50 * t56, -t50 * t57, t86, t50 * (pkin(2) * t61 - pkin(15)), 0, 0, 0, 0, 0, 0, t52 * t50, -t53 * t50, t86, t50 * ((-t59 * t83 + t60 * t76) * pkin(4) + t88); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t32, 0, 0, 0, 0, 0, 0, 0, 0, t14, t13, 0, t27, 0, 0, 0, 0, 0, 0, t2, -t4, 0, (-pkin(5) * t98 - t86 * t58) * t83 + (-pkin(5) * t103 + t58 * g(3)) * t76, 0, 0, 0, 0, 0, 0, t1, -t99, t4, (-pkin(1) * t86 + t97) * t83 + (pkin(1) * g(3) + t96) * t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t9, 0, t27, 0, 0, 0, 0, 0, 0, t10, t8, 0, 0, 0, 0, 0, 0, 0, 0, t26, t25, 0, t24, 0, 0, 0, 0, 0, 0, t21, t20, 0, t85 + t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, t13, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t4, 0, t14 * pkin(5), 0, 0, 0, 0, 0, 0, t1, -t99, t4, t76 * t96 + t97 * t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t4, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t99, t4, (t18 * t82 + t75 * t19) * t83 + (-t18 * t75 + t19 * t82) * t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t4 * t73 + t89, -t4 * t80 - t90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79 * g(3) - t86 * t72, t72 * g(3) - t86 * t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, t20, 0, t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, t8, 0, 0, 0, 0, 0, 0, 0, 0, t26, t25, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
taug_reg = t3;
