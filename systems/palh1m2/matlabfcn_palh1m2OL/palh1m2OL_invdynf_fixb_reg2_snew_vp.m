% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% palh1m2OL
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [13x1]
%   Generalized joint coordinates (joint angles)
% qJD [13x1]
%   Generalized joint velocities
% qJDD [13x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [20x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AM,BC,BE,BG,BL,DC,EP,GH,GP,HW,ML,OT2,T1D,T2A,T2T1,phi312,phi413,phi710,phi711]';
%
% Output:
% f_new_reg [(3*11)x(11*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-02 23:30
% Revision: 702b02ffee4f47164fa6a11b998f1d39ead3f7a6 (2020-05-02)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = palh1m2OL_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(13,1),zeros(13,1),zeros(13,1),zeros(3,1),zeros(20,1)}
assert(isreal(qJ) && all(size(qJ) == [13 1]), ...
  'palh1m2OL_invdynf_fixb_reg2_snew_vp: qJ has to be [13x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [13 1]), ...
  'palh1m2OL_invdynf_fixb_reg2_snew_vp: qJD has to be [13x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [13 1]), ...
  'palh1m2OL_invdynf_fixb_reg2_snew_vp: qJDD has to be [13x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'palh1m2OL_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [20 1]), ...
  'palh1m2OL_invdynf_fixb_reg2_snew_vp: pkin has to be [20x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-02 23:28:32
% EndTime: 2020-05-02 23:30:39
% DurationCPUTime: 139.80s
% Computational Cost: add. (7520->1282), mult. (13100->1642), div. (0->0), fcn. (6928->22), ass. (0->854)
t11120 = (qJD(1) ^ 2);
t11069 = (qJD(3) + qJD(4));
t11118 = (qJD(3) ^ 2);
t11119 = (qJD(2) ^ 2);
t11565 = 2 * qJD(2);
t11154 = -t11069 * t11565 - t11118 - t11119 + (-2 * qJD(3) - qJD(4)) * qJD(4);
t10752 = t11120 - t11154;
t11116 = (qJD(5) ^ 2);
t10730 = t11116 + t10752;
t11096 = sin(qJ(4));
t11066 = qJDD(2) + qJDD(3);
t11019 = qJDD(4) + t11066;
t11105 = cos(qJ(4));
t11426 = t11019 * t11105;
t10665 = -t11096 * t10730 + t11426;
t10956 = t11096 * t11019;
t11097 = sin(qJ(3));
t11098 = sin(qJ(2));
t11106 = cos(qJ(3));
t11107 = cos(qJ(2));
t11372 = t11097 * t11105;
t11688 = (t11097 * t10665 + t11106 * (t10730 * t11105 + t10956)) * t11107 - (-t10665 * t11106 + t10730 * t11372) * t11098;
t11099 = sin(qJ(1));
t11550 = 0.2e1 * t11099;
t11108 = cos(qJ(1));
t11548 = -0.2e1 * t11108;
t11087 = sin(pkin(19));
t11557 = -0.2e1 * t11087;
t11104 = cos(qJ(5));
t11079 = t11104 ^ 2;
t11080 = t11105 ^ 2;
t11023 = t11080 - 0.1e1 / 0.2e1;
t11371 = t11097 * t11106;
t11259 = t11023 * t11371;
t11386 = t11096 * t11105;
t11081 = t11106 ^ 2;
t11502 = t11081 - 0.1e1 / 0.2e1;
t10717 = t11386 * t11502 + t11259;
t11339 = t11120 * t11098;
t10978 = t11107 * t11339;
t11346 = t11106 * t11105;
t11373 = t11097 * t11096;
t11199 = t11346 * t11373;
t11425 = t11023 * t11081;
t10723 = t11425 - t11199 - t11080 / 0.2e1 + 0.1e1 / 0.4e1;
t11039 = t11080 * t11120;
t11082 = t11107 ^ 2;
t11041 = t11082 * t11120;
t11678 = 0.2e1 * t11039;
t11246 = 0.4e1 * t10723 * t11041 + t11039 - (t11678 - t11120) * t11081;
t11316 = 2 * t11120;
t11158 = -0.4e1 * t10717 * t10978 + t11199 * t11316 + t11246;
t11030 = qJD(2) + t11069;
t11429 = (qJD(1) - t11030) * (qJD(1) + t11030);
t11685 = (t11158 - t11429) * t11079;
t10995 = t11019 * pkin(11);
t10709 = (t10752 * pkin(9)) - t10995;
t11028 = t11119 + t11120;
t10925 = qJD(3) * t11565 + t11028 + t11118;
t11527 = t11019 * pkin(9);
t11579 = t10752 * pkin(11) + t11527;
t11684 = -(pkin(5) * t10925) - t10709 * t11105 - t11096 * t11579;
t11017 = t11030 ^ 2;
t10964 = t11017 + t11120;
t10738 = -t11096 * t10964 + t11426;
t10740 = t10964 * t11105 + t10956;
t11583 = t10738 * t11097 + t10740 * t11106;
t11639 = -t10738 * t11106 + t11097 * t10740;
t10520 = t11583 * t11098 + t11107 * t11639;
t11421 = t11030 * t11105;
t11282 = qJD(1) * t11421;
t11391 = t11096 * qJDD(1);
t10793 = t11282 + t11391 / 0.2e1;
t11348 = t11105 * qJDD(1);
t11422 = t11030 * t11096;
t11567 = -2 * qJD(1);
t10807 = t11422 * t11567 + t11348;
t11377 = t11097 * t10807;
t10629 = t10793 * t11106 + t11377 / 0.2e1;
t11455 = t10807 * t11106;
t11648 = -0.2e1 * t10793;
t10633 = t11097 * t11648 + t11455;
t11481 = t10633 * t11098;
t10552 = t10629 * t11107 + t11481 / 0.2e1;
t11683 = t10520 * t11099 + t10552 * t11548;
t11682 = t10520 * t11108 + t10552 * t11550;
t11000 = pkin(1) * t11028;
t11085 = t11120 * pkin(15);
t11053 = t11099 * g(2);
t11058 = g(1) * t11108;
t11320 = -t11058 - t11053;
t10882 = t11085 - t11320;
t11441 = t10882 * t11098;
t10729 = t11441 - t11000;
t11109 = -pkin(11) / 0.2e1;
t11358 = t11098 * t11107;
t11299 = pkin(9) * t11358;
t11525 = t11082 * pkin(11);
t10844 = t11109 - t11299 + t11525;
t11298 = pkin(11) * t11358;
t11054 = t11082 * pkin(9);
t11322 = t11054 - pkin(9) / 0.2e1;
t10845 = t11298 + t11322;
t11523 = t11097 * pkin(5);
t11007 = 0.2e1 * t11523 + pkin(1);
t11051 = t11097 * pkin(1);
t11009 = t11051 + pkin(5);
t11059 = pkin(5) * t11096;
t11011 = t11059 + pkin(11);
t11295 = pkin(9) * t11339;
t11206 = t11097 * t11295;
t11558 = 0.2e1 * t11082;
t11540 = t11558 - 0.1e1;
t11285 = t11096 * t11540;
t11293 = pkin(11) - 0.2e1 * t11525;
t11308 = 0.4e1 * t11373;
t11040 = t11081 * t11120;
t11310 = -0.2e1 * t11040;
t11072 = qJD(2) + qJD(3);
t11063 = t11072 ^ 2;
t10994 = t11063 + t11120;
t10962 = pkin(5) * t10994;
t11333 = t10729 * t11097 - t10962;
t11532 = pkin(11) * t11096;
t11032 = 0.2e1 * t11532;
t11519 = t11032 + pkin(5);
t11427 = t11519 * t11105;
t11541 = 0.2e1 * t11080 - 0.1e1;
t11561 = -0.4e1 * t11080;
t11326 = t11017 * pkin(11) + t11527;
t11582 = -t11120 * pkin(11) - t11326;
t10720 = t11007 * t11339 - t10882;
t11052 = t11098 * g(3);
t11083 = qJDD(2) * pkin(1);
t10966 = t11052 + t11083;
t11597 = t10720 * t11107 - t10966;
t11681 = t11333 * t11096 + (t11120 * (t11097 * (t10845 * t11561 - pkin(9) + 0.2e1 * t11054 + 0.2e1 * t11298 + t11427) - (pkin(11) * t11308 + t11007) * t11082 * t11105) - (-(0.4e1 * t11096 * t11206 + g(3)) * t11107 + t10729) * t11105 + t11597 * t11096) * t11106 + (t11293 * t11080 + t11358 * t11427 + t11011 * t11082 - t11059 / 0.2e1 + t11109 + (t11105 * t11285 + t11541 * t11358) * pkin(9)) * t11310 - t10844 * t11678 - (g(3) * t11373 + t11295) * t11107 + (t11009 * t11096 + pkin(11)) * t11041 + t11582;
t11370 = t11097 * t11120;
t10983 = t11106 * t11370;
t11124 = (t11082 * t11371 + t11358 * t11502) * t11316 - t10983;
t11122 = t11124 + t11066;
t10661 = qJDD(4) + t11122;
t10631 = t11105 * t10661;
t11343 = t11107 * t11097;
t11359 = t11098 * t11106;
t10875 = t11343 + t11359;
t11309 = 0.2e1 * t11040;
t11647 = 0.2e1 * t11358;
t11235 = t10983 * t11647 + t11040 - (t11309 - t11120) * t11082;
t11193 = t11017 + t11235;
t11515 = qJD(5) * qJD(1);
t11646 = -2 * t11515;
t11680 = -t10875 * t11646 + (t11116 + t11193) * t11096 - t10631;
t11384 = t11096 * t11120;
t11249 = 0.2e1 * pkin(9) * t11384;
t10787 = t11097 * t11249 + t10966;
t10827 = (t11017 * pkin(9)) - t10995;
t11025 = t11066 * pkin(5);
t11664 = t10729 * t11096;
t11679 = t11333 * t11105 + t10966 * t11373 + t11096 * t11025 - (t10787 * t11105 - t11664) * t11106 - t10827;
t10525 = t11158 - t10964;
t10682 = t10752 * t11105 + t10956;
t10685 = -t10752 * t11096 + t11426;
t11674 = t10682 * t11106 + t11097 * t10685;
t11093 = sin(qJ(7));
t11499 = qJDD(1) * t11093;
t11003 = t11499 / 0.2e1;
t11071 = qJD(2) + qJD(7);
t11026 = qJD(10) + t11071;
t11102 = cos(qJ(7));
t11507 = qJD(1) * t11102;
t11284 = t11026 * t11507;
t10788 = t11003 + t11284;
t11496 = qJDD(1) * t11102;
t11509 = qJD(1) * t11093;
t10803 = -0.2e1 * t11026 * t11509 + t11496;
t11459 = t10803 * t11098;
t10626 = t10788 * t11107 + t11459 / 0.2e1;
t11088 = cos(pkin(19));
t11090 = cos(qJ(10));
t11089 = sin(qJ(10));
t10758 = t10803 * t11107;
t11551 = 0.2e1 * t11098;
t11592 = t10788 * t11551 - t10758;
t11408 = t11089 * t11592;
t11555 = 0.2e1 * t11089;
t11652 = t10626 * t11555 + t11090 * t11592;
t10504 = t11088 * t11652 + (t10626 * t11090 - t11408 / 0.2e1) * t11557;
t11673 = t10661 * t11096 + t11105 * t11193;
t11062 = t11071 ^ 2;
t10993 = t11062 + t11120;
t11659 = (-2 * t11071 - qJD(10)) * qJD(10);
t10784 = t10993 - t11659;
t11065 = qJDD(2) + qJDD(7);
t11013 = qJDD(10) + t11065;
t10952 = t11093 * t11013;
t10707 = t10784 * t11102 + t10952;
t10953 = t11013 * t11102;
t10708 = -t10784 * t11093 + t10953;
t10576 = t10707 * t11107 + t10708 * t11098;
t10577 = -t10707 * t11098 + t10708 * t11107;
t11672 = t10576 * t11090 + t10577 * t11089;
t11581 = pkin(11) * t10964 + t11527;
t10778 = (t10964 * pkin(9)) - t10995;
t11617 = t10778 * t11105;
t11671 = -t11096 * t11581 - t10962 - t11617;
t11512 = qJD(1) * t11030;
t11312 = pkin(11) * t11512;
t11529 = qJDD(1) * pkin(9);
t10893 = 0.2e1 * t11312 + t11529;
t11084 = qJDD(1) * pkin(11);
t11313 = pkin(9) * t11512;
t10894 = -t11084 + (2 * t11313);
t11510 = qJD(1) * t11072;
t10998 = pkin(5) * t11510;
t10638 = t10893 * t11096 + t10894 * t11105 + (2 * t10998);
t11530 = qJDD(1) * pkin(5);
t10672 = t10893 * t11105 - t10894 * t11096 + t11530;
t11074 = qJDD(1) * pkin(15);
t11056 = g(2) * t11108;
t11057 = g(1) * t11099;
t11321 = t11057 - t11056;
t10877 = -t11074 - t11321;
t11546 = pkin(1) * qJD(2);
t11044 = qJD(1) * t11546;
t11086 = pkin(1) * qJDD(1);
t11491 = (t10638 * t11106 + t10672 * t11097 + t11086) * t11098;
t11670 = -t11107 * (t10638 * t11097 - t10672 * t11106 + (2 * t11044)) - t10877 - t11491;
t11024 = t11082 - 0.1e1 / 0.2e1;
t11536 = pkin(5) * t11081;
t11669 = t11106 * t11597 - t11120 * (-t11009 * t11082 + 0.2e1 * t11024 * t11536) - g(3) * t11343 + t11333;
t11638 = t11097 * t10682 - t10685 * t11106;
t11667 = t11098 * t11674 + t11107 * t11638;
t11092 = sin(qJ(8));
t11070 = qJD(2) + qJD(8);
t11511 = qJD(1) * t11070;
t11277 = t11092 * t11511;
t11101 = cos(qJ(8));
t11497 = qJDD(1) * t11101;
t11147 = 0.2e1 * t11277 - t11497;
t11134 = t11147 * t11098;
t11281 = t11101 * t11511;
t11500 = qJDD(1) * t11092;
t10829 = 0.2e1 * t11281 + t11500;
t11449 = t10829 * t11107;
t11666 = pkin(2) * (-t11449 + t11134);
t10771 = pkin(1) * t11339 - t10882;
t11598 = t10771 * t11107 - t10966;
t11662 = t11598 * t11097;
t11055 = t11107 * g(3);
t11188 = t10729 - t11055;
t11012 = t11026 ^ 2;
t11077 = t11102 ^ 2;
t11038 = t11077 * t11120;
t11353 = t11102 * t11107;
t11397 = t11093 * t11098;
t11200 = t11353 * t11397;
t11162 = t11120 * t11200;
t11237 = 0.2e1 * t11162 + t11038 - (0.2e1 * t11038 - t11120) * t11082;
t11661 = t11012 + t11237;
t11068 = qJD(8) + qJD(9);
t11029 = qJD(2) + t11068;
t11016 = t11029 ^ 2;
t11355 = t11101 * t11092;
t10979 = t11120 * t11355;
t11076 = t11101 ^ 2;
t11037 = t11076 * t11120;
t11239 = t10979 * t11647 + t11037 - (0.2e1 * t11037 - t11120) * t11082;
t11660 = t11016 + t11239;
t11658 = t11116 + t11246;
t11657 = t11237 - t11012;
t10746 = t11441 - t11055;
t11419 = t11065 * t11102;
t10814 = -t11093 * t11062 + t11419;
t10985 = t11093 * t11065;
t10818 = t11062 * t11102 + t10985;
t11656 = -t10814 * t11088 - t10818 * t11087;
t10802 = 0.2e1 * t11284 + t11499;
t10636 = t10802 * t11107 + t11459;
t10620 = t10636 * t11090;
t11653 = t11087 * t11652 + (t10620 - t11408) * t11088;
t11244 = -t10827 * t11096 + t11326 * t11105 + t11025;
t10751 = t11116 - t11154;
t10681 = t10751 * t11105 + t10956;
t10684 = -t10751 * t11096 + t11426;
t11650 = t11107 * (t10681 * t11097 - t10684 * t11106) + t11098 * (t10681 * t11106 + t10684 * t11097);
t11317 = 2 * qJD(5);
t10806 = 0.2e1 * t11282 + t11391;
t11644 = (-t10806 * t11097 + t11455) * t11107;
t10637 = -t10802 * t11098 + t10758;
t11642 = t10637 * t11089 + t10620;
t11275 = qJD(5) * t11422;
t11494 = qJDD(5) * t11105;
t10808 = -0.2e1 * t11275 + t11494;
t10762 = t10808 * t11106;
t11035 = qJDD(5) * t11096;
t11278 = qJD(5) * t11421;
t10804 = 0.2e1 * t11278 + t11035;
t11601 = -t10804 * t11097 + t10762;
t11411 = t11087 * t11093;
t11303 = pkin(4) * t11411;
t10954 = pkin(1) + 0.4e1 * t11303;
t11242 = -t11000 + t10746;
t11641 = t11242 - t11120 * (-t10954 * t11082 + 0.2e1 * t11303);
t11022 = t11077 - 0.1e1 / 0.2e1;
t11256 = t11022 * t11358;
t11396 = t11093 * t11102;
t10716 = t11024 * t11396 + t11256;
t11132 = -0.1e1 / 0.4e1 + t11200 - t11022 * t11082;
t11545 = -t11077 / 0.2e1;
t10722 = t11545 - t11132;
t11073 = t11090 ^ 2;
t11406 = t11089 * t11090;
t11640 = t10716 * t11073 + t10722 * t11406;
t11344 = t11107 * qJDD(2);
t10834 = t11028 * t11098 - t11344;
t11064 = qJDD(2) + qJDD(8);
t10989 = t11064 * t11101;
t11061 = t11070 ^ 2;
t10815 = t11092 * t11061 - t10989;
t10984 = t11092 * t11064;
t10817 = t11061 * t11101 + t10984;
t10643 = t10815 * t11098 - t10817 * t11107;
t10619 = t10633 * t11107;
t10554 = t10629 * t11551 - t10619;
t10798 = t11092 * t10882;
t11021 = t11076 - 0.1e1 / 0.2e1;
t11305 = pkin(2) * t11339;
t11554 = 0.2e1 * t11092;
t11635 = pkin(2) * (t11120 * (t11021 * t11558 - t11076) - t11061) - ((t11305 * t11554 + g(3)) * t11101 - t10798) * t11107;
t11363 = t11098 * t11092;
t11634 = -t10882 * t11363 + t11052 * t11101;
t10861 = t10978 - t11013;
t10904 = t11041 + t11012;
t10696 = -t11093 * t10861 + t10904 * t11102;
t11167 = t10861 * t11102 + t11093 * t10904;
t11633 = t11089 * t10696 + t11090 * t11167;
t11327 = t10978 - qJDD(2);
t10903 = -qJDD(3) + t11327;
t10866 = -qJDD(4) + t10903;
t10789 = t11096 * t10866;
t10906 = t11041 + t11017;
t10701 = t10906 * t11105 - t10789;
t11446 = t10866 * t11105;
t11165 = t10906 * t11096 + t11446;
t11630 = t10701 * t11097 + t11106 * t11165;
t11337 = qJDD(2) + t10978;
t10900 = qJDD(3) + t11337;
t10865 = qJDD(4) + t10900;
t10790 = t10865 * t11105;
t11318 = t11120 - t11041;
t10857 = -t11017 - t11318;
t10677 = t10857 * t11096 + t10790;
t11389 = t11096 * t10865;
t11168 = t10857 * t11105 - t11389;
t11629 = -t10677 * t11097 + t11106 * t11168;
t10719 = t11041 - t10730;
t11503 = t11098 * qJD(5);
t11628 = t11106 * (-t11096 * t10719 - t10790) - (t10719 * t11105 - t11389) * t11097 - t11503 * t11567;
t11100 = cos(qJ(9));
t11513 = qJD(1) * t11029;
t11283 = t11100 * t11513;
t11091 = sin(qJ(9));
t11501 = qJDD(1) * t11091;
t10792 = t11283 + t11501 / 0.2e1;
t10809 = qJDD(1) * t11100 - 0.2e1 * t11091 * t11513;
t11454 = t10809 * t11092;
t10628 = t10792 * t11101 + t11454 / 0.2e1;
t11175 = t10792 * t11554 - t10809 * t11101;
t10556 = t10628 * t11551 + t11107 * t11175;
t11319 = t11116 + t11120;
t10926 = t11017 + t11319;
t10727 = t11096 * t10926 - t11426;
t11627 = t11107 * (t11106 * (t10926 * t11105 + t10956) - t11097 * t10727) - (t10727 * t11106 + t10926 * t11372) * t11098;
t11624 = 0.2e1 * t11097;
t11623 = 0.2e1 * t11107;
t11547 = 4 * t11120;
t11075 = t11100 ^ 2;
t11622 = 0.2e1 * t11075 - 0.1e1;
t10992 = t11061 + t11120;
t10767 = -t10992 * t11092 + t10989;
t11618 = t10767 * t11107;
t10943 = t11041 + t11063;
t11614 = t10943 * t11106;
t10944 = -t11041 - t11061;
t11613 = t10944 * t11092;
t11428 = t11007 * t11082;
t11050 = t11092 * g(3);
t10747 = t10882 * t11101 + t11050;
t11612 = t11098 * t10747;
t10871 = t11346 - t11373;
t11444 = t10871 * t11107;
t11143 = t11096 * t11359 - t11444;
t11610 = t11143 * t11317;
t11607 = (-0.2e1 * t11080 + 0.4e1 * t11425) * t11339;
t11604 = t11358 * t11519;
t11250 = t10717 * t11041;
t10690 = 0.4e1 * t11250;
t10982 = t11105 * t11384;
t11196 = t11081 * t10982;
t10919 = -0.2e1 * t11196;
t11602 = t10690 + t10919;
t10781 = t11147 * t11107;
t10666 = -t10829 * t11098 - t10781;
t11276 = t11071 * t11509;
t10837 = -0.2e1 * t11276 + t11496;
t10782 = t10837 * t11107;
t11280 = t11071 * t11507;
t10830 = 0.2e1 * t11280 + t11499;
t10667 = -t10830 * t11098 + t10782;
t11416 = t11072 * t11097;
t11274 = qJD(1) * t11416;
t11495 = qJDD(1) * t11106;
t10838 = -0.2e1 * t11274 + t11495;
t10783 = t10838 * t11107;
t11279 = t11106 * t11510;
t11225 = 0.2e1 * t11279;
t11498 = qJDD(1) * t11097;
t10831 = t11225 + t11498;
t11599 = -t10831 * t11098 + t10783;
t10986 = t11097 * t11066;
t10819 = t11063 * t11106 + t10986;
t11211 = t10994 * t11106 + t10986;
t11213 = t10925 * t11106 + t10986;
t11440 = t10882 * t11107;
t10748 = t11052 + t11440;
t11595 = 0.2e1 * t11196 - 0.4e1 * t11250;
t11230 = qJD(7) ^ 2 + t11028;
t11594 = -t11230 + t11659;
t11593 = -t11041 + t10784;
t11115 = (qJD(6) ^ 2);
t11027 = t11115 + t11120;
t11103 = cos(qJ(6));
t11094 = sin(qJ(6));
t11393 = t11094 * qJDD(6);
t10833 = -t11027 * t11103 - t11393;
t11018 = qJDD(9) + t11064;
t10957 = t11018 * t11100;
t10963 = t11016 + t11120;
t10737 = -t11091 * t10963 + t10957;
t10955 = t11091 * t11018;
t10739 = t10963 * t11100 + t10955;
t11590 = t11092 * t10737 + t10739 * t11101;
t11231 = qJD(8) ^ 2 + t11028;
t11564 = 2 * qJD(8);
t10750 = t11068 * t11565 + t11231 + (t11564 + qJD(9)) * qJD(9);
t10680 = t10750 * t11100 + t10955;
t10683 = -t10750 * t11091 + t10957;
t11589 = t10680 * t11101 + t11092 * t10683;
t11374 = t11097 * t11063;
t11418 = t11066 * t11106;
t11588 = t11418 - t11374;
t11375 = t11097 * t10994;
t11587 = t11418 - t11375;
t11586 = -t11093 * t10993 + t11419;
t11015 = pkin(1) * t11041;
t10692 = t11015 + t11242;
t11153 = pkin(9) * t10978 - pkin(11) * t11041;
t11580 = t11153 + t11581;
t11362 = t11098 * t11097;
t11260 = t11096 * t11362;
t11204 = qJD(5) * t11260;
t11360 = t11098 * t11105;
t11273 = qJD(1) * t11360;
t11205 = qJD(5) * t11273;
t11385 = t11096 * t11106;
t11504 = t11098 * qJD(1);
t11578 = qJD(1) * (0.4e1 * ((-t11385 / 0.2e1 - t11372 / 0.2e1) * qJD(5) + t10723 * t11504) * t11107 + 0.2e1 * t11204) - (t11541 * t11370 + 0.2e1 * t11205) * t11106 + t10982 + t11019;
t11253 = t11098 * t11348;
t11336 = t11097 * t11253 + qJDD(5);
t10625 = -qJDD(1) * t11143 - t11336;
t11302 = pkin(4) * t11339;
t11572 = t11107 * (t10771 * t11087 + 0.2e1 * t11093 * t11302) - t11087 * t10966;
t11456 = t10806 * t11106;
t10559 = t11107 * (t11377 + t11456) + t11481;
t11480 = t11175 * t11098;
t11571 = t11107 * ((0.2e1 * t11283 + t11501) * t11101 + t11454) - t11480;
t10938 = t11032 + t11009;
t11291 = (2 * pkin(5)) + 0.4e1 * t11532;
t11301 = pkin(9) * t11386;
t11535 = pkin(9) * t11080;
t11518 = 0.2e1 * t11535 - pkin(9);
t11533 = pkin(11) * t11080;
t11542 = t11561 + 0.2e1;
t11570 = -(-t11011 + 0.2e1 * t11533) * t11371 + pkin(11) * t11386 - ((t11542 * pkin(9) - t11291 * t11105) * t11081 + (t11096 * pkin(1) + (0.2e1 * t11011 + 0.4e1 * t11301 - 0.4e1 * t11533) * t11097) * t11106 + t10938 * t11105 + t11518) * t11082 - (t11427 + t11518) * t11081 + t11535;
t10855 = t11116 + t10906;
t11505 = qJD(1) * t11107;
t11569 = t11097 * (t10855 * t11096 + t11446) - t11106 * (t10855 * t11105 - t10789) + t11505 * t11317;
t11566 = 2 * qJD(1);
t11202 = t11082 * t10979;
t11526 = t11064 * pkin(2);
t11543 = -t11120 / 0.2e1;
t11563 = ((-t11085 / 0.2e1 - t11058 / 0.2e1 - t11053 / 0.2e1) * t11101 - t11050 / 0.2e1 + t11021 * t11305) * t11623 - t11526 + 0.2e1 * (t11543 * t11355 + t11202) * pkin(2) - t11634;
t11020 = t11075 - 0.1e1 / 0.2e1;
t11405 = t11091 * t11100;
t11201 = t11355 * t11405;
t11562 = -0.4e1 * t11020 * t11076 + 0.4e1 * t11201 + t11622;
t11560 = -0.2e1 * t11081;
t11559 = 0.2e1 * t11081;
t11556 = -0.2e1 * t11088;
t11095 = sin(qJ(5));
t11553 = 0.2e1 * t11095;
t11552 = -0.2e1 * t11098;
t11549 = 0.2e1 * t11104;
t11544 = t11098 / 0.2e1;
t11539 = pkin(4) * t11087;
t11538 = pkin(4) * t11093;
t11534 = pkin(9) * t11096;
t11531 = pkin(11) * t11105;
t11524 = t11096 * g(3);
t11522 = t11097 * g(3);
t11521 = t11119 * pkin(1);
t11341 = t11108 * qJDD(1);
t11520 = pkin(15) * t11341 - g(2);
t11517 = qJD(2) * qJD(7);
t11514 = qJD(1) * (pkin(5) * t11416 + t11546);
t11508 = qJD(1) * t11097;
t11506 = qJD(1) * t11105;
t11036 = t11077 / 0.2e1;
t11270 = t10716 * t11406;
t10544 = (t11036 + t11132) * t11073 + t11270 + (t11036 - 0.1e1 / 0.4e1) * t11082 - t11200 / 0.2e1 - t11077 / 0.4e1 + 0.1e1 / 0.8e1;
t11067 = t11088 ^ 2;
t11493 = t10544 * t11067;
t10880 = t11312 + t11529 / 0.2e1;
t10881 = t11313 - t11084 / 0.2e1;
t10632 = t10880 * t11096 + t10881 * t11105 + t10998;
t11332 = t10881 * t11096 - t11530 / 0.2e1;
t11492 = (t10632 * t11097 + (-t10880 * t11105 + t11332) * t11106 + t11044) * t11107;
t11489 = (t11081 * t11096 * t11273 + (t11105 * qJD(5) / 0.2e1 + t11023 * qJD(1) * t11362) * t11106 - t11096 * (t11097 * qJD(5) + t11273) / 0.2e1) * t11107;
t10872 = t11372 + t11385;
t10594 = t11543 - t11116 / 0.2e1 + (-t10872 * t11098 + t11444) * t11515;
t11487 = t10594 * t11095;
t10693 = t11098 * t10871 + t10872 * t11107;
t10597 = qJDD(1) * t10693 + (t11030 * t11317);
t11486 = t10597 * t11095;
t11485 = t10597 * t11104;
t11123 = t11124 - t11066;
t10662 = -qJDD(4) + t11123;
t11477 = t10662 * t11096;
t11469 = t10722 * t11073;
t10923 = qJD(2) * t11564 + t11231;
t10733 = t11092 * t10923 - t10989;
t11468 = t10733 * t11107;
t11464 = t10747 * t11107;
t11008 = pkin(1) + t11523;
t11461 = (pkin(5) * t11225 + qJDD(1) * t11008) * t11098;
t10791 = t11278 + t11035 / 0.2e1;
t11460 = t10791 * t11097;
t10820 = t11281 + t11500 / 0.2e1;
t11451 = t10820 * t11107;
t11395 = t11093 * t11107;
t10870 = t11102 * t11098 + t11395;
t11445 = t10870 * qJDD(1);
t11354 = t11101 * t11098;
t10874 = t11107 * t11092 + t11354;
t11443 = t10874 * qJDD(1);
t11442 = t10875 * qJDD(1);
t10886 = -t11061 - t11318;
t11439 = t10886 * t11101;
t10888 = -t11063 - t11318;
t11438 = t10888 * t11097;
t11436 = t11622 * t11037;
t11417 = t11067 * t11120;
t11415 = t11103 ^ 2 * t11120;
t11410 = t11088 * t11120;
t11049 = 2 * t11517;
t10745 = t11049 - t11594;
t10674 = t10745 * t11102 + t10952;
t10675 = -t11093 * t10745 + t10953;
t10568 = -t11098 * t10674 + t10675 * t11107;
t11409 = t11089 * t10568;
t11401 = t11093 * t10729;
t11400 = t11093 * t10771;
t10896 = t11093 * t10966;
t11394 = t11094 * qJDD(1);
t11392 = t11095 * t11030;
t11387 = t11096 * t11104;
t11376 = t11097 * t10925;
t11369 = t11098 * qJDD(1);
t11368 = t11098 * qJDD(2);
t11365 = t11098 * t10675;
t11361 = t11098 * t11104;
t11356 = t11099 * t11120;
t11352 = t11103 * qJDD(1);
t11351 = t11103 * qJDD(6);
t11350 = t11104 * t10594;
t11349 = t11104 * t11030;
t11347 = t11105 * t10662;
t11345 = t11107 * qJDD(1);
t11342 = t11107 * t11119;
t11338 = -0.2e1 * t11533;
t11335 = 0.4e1 * (t11039 / 0.4e1 - t11429 / 0.4e1 + (t10723 * t11082 - t10717 * t11358 - t11425 / 0.2e1 + t11199 / 0.2e1) * t11120) * t11095 * t11104 + 0.2e1 * t10693 * t11079 * t11512;
t10828 = t11019 * t11260;
t11045 = 2 * t11515;
t11331 = t10828 + t11045;
t10897 = t10966 * t11097;
t11330 = t10897 + t11025;
t11329 = t11022 * t11041 - t11038 / 0.2e1;
t10967 = pkin(5) * t11418;
t11325 = t11000 - t10967;
t11323 = t11646 - t10828;
t11315 = qJD(6) * t11566;
t11307 = 0.4e1 * t11358;
t11306 = pkin(1) * t11369;
t11304 = pkin(4) * t11417;
t11300 = pkin(9) * t11371;
t11297 = pkin(4) * t11410;
t11296 = pkin(5) * t11339;
t11294 = pkin(4) * t11038;
t11288 = qJD(2) * t11505;
t11286 = qJD(1) * t11095 / 0.2e1;
t11272 = -t11495 / 0.2e1;
t11261 = t11082 * t11396;
t10531 = -t11261 / 0.2e1 + (t11545 + 0.1e1 / 0.4e1) * t11358 + t11396 / 0.4e1 + t11640;
t11271 = t10531 * t11087 * t11088;
t11268 = (qJD(1) * t11372 + t11503) * t11385;
t11266 = t11030 * t11373;
t11265 = t11096 * t11349;
t11264 = t11080 * t11370;
t11258 = t11097 * t11361;
t11257 = t11097 * t11360;
t11255 = t11120 * t11405;
t10980 = t11120 * t11396;
t11254 = t11097 * t11348;
t11252 = t11089 * t11358;
t11251 = t11090 * t11358;
t11248 = 0.2e1 * t11294;
t10936 = qJDD(5) * t11257;
t11247 = -0.2e1 * t11030 * t11204 + qJDD(1) + t10936;
t11187 = t11260 * t11566;
t11243 = t11030 * t11187 - t11336;
t11222 = -0.2e1 * t10978;
t11241 = t11021 * t11222 + t10979 - 0.2e1 * t11202;
t11240 = -0.2e1 * t11082 * t10980 + t11022 * t11222 + t10980;
t10901 = -qJDD(8) + t11327;
t10898 = qJDD(8) + t11337;
t11226 = pkin(1) * t11288;
t11224 = t11392 * t11552;
t11223 = -0.2e1 * t11266;
t11207 = t11087 * t11302;
t11220 = (0.2e1 * t11207 + t11400) * t11107 - t10896;
t11218 = t10804 * t11106 + t10808 * t11097;
t11217 = (0.2e1 * t11301 + t11338 + t11011) * t11559 - t11011;
t11208 = t11087 * t11294;
t11203 = t10693 * t11095 * t11349;
t11197 = t11096 * t11258;
t11195 = -0.4e1 * t11208;
t11194 = -t11120 + t11235;
t11190 = pkin(9) * t11105 + t11532;
t10946 = t11531 - t11534;
t11185 = -((t11519 * t11624 + pkin(1)) * t11339 - t10882) * t11105 + t11524;
t10939 = pkin(5) + t11190;
t11183 = t11097 * t11205;
t10932 = t11341 - t11356;
t11182 = t11099 * qJDD(1) + t11108 * t11120;
t10931 = -t11342 - t11368;
t11181 = -t11491 - 0.2e1 * t11492;
t10821 = t11003 + t11280;
t10824 = -t11496 / 0.2e1 + t11276;
t11180 = (t11044 + (t10821 * t11088 + t10824 * t11087) * pkin(4)) * t11623 - (-t11086 + 0.2e1 * (-t10821 * t11087 + t10824 * t11088) * pkin(4)) * t11098;
t10774 = -t11096 * t11017 + t11426;
t10777 = t11017 * t11105 + t10956;
t10613 = t10774 * t11106 - t10777 * t11097;
t10615 = t10774 * t11097 + t10777 * t11106;
t10540 = t11098 * t10613 + t10615 * t11107;
t11127 = (t11256 + t11261) * t11316 - t10980;
t10652 = t11127 - t11013;
t11179 = (t11012 / 0.2e1 + (-t11200 + 0.1e1 / 0.2e1) * t11120 + t11329) * t11555 + t10652 * t11090;
t11176 = -0.2e1 * (pkin(5) * t11272 + t11514) * t11107 - t11461;
t11172 = (-t11497 / 0.2e1 + t11277) * t11551 - t11449;
t11171 = t10824 * t11551 - t10830 * t11107;
t11170 = (t11272 + t11274) * t11551 - t10831 * t11107;
t10864 = -qJDD(9) + t10901;
t10905 = t11041 + t11016;
t11166 = t10864 * t11100 + t10905 * t11091;
t10887 = -t11062 - t11318;
t10899 = qJDD(7) + t11337;
t11164 = t10887 * t11093 + t10899 * t11102;
t10647 = -t11017 + t11194;
t11157 = -t11235 + t10964;
t11156 = t11241 + t11064;
t10757 = pkin(1) * t10834 - t11085;
t11150 = t11504 * t11565 - t11345;
t10876 = t11107 * t11106 - t11362;
t11149 = t10876 * t11045 + t11477;
t11148 = t11094 * t11315 - t11352;
t10858 = t11098 * t11249 + t11522;
t11144 = t10771 * t11373 + t10858 * t11105;
t11142 = t11000 * t11098 - t11083 * t11107 - t11085;
t11137 = -0.8e1 * t10544 * t11087 * t11410 - 0.8e1 * t10531 * t11417 + t11547 * t11640 + t11240;
t10885 = -0.2e1 * t11183;
t11136 = 0.4e1 * qJD(1) * t11489 + t11268 * t11567 + t10885 - t11658;
t10715 = t11020 * t11355 + t11021 * t11405;
t11133 = -0.4e1 * t10715 * t11041 + t10978 * t11562 + 0.2e1 * t11020 * t10979 + 0.2e1 * t11076 * t11255 - t11255;
t10523 = t11180 + t10877;
t11131 = (pkin(5) * t11495 - 0.2e1 * t11514) * t11107 - t10877 - t11461;
t11126 = t10715 * t11307 + t11082 * t11562 - t11075 - 0.2e1 * t11201;
t11125 = t10982 + (t10723 * t11307 - 0.2e1 * t11259) * t11120 + t11602;
t11060 = pkin(1) * t11093;
t11004 = -t11082 / 0.2e1 + 0.1e1 / 0.4e1;
t10981 = t11103 * t11120 * t11094;
t10950 = -0.2e1 * t11206;
t10945 = -t11041 - t11062;
t10930 = t11098 * t11119 - t11344;
t10928 = -t11094 * t11115 + t11351;
t10927 = -t11103 * t11115 - t11393;
t10924 = t11049 + t11230;
t10922 = t11363 * t11526;
t10902 = -qJDD(7) + t11327;
t10892 = 0.2e1 * t11288 + t11369;
t10891 = t11103 * t11315 + t11394;
t10884 = 0.2e1 * t11183;
t10883 = (pkin(14) * t11120) + t11320;
t10878 = -pkin(14) * qJDD(1) + t11321;
t10873 = t11101 * t11107 - t11363;
t10869 = t11353 - t11397;
t10863 = qJDD(9) + t10898;
t10862 = pkin(1) * t10931 - g(3);
t10860 = t10978 + t11013;
t10856 = -t11016 - t11318;
t10846 = -pkin(15) * t11356 + t11520;
t10843 = -pkin(15) * t11182 - g(1);
t10835 = t11028 * t11107 + t11368;
t10832 = t11027 * t11094 - t11351;
t10822 = t11279 + t11498 / 0.2e1;
t10813 = t10876 * qJDD(1);
t10812 = t10869 * qJDD(1);
t10811 = t10873 * qJDD(1);
t10786 = -t11074 + 0.2e1 * t11226 + t11306;
t10776 = t11016 * t11100 + t10955;
t10773 = -t11091 * t11016 + t10957;
t10770 = t11012 * t11102 + t10952;
t10769 = -t11093 * t11012 + t10953;
t10766 = t10993 * t11102 + t10985;
t10765 = t10992 * t11101 + t10984;
t10764 = t11024 * t11090 - t11252;
t10763 = t11089 * t11024 + t11251;
t10749 = -g(3) * t11101 + t10798;
t10741 = t10771 * t11097;
t10735 = -t11418 + t11376;
t10734 = t11093 * t10924 - t11419;
t10732 = t10924 * t11102 + t10985;
t10731 = t10923 * t11101 + t10984;
t10726 = -0.2e1 * t11226 - (t11098 * pkin(1) - pkin(15)) * qJDD(1) + t11321;
t10718 = t10757 + t11320;
t10714 = -t10741 - t11296;
t10713 = pkin(9) * t10906 + pkin(11) * t10978 - t10995;
t10712 = -t11153 + t11326;
t10706 = -t10808 + t10813;
t10705 = t10804 + t11442;
t10704 = t10887 * t11102 - t11093 * t10899;
t10700 = -t11091 * t10864 + t10905 * t11100;
t10694 = (t11298 + t11054) * t11120 - t10778;
t10687 = t11089 * t10869 + t10870 * t11090;
t10686 = t10869 * t11090 - t11089 * t10870;
t10678 = -t10856 * t11100 + t11091 * t10863;
t10676 = t10856 * t11091 + t10863 * t11100;
t10660 = qJDD(9) + t11156;
t10659 = -t10979 + (t11021 * t11358 + t11082 * t11355) * t11316 + t11018;
t10658 = t10822 * t11552 + t10783;
t10657 = t10821 * t11552 + t10782;
t10656 = t10820 * t11552 - t10781;
t10651 = t11127 + t11013;
t10650 = t10822 * t11107 + t10838 * t11544;
t10649 = t10821 * t11107 + t10837 * t11544;
t10648 = -t11147 * t11544 + t11451;
t10646 = -t11239 + t10963;
t10645 = -t10819 * t11107 - t11098 * t11588;
t10644 = -t10814 * t11098 - t10818 * t11107;
t10642 = -t10814 * t11107 + t11098 * t10818;
t10641 = t10815 * t11107 + t11098 * t10817;
t10640 = -t10819 * t11098 + t11107 * t11588;
t10624 = (t10954 * t11339 - t10882) * t11107 - t10966;
t10623 = -(t11063 * pkin(5)) - t10827 * t11105 - t11096 * t11326;
t10622 = pkin(2) * t10643 - g(3);
t10618 = t10860 * t11102 - t11093 * t11593;
t10617 = t11093 * t10860 + t11102 * t11593;
t10614 = t11092 * t10773 + t10776 * t11101;
t10612 = t10773 * t11101 - t11092 * t10776;
t10609 = t11098 * t10769 + t10770 * t11107;
t10608 = t10769 * t11107 - t11098 * t10770;
t10607 = t11098 * t11211 - t11107 * t11587;
t10606 = t10766 * t11098 - t11107 * t11586;
t10605 = t10765 * t11098 - t11618;
t10604 = -t11098 * t11587 - t11211 * t11107;
t10603 = t10766 * t11107 + t11098 * t11586;
t10602 = t10765 * t11107 + t10767 * t11098;
t10601 = t10757 * t11108 + t10786 * t11099 - g(1);
t10600 = t10757 * t11099 - t10786 * t11108 - g(2);
t10599 = t11345 - t11601;
t10598 = t11218 + t11369;
t10596 = qJD(1) * t11610 + t10884 + t11319;
t10595 = (-pkin(5) * t11374 + t10967 - t11521) * t11107 + (-pkin(5) * t10819 - t11083) * t11098 - g(3);
t10593 = t10778 * t11096 - t11105 * t11581 - t11025;
t10590 = t10737 * t11101 - t11092 * t10739;
t10589 = t10922 - t11085 + (t10992 * t11354 - t11618) * pkin(2);
t10588 = (-t11134 + 0.2e1 * t11451) * pkin(2) + t10877;
t10587 = ((t11060 + 0.2e1 * t11539) * t11082 - t11539) * t11120 + t11188 * t11093;
t10585 = t11188 * t11087 + ((pkin(1) * t11087 + 0.2e1 * t11538) * t11082 - t11538) * t11120;
t10584 = (t11087 * t11400 + t11302) * t11107 - t11087 * t10896 - pkin(4) * t11065;
t10581 = (pkin(5) * t11375 + t11325) * t11098 + (-pkin(5) * t11211 - t11083) * t11107 - t11085;
t10580 = (pkin(1) * t11411 + pkin(4)) * t11041 - t10993 * pkin(4) + (-g(3) * t11395 + t11401) * t11087;
t10575 = t10696 * t11090 - t11089 * t11167;
t10574 = t10709 * t11096 - t11105 * t11579 - t11025;
t10571 = -t11092 * t10680 + t10683 * t11101;
t10567 = t10674 * t11107 + t11365;
t10566 = t11089 * t10651 + t11090 * t11661;
t10565 = t10651 * t11090 + (-t11162 - t11012 / 0.2e1 + t11329) * t11555;
t10564 = (t11120 - t11657) * t11090 - t11089 * t10652;
t10563 = t11612 + t11635;
t10561 = t11098 * t11601 + t11218 * t11107;
t10557 = -t10636 * t11089 + t10637 * t11090;
t10551 = t10628 * t11107 - t11480 / 0.2e1;
t10547 = t10804 * t11359 - t11107 * t11601 + t11247;
t10546 = -t11644 + (qJD(1) * t11223 + t11456) * t11098 + t11336;
t10545 = -t10806 * t11359 + t11243 + t11644;
t10543 = -t10617 * t11089 + t10618 * t11090;
t10542 = t10617 * t11090 + t11089 * t10618;
t10539 = t11098 * t10612 + t10614 * t11107;
t10538 = t10613 * t11107 - t11098 * t10615;
t10537 = t10612 * t11107 - t11098 * t10614;
t10536 = -pkin(1) * t11342 - t11083 * t11098 - g(3) + ((t10814 * t11087 - t10818 * t11088) * t11107 + t11656 * t11098) * pkin(4);
t10535 = t10546 * t11095;
t10534 = t10545 * t11104;
t10532 = ((-t11494 / 0.2e1 + t11275) * t11106 + t11460) * t11107 + t10936 / 0.2e1 + qJDD(1) / 0.2e1 + (-qJD(5) * t11266 + t10791 * t11106) * t11098;
t10530 = t10608 * t11089 + t10609 * t11090;
t10529 = t10608 * t11090 - t10609 * t11089;
t10526 = t11125 - t11019;
t10524 = ((t11428 - t11523) * t11120 + t11242) * t11106 + (t11296 * t11559 + t10714) * t11107 + t11330;
t10522 = t11098 * t11639 - t11107 * t11583;
t10521 = -t10590 * t11098 - t11107 * t11590;
t10518 = t10590 * t11107 - t11098 * t11590;
t10517 = ((t10766 * t11088 - t11087 * t11586) * t11098 + (-t10766 * t11087 - t11088 * t11586) * t11107) * pkin(4) + t11142;
t10515 = t11331 - t11627;
t10514 = -t10576 * t11089 + t10577 * t11090;
t10513 = t11104 * t10596 + t10535;
t10512 = t10546 * t11104 + 0.2e1 * t11487;
t10511 = t11095 * t10545 + 0.2e1 * t11350;
t10510 = -t11578 + t11595;
t10509 = t11578 + t11602;
t10508 = -t11089 * t10567 + t10568 * t11090;
t10507 = t10557 * t11088 + t11642 * t11087;
t10506 = t11087 * t10557 - t11642 * t11088;
t10502 = (t10623 * t11097 + t11106 * t11244 - t11521) * t11107 + (t10623 * t11106 - t11097 * t11244 - t11083) * t11098 - g(3);
t10501 = -t10529 * t11087 + t10530 * t11088;
t10500 = t10529 * t11088 + t10530 * t11087;
t10499 = t11492 + t10632 * t11359 + t10880 * t11257 - t11332 * t11362 + t11306 / 0.2e1 + t11056 / 0.2e1 - t11057 / 0.2e1 - t11074 / 0.2e1;
t10498 = (t11323 + t11627) * t11095 + t10532 * t11549;
t10497 = (t10593 * t11106 - t11671 * t11097 + t11000) * t11098 + (t10593 * t11097 + t11671 * t11106 - t11083) * t11107 - t11085;
t10496 = -t10561 * t11104 + t11095 * t11650;
t10495 = -t11095 * t10561 - t11104 * t11650;
t10494 = t10514 * t11088 + t11672 * t11087;
t10493 = t10514 * t11087 - t11672 * t11088;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t11182, -t10932, 0, -g(1), 0, 0, 0, 0, 0, 0, t10834 * t11108 + t11099 * t10892, t10835 * t11108 - t11099 * t11150, t10932, t10843, 0, 0, 0, 0, 0, 0, t10604 * t11108 - t11099 * t10658, t10607 * t11108 + t10650 * t11550, t10932, t10601, 0, 0, 0, 0, 0, 0, t10522 * t11108 + t10554 * t11099, t11682, t10932, t10581 * t11108 - g(1) + (-t11176 - t11074) * t11099, 0, 0, 0, 0, 0, 0, (t10515 * t11104 + t10532 * t11553) * t11108 - t11099 * (t10596 * t11095 + t10534), t10498 * t11108 - t11099 * t10513, -t11682, t10497 * t11108 - g(1) + (-t11181 - t11074) * t11099, 0, 0, 0, 0, 0, 0, t10833 * t11108 + t11099 * t11148, t10832 * t11108 + t11099 * t10891, t10932, pkin(14) * t11182 - g(1), 0, 0, 0, 0, 0, 0, t10606 * t11108 + t10649 * t11550, t10603 * t11108 + t11099 * t10657, t10932, t10601, 0, 0, 0, 0, 0, 0, t10605 * t11108 + t10648 * t11550, t10602 * t11108 + t11099 * t10656, t10932, t10843, 0, 0, 0, 0, 0, 0, t10518 * t11108 - 0.2e1 * t10551 * t11099, t10521 * t11108 + t10556 * t11099, t10932, t10589 * t11108 - g(1) + (-t11074 - t11666) * t11099, 0, 0, 0, 0, 0, 0, t10494 * t11108 + t11099 * t10506, t10493 * t11108 - t11099 * t10507, t10932, t10517 * t11108 - g(1) + (t11180 - t11074) * t11099; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t10932, -t11182, 0, -g(2), 0, 0, 0, 0, 0, 0, t10834 * t11099 - t11108 * t10892, t10835 * t11099 + t11108 * t11150, t11182, t10846, 0, 0, 0, 0, 0, 0, t10604 * t11099 + t10658 * t11108, t10607 * t11099 + t10650 * t11548, t11182, t10600, 0, 0, 0, 0, 0, 0, t10522 * t11099 - t10554 * t11108, t11683, t11182, t10581 * t11099 + t11108 * t11176 + t11520, 0, 0, 0, 0, 0, 0, (t10515 * t11099 + t10545 * t11108) * t11104 + (((-t10762 + 0.2e1 * t11460) * t11107 + 0.2e1 * t10791 * t11359 + t11247) * t11099 + t10596 * t11108) * t11095, t10498 * t11099 + t11108 * t10513, -t11683, t10497 * t11099 + t11108 * t11181 + t11520, 0, 0, 0, 0, 0, 0, t10833 * t11099 - t11108 * t11148, t10832 * t11099 - t11108 * t10891, t11182, -pkin(14) * t10932 - g(2), 0, 0, 0, 0, 0, 0, t10606 * t11099 + t10649 * t11548, t10603 * t11099 - t11108 * t10657, t11182, t10600, 0, 0, 0, 0, 0, 0, t10605 * t11099 + t10648 * t11548, t10602 * t11099 - t11108 * t10656, t11182, t10846, 0, 0, 0, 0, 0, 0, t10518 * t11099 + 0.2e1 * t11108 * t10551, t10521 * t11099 - t10556 * t11108, t11182, t10589 * t11099 + t11108 * t11666 + t11520, 0, 0, 0, 0, 0, 0, t10494 * t11099 - t11108 * t10506, t10493 * t11099 + t11108 * t10507, t11182, t10517 * t11099 - t11108 * t11180 + t11520; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t10931, t10930, 0, -g(3), 0, 0, 0, 0, 0, 0, t10640, t10645, 0, t10862, 0, 0, 0, 0, 0, 0, t10538, -t10540, 0, t10595, 0, 0, 0, 0, 0, 0, t10495, t10496, t10540, t10502, 0, 0, 0, 0, 0, 0, t10928, t10927, 0, -g(3), 0, 0, 0, 0, 0, 0, t10644, t10642, 0, t10862, 0, 0, 0, 0, 0, 0, t10643, t10641, 0, -g(3), 0, 0, 0, 0, 0, 0, t10539, t10537, 0, t10622, 0, 0, 0, 0, 0, 0, t10501, t10500, 0, t10536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11120, -qJDD(1), 0, t11320, 0, 0, 0, 0, 0, 0, t10834, t10835, qJDD(1), -t10882, 0, 0, 0, 0, 0, 0, t11098 * t10735 - t11107 * t11213, t10735 * t11107 + t11098 * t11213, qJDD(1), t10718, 0, 0, 0, 0, 0, 0, t11098 * t11638 - t11107 * t11674, t11667, qJDD(1), (pkin(5) * t11376 + t11325) * t11098 + (-pkin(5) * t11213 - t11083) * t11107 - t10882, 0, 0, 0, 0, 0, 0, (t11331 - t11688) * t11104 + t11095 * t10547, (t11323 + t11688) * t11095 + t10547 * t11104, -t11667, (t10574 * t11106 - t11684 * t11097 + t11000) * t11098 + (t10574 * t11097 + t11684 * t11106 - t11083) * t11107 - t10882, 0, 0, 0, 0, 0, 0, t10833, t10832, qJDD(1), t10883, 0, 0, 0, 0, 0, 0, t11098 * t10732 + t10734 * t11107, t10732 * t11107 - t10734 * t11098, qJDD(1), t10718, 0, 0, 0, 0, 0, 0, t11098 * t10731 + t11468, t10731 * t11107 - t10733 * t11098, qJDD(1), -t10882, 0, 0, 0, 0, 0, 0, t10571 * t11107 - t11098 * t11589, -t10571 * t11098 - t11107 * t11589, qJDD(1), t10922 + (t10923 * t11354 + t11468) * pkin(2) - t10882, 0, 0, 0, 0, 0, 0, t10508 * t11088 + t11087 * (t10567 * t11090 + t11409), ((((-2 * t11517 + t11594) * t11102 - t10952) * t11107 - t11365) * t11090 - t11409) * t11088 + t10508 * t11087, qJDD(1), ((t10732 * t11088 + t10734 * t11087) * t11098 + (-t10732 * t11087 + t10734 * t11088) * t11107) * pkin(4) + t11142 + t11320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t11120, 0, t11321, 0, 0, 0, 0, 0, 0, -t10892, t11150, t11120, -t10877, 0, 0, 0, 0, 0, 0, t11599, t11170, t11120, t10726, 0, 0, 0, 0, 0, 0, -t10554, -t10559, t11120, t11131, 0, 0, 0, 0, 0, 0, t10534 - 0.2e1 * t11487, t10535 - 0.2e1 * t11350, t10559, t11670, 0, 0, 0, 0, 0, 0, -t11148, -t10891, t11120, t10878, 0, 0, 0, 0, 0, 0, t11171, -t10667, t11120, t10726, 0, 0, 0, 0, 0, 0, t11172, -t10666, t11120, -t10877, 0, 0, 0, 0, 0, 0, t11571, -t10556, t11120, -t10588, 0, 0, 0, 0, 0, 0, t11653, -t10504, t11120, -t10523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t10931, t10930, 0, -g(3), 0, 0, 0, 0, 0, 0, t10640, t10645, 0, t10862, 0, 0, 0, 0, 0, 0, t10538, -t10540, 0, t10595, 0, 0, 0, 0, 0, 0, t10495, t10496, t10540, t10502, 0, 0, 0, 0, 0, 0, t10928, t10927, 0, -g(3), 0, 0, 0, 0, 0, 0, t10644, t10642, 0, t10862, 0, 0, 0, 0, 0, 0, t10643, t10641, 0, -g(3), 0, 0, 0, 0, 0, 0, t10539, t10537, 0, t10622, 0, 0, 0, 0, 0, 0, t10501, t10500, 0, t10536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11119 - t11318, -t11337, -t11369, t10746, 0, 0, 0, 0, 0, 0, t11106 * t10900 + t11438, t10888 * t11106 - t11097 * t10900, -t11369, t10692, 0, 0, 0, 0, 0, 0, t10677 * t11106 + t11097 * t11168, t11629, -t11369, pkin(5) * t11438 + t11015 + (t11106 * t11296 - g(3)) * t11107 + t11441 - t11325, 0, 0, 0, 0, 0, 0, -t11095 * t10598 - t11104 * t11628, -t10598 * t11104 + t11095 * t11628, -t11629, (t10888 * pkin(5) + t10694 * t11105 - t11096 * t11580) * t11097 + (pkin(5) * t10900 + t10694 * t11096 + t11105 * t11580) * t11106 + t10692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10704, -t11164, -t11369, t10692, 0, 0, 0, 0, 0, 0, -t11092 * t10898 + t11439, -t10886 * t11092 - t11101 * t10898, -t11369, t10746, 0, 0, 0, 0, 0, 0, t10676 * t11092 + t10678 * t11101, t10676 * t11101 - t11092 * t10678, -t11369, (t11439 + (-t11064 - t10978) * t11092) * pkin(2) + t10746, 0, 0, 0, 0, 0, 0, t10542 * t11088 - t10543 * t11087, t10542 * t11087 + t10543 * t11088, -t11369, (t10704 * t11088 + t11087 * t11164) * pkin(4) + t10692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11327, -t11041 - t11119, -t11345, t10748, 0, 0, 0, 0, 0, 0, -t11097 * t10903 + t11614, -t11106 * t10903 - t10943 * t11097, -t11345, -t11598, 0, 0, 0, 0, 0, 0, t10701 * t11106 - t11097 * t11165, -t11630, -t11345, (-t11008 * t11339 + t10882) * t11107 + (t10986 + t11614) * pkin(5) + t10966, 0, 0, 0, 0, 0, 0, -t11095 * t10599 - t11104 * t11569, -t10599 * t11104 + t11095 * t11569, t11630, (t10943 * pkin(5) + t10712 * t11096 + t10713 * t11105) * t11106 + (-pkin(5) * t10903 + t10712 * t11105 - t10713 * t11096) * t11097 - t11598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11102 * t10902 + t10945 * t11093, t11093 * t10902 + t10945 * t11102, -t11345, -t11598, 0, 0, 0, 0, 0, 0, -t11101 * t10901 + t11613, t11092 * t10901 + t10944 * t11101, -t11345, t10748, 0, 0, 0, 0, 0, 0, t10700 * t11092 + t11101 * t11166, t10700 * t11101 - t11092 * t11166, -t11345, ((t11064 - t10978) * t11101 + t11613) * pkin(2) + t10748, 0, 0, 0, 0, 0, 0, -t11087 * t10575 + t11088 * t11633, t10575 * t11088 + t11087 * t11633, -t11345, (((t11087 * t11102 - t11093 * t11088) * t11082 + (-t11088 * t11102 - t11411) * t11358) * t11120 - t11656) * pkin(4) - t11598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10892, -t11150, -t11120, t10877, 0, 0, 0, 0, 0, 0, -t11599, -t11170, -t11120, -t10726, 0, 0, 0, 0, 0, 0, t10554, t10559, -t11120, -t11131, 0, 0, 0, 0, 0, 0, t10512, t10511, -t10559, -t11670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11171, t10667, -t11120, -t10726, 0, 0, 0, 0, 0, 0, -t11172, t10666, -t11120, t10877, 0, 0, 0, 0, 0, 0, -t11571, t10556, -t11120, t10588, 0, 0, 0, 0, 0, 0, -t11653, t10504, -t11120, t10523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11063 + t11194, t11123, t10813, t10692 * t11097 + t11106 * t11598, 0, 0, 0, 0, 0, 0, t10647 * t11105 + t11477, t11096 * t11157 + t11347, t10813, (t10720 * t11106 - t11522) * t11107 - t10966 * t11106 + ((t11009 - 0.2e1 * t11536) * t11082 + t11536) * t11120 + t11333, 0, 0, 0, 0, 0, 0, ((-t11116 + t10647) * t11105 + t11149) * t11104 + t11095 * t10706, ((t11116 + t11157) * t11105 - t11149) * t11095 + t10706 * t11104, t10647 * t11096 - t11347, (t10939 * t11560 - 0.2e1 * t10946 * t11371 + t10939 + t11051) * t11041 + (-t10882 * t11106 - t11522 + (pkin(1) * t11106 + 0.2e1 * t10939 * t11371 + t10946 * t11560 + t10946) * t11339) * t11107 + t10939 * t11040 + (t10946 * t11370 - t10966) * t11106 - t11617 + t11582 * t11096 + t11333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11122, -t11063 - t11235, -t11442, t10692 * t11106 - t11662, 0, 0, 0, 0, 0, 0, -t11096 * t11193 + t10631, -t11673, -t11442, t10524, 0, 0, 0, 0, 0, 0, -t11095 * t10705 - t11680 * t11104, -t10705 * t11104 + t11680 * t11095, t11673, (-t10946 * t11082 + t10939 * t11358 + t11531 / 0.2e1 - t11534 / 0.2e1) * t11309 + ((-t10939 * t11097 + t11428 + (t10946 * t11358 + t11082 * t11190) * t11624) * t11120 + t11188) * t11106 + t10946 * t11041 + (-t10939 * t11339 - t10741) * t11107 + t10897 + t11244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11599, -t11170, -t11120, -t10726, 0, 0, 0, 0, 0, 0, t10554, t10559, -t11120, -t11131, 0, 0, 0, 0, 0, 0, t10512, t10511, -t10559, -t11670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11017 - t11158, t10526, -qJDD(1) * (t11096 * t10875 - t11105 * t10876), t10524 * t11096 + t11105 * t11669, 0, 0, 0, 0, 0, 0, (-t11017 + t11136) * t11104 + t10625 * t11095, (t10884 + t11017 + (0.2e1 * t11268 - 0.4e1 * t11489) * qJD(1) + t11658) * t11095 + t10625 * t11104, -t10526, -0.4e1 * (t10845 * t11081 + t10844 * t11371 - t11054 / 0.2e1 - t11298 / 0.2e1) * t11039 + ((t11519 * t11082 - pkin(5) / 0.2e1 + (-pkin(11) - 0.2e1 * t11299) * t11096) * t11310 + (-t11440 + (t11308 * t11054 + (t11097 * t11291 + pkin(1)) * t11358) * t11120 - t10787) * t11106 + t10938 * t11041 - t10858 * t11107 - pkin(11) * t11384 + t11333) * t11105 + (t11011 * t11358 + t11322) * t11309 + ((t10950 - t11524) * t11107 + t11664 + (t11096 * t11428 + (-t11293 - t11059) * t11097) * t11120) * t11106 + (-pkin(11) * t11339 + t10714 * t11096) * t11107 + t11330 * t11096 - t10827 + (-t11039 - t11041) * pkin(9), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11125 + t11019, t10525, -(t10875 * t11105 + t11096 * t10876) * qJDD(1), t11105 * t10524 - t11096 * t11669, 0, 0, 0, 0, 0, 0, t10509 * t11104 - t11486, t10510 * t11095 - t11485, -t10525, (-t10741 * t11107 + (-t11534 * t11540 - t11604) * t11120 + t11330) * t11105 - t11681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10554, t10559, -t11120, -t11131, 0, 0, 0, 0, 0, 0, t10512, t10511, -t10559, -t11670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11685 + t10885 + (0.2e1 * t11203 - t11610) * qJD(1) - t11319, t11359 * t11648 + t10619 + t11243 + t11335, ((0.4e1 * (qJD(1) * t11197 - t11392 / 0.2e1) * t11506 - t11095 * t11391) * t11106 - t11095 * t11254 - (qJD(1) * t11361 + t11095 * t11223) * qJD(1)) * t11107 + (-t11096 * t11224 * qJD(1) - t11095 * t11253 + t11264 * t11549) * t11106 - (qJD(1) * t11387 + t11097 * t11224) * t11506 + t11095 * qJDD(1) * t11260 + (-t11508 * qJD(1) * t11106 - t11107 * t11607 + t11019 + t11595) * t11104, t10499 * t11553 + (((t10950 - t11185) * t11106 - t11144) * t11107 + (((0.2e1 * pkin(11) + 0.4e1 * t11300) * t11080 + t11217) * t11358 - t11570) * t11120 + t11679) * t11104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10625 + t11335, t11203 * t11567 + t11136 + t11154 + t11685, t11095 * t10690 + ((-0.2e1 * (t11095 * t11187 + t11349) * t11506 - qJDD(1) * t11387) * t11106 - t11104 * t11254 + (t11097 * t11265 + t11098 * t11286) * t11566 + t11095 * t11607) * t11107 + t11095 * t10919 + (-t11104 * t11253 - 0.2e1 * t11095 * t11264 + (t11095 * t11508 + t11265 * t11551) * qJD(1)) * t11106 + 0.2e1 * (t11030 * t11258 + t11096 * t11286) * t11506 + qJDD(1) * t11197 - t11095 * t11019, t10499 * t11549 + ((t11106 * t11185 + t11144) * t11107 + ((t11300 * t11542 - t11217 + t11338) * t11358 + t11570) * t11120 - t11679) * t11095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10510 * t11104 + t11486, t10509 * t11095 + t11485, t10525, (-t11025 + t11662 + (pkin(9) * t11285 + t11604) * t11120) * t11105 + t11681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11115 - t11415, -qJDD(6) + t10981, t11352, -t11094 * g(3) + t10883 * t11103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(6) + t10981, -t11027 + t11415, -t11394, -t11103 * g(3) - t10883 * t11094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11148, t10891, -t11120, -t10878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11062 - t11237, t11240 - t11065, -t11445, t10692 * t11102 - t11093 * t11598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11087 * t10565 + t10566 * t11088, t10565 * t11088 + t10566 * t11087, -t11445, (t11024 * t11088 + t11087 * t11358) * t11248 + ((pkin(1) * t11082 + (t11087 * t11558 + t11358 * t11556 - t11087) * t11538) * t11120 + t11188) * t11102 - t11082 * t11297 + (-t11207 - t11400) * t11107 + t10896 - (t11062 * t11088 - t11087 * t11065) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11240 + t11065, t11237 - t10993, -t10812, -t10692 * t11093 - t11102 * t11598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11087 * t10564 + t11088 * t11179, t10564 * t11088 + t11087 * t11179, -t10812, -(t11060 + (t11077 * t11557 + 0.2e1 * t11088 * t11396 + t11087) * pkin(4)) * t11041 + (t10882 * t11102 + t11093 * g(3) + (-pkin(1) * t11102 + (t11077 * t11556 + t11396 * t11557 + t11088) * pkin(4)) * t11339) * t11107 - t11208 + (t11093 * t11297 + t10966) * t11102 - t11401 + (t10993 * t11087 + t11088 * t11065) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11171, t10667, -t11120, -t10726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11653, t10504, -t11120, t10523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11061 - t11239, t11241 - t11064, -t11443, t10749 * t11107 + t11612, 0, 0, 0, 0, 0, 0, t10659 * t11091 + t11100 * t11660, t11100 * t10659 - t11091 * t11660, -t11443, t10563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11156, t11239 - t10992, -t10811, -t11098 * t10749 + t11464, 0, 0, 0, 0, 0, 0, t10646 * t11091 - t11100 * t10660, t10646 * t11100 + t10660 * t11091, -t10811, t11464 + (t11064 + ((-0.2e1 * t11076 + 0.1e1) * t11358 - t11540 * t11355) * t11120) * pkin(2) + t11634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11172, t10666, -t11120, t10877, 0, 0, 0, 0, 0, 0, -t11571, t10556, -t11120, t10588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11436 - t11016 + (-t11126 - 0.1e1) * t11120, t11133 - t11018, (t11091 * t10873 + t10874 * t11100) * qJDD(1), t11091 * t11563 + (-g(3) * t11363 - t10882 * t11354 - t11635) * t11100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11133 + t11018, t11120 * t11126 - t11016 + t11436, -(-t11100 * t10873 + t11091 * t10874) * qJDD(1), t10563 * t11091 + t11100 * t11563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11571, t10556, -t11120, t10588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t11270 + 0.2e1 * t11271 - t11469 - 0.2e1 * t11493) * t11547 - t11661, t11137 - t11013, (-t11087 * t10686 + t10687 * t11088) * qJDD(1), -0.4e1 * (t10764 * t11077 - t10763 * t11396 + t11004 * t11090 + t11252 / 0.2e1) * t11304 + (t10763 * t11195 + (t11089 * t10624 - t11090 * t11641) * t11102 + t11220 * t11090 + t11089 * t10587) * t11088 + t10764 * t11248 + (-t10585 * t11089 - t11090 * t11572) * t11102 - t10580 * t11090 + t11089 * t10584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11137 + t11013, (-0.4e1 * t11270 - 0.8e1 * t11271 + 0.4e1 * t11469 - 0.1e1 + 0.8e1 * t11493) * t11120 + t11657, qJDD(1) * (t10686 * t11088 + t11087 * t10687), 0.4e1 * (t10763 * t11077 + t10764 * t11396 + t11004 * t11089 - t11251 / 0.2e1) * t11304 + (t10764 * t11195 + (t10624 * t11090 + t11089 * t11641) * t11102 - t11220 * t11089 + t10587 * t11090) * t11088 - 0.2e1 * t10763 * t11294 + (-t10585 * t11090 + t11089 * t11572) * t11102 + t10580 * t11089 + t11090 * t10584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11653, t10504, -t11120, t10523;];
f_new_reg = t1;
