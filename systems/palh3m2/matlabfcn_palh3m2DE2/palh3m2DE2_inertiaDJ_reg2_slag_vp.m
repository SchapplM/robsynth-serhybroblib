% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% palh3m2DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [18x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% MMD_reg [((4+1)*4/2)x(4*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-07 04:24
% Revision: 70b73dc947b5bf54b9f851309d04479b7d95fc8d (2020-05-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = palh3m2DE2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(18,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m2DE2_inertiaDJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m2DE2_inertiaDJ_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [18 1]), ...
  'palh3m2DE2_inertiaDJ_reg2_slag_vp: pkin has to be [18x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-07 04:23:01
% EndTime: 2020-05-07 04:23:02
% DurationCPUTime: 1.40s
% Computational Cost: add. (684->143), mult. (1735->306), div. (0->0), fcn. (1387->20), ass. (0->126)
t749 = sin(qJ(2));
t748 = sin(qJ(3));
t754 = cos(qJ(2));
t798 = t754 * t748;
t785 = pkin(4) * t798;
t753 = cos(qJ(3));
t791 = qJD(3) * t753;
t795 = pkin(4) * t749 * t791 + qJD(2) * t785;
t806 = t753 * pkin(4);
t721 = -pkin(1) + t806;
t793 = qJD(2) * t749;
t821 = qJD(3) * t785 + t721 * t793;
t743 = sin(pkin(18));
t745 = cos(pkin(18));
t750 = sin(pkin(15));
t755 = cos(pkin(15));
t694 = t750 * t743 - t755 * t745;
t718 = t754 * pkin(1) + pkin(12);
t760 = t755 * t743 + t750 * t745;
t670 = (t760 * sin(pkin(17)) + t694 * cos(pkin(17))) * pkin(3) + t718;
t797 = t754 * t753;
t800 = t749 * t748;
t759 = -t797 + t800;
t792 = qJD(2) * t754;
t676 = (t759 * qJD(3) + t748 * t793) * pkin(4) - t721 * t792;
t741 = sin(pkin(16));
t742 = cos(pkin(16));
t692 = t741 * t755 + t742 * t750;
t693 = -t741 * t750 + t742 * t755;
t734 = pkin(17) + pkin(18);
t726 = sin(t734);
t727 = cos(t734);
t674 = t727 * t692 + t726 * t693;
t675 = t795 + t821;
t819 = t675 * t674;
t736 = t749 ^ 2;
t738 = t754 ^ 2;
t818 = t736 - t738;
t733 = qJD(2) + qJD(3);
t702 = t750 * pkin(8) + t755 * pkin(10);
t703 = t755 * pkin(8) - t750 * pkin(10);
t817 = (t741 * t702 - t703 * t742) * t727 + (t702 * t742 + t741 * t703) * t726;
t751 = sin(pkin(14));
t756 = cos(pkin(14));
t696 = t750 * t756 - t755 * t751;
t698 = t750 * t751 + t755 * t756;
t762 = -t696 * t749 + t698 * t754;
t678 = t762 * qJD(2);
t814 = 0.2e1 * t678;
t739 = t755 ^ 2;
t812 = -0.2e1 * t739;
t811 = 0.2e1 * qJD(2);
t737 = t753 ^ 2;
t810 = 0.4e1 * t737 - 0.2e1;
t808 = 0.4e1 * t739 - 0.2e1;
t807 = pkin(8) * t739;
t704 = t721 * t754;
t803 = t726 * t692;
t740 = qJ(2) + qJ(3);
t729 = sin(t740);
t706 = t733 * t729;
t730 = cos(t740);
t802 = t733 * t730;
t801 = t741 * t742;
t799 = t749 * t754;
t796 = t755 * t750;
t714 = pkin(4) * t800;
t690 = -t704 + t714;
t747 = sin(qJ(4));
t790 = qJD(4) * t747;
t752 = cos(qJ(4));
t789 = qJD(4) * t752;
t725 = t739 - 0.1e1 / 0.2e1;
t788 = -0.2e1 * pkin(12) * qJD(2);
t787 = pkin(8) * t796;
t786 = pkin(10) * t796;
t724 = t727 ^ 2;
t732 = t742 ^ 2;
t783 = -t739 / 0.2e1 + 0.1e1 / 0.4e1;
t784 = -0.8e1 * qJD(4) * ((t725 * t801 + (t732 - 0.1e1 / 0.2e1) * t796) * t724 - (-t725 * t732 + t796 * t801 - t783) * t726 * t727 - t732 * t796 / 0.2e1 + t783 * t801 + t796 / 0.4e1);
t782 = -pkin(8) + 0.2e1 * t807 - 0.2e1 * t786;
t781 = pkin(1) * t793;
t780 = pkin(1) * t792;
t722 = qJD(3) * t748 * pkin(1);
t687 = pkin(12) + t690;
t779 = (t725 * pkin(10) + t787) * t801;
t778 = t729 * t802;
t774 = t749 * t792;
t773 = -0.2e1 * t781;
t772 = 0.2e1 * t781;
t771 = -0.8e1 * t748 * t797;
t770 = -0.2e1 * t774;
t768 = t796 * t799;
t673 = t674 ^ 2;
t767 = t673 * t747 * t789;
t757 = pkin(4) ^ 2;
t766 = t757 * t748 * t791;
t680 = t733 * t800 - t753 * t792 - t754 * t791;
t697 = t753 * t749 + t798;
t681 = t733 * t697;
t765 = t750 * t680 - t681 * t755;
t764 = -t750 * t697 - t755 * t759;
t763 = t754 * t696 + t749 * t698;
t664 = t675 * (t693 * t727 - t803);
t715 = pkin(4) * t722;
t713 = 0.2e1 * t715;
t758 = ((0.2e1 * t737 - 0.1e1) * t757 + (pkin(1) - 0.2e1 * t806) * pkin(1)) * t770 + (t713 - 0.4e1 * t766) * t738 + 0.2e1 * t766 + 0.2e1 * t821 * (t714 + pkin(12)) + (-0.2e1 * t704 + 0.2e1 * pkin(12)) * t795;
t723 = pkin(1) * t791;
t717 = 0.2e1 * t723;
t716 = 0.2e1 * t722;
t699 = t718 * t773;
t689 = -t749 * t721 - t785;
t679 = t697 * t755 - t750 * t759;
t677 = t763 * qJD(2);
t672 = -t689 * t750 + t690 * t755;
t671 = t689 * t755 + t690 * t750;
t669 = -t680 * t755 - t750 * t681;
t668 = t675 * t750 + t676 * t755;
t667 = t675 * t755 - t676 * t750;
t666 = t687 + t817;
t663 = (t679 * t742 + t741 * t764) * t727 - t726 * (t679 * t741 - t764 * t742);
t662 = (t671 * t742 + t741 * t672) * t727 + t726 * (-t741 * t671 + t672 * t742);
t661 = ((-t808 * pkin(8) + 0.4e1 * t786) * t732 + 0.4e1 * t779 + t782) * t724 + (((t808 * pkin(10) + 0.4e1 * t787) * t732 + 0.4e1 * (t725 * pkin(8) - t786) * t801 + pkin(10) * t812 - 0.2e1 * t787 + pkin(10)) * t726 + t687 * t693) * t727 - t687 * t803 + t782 * t732 - 0.2e1 * t779 - t807 + t786;
t660 = (t669 * t742 + t741 * t765) * t727 - t726 * (t669 * t741 - t765 * t742);
t659 = (t741 * t667 + t668 * t742) * t727 + t726 * (t667 * t742 - t741 * t668);
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t774, -t818 * t811, 0, t770, 0, 0, t749 * t788, t754 * t788, 0, 0, -0.2e1 * t697 * t680, (t810 * t738 + (-t810 * t749 + t771) * t749) * qJD(2) + (t749 * t771 + (-t748 ^ 2 + t737) * (0.4e1 * t738 - 0.2e1)) * qJD(3), 0, 0.2e1 * t759 * t681, 0, 0, 0.2e1 * t718 * t681 - 0.2e1 * t759 * t781, -0.2e1 * t718 * t680 - 0.2e1 * t697 * t781, 0, t699, 0, 0, 0, 0, 0, 0, -0.2e1 * t664, -0.2e1 * t819, 0, t758, -0.2e1 * t767, 0.2e1 * (t747 ^ 2 - t752 ^ 2) * t673 * qJD(4), t747 * t784, 0.2e1 * t767, t752 * t784, 0, 0.2e1 * t661 * t790 - 0.2e1 * t752 * t664, 0.2e1 * t661 * t789 + 0.2e1 * t747 * t664, 0.2e1 * t819, 0.2e1 * t675 * t817 + t758, t763 * t814, (0.8e1 * t768 + (-0.8e1 * ((t812 + 0.1e1) * t799 + t818 * t796) * t751 + 0.4e1 * (t736 * t812 + 0.2e1 * t738 * t739 - 0.4e1 * t768 + t818) * t756) * t756 + t818 * t808) * qJD(2), 0, -0.2e1 * t762 * t677, 0, 0, t763 * pkin(6) * t811, pkin(6) * t814, 0, 0, 0, 0, 0, 0, 0, 0, t694 * t773, t760 * t772, 0, t699, 0.2e1 * t778, 0.2e1 * (-t729 ^ 2 + t730 ^ 2) * t733, 0, -0.2e1 * t778, 0, 0, 0.2e1 * t670 * t706 + 0.2e1 * t730 * t781, 0.2e1 * t670 * t802 - 0.2e1 * t729 * t781, 0, -t670 * t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t792, 0, -t793, 0, 0, 0, 0, 0, 0, 0, t680, 0, t681, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t676, 0, 0, 0, 0, 0, 0, 0, -t747 * t676 - t689 * t789, -t752 * t676 + t689 * t790, 0, 0, 0, 0, t678, 0, -t677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, -t802, 0, t706, 0, 0, 0, -t780, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t716, t717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t713, 0, 0, 0, 0, 0, 0, 0, 0, 0, t713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t716, t717, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t680, 0, t681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -pkin(4) * t680, 0, 0, 0, 0, 0, 0, 0, (-t680 * t747 + t697 * t789) * pkin(4), (-t680 * t752 - t697 * t790) * pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t802, 0, t706, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t722, t723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t715, 0, 0, 0, 0, 0, 0, 0, 0, 0, t715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t722, t723, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t674 * t790, 0, -t674 * t789, 0, t666 * t790 - t675 * t752, t666 * t789 + t747 * t675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t659 * t747 - t662 * t789, -t659 * t752 + t662 * t790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t660 * t747 + t663 * t789) * pkin(4), (t660 * t752 - t663 * t790) * pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t1;
