% Calculate inertial parameters regressor of joint inertia matrix for
% palh3m2DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% pkin [18x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% MM_reg [((4+1)*4/2)x(4*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-07 04:24
% Revision: 70b73dc947b5bf54b9f851309d04479b7d95fc8d (2020-05-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = palh3m2DE2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(18,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m2DE2_inertiaJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [18 1]), ...
  'palh3m2DE2_inertiaJ_reg2_slag_vp: pkin has to be [18x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t404 = cos(pkin(16));
t396 = t404 ^ 2;
t421 = pkin(10) ^ 2;
t422 = pkin(8) ^ 2;
t395 = -t421 + t422;
t417 = cos(pkin(15));
t401 = t417 ^ 2;
t370 = t395 * t401;
t412 = sin(pkin(15));
t451 = t417 * t412;
t446 = pkin(10) * t451;
t436 = pkin(8) * t446;
t484 = -0.4e1 * t436 + 0.2e1 * t370 - t395;
t486 = t484 * t396;
t441 = t396 * t451;
t485 = -0.4e1 * t441 + 0.2e1 * t451;
t482 = 2 * pkin(6);
t481 = 2 * pkin(12);
t415 = cos(qJ(3));
t379 = t415 * pkin(4) - pkin(1);
t416 = cos(qJ(2));
t362 = t379 * t416;
t410 = sin(qJ(3));
t411 = sin(qJ(2));
t456 = t411 * t410;
t371 = pkin(4) * t456;
t344 = -t362 + t371;
t342 = pkin(12) + t344;
t480 = -0.2e1 * t342;
t479 = 0.2e1 * t342;
t377 = t416 * pkin(1) + pkin(12);
t478 = -0.2e1 * t377;
t477 = 0.2e1 * t377;
t402 = qJ(2) + qJ(3);
t392 = sin(t402);
t476 = 0.2e1 * t392;
t414 = cos(qJ(4));
t475 = -0.2e1 * t414;
t474 = -t401 / 0.2e1;
t400 = t416 ^ 2;
t473 = 0.4e1 * t400 - 0.2e1;
t472 = -0.2e1 * t401 + 0.1e1;
t471 = 0.4e1 * t401 - 0.2e1;
t470 = 0.8e1 * t401 - 0.4e1;
t469 = pkin(1) * t411;
t463 = t415 * pkin(1);
t468 = pkin(4) * (-pkin(4) + t463);
t409 = sin(qJ(4));
t467 = pkin(4) * t409;
t466 = pkin(4) * t414;
t465 = pkin(8) * t401;
t464 = pkin(10) * t401;
t403 = sin(pkin(16));
t349 = -t403 * t417 - t404 * t412;
t397 = pkin(17) + pkin(18);
t384 = sin(t397);
t462 = t349 * t384;
t385 = cos(t397);
t461 = t384 * t385;
t399 = t415 ^ 2;
t423 = pkin(4) ^ 2;
t460 = t399 * t423;
t459 = t403 * t404;
t405 = sin(pkin(18));
t407 = cos(pkin(18));
t458 = t405 * t407;
t406 = sin(pkin(17));
t457 = t406 * t377;
t455 = t411 * t416;
t454 = t412 * t407;
t453 = t416 * t410;
t452 = t417 * t405;
t450 = -0.2e1 * t436 + t370;
t387 = -0.2e1 * t463;
t425 = pkin(1) ^ 2;
t449 = pkin(4) * t387 + t425;
t383 = t401 - 0.1e1 / 0.2e1;
t448 = t384 * t479;
t447 = pkin(8) * t451;
t445 = pkin(3) * t452;
t444 = -pkin(8) + 0.2e1 * t465 - 0.2e1 * t446;
t437 = t383 * pkin(10);
t438 = t422 / 0.2e1 - t421 / 0.2e1;
t443 = (pkin(8) * t437 + t438 * t451) * t459;
t442 = (t437 + t447) * t459;
t440 = (t383 * pkin(8) - t446) * t459;
t439 = 0.4e1 * t464 + 0.4e1 * t447 - 0.2e1 * pkin(10);
t350 = -t403 * t412 + t404 * t417;
t435 = t350 * t385 + t462;
t434 = t439 * t396 + 0.4e1 * t440 - 0.2e1 * t447 - 0.2e1 * t464;
t354 = t416 * t415 - t456;
t356 = t415 * t411 + t453;
t432 = t354 * t417 - t412 * t356;
t413 = sin(pkin(14));
t418 = cos(pkin(14));
t355 = t412 * t418 - t417 * t413;
t358 = t412 * t413 + t417 * t418;
t431 = t411 * t355 - t358 * t416;
t359 = t412 * pkin(8) + t417 * pkin(10);
t360 = t417 * pkin(8) - t412 * pkin(10);
t430 = t403 * t359 - t360 * t404;
t352 = t452 + t454;
t351 = t412 * t405 - t417 * t407;
t429 = pkin(4) * t453 + t379 * t411;
t428 = (-t470 * t396 + t471) * t384 * pkin(8);
t419 = pkin(12) ^ 2;
t427 = -0.2e1 * (t371 + pkin(12)) * t362 + (-t423 + t449 + 0.2e1 * t460) * t400 + t371 * t481 + t419 + t423 - t460;
t426 = -0.1e1 / 0.4e1 + t451 * t459 - t383 * t396;
t408 = cos(pkin(17));
t398 = t407 ^ 2;
t394 = t410 * pkin(1);
t393 = cos(t402);
t391 = t401 / 0.2e1;
t386 = 0.2e1 * t394;
t382 = t385 ^ 2;
t373 = t377 ^ 2;
t372 = 0.2e1 * t455;
t363 = t423 + t449;
t337 = t359 * t404 + t403 * t360;
t336 = t412 * t354 + t356 * t417;
t334 = t416 * t355 + t411 * t358;
t333 = -t385 * t349 + t384 * t350;
t331 = t333 ^ 2;
t330 = t435 ^ 2;
t329 = t344 * t417 + t412 * t429;
t328 = t344 * t412 - t417 * t429;
t327 = (t351 * t408 + t352 * t406) * pkin(3) + t377;
t326 = t337 * t384 + t430 * t385 + t342;
t325 = (t383 * t459 + (t396 - 0.1e1 / 0.2e1) * t451) * t382 - (t391 + t426) * t461 - t441 / 0.2e1 + (t474 + 0.1e1 / 0.4e1) * t459 + t451 / 0.4e1;
t324 = (t336 * t404 + t403 * t432) * t385 - t384 * (t336 * t403 - t432 * t404);
t323 = (t328 * t404 + t403 * t329) * t385 + t384 * (-t403 * t328 + t329 * t404);
t322 = ((-t471 * pkin(8) + 0.4e1 * t446) * t396 + 0.4e1 * t442 + t444) * t382 + ((pkin(10) + t434) * t384 + t342 * t350) * t385 + t342 * t462 + t444 * t396 - 0.2e1 * t442 - t465 + t446;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t411 ^ 2, t372, 0, t400, 0, 0, t416 * t481, -0.2e1 * pkin(12) * t411, 0, t419, t356 ^ 2, (0.4e1 * t399 - 0.2e1) * t455 + t473 * t415 * t410, 0, t354 ^ 2, 0, 0, t354 * t478, t356 * t477, 0, t373, t331, ((-0.8e1 * t396 + 0.4e1) * t451 - t470 * t459) * t382 - 0.8e1 * (t474 - t426) * t461 + t471 * t459 - t485, 0, t330, 0, 0, -t435 * t479, t333 * t480, 0, t427, t331 * t414 ^ 2, t331 * t409 * t475, 0.8e1 * t414 * t325, t331 * t409 ^ 2, -0.8e1 * t409 * t325, t330, t322 * t475, 0.2e1 * t409 * t322, ((-t470 * pkin(10) - 0.8e1 * t447) * t396 - 0.8e1 * t440 + t439) * t382 + ((0.8e1 * pkin(10) * t441 + 0.8e1 * t442 - 0.4e1 * t446) * t384 + t349 * t480 + t428) * t385 + t350 * t448 + 0.2e1 * pkin(10) + t434, (-0.8e1 * t443 - t484 + 0.2e1 * t486) * t382 + ((-0.4e1 * (-t438 + t450) * t459 + t485 * t395) * t384 + t430 * t479 + pkin(10) * t428) * t385 + t337 * t448 - t486 + 0.4e1 * t443 + t421 + t427 + t450, t334 ^ 2, -0.4e1 * t401 * t455 - t473 * t451 + t372 + (-0.8e1 * ((t400 - 0.1e1 / 0.2e1) * t401 - t451 * t455 - t400 / 0.2e1 + 0.1e1 / 0.4e1) * t413 + ((0.8e1 * t400 - 0.4e1) * t451 + t470 * t455) * t418) * t418, 0, t431 ^ 2, 0, 0, t431 * t482, t334 * t482, 0, pkin(6) ^ 2, t352 ^ 2, (-0.4e1 * t398 + 0.2e1) * t451 - t471 * t458, 0, t351 ^ 2, 0, 0, t351 * t477, t352 * t478, 0, t373, t392 ^ 2, t393 * t476, 0, t393 ^ 2, 0, 0, -0.2e1 * t327 * t393, t327 * t476, 0, 0.2e1 * t445 * t457 + t373 + 0.2e1 * ((t377 * t351 + (t472 * t458 + (-0.2e1 * t398 + 0.1e1) * t451) * t406 * pkin(3)) * t408 + (t445 + t457) * t454) * pkin(3) + (-0.4e1 * (-t383 * t398 + t451 * t458 + t391 - 0.1e1 / 0.4e1) * t408 ^ 2 + t472 * t398 + t401) * pkin(3) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t411, 0, t416, 0, 0, 0, 0, 0, 0, 0, -t356, 0, -t354, 0, 0, 0, -t469, 0, 0, 0, 0, 0, 0, 0, 0, 0, t429, 0, 0, 0, 0, 0, 0, 0, t409 * t429, t414 * t429, 0, 0, 0, 0, t334, 0, -t431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t469, 0, 0, 0, -t392, 0, -t393, 0, 0, 0, -t469, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t387, t386, 0, t425, 0, 0, 0, 0, 0, 0, 0, 0, 0, t363, 0, 0, 0, 0, 0, 0, 0, 0, 0, t363, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t425, 0, 0, 0, 0, 0, 1, t387, t386, 0, t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, 0, -t354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, pkin(4) * t356, 0, 0, 0, 0, 0, 0, 0, t356 * t467, t356 * t466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t392, 0, -t393, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t463, t394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t468, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t463, t394, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t423, 0, 0, 0, 0, 0, 0, 0, 0, 0, t423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t333 * t414, 0, -t333 * t409, t435, -t326 * t414, t409 * t326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323 * t409, -t323 * t414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t324 * t467, t324 * t466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MM_reg = t1;
