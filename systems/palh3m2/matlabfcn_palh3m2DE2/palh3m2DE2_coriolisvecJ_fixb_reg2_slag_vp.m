% Calculate inertial parameters regressor of coriolis joint torque vector for
% palh3m2DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [18x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% tauc_reg [4x(4*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-07 04:24
% Revision: 70b73dc947b5bf54b9f851309d04479b7d95fc8d (2020-05-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = palh3m2DE2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(18,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m2DE2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m2DE2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [18 1]), ...
  'palh3m2DE2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [18x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-07 04:23:02
% EndTime: 2020-05-07 04:23:06
% DurationCPUTime: 3.26s
% Computational Cost: add. (1780->229), mult. (4391->472), div. (0->0), fcn. (3911->20), ass. (0->231)
t983 = sin(pkin(15));
t988 = cos(pkin(15));
t930 = pkin(8) * t983 + pkin(10) * t988;
t931 = pkin(8) * t988 - pkin(10) * t983;
t975 = sin(pkin(16));
t976 = cos(pkin(16));
t893 = -t930 * t975 + t931 * t976;
t965 = pkin(17) + pkin(18);
t958 = cos(t965);
t1153 = t893 * t958;
t984 = sin(pkin(14));
t989 = cos(pkin(14));
t922 = t983 * t989 - t988 * t984;
t1086 = t988 * t989;
t1091 = t983 * t984;
t924 = t1086 + t1091;
t982 = sin(qJ(2));
t987 = cos(qJ(2));
t1014 = -t922 * t987 - t924 * t982;
t884 = -t922 * t982 + t924 * t987;
t1152 = t1014 * t884;
t1098 = t976 * t983;
t1099 = t975 * t988;
t916 = t1098 + t1099;
t957 = sin(t965);
t1108 = t916 * t957;
t917 = -t975 * t983 + t976 * t988;
t1017 = -t917 * t958 + t1108;
t992 = qJD(1) ^ 2;
t1143 = t1017 * t992;
t986 = cos(qJ(3));
t1094 = t982 * t986;
t981 = sin(qJ(3));
t1096 = t981 * t987;
t923 = t1094 + t1096;
t911 = t923 * pkin(4);
t1150 = t1143 * t911;
t1066 = (qJD(1) * qJD(2));
t1049 = 2 * t1066;
t1149 = t1049 * t1152;
t1016 = t916 * t986 + t981 * t917;
t1145 = 2 * qJD(1);
t1120 = pkin(4) * qJD(3);
t1050 = t987 * t1120;
t1072 = qJD(2) * t982;
t1060 = pkin(4) * t1094;
t1061 = pkin(4) * t1096;
t939 = qJD(2) * t1061;
t902 = qJD(3) * t1060 + t939;
t1122 = pkin(4) * t986;
t951 = -pkin(1) + t1122;
t869 = t981 * t1050 + t951 * t1072 + t902;
t904 = t951 * t982 + t1061;
t878 = qJD(2) * t904 + t923 * t1120;
t1148 = t878 * qJD(4) + (t1017 * t1145 - qJD(4)) * t869;
t993 = pkin(4) ^ 2;
t1089 = t986 * t993;
t971 = t987 ^ 2;
t1101 = t971 * t981;
t1131 = 0.2e1 * pkin(4);
t1146 = 2 * pkin(12);
t1095 = t982 * t981;
t946 = pkin(4) * t1095;
t935 = t946 + pkin(12);
t1147 = 0.2e1 * t935 * t1061 + (pkin(1) * t1131 - 0.4e1 * t1089) * t1101 + t1060 * t1146 + 0.2e1 * t981 * t1089;
t1104 = t957 * t917;
t1039 = t1104 / 0.4e1;
t1103 = t958 * t916;
t1007 = t1103 / 0.4e1 + t1039;
t1144 = -0.4e1 * t1007;
t1015 = t916 * t981 - t917 * t986;
t872 = t1015 * pkin(4);
t1090 = t986 * t987;
t921 = t1090 - t1095;
t964 = qJD(2) + qJD(3);
t887 = t921 * t964;
t888 = t923 * t964;
t841 = t1015 * t982 - t1016 * t987;
t842 = -t1015 * t987 - t1016 * t982;
t990 = qJD(4) ^ 2;
t1142 = (t841 * t958 - t842 * t957) * t990;
t873 = t1016 * pkin(4);
t851 = -pkin(1) * t916 + t873;
t852 = pkin(1) * t917 + t872;
t838 = -t982 * t851 - t852 * t987;
t839 = t851 * t987 - t852 * t982;
t1141 = (t838 * t957 + t839 * t958) * t990;
t972 = t988 ^ 2;
t1139 = 0.1e1 / 0.4e1 - t972 / 0.2e1;
t1065 = qJD(1) * qJD(4);
t1037 = t893 * t1065;
t1105 = t951 * t987;
t1032 = -t946 + t1105;
t897 = pkin(12) - t1032;
t1111 = t897 * t917;
t1100 = t975 * t976;
t1087 = t988 * t983;
t954 = t972 - 0.1e1 / 0.2e1;
t914 = pkin(8) * t1087 + t954 * pkin(10);
t1059 = pkin(10) * t1087;
t915 = t954 * pkin(8) - t1059;
t943 = -t1087 / 0.2e1;
t963 = t976 ^ 2;
t1117 = (pkin(8) * t943 + pkin(10) * t1139 + t915 * t1100 + t914 * t963) * t957;
t1073 = qJD(2) * t838;
t866 = t1015 * qJD(3);
t859 = pkin(4) * t866;
t860 = t1016 * t1120;
t824 = -t859 * t987 - t860 * t982 + t1073;
t867 = t1016 * qJD(3);
t834 = t842 * qJD(2) - t866 * t987 - t867 * t982;
t1138 = qJD(2) * t824 + t834 * t1120 + t1037 - (t1111 + 0.4e1 * t1117) * t992;
t1093 = t982 * t987;
t1064 = -0.2e1 * t1093;
t925 = t981 * t986 * t1064;
t970 = t986 ^ 2;
t1137 = t925 + (-t981 ^ 2 + t970) * (t971 - 0.1e1 / 0.2e1);
t1078 = t982 ^ 2 - t971;
t1136 = t925 - t1078 * (t970 - 0.1e1 / 0.2e1);
t1001 = qJD(2) * t1105 + t986 * t1050 - t964 * t946;
t910 = t921 * t1120;
t1135 = (-t1032 * qJD(2) + t1001 - t910) * qJD(1);
t1134 = qJD(2) * t1001 + t887 * t1120;
t1024 = -t914 * t1100 + t915 * t963;
t952 = t958 ^ 2;
t1116 = (t1059 / 0.2e1 + t1139 * pkin(8) + t1024) * t952;
t837 = t839 * qJD(2);
t825 = -t859 * t982 + t860 * t987 + t837;
t835 = t841 * qJD(2) + t866 * t982 - t867 * t987;
t1132 = 0.4e1 * t992 * t1116 + (t897 * t916 * t992 - qJD(2) * t825 + t835 * t1120) * t957;
t1130 = -0.2e1 * t992;
t1129 = -2 * qJD(1);
t1127 = 4 * qJD(1);
t1126 = -t878 / 0.2e1;
t1125 = pkin(1) * t981;
t1124 = pkin(1) * t982;
t1123 = pkin(1) * t987;
t1121 = pkin(1) * qJD(3);
t1119 = pkin(6) * t992;
t1118 = pkin(6) * qJD(1);
t977 = sin(pkin(18));
t979 = cos(pkin(18));
t919 = t977 * t988 + t979 * t983;
t920 = -t977 * t983 + t979 * t988;
t858 = -pkin(12) + (cos(pkin(17)) * t920 - sin(pkin(17)) * t919) * pkin(3);
t855 = t858 - t1123;
t1115 = t855 * t964;
t861 = t1103 + t1104;
t857 = t861 ^ 2;
t1114 = t857 * t992;
t1110 = t904 * t992;
t1109 = t911 * t992;
t948 = pkin(12) + t1123;
t1106 = t948 * t992;
t974 = qJ(2) + qJ(3);
t961 = cos(t974);
t1102 = t961 * t992;
t1092 = t982 * t992;
t1088 = t987 * t992;
t991 = qJD(2) ^ 2;
t1085 = t991 * t987;
t1053 = t964 * t1121;
t1047 = qJD(2) * t1121;
t944 = t986 * t1047;
t1083 = t986 * t1053 + t944;
t945 = t981 * t1047;
t1082 = t981 * t1053 + t945;
t1081 = qJD(3) ^ 2 * pkin(4) * t1125 + t945 * t1131;
t960 = sin(t974);
t1080 = t960 ^ 2 - t961 ^ 2;
t980 = sin(qJ(4));
t985 = cos(qJ(4));
t1079 = t980 ^ 2 - t985 ^ 2;
t1077 = qJD(1) * t869;
t1076 = qJD(1) * t964;
t1075 = qJD(1) * t980;
t1074 = qJD(1) * t985;
t875 = qJD(2) * t884;
t1062 = pkin(1) * t1092;
t1058 = pkin(1) * t1085;
t1057 = -0.2e1 * t1077;
t1055 = pkin(1) * qJD(2) * t964;
t1054 = pkin(1) * t1072;
t1052 = t841 * t1120;
t1051 = t842 * t1120;
t1048 = 0.2e1 * t1065;
t1046 = t992 * t1152;
t1045 = (-t1087 * t1100 + t954 * t963 + t1139) * t957 * t958;
t994 = pkin(1) ^ 2;
t1043 = (-0.2e1 * pkin(1) * t1122 + 0.2e1 * t970 * t993 - t993 + t994) * t1093;
t1042 = t954 * t1100;
t1041 = t982 * t1088;
t1040 = t992 * t923 * t921;
t1038 = t982 * t1066;
t1035 = t980 * t1065;
t1031 = -2 * pkin(12) * t1066;
t1030 = pkin(1) * t1038;
t1029 = t985 * t980 * t1114;
t1028 = t960 * t961 * t1076;
t1027 = t987 * t1038;
t1025 = 0.2e1 * t1030;
t1022 = -((-t872 * t987 - t873 * t982) * qJD(2) + t1051) * t958 + ((-t872 * t982 + t873 * t987) * qJD(2) - t1052) * t957;
t1021 = t834 * t958 + t835 * t957;
t1018 = (t930 * t976 + t931 * t975) * t957 - t1153;
t1013 = t857 * t985 * t1035;
t1012 = -t986 * t1055 + t944;
t1011 = -t981 * t1055 + t945;
t890 = t963 * t1087 + t1042 + t943;
t836 = t1007 * qJD(4) + (t1045 + (t952 - 0.1e1 / 0.2e1) * t890) * qJD(1);
t1010 = (-qJD(4) * ((t1098 / 0.4e1 + t1099 / 0.4e1) * t958 + t1039) + t836) * t1127;
t1009 = 0.4e1 * qJD(4) * (-qJD(1) * (t890 * t952 + t1045 - t1042 / 0.2e1 + (-t963 / 0.2e1 + 0.1e1 / 0.4e1) * t1087) - t836);
t850 = -t988 * t931 / 0.2e1 + t1024;
t1008 = t850 * qJD(1) + t897 * qJD(4) / 0.2e1;
t1006 = (pkin(1) * t858 - t987 * t994) * t982;
t874 = t1014 * qJD(2);
t973 = t989 ^ 2;
t1003 = (-t954 * t984 * t989 + t973 * t1087 + t943) * t1064 - t1078 * (t1086 * t1091 + t954 * t973 + t1139);
t999 = -t1043 + pkin(12) * t1061 + (-pkin(4) * t1101 + t935 * t982) * t951;
t998 = t1135 + ((t824 - t1051 - t1073) * t958 + (-t825 + t837 - t1052) * t957) * qJD(4);
t997 = -0.2e1 * qJD(2) * t1043 + t939 * t1146 + 0.2e1 * (t935 * t1072 - t902 * t987) * t951 + t1147 * qJD(3);
t996 = -t1147 * t992 / 0.2e1 + (t951 * t986 * t1041 - t991 * t1125) * pkin(4);
t995 = (t1018 + t897) * t990 + (-0.8e1 * t1116 + (0.2e1 * t1111 + 0.8e1 * t1117) * t958 - 0.2e1 * t897 * t1108 + 0.4e1 * t850) * t1065 + t1134;
t962 = t964 ^ 2;
t927 = t960 * t1102;
t926 = t948 * t1062;
t913 = -0.2e1 * t948 * t1030;
t912 = t1080 * t992;
t883 = (pkin(4) * t1090 - t946) * qJD(2) + t910;
t854 = t855 * t1102;
t853 = t855 * t992 * t960;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t1027, -t1078 * t1049, t1085, -0.2e1 * t1027, -t991 * t982, 0, t982 * t1031, t987 * t1031, 0, 0, t923 * t887 * t1145, (t1136 * qJD(2) + t1137 * qJD(3)) * t1127, -t964 * t887, t921 * t888 * t1129, t964 * t888, 0, (t1054 * t921 + t888 * t948) * t1145, (-t1054 * t923 + t887 * t948) * t1145, -t1058, t913, 0, 0, 0, 0, 0, 0, -t1017 * t1057, t861 * t1057, t1134, t997 * qJD(1), -0.2e1 * t1013, t1079 * t857 * t1048, t980 * t1009, 0.2e1 * t1013, t985 * t1009, 0, t1148 * t985 + t995 * t980, -t1148 * t980 + t995 * t985, 0.8e1 * t1007 * t1077, (0.2e1 * t1018 * t869 + t997) * qJD(1), -t1149, 0.8e1 * t1003 * t1066, qJD(2) * t875, t1149, t874 * qJD(2), 0, -0.2e1 * t874 * t1118, 0.2e1 * t875 * t1118, 0, 0, 0, 0, 0, 0, 0, 0, t920 * t1025, t919 * t1025, -t1058, t913, 0.2e1 * t1028, -0.2e1 * t1080 * t1076, -t962 * t961, -0.2e1 * t1028, t962 * t960, 0, (t1054 * t961 - t960 * t1115) * t1145, (-t1054 * t960 - t961 * t1115) * t1145, -t1058, t1006 * t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1041, t1078 * t992, 0, t1041, 0, 0, pkin(12) * t1092, pkin(12) * t1088, 0, 0, -t1040, t1136 * t1130, 0, t1040, 0, 0, (-t921 * t1124 - t923 * t948) * t992 + t1082, (t923 * t1124 - t921 * t948) * t992 + t1083, 0, t926, 0, 0, 0, 0, 0, 0, -t1017 * t1110, t861 * t1110, t1135, -t992 * t999 + t1081, 0, 0, 0, 0, 0, 0, (t1141 + (-t1143 + t1048) * t904) * t985 + t998 * t980, (-t1141 + (t1143 - 0.2e1 * t1065) * t904) * t980 + t998 * t985, t1110 * t1144, (-t1018 * t904 - t999) * t992 + t1081, t1046, -0.4e1 * t1003 * t992, 0, -t1046, 0, 0, t1014 * t1119, -t884 * t1119, 0, 0, 0, 0, 0, 0, 0, 0, -t920 * t1062, -t919 * t1062, 0, t926, -t927, t912, 0, t927, 0, 0, -t1062 * t961 + t1082 + t853, t1062 * t960 + t1083 + t854, 0, -t992 * t1006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1040, t1137 * t1130, 0, t1040, 0, 0, -t923 * t1106 + t1011, -t921 * t1106 + t1012, 0, 0, 0, 0, 0, 0, 0, 0, -t1017 * t1109, t861 * t1109, (pkin(4) * t887 - t883) * qJD(1), t996, 0, 0, 0, 0, 0, 0, -t883 * t1075 - t985 * t1150 + (t1022 * t980 + t1074 * t911) * qJD(4) + (t887 * t1075 - t985 * t1142 + (t1021 * t980 + t1074 * t923) * qJD(4)) * pkin(4), -t883 * t1074 + t980 * t1150 + (t1022 * t985 - t1075 * t911) * qJD(4) + (t887 * t1074 + t980 * t1142 + (t1021 * t985 - t1075 * t923) * qJD(4)) * pkin(4), t1109 * t1144, -t1018 * t1109 + t996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t927, t912, 0, t927, 0, 0, t1011 + t853, t1012 + t854, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, -t1079 * t1114, t980 * t1010, -t1029, t985 * t1010, 0, t985 * t1126 * t1145 + t897 * t1035 - t869 * t1074 + (-t1008 * t1145 + (-t1037 + t1138) * t958 + t1132) * t980, -t1074 * qJD(4) * t1153 + t980 * t1126 * t1129 + t869 * t1075 + (t1008 * t1129 + t897 * t1065 + t1138 * t958 + t1132) * t985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
tauc_reg = t1;
