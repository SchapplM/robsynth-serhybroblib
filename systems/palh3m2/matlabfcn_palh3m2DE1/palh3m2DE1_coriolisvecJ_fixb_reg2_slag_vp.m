% Calculate inertial parameters regressor of coriolis joint torque vector for
% palh3m2DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [18x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% tauc_reg [4x(4*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-07 02:05
% Revision: 70b73dc947b5bf54b9f851309d04479b7d95fc8d (2020-05-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = palh3m2DE1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(18,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m2DE1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m2DE1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [18 1]), ...
  'palh3m2DE1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [18x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-07 02:03:56
% EndTime: 2020-05-07 02:03:59
% DurationCPUTime: 3.15s
% Computational Cost: add. (1780->228), mult. (4391->470), div. (0->0), fcn. (3911->20), ass. (0->230)
t811 = sin(pkin(15));
t812 = sin(pkin(14));
t816 = cos(pkin(15));
t817 = cos(pkin(14));
t751 = t817 * t811 - t812 * t816;
t914 = t817 * t816;
t920 = t812 * t811;
t752 = t914 + t920;
t810 = sin(qJ(2));
t815 = cos(qJ(2));
t712 = -t810 * t751 + t752 * t815;
t842 = -t815 * t751 - t810 * t752;
t982 = t712 * t842;
t758 = t811 * pkin(8) + t816 * pkin(10);
t759 = t816 * pkin(8) - t811 * pkin(10);
t803 = sin(pkin(16));
t804 = cos(pkin(16));
t721 = -t803 * t758 + t759 * t804;
t793 = pkin(17) + pkin(18);
t786 = cos(t793);
t981 = t721 * t786;
t894 = (qJD(1) * qJD(2));
t878 = 2 * t894;
t980 = t878 * t982;
t814 = cos(qJ(3));
t919 = t814 * t810;
t809 = sin(qJ(3));
t923 = t809 * t815;
t750 = t919 + t923;
t739 = t750 * pkin(4);
t820 = qJD(1) ^ 2;
t745 = -t803 * t811 + t804 * t816;
t926 = t804 * t811;
t927 = t803 * t816;
t744 = t926 + t927;
t785 = sin(t793);
t933 = t785 * t744;
t845 = -t745 * t786 + t933;
t968 = t845 * t820;
t979 = t739 * t968;
t808 = sin(qJ(4));
t813 = cos(qJ(4));
t978 = t808 * t813;
t843 = t809 * t744 - t745 * t814;
t844 = t744 * t814 + t809 * t745;
t847 = t810 * t843 - t815 * t844;
t947 = pkin(4) * qJD(3);
t976 = t847 * t947;
t886 = pkin(4) * t923;
t767 = qJD(2) * t886;
t888 = pkin(4) * t919;
t730 = qJD(3) * t888 + t767;
t949 = pkin(4) * t814;
t779 = -pkin(1) + t949;
t880 = t815 * t947;
t901 = qJD(2) * t810;
t698 = t779 * t901 + t809 * t880 + t730;
t732 = t779 * t810 + t886;
t706 = t732 * qJD(2) + t750 * t947;
t971 = 2 * qJD(1);
t975 = qJD(4) * t706 + t698 * (t845 * t971 - qJD(4));
t924 = t809 * t810;
t774 = pkin(4) * t924;
t763 = t774 + pkin(12);
t821 = pkin(4) ^ 2;
t917 = t814 * t821;
t799 = t815 ^ 2;
t929 = t799 * t809;
t957 = 0.2e1 * pkin(4);
t973 = 0.2e1 * pkin(12);
t974 = 0.2e1 * t763 * t886 + (pkin(1) * t957 - 0.4e1 * t917) * t929 + t888 * t973 + 0.2e1 * t809 * t917;
t932 = t785 * t745;
t868 = t932 / 0.4e1;
t931 = t786 * t744;
t835 = t931 / 0.4e1 + t868;
t972 = -0.4e1 * t835;
t700 = t843 * pkin(4);
t918 = t814 * t815;
t749 = -t918 + t924;
t792 = qJD(2) + qJD(3);
t969 = t749 * t792;
t715 = t750 * t792;
t672 = -t810 * t844 - t815 * t843;
t818 = qJD(4) ^ 2;
t967 = (t672 * t785 - t786 * t847) * t818;
t701 = t844 * pkin(4);
t681 = -pkin(1) * t744 + t701;
t682 = pkin(1) * t745 + t700;
t668 = -t810 * t681 - t682 * t815;
t669 = t681 * t815 - t810 * t682;
t966 = (t668 * t785 + t669 * t786) * t818;
t694 = t843 * qJD(3);
t689 = pkin(4) * t694;
t690 = t844 * t947;
t897 = t668 * qJD(2);
t654 = -t689 * t815 - t810 * t690 + t897;
t695 = t844 * qJD(3);
t664 = t672 * qJD(2) - t694 * t815 - t695 * t810;
t893 = qJD(1) * qJD(4);
t866 = t721 * t893;
t934 = t779 * t815;
t861 = -t774 + t934;
t725 = pkin(12) - t861;
t939 = t725 * t745;
t800 = t816 ^ 2;
t782 = t800 - 0.1e1 / 0.2e1;
t915 = t816 * t811;
t742 = pkin(8) * t915 + pkin(10) * t782;
t887 = pkin(10) * t915;
t743 = pkin(8) * t782 - t887;
t771 = -t915 / 0.2e1;
t791 = t804 ^ 2;
t928 = t803 * t804;
t962 = -t800 / 0.2e1 + 0.1e1 / 0.4e1;
t944 = (pkin(8) * t771 + pkin(10) * t962 + t742 * t791 + t743 * t928) * t785;
t965 = t654 * qJD(2) + t664 * t947 + t866 - (t939 + 0.4e1 * t944) * t820;
t922 = t810 * t815;
t892 = -0.2e1 * t922;
t753 = t809 * t814 * t892;
t798 = t814 ^ 2;
t964 = t753 + (-t809 ^ 2 + t798) * (t799 - 0.1e1 / 0.2e1);
t906 = t810 ^ 2 - t799;
t963 = t753 - t906 * (t798 - 0.1e1 / 0.2e1);
t903 = qJD(1) * t808;
t738 = t749 * t947;
t829 = qJD(2) * t934 - t774 * t792 + t814 * t880;
t961 = (-qJD(2) * t861 + t738 + t829) * qJD(1);
t960 = t829 * qJD(2) - t947 * t969;
t667 = t669 * qJD(2);
t655 = -t810 * t689 + t690 * t815 + t667;
t665 = qJD(2) * t847 + t694 * t810 - t695 * t815;
t780 = t786 ^ 2;
t853 = -t742 * t928 + t743 * t791;
t943 = (t887 / 0.2e1 + t962 * pkin(8) + t853) * t780;
t958 = 0.4e1 * t820 * t943 + t725 * t893 + (t725 * t744 * t820 - t655 * qJD(2) + t665 * t947) * t785;
t956 = -0.2e1 * t820;
t954 = 4 * qJD(1);
t953 = -t706 / 0.2e1;
t952 = pkin(1) * t809;
t951 = pkin(1) * t810;
t950 = pkin(1) * t815;
t948 = pkin(1) * qJD(3);
t946 = pkin(6) * t820;
t945 = pkin(6) * qJD(1);
t805 = sin(pkin(18));
t807 = cos(pkin(18));
t747 = t805 * t816 + t807 * t811;
t748 = -t805 * t811 + t807 * t816;
t688 = -pkin(12) + (cos(pkin(17)) * t748 - sin(pkin(17)) * t747) * pkin(3);
t685 = t688 - t950;
t942 = t685 * t792;
t691 = t931 + t932;
t687 = t691 ^ 2;
t941 = t687 * t820;
t938 = t732 * t820;
t937 = t739 * t820;
t776 = pkin(12) + t950;
t935 = t776 * t820;
t802 = qJ(3) + qJ(2);
t789 = cos(t802);
t930 = t789 * t820;
t921 = t810 * t820;
t916 = t815 * t820;
t819 = qJD(2) ^ 2;
t913 = t819 * t815;
t876 = qJD(2) * t948;
t772 = t814 * t876;
t881 = t792 * t948;
t911 = t814 * t881 + t772;
t773 = t809 * t876;
t910 = t809 * t881 + t773;
t909 = qJD(3) ^ 2 * pkin(4) * t952 + t773 * t957;
t788 = sin(t802);
t908 = t788 ^ 2 - t789 ^ 2;
t907 = t808 ^ 2 - t813 ^ 2;
t905 = qJD(1) * t698;
t904 = qJD(1) * t792;
t902 = qJD(1) * t813;
t703 = qJD(2) * t712;
t890 = pkin(1) * t921;
t889 = pkin(1) * t913;
t885 = -0.2e1 * t905;
t883 = pkin(1) * qJD(2) * t792;
t882 = pkin(1) * t901;
t879 = t672 * t947;
t877 = 0.2e1 * t893;
t875 = t820 * t982;
t874 = (t782 * t791 - t915 * t928 + t962) * t785 * t786;
t822 = pkin(1) ^ 2;
t872 = (-0.2e1 * pkin(1) * t949 + 0.2e1 * t798 * t821 - t821 + t822) * t922;
t871 = t782 * t928;
t870 = t810 * t916;
t869 = t820 * t749 * t750;
t867 = t810 * t894;
t860 = -0.2e1 * pkin(12) * t894;
t859 = pkin(1) * t867;
t858 = t941 * t978;
t857 = t788 * t789 * t904;
t856 = t815 * t867;
t854 = 0.2e1 * t859;
t851 = -((-t700 * t815 - t810 * t701) * qJD(2) + t879) * t786 + ((-t810 * t700 + t701 * t815) * qJD(2) - t976) * t785;
t850 = t664 * t786 + t665 * t785;
t846 = (t758 * t804 + t803 * t759) * t785 - t981;
t841 = t687 * t893 * t978;
t840 = -t814 * t883 + t772;
t839 = -t809 * t883 + t773;
t718 = t791 * t915 + t771 + t871;
t666 = t835 * qJD(4) + (t874 + (t780 - 0.1e1 / 0.2e1) * t718) * qJD(1);
t838 = (-qJD(4) * ((t926 / 0.4e1 + t927 / 0.4e1) * t786 + t868) + t666) * t954;
t837 = 0.4e1 * qJD(4) * (-qJD(1) * (t718 * t780 + t874 - t871 / 0.2e1 + (-t791 / 0.2e1 + 0.1e1 / 0.4e1) * t915) - t666);
t680 = -t816 * t759 / 0.2e1 + t853;
t836 = t680 * qJD(1) + t725 * qJD(4) / 0.2e1;
t834 = (pkin(1) * t688 - t815 * t822) * t810;
t702 = qJD(2) * t842;
t801 = t817 ^ 2;
t831 = (-t782 * t812 * t817 + t801 * t915 + t771) * t892 - (t782 * t801 + t914 * t920 + t962) * t906;
t827 = -t872 + pkin(12) * t886 + (-pkin(4) * t929 + t763 * t810) * t779;
t826 = t961 + ((t654 - t879 - t897) * t786 + (-t655 + t667 - t976) * t785) * qJD(4);
t825 = -0.2e1 * qJD(2) * t872 + t767 * t973 + 0.2e1 * (-t730 * t815 + t763 * t901) * t779 + t974 * qJD(3);
t824 = -t974 * t820 / 0.2e1 + (t779 * t814 * t870 - t819 * t952) * pkin(4);
t823 = (t725 + t846) * t818 + (-0.8e1 * t943 + (0.2e1 * t939 + 0.8e1 * t944) * t786 - 0.2e1 * t725 * t933 + 0.4e1 * t680) * t893 + t960;
t790 = t792 ^ 2;
t755 = t788 * t930;
t754 = t776 * t890;
t741 = -0.2e1 * t776 * t859;
t740 = t908 * t820;
t711 = (pkin(4) * t918 - t774) * qJD(2) - t738;
t684 = t685 * t930;
t683 = t685 * t820 * t788;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t856, -t906 * t878, t913, -0.2e1 * t856, -t819 * t810, 0, t810 * t860, t815 * t860, 0, 0, -t750 * t969 * t971, (t963 * qJD(2) + t964 * qJD(3)) * t954, t792 * t969, t749 * t715 * t971, t792 * t715, 0, (t715 * t776 - t749 * t882) * t971, (-t750 * t882 - t776 * t969) * t971, -t889, t741, 0, 0, 0, 0, 0, 0, -t845 * t885, t691 * t885, t960, t825 * qJD(1), -0.2e1 * t841, t907 * t687 * t877, t808 * t837, 0.2e1 * t841, t813 * t837, 0, t823 * t808 + t975 * t813, -t975 * t808 + t823 * t813, 0.8e1 * t835 * t905, (0.2e1 * t698 * t846 + t825) * qJD(1), -t980, 0.8e1 * t831 * t894, qJD(2) * t703, t980, qJD(2) * t702, 0, -0.2e1 * t702 * t945, 0.2e1 * t703 * t945, 0, 0, 0, 0, 0, 0, 0, 0, t748 * t854, t747 * t854, -t889, t741, 0.2e1 * t857, -0.2e1 * t908 * t904, -t790 * t789, -0.2e1 * t857, t790 * t788, 0, (-t788 * t942 + t789 * t882) * t971, (-t788 * t882 - t789 * t942) * t971, -t889, t834 * t878; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t870, t906 * t820, 0, t870, 0, 0, pkin(12) * t921, pkin(12) * t916, 0, 0, t869, t963 * t956, 0, -t869, 0, 0, (t749 * t951 - t750 * t776) * t820 + t910, (t749 * t776 + t750 * t951) * t820 + t911, 0, t754, 0, 0, 0, 0, 0, 0, -t845 * t938, t691 * t938, t961, -t820 * t827 + t909, 0, 0, 0, 0, 0, 0, (t966 + (-t968 + t877) * t732) * t813 + t826 * t808, (-t966 + (t968 - 0.2e1 * t893) * t732) * t808 + t826 * t813, t938 * t972, (-t732 * t846 - t827) * t820 + t909, t875, -0.4e1 * t820 * t831, 0, -t875, 0, 0, t842 * t946, -t712 * t946, 0, 0, 0, 0, 0, 0, 0, 0, -t748 * t890, -t747 * t890, 0, t754, -t755, t740, 0, t755, 0, 0, -t789 * t890 + t683 + t910, t788 * t890 + t684 + t911, 0, -t820 * t834; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, t964 * t956, 0, -t869, 0, 0, -t750 * t935 + t839, t749 * t935 + t840, 0, 0, 0, 0, 0, 0, 0, 0, -t845 * t937, t691 * t937, (-pkin(4) * t969 - t711) * qJD(1), t824, 0, 0, 0, 0, 0, 0, -t711 * t903 - t813 * t979 + (t739 * t902 + t808 * t851) * qJD(4) + (-t969 * t903 + t813 * t967 + (t750 * t902 + t808 * t850) * qJD(4)) * pkin(4), -t711 * t902 + t808 * t979 + (-t739 * t903 + t813 * t851) * qJD(4) + (-t969 * t902 - t808 * t967 + (-t750 * t903 + t813 * t850) * qJD(4)) * pkin(4), t937 * t972, -t846 * t937 + t824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t755, t740, 0, t755, 0, 0, t683 + t839, t684 + t840, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t858, -t907 * t941, t808 * t838, -t858, t813 * t838, 0, t813 * t953 * t971 - t698 * t902 + (-t836 * t971 + (-t866 + t965) * t786 + t958) * t808, -t902 * qJD(4) * t981 + (-0.2e1 * t836 * qJD(1) + t786 * t965 + t958) * t813 + (-0.2e1 * t953 + t698) * t903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
tauc_reg = t1;
