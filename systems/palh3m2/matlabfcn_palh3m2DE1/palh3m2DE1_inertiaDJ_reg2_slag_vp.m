% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% palh3m2DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [18x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,BC,BE,BG,DC,DT2,EP,GH,GP,HW,OT1,T1A,T1T2,phi1,phi2,phi410,phi78,phi79]';
% 
% Output:
% MMD_reg [((4+1)*4/2)x(4*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2020-05-07 02:05
% Revision: 70b73dc947b5bf54b9f851309d04479b7d95fc8d (2020-05-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = palh3m2DE1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(18,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'palh3m2DE1_inertiaDJ_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'palh3m2DE1_inertiaDJ_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [18 1]), ...
  'palh3m2DE1_inertiaDJ_reg2_slag_vp: pkin has to be [18x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-05-07 02:03:55
% EndTime: 2020-05-07 02:03:56
% DurationCPUTime: 1.19s
% Computational Cost: add. (684->144), mult. (1735->306), div. (0->0), fcn. (1387->20), ass. (0->128)
t579 = sin(qJ(2));
t578 = sin(qJ(3));
t584 = cos(qJ(2));
t629 = t578 * t584;
t614 = pkin(4) * t629;
t583 = cos(qJ(3));
t620 = qJD(3) * t583;
t625 = pkin(4) * t579 * t620 + qJD(2) * t614;
t637 = pkin(4) * t583;
t551 = -pkin(1) + t637;
t623 = qJD(2) * t579;
t651 = qJD(3) * t614 + t551 * t623;
t573 = sin(pkin(18));
t575 = cos(pkin(18));
t580 = sin(pkin(15));
t585 = cos(pkin(15));
t524 = t573 * t580 - t575 * t585;
t548 = pkin(1) * t584 + pkin(12);
t589 = t573 * t585 + t575 * t580;
t500 = (t589 * sin(pkin(17)) + t524 * cos(pkin(17))) * pkin(3) + t548;
t627 = t583 * t584;
t630 = t578 * t579;
t525 = -t627 + t630;
t604 = t578 * t623;
t622 = qJD(2) * t584;
t505 = (t525 * qJD(3) + t604) * pkin(4) - t551 * t622;
t571 = sin(pkin(16));
t572 = cos(pkin(16));
t522 = t571 * t585 + t572 * t580;
t523 = -t571 * t580 + t572 * t585;
t564 = pkin(17) + pkin(18);
t556 = sin(t564);
t557 = cos(t564);
t504 = t557 * t522 + t556 * t523;
t506 = t625 + t651;
t649 = t504 * t506;
t566 = t579 ^ 2;
t568 = t584 ^ 2;
t648 = t566 - t568;
t563 = qJD(2) + qJD(3);
t532 = t580 * pkin(8) + t585 * pkin(10);
t533 = t585 * pkin(8) - t580 * pkin(10);
t647 = (t571 * t532 - t533 * t572) * t557 + (t532 * t572 + t571 * t533) * t556;
t581 = sin(pkin(14));
t586 = cos(pkin(14));
t527 = t586 * t580 - t581 * t585;
t528 = t581 * t580 + t586 * t585;
t591 = -t527 * t579 + t528 * t584;
t508 = t591 * qJD(2);
t644 = 0.2e1 * t508;
t569 = t585 ^ 2;
t642 = -0.2e1 * t569;
t641 = 0.2e1 * qJD(2);
t567 = t583 ^ 2;
t640 = 0.4e1 * t567 - 0.2e1;
t638 = 0.4e1 * t569 - 0.2e1;
t636 = pkin(8) * t569;
t534 = t551 * t584;
t633 = t556 * t522;
t570 = qJ(3) + qJ(2);
t559 = sin(t570);
t536 = t563 * t559;
t560 = cos(t570);
t632 = t563 * t560;
t631 = t571 * t572;
t628 = t579 * t584;
t626 = t585 * t580;
t544 = pkin(4) * t630;
t520 = t544 - t534;
t621 = qJD(3) * t578;
t577 = sin(qJ(4));
t619 = qJD(4) * t577;
t582 = cos(qJ(4));
t618 = qJD(4) * t582;
t555 = t569 - 0.1e1 / 0.2e1;
t617 = -0.2e1 * pkin(12) * qJD(2);
t616 = pkin(8) * t626;
t615 = pkin(10) * t626;
t554 = t557 ^ 2;
t562 = t572 ^ 2;
t612 = -t569 / 0.2e1 + 0.1e1 / 0.4e1;
t613 = -0.8e1 * qJD(4) * ((t555 * t631 + (t562 - 0.1e1 / 0.2e1) * t626) * t554 - t556 * (-t555 * t562 + t626 * t631 - t612) * t557 - t562 * t626 / 0.2e1 + t612 * t631 + t626 / 0.4e1);
t611 = 0.2e1 * t636 - pkin(8) - 0.2e1 * t615;
t610 = pkin(1) * t623;
t609 = pkin(1) * t622;
t552 = pkin(1) * t621;
t517 = pkin(12) + t520;
t608 = (t555 * pkin(10) + t616) * t631;
t607 = t559 * t632;
t603 = t579 * t622;
t602 = -0.2e1 * t610;
t601 = 0.2e1 * t610;
t600 = -0.8e1 * t578 * t627;
t599 = -0.2e1 * t603;
t597 = t626 * t628;
t503 = t504 ^ 2;
t596 = t503 * t577 * t618;
t587 = pkin(4) ^ 2;
t595 = t587 * t578 * t620;
t526 = t583 * t579 + t629;
t510 = t563 * t526;
t511 = t563 * t627 - t579 * t621 - t604;
t594 = t510 * t585 + t580 * t511;
t593 = t525 * t585 + t580 * t526;
t592 = t584 * t527 + t579 * t528;
t494 = t506 * (t523 * t557 - t633);
t545 = pkin(4) * t552;
t543 = 0.2e1 * t545;
t588 = ((0.2e1 * t567 - 0.1e1) * t587 + (pkin(1) - 0.2e1 * t637) * pkin(1)) * t599 + (t543 - 0.4e1 * t595) * t568 + 0.2e1 * t595 + 0.2e1 * t651 * (t544 + pkin(12)) + (-0.2e1 * t534 + 0.2e1 * pkin(12)) * t625;
t553 = pkin(1) * t620;
t547 = 0.2e1 * t553;
t546 = 0.2e1 * t552;
t529 = t548 * t602;
t519 = -t579 * t551 - t614;
t509 = -t580 * t525 + t526 * t585;
t507 = t592 * qJD(2);
t502 = -t580 * t519 + t520 * t585;
t501 = t519 * t585 + t580 * t520;
t499 = -t580 * t510 + t511 * t585;
t498 = -t580 * t505 + t506 * t585;
t497 = t505 * t585 + t580 * t506;
t496 = t517 + t647;
t493 = (t509 * t572 - t593 * t571) * t557 - t556 * (t509 * t571 + t593 * t572);
t492 = (t501 * t572 + t571 * t502) * t557 + t556 * (-t571 * t501 + t502 * t572);
t491 = ((-t638 * pkin(8) + 0.4e1 * t615) * t562 + 0.4e1 * t608 + t611) * t554 + (((t638 * pkin(10) + 0.4e1 * t616) * t562 + 0.4e1 * (t555 * pkin(8) - t615) * t631 + pkin(10) * t642 - 0.2e1 * t616 + pkin(10)) * t556 + t517 * t523) * t557 - t517 * t633 + t611 * t562 - 0.2e1 * t608 - t636 + t615;
t490 = (t499 * t572 - t594 * t571) * t557 - t556 * (t499 * t571 + t594 * t572);
t489 = (t497 * t572 + t571 * t498) * t557 + t556 * (-t571 * t497 + t498 * t572);
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t603, -t648 * t641, 0, t599, 0, 0, t579 * t617, t584 * t617, 0, 0, 0.2e1 * t526 * t511, (t640 * t568 + (-t640 * t579 + t600) * t579) * qJD(2) + (t579 * t600 + (-t578 ^ 2 + t567) * (0.4e1 * t568 - 0.2e1)) * qJD(3), 0, 0.2e1 * t525 * t510, 0, 0, 0.2e1 * t548 * t510 - 0.2e1 * t525 * t610, 0.2e1 * t548 * t511 - 0.2e1 * t526 * t610, 0, t529, 0, 0, 0, 0, 0, 0, -0.2e1 * t494, -0.2e1 * t649, 0, t588, -0.2e1 * t596, 0.2e1 * (t577 ^ 2 - t582 ^ 2) * t503 * qJD(4), t577 * t613, 0.2e1 * t596, t582 * t613, 0, 0.2e1 * t491 * t619 - 0.2e1 * t582 * t494, 0.2e1 * t491 * t618 + 0.2e1 * t577 * t494, 0.2e1 * t649, 0.2e1 * t647 * t506 + t588, t592 * t644, (0.8e1 * t597 + (-0.8e1 * t581 * ((t642 + 0.1e1) * t628 + t648 * t626) + 0.4e1 * (t566 * t642 + 0.2e1 * t568 * t569 - 0.4e1 * t597 + t648) * t586) * t586 + t648 * t638) * qJD(2), 0, -0.2e1 * t591 * t507, 0, 0, t592 * pkin(6) * t641, pkin(6) * t644, 0, 0, 0, 0, 0, 0, 0, 0, t524 * t602, t589 * t601, 0, t529, 0.2e1 * t607, 0.2e1 * (-t559 ^ 2 + t560 ^ 2) * t563, 0, -0.2e1 * t607, 0, 0, 0.2e1 * t500 * t536 + 0.2e1 * t560 * t610, 0.2e1 * t500 * t632 - 0.2e1 * t559 * t610, 0, -t500 * t601; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t622, 0, -t623, 0, 0, 0, 0, 0, 0, 0, -t511, 0, t510, 0, 0, 0, -t609, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t505, 0, 0, 0, 0, 0, 0, 0, -t577 * t505 - t519 * t618, -t505 * t582 + t519 * t619, 0, 0, 0, 0, t508, 0, -t507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t609, 0, 0, 0, -t632, 0, t536, 0, 0, 0, -t609, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t546, t547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t543, 0, 0, 0, 0, 0, 0, 0, 0, 0, t543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t546, t547, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t511, 0, t510, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, pkin(4) * t511, 0, 0, 0, 0, 0, 0, 0, (t511 * t577 + t526 * t618) * pkin(4), (t511 * t582 - t526 * t619) * pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t632, 0, t536, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t552, t553, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t545, 0, 0, 0, 0, 0, 0, 0, 0, 0, t545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t552, t553, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t504 * t619, 0, -t504 * t618, 0, t496 * t619 - t582 * t506, t496 * t618 + t577 * t506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t489 * t577 - t492 * t618, -t489 * t582 + t492 * t619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t490 * t577 + t493 * t618) * pkin(4), (t490 * t582 - t493 * t619) * pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t1;
