% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% palh4m1DE2
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AD,CB,CE,EP,HC,OT,TA,TD]';
% 
% Output:
% JRD_rot [9x5]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-11 22:54
% Revision: 6ae2d958c5b90587a0d08029b131cb7b66342a68 (2020-04-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = palh4m1DE2_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),uint8(0),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'palh4m1DE2_jacobiRD_rot_sym_varpar: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'palh4m1DE2_jacobiRD_rot_sym_varpar: qJD has to be [5x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'palh4m1DE2_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'palh4m1DE2_jacobiRD_rot_sym_varpar: pkin has to be [9x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:32
	% EndTime: 2020-04-11 22:53:32
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->45)
	unknown=NaN(9,5);
	unknown(1,1) = 0;
	unknown(1,2) = 0;
	unknown(1,3) = 0;
	unknown(1,4) = 0;
	unknown(1,5) = 0;
	unknown(2,1) = 0;
	unknown(2,2) = 0;
	unknown(2,3) = 0;
	unknown(2,4) = 0;
	unknown(2,5) = 0;
	unknown(3,1) = 0;
	unknown(3,2) = 0;
	unknown(3,3) = 0;
	unknown(3,4) = 0;
	unknown(3,5) = 0;
	unknown(4,1) = 0;
	unknown(4,2) = 0;
	unknown(4,3) = 0;
	unknown(4,4) = 0;
	unknown(4,5) = 0;
	unknown(5,1) = 0;
	unknown(5,2) = 0;
	unknown(5,3) = 0;
	unknown(5,4) = 0;
	unknown(5,5) = 0;
	unknown(6,1) = 0;
	unknown(6,2) = 0;
	unknown(6,3) = 0;
	unknown(6,4) = 0;
	unknown(6,5) = 0;
	unknown(7,1) = 0;
	unknown(7,2) = 0;
	unknown(7,3) = 0;
	unknown(7,4) = 0;
	unknown(7,5) = 0;
	unknown(8,1) = 0;
	unknown(8,2) = 0;
	unknown(8,3) = 0;
	unknown(8,4) = 0;
	unknown(8,5) = 0;
	unknown(9,1) = 0;
	unknown(9,2) = 0;
	unknown(9,3) = 0;
	unknown(9,4) = 0;
	unknown(9,5) = 0;
	JRD_rot = unknown;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:32
	% EndTime: 2020-04-11 22:53:32
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->49)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = qJD(1) * t1;
	t3 = sin(qJ(1));
	t4 = qJD(1) * t3;
	unknown(1,1) = -t2;
	unknown(1,2) = 0.0e0;
	unknown(1,3) = 0.0e0;
	unknown(1,4) = 0.0e0;
	unknown(1,5) = 0.0e0;
	unknown(2,1) = -t4;
	unknown(2,2) = 0.0e0;
	unknown(2,3) = 0.0e0;
	unknown(2,4) = 0.0e0;
	unknown(2,5) = 0.0e0;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = 0.0e0;
	unknown(3,3) = 0.0e0;
	unknown(3,4) = 0.0e0;
	unknown(3,5) = 0.0e0;
	unknown(4,1) = t4;
	unknown(4,2) = 0.0e0;
	unknown(4,3) = 0.0e0;
	unknown(4,4) = 0.0e0;
	unknown(4,5) = 0.0e0;
	unknown(5,1) = -t2;
	unknown(5,2) = 0.0e0;
	unknown(5,3) = 0.0e0;
	unknown(5,4) = 0.0e0;
	unknown(5,5) = 0.0e0;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = 0.0e0;
	unknown(6,3) = 0.0e0;
	unknown(6,4) = 0.0e0;
	unknown(6,5) = 0.0e0;
	unknown(7,1) = 0.0e0;
	unknown(7,2) = 0.0e0;
	unknown(7,3) = 0.0e0;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = 0.0e0;
	unknown(8,1) = 0.0e0;
	unknown(8,2) = 0.0e0;
	unknown(8,3) = 0.0e0;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = 0.0e0;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = 0.0e0;
	unknown(9,3) = 0.0e0;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = 0.0e0;
	JRD_rot = unknown;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:34
	% EndTime: 2020-04-11 22:53:35
	% DurationCPUTime: 0.98s
	% Computational Cost: add. (72789->214), mult. (75922->591), div. (2692->20), fcn. (19906->8), ass. (0->224)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = t1 * qJD(1);
	t3 = cos(qJ(5));
	t4 = sin(qJ(5));
	t5 = pkin(1) * t4;
	t6 = pkin(2) * t5;
	t7 = 0.2e1 * t6;
	t8 = pkin(1) ^ 2;
	t9 = pkin(2) + qJ(2) + pkin(6) + pkin(3);
	t10 = pkin(2) - qJ(2) - pkin(6) - pkin(3);
	t12 = t10 * t9 - t7 + t8;
	t13 = pkin(2) + qJ(2) + pkin(6) - pkin(3);
	t14 = pkin(2) - qJ(2) - pkin(6) + pkin(3);
	t16 = t13 * t14 - t7 + t8;
	t17 = t16 * t12;
	t18 = sqrt(-t17);
	t20 = pkin(1) * t18 * t3;
	t21 = t5 - pkin(2);
	t22 = pkin(2) ^ 2;
	t23 = qJ(2) + pkin(6);
	t24 = t23 ^ 2;
	t25 = pkin(3) ^ 2;
	t26 = -t7 + t8 + t22 + t24 - t25;
	t28 = -t21 * t26 - t20;
	t30 = 0.1e1 / t23;
	t31 = -t7 + t8 + t22;
	t32 = 0.1e1 / t31;
	t33 = t32 * t30;
	t35 = t3 * pkin(1);
	t36 = t26 * t35;
	t37 = -t18 * t21 + t36;
	t38 = t37 ^ 2;
	t39 = 0.1e1 / t24;
	t40 = t39 * t38;
	t41 = t31 ^ 2;
	t42 = 0.1e1 / t41;
	t44 = t28 ^ 2;
	t45 = t39 * t44;
	t47 = t40 * t42 + t42 * t45;
	t48 = sqrt(t47);
	t49 = 0.1e1 / t48;
	t50 = t49 * t33;
	t52 = sin(qJ(1));
	t53 = t4 * qJD(5);
	t54 = pkin(1) * t18;
	t55 = t54 * t53;
	t56 = 0.1e1 / t18;
	t57 = t56 * t3;
	t58 = t3 * qJD(5);
	t59 = pkin(1) * pkin(2);
	t60 = t59 * t58;
	t61 = 0.2e1 * t60;
	t64 = qJD(2) * t10 - qJD(2) * t9 - t61;
	t68 = -qJD(2) * t13 + qJD(2) * t14 - t61;
	t70 = -t12 * t68 - t16 * t64;
	t71 = t70 * pkin(1);
	t73 = t71 * t57 / 0.2e1;
	t75 = t26 * pkin(1) * t58;
	t77 = qJD(2) * t23 - t60;
	t79 = -0.2e1 * t21 * t77 + t55 - t73 - t75;
	t82 = t28 * t52;
	t84 = t49 * t32;
	t85 = qJD(2) * t84;
	t87 = t42 * t30;
	t90 = pkin(2) * t35;
	t91 = t90 * qJD(5) * t49;
	t96 = 0.1e1 / t48 / t47;
	t98 = t39 * t37;
	t99 = t54 * t58;
	t100 = -t56 * t21;
	t103 = pkin(1) * qJD(5);
	t105 = t26 * t4 * t103;
	t106 = 0.2e1 * t77 * t35;
	t107 = -t99 + t70 * t100 / 0.2e1 - t105 + t106;
	t112 = 0.1e1 / t24 / t23;
	t114 = qJD(2) * t42;
	t118 = 0.1e1 / t41 / t31;
	t122 = t39 * t28;
	t132 = 0.2e1 * t107 * t42 * t98 - 0.2e1 * t112 * t114 * t38 - 0.2e1 * t112 * t114 * t44 + 0.4e1 * t118 * t40 * t60 + 0.4e1 * t118 * t45 * t60 + 0.2e1 * t122 * t42 * t79;
	t133 = t132 * t96 * t32;
	t137 = t52 * qJD(1);
	t138 = -qJ(2) - pkin(6) - pkin(3);
	t140 = -qJ(2) - pkin(6) + pkin(3);
	t142 = -0.2e1 * t12 * t140 - 0.2e1 * t138 * t16;
	t146 = t142 * t100 / 0.2e1 + 0.2e1 * t23 * t35;
	t147 = t30 * t146;
	t150 = t147 * t32 - t32 * t98;
	t151 = 0.1e1 / t28;
	t152 = t151 * t150;
	t154 = 0.1e1 / t44;
	t156 = t154 * t38 + 0.1e1;
	t157 = 0.1e1 / t156;
	t158 = t157 * t31 * t23;
	t160 = t142 * pkin(1);
	t164 = -t160 * t57 / 0.2e1 - 0.2e1 * t23 * t21;
	t165 = t30 * t164;
	t168 = -t122 * t32 + t165 * t32;
	t169 = t37 * t168;
	t170 = t23 * t169;
	t171 = t154 * t31;
	t172 = t157 * t171;
	t174 = t152 * t158 - t170 * t172;
	t175 = t174 * t137;
	t176 = t30 * t37;
	t177 = t84 * t176;
	t179 = t56 * pkin(1);
	t180 = t142 * t179;
	t184 = -0.1e1 / t18 / t17;
	t185 = -t184 * t21;
	t195 = 0.2e1 * qJD(2) * t12 + 0.2e1 * qJD(2) * t16 - 0.2e1 * t138 * t68 - 0.2e1 * t140 * t64;
	t206 = qJD(2) * t32;
	t216 = t42 * t98;
	t225 = t79 * t157 * t31;
	t228 = t157 * t31 * qJD(2);
	t230 = qJD(5) * t23;
	t233 = t157 * pkin(2) * t35;
	t237 = t156 ^ 2;
	t238 = 0.1e1 / t237;
	t243 = 0.1e1 / t44 / t28;
	t246 = t107 * t154 * t37 - t243 * t38 * t79;
	t247 = 0.2e1 * t246 * t238 * t31;
	t251 = t184 * t3;
	t275 = t42 * t122;
	t290 = t157 * t154 * pkin(2) * t35;
	t295 = t79 * t157 * t243 * t31;
	t299 = 0.2e1 * t246 * t238 * t171;
	t301 = t158 * t151 * (t32 * t30 * (-t180 * t58 / 0.2e1 - t70 * t142 * t185 / 0.4e1 + t195 * t100 / 0.2e1 - 0.2e1 * t23 * t4 * t103 + 0.2e1 * qJD(2) * t35) - t206 * t39 * t146 + 0.2e1 * t60 * t42 * t147 - t32 * t39 * t107 + 0.2e1 * t206 * t112 * t37 - 0.2e1 * t60 * t216) - t225 * t23 * t154 * t150 + t228 * t152 - 0.2e1 * t233 * t230 * t152 - t247 * t23 * t152 - t172 * t23 * t37 * (t32 * t30 * (t180 * t53 / 0.2e1 + t70 * t160 * t251 / 0.4e1 - t195 * pkin(1) * t57 / 0.2e1 - 0.2e1 * t23 * pkin(1) * t58 - 0.2e1 * qJD(2) * t21) - t206 * t39 * t164 + 0.2e1 * t60 * t42 * t165 - t32 * t39 * t79 + 0.2e1 * t206 * t112 * t28 - 0.2e1 * t60 * t275) - t172 * t23 * t107 * t168 - t172 * qJD(2) * t169 + 0.2e1 * t290 * t230 * t169 + 0.2e1 * t295 * t170 + t299 * t170;
	t302 = t301 * t1;
	t305 = t174 * t1;
	t308 = t37 * t305;
	t311 = qJD(2) * t49 * t32 * t39;
	t313 = t42 * t176;
	t318 = t132 * t96 * t33;
	t326 = pkin(2) * t16 * t35 + t12 * t3 * t59;
	t330 = t3 ^ 2;
	t331 = t330 * t8;
	t334 = -0.2e1 * pkin(2) * t331 + t100 * t326 - t26 * t5 - t20;
	t335 = t30 * t334;
	t339 = 0.2e1 * t313 * t90 + t32 * t335;
	t340 = t151 * t339;
	t344 = 0.2e1 * t326 * pkin(1);
	t350 = pkin(1) * t18 * t4 - t344 * t57 / 0.2e1 - t36 + 0.2e1 * t59 * t3 * t21;
	t351 = t30 * t350;
	t353 = t30 * t28;
	t354 = t42 * t353;
	t357 = t32 * t351 + 0.2e1 * t354 * t90;
	t358 = t37 * t357;
	t359 = t23 * t358;
	t361 = t158 * t340 - t172 * t359;
	t362 = t361 * t137;
	t364 = 0.2e1 * t326 * t179;
	t378 = pkin(2) * t35 * t68 - qJD(5) * t12 * t6 - t16 * t53 * t59 + t3 * t59 * t64;
	t400 = pkin(2) * qJD(2) * t35;
	t405 = qJD(5) * t22 * t331;
	t408 = t59 * t53;
	t475 = t158 * t151 * (t32 * t30 * (t55 - t73 - t364 * t58 / 0.2e1 - t70 * t326 * t185 / 0.2e1 + t378 * t100 - t75 - 0.2e1 * t77 * t5 + 0.4e1 * t4 * qJD(5) * pkin(2) * t3 * t8) - t206 * t39 * t334 + 0.2e1 * t60 * t42 * t335 + 0.2e1 * t90 * t42 * t30 * t107 - 0.2e1 * t400 * t216 + 0.8e1 * t405 * t118 * t176 - 0.2e1 * t408 * t313) - t225 * t23 * t154 * t339 + t228 * t340 - 0.2e1 * t233 * t230 * t340 - t247 * t23 * t340 - t172 * t23 * t37 * (t32 * t30 * (t99 + t71 * t56 * t4 / 0.2e1 + t364 * t53 / 0.2e1 + t70 * t344 * t251 / 0.4e1 - t378 * pkin(1) * t57 + t105 - t106 + 0.2e1 * pkin(2) * t8 * t330 * qJD(5) - 0.2e1 * t6 * qJD(5) * t21) - t206 * t39 * t350 + 0.2e1 * t60 * t42 * t351 + 0.2e1 * t90 * t42 * t30 * t79 - 0.2e1 * t400 * t275 + 0.8e1 * t405 * t118 * t353 - 0.2e1 * t408 * t354) - t172 * t23 * t107 * t357 - t172 * qJD(2) * t358 + 0.2e1 * t290 * t230 * t358 + 0.2e1 * t295 * t359 + t299 * t359;
	t476 = t475 * t1;
	t479 = t361 * t1;
	t482 = t37 * t479;
	t494 = t28 * t1;
	t504 = t174 * t2;
	t506 = t301 * t52;
	t509 = t174 * t52;
	t512 = t37 * t509;
	t520 = t361 * t2;
	t522 = t475 * t52;
	t525 = t361 * t52;
	t528 = t37 * t525;
	t540 = t28 * t174;
	t554 = t28 * t361;
	t568 = t37 * t52;
	t578 = t84 * t353;
	t584 = t28 * t305;
	t597 = t28 * t479;
	t609 = t37 * t1;
	t624 = t28 * t509;
	t637 = t28 * t525;
	t649 = t37 * t174;
	t663 = t37 * t361;
	unknown(1,1) = -t50 * t28 * t2 - t50 * t79 * t52 + t85 * t39 * t82 - 0.2e1 * t91 * t87 * t82 + t133 * t30 * t82 / 0.2e1;
	unknown(1,2) = t177 * t175 - t50 * t37 * t302 - t50 * t107 * t305 + t311 * t308 - 0.2e1 * t91 * t313 * t305 + t318 * t308 / 0.2e1;
	unknown(1,3) = 0.0e0;
	unknown(1,4) = 0.0e0;
	unknown(1,5) = t177 * t362 - t50 * t37 * t476 - t50 * t107 * t479 + t311 * t482 - 0.2e1 * t91 * t313 * t479 + t318 * t482 / 0.2e1;
	unknown(2,1) = -t50 * t28 * t137 + t50 * t79 * t1 - t85 * t39 * t494 + 0.2e1 * t91 * t87 * t494 - t133 * t30 * t494 / 0.2e1;
	unknown(2,2) = -t177 * t504 - t50 * t37 * t506 - t50 * t107 * t509 + t311 * t512 - 0.2e1 * t91 * t313 * t509 + t318 * t512 / 0.2e1;
	unknown(2,3) = 0.0e0;
	unknown(2,4) = 0.0e0;
	unknown(2,5) = -t177 * t520 - t50 * t37 * t522 - t50 * t107 * t525 + t311 * t528 - 0.2e1 * t91 * t313 * t525 + t318 * t528 / 0.2e1;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = t50 * t28 * t301 + t50 * t79 * t174 - t85 * t39 * t540 + 0.2e1 * t91 * t87 * t540 - t133 * t30 * t540 / 0.2e1;
	unknown(3,3) = 0.0e0;
	unknown(3,4) = 0.0e0;
	unknown(3,5) = t50 * t28 * t475 + t50 * t79 * t361 - t85 * t39 * t554 + 0.2e1 * t91 * t87 * t554 - t133 * t30 * t554 / 0.2e1;
	unknown(4,1) = t50 * t37 * t2 + t50 * t107 * t52 - t85 * t39 * t568 + 0.2e1 * t91 * t87 * t568 - t133 * t30 * t568 / 0.2e1;
	unknown(4,2) = t578 * t175 - t50 * t28 * t302 - t50 * t79 * t305 + t311 * t584 - 0.2e1 * t91 * t354 * t305 + t318 * t584 / 0.2e1;
	unknown(4,3) = 0.0e0;
	unknown(4,4) = 0.0e0;
	unknown(4,5) = t578 * t362 - t50 * t28 * t476 - t50 * t79 * t479 + t311 * t597 - 0.2e1 * t91 * t354 * t479 + t318 * t597 / 0.2e1;
	unknown(5,1) = t50 * t37 * t137 - t50 * t107 * t1 + t85 * t39 * t609 - 0.2e1 * t91 * t87 * t609 + t133 * t30 * t609 / 0.2e1;
	unknown(5,2) = -t578 * t504 - t50 * t28 * t506 - t50 * t79 * t509 + t311 * t624 - 0.2e1 * t91 * t354 * t509 + t318 * t624 / 0.2e1;
	unknown(5,3) = 0.0e0;
	unknown(5,4) = 0.0e0;
	unknown(5,5) = -t578 * t520 - t50 * t28 * t522 - t50 * t79 * t525 + t311 * t637 - 0.2e1 * t91 * t354 * t525 + t318 * t637 / 0.2e1;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = -t50 * t37 * t301 - t50 * t107 * t174 + t85 * t39 * t649 - 0.2e1 * t91 * t87 * t649 + t133 * t30 * t649 / 0.2e1;
	unknown(6,3) = 0.0e0;
	unknown(6,4) = 0.0e0;
	unknown(6,5) = -t50 * t37 * t475 - t50 * t107 * t361 + t85 * t39 * t663 - 0.2e1 * t91 * t87 * t663 + t133 * t30 * t663 / 0.2e1;
	unknown(7,1) = -t137;
	unknown(7,2) = 0.0e0;
	unknown(7,3) = 0.0e0;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = 0.0e0;
	unknown(8,1) = t2;
	unknown(8,2) = 0.0e0;
	unknown(8,3) = 0.0e0;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = 0.0e0;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = 0.0e0;
	unknown(9,3) = 0.0e0;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = 0.0e0;
	JRD_rot = unknown;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:42
	% EndTime: 2020-04-11 22:53:43
	% DurationCPUTime: 0.96s
	% Computational Cost: add. (72789->212), mult. (75922->591), div. (2692->20), fcn. (19906->8), ass. (0->224)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = t1 * qJD(1);
	t3 = sin(qJ(5));
	t4 = pkin(1) * t3;
	t5 = -t4 + pkin(2);
	t6 = pkin(2) * t4;
	t7 = 0.2e1 * t6;
	t8 = pkin(1) ^ 2;
	t9 = pkin(2) + qJ(2) + pkin(6) + pkin(3);
	t10 = pkin(2) - qJ(2) - pkin(6) - pkin(3);
	t12 = t10 * t9 - t7 + t8;
	t13 = pkin(2) + qJ(2) + pkin(6) - pkin(3);
	t14 = pkin(2) - qJ(2) - pkin(6) + pkin(3);
	t16 = t13 * t14 - t7 + t8;
	t17 = t16 * t12;
	t18 = sqrt(-t17);
	t20 = cos(qJ(5));
	t21 = t20 * pkin(1);
	t22 = pkin(2) ^ 2;
	t23 = qJ(2) + pkin(6);
	t24 = t23 ^ 2;
	t25 = pkin(3) ^ 2;
	t26 = -t7 + t8 + t22 + t24 - t25;
	t27 = t26 * t21;
	t28 = t18 * t5 + t27;
	t30 = 0.1e1 / t23;
	t31 = -t7 + t8 + t22;
	t32 = 0.1e1 / t31;
	t33 = t32 * t30;
	t34 = t28 ^ 2;
	t35 = 0.1e1 / t24;
	t36 = t35 * t34;
	t37 = t31 ^ 2;
	t38 = 0.1e1 / t37;
	t41 = pkin(1) * t18 * t20;
	t43 = t26 * t5 - t41;
	t44 = t43 ^ 2;
	t45 = t35 * t44;
	t47 = t36 * t38 + t38 * t45;
	t48 = sqrt(t47);
	t49 = 0.1e1 / t48;
	t50 = t49 * t33;
	t52 = sin(qJ(1));
	t53 = t20 * qJD(5);
	t54 = t18 * pkin(1);
	t55 = t54 * t53;
	t56 = 0.1e1 / t18;
	t57 = t56 * t5;
	t58 = pkin(1) * pkin(2);
	t59 = t58 * t53;
	t60 = 0.2e1 * t59;
	t63 = qJD(2) * t10 - qJD(2) * t9 - t60;
	t67 = -qJD(2) * t13 + qJD(2) * t14 - t60;
	t69 = -t12 * t67 - t16 * t63;
	t72 = pkin(1) * qJD(5);
	t74 = t26 * t3 * t72;
	t76 = qJD(2) * t23 - t59;
	t77 = 0.2e1 * t76 * t21;
	t78 = -t55 + t69 * t57 / 0.2e1 - t74 + t77;
	t81 = t28 * t52;
	t83 = t49 * t32;
	t84 = qJD(2) * t83;
	t86 = t38 * t30;
	t89 = pkin(2) * t21;
	t90 = t89 * qJD(5) * t49;
	t95 = 0.1e1 / t48 / t47;
	t97 = t35 * t28;
	t102 = 0.1e1 / t24 / t23;
	t104 = qJD(2) * t38;
	t108 = 0.1e1 / t37 / t31;
	t112 = t35 * t43;
	t113 = t3 * qJD(5);
	t114 = t54 * t113;
	t115 = t56 * t20;
	t116 = t69 * pkin(1);
	t118 = t116 * t115 / 0.2e1;
	t120 = t26 * pkin(1) * t53;
	t122 = 0.2e1 * t5 * t76 + t114 - t118 - t120;
	t132 = -0.2e1 * t102 * t104 * t34 - 0.2e1 * t102 * t104 * t44 + 0.4e1 * t108 * t36 * t59 + 0.4e1 * t108 * t45 * t59 + 0.2e1 * t112 * t122 * t38 + 0.2e1 * t38 * t78 * t97;
	t133 = t132 * t95 * t32;
	t137 = t52 * qJD(1);
	t138 = -qJ(2) - pkin(6) - pkin(3);
	t140 = -qJ(2) - pkin(6) + pkin(3);
	t142 = -0.2e1 * t12 * t140 - 0.2e1 * t138 * t16;
	t146 = t142 * t57 / 0.2e1 + 0.2e1 * t23 * t21;
	t147 = t30 * t146;
	t150 = t147 * t32 - t32 * t97;
	t151 = 0.1e1 / t43;
	t152 = t151 * t150;
	t154 = 0.1e1 / t44;
	t156 = t154 * t34 + 0.1e1;
	t157 = 0.1e1 / t156;
	t158 = t157 * t31 * t23;
	t160 = t142 * pkin(1);
	t164 = -t160 * t115 / 0.2e1 + 0.2e1 * t23 * t5;
	t165 = t30 * t164;
	t168 = -t112 * t32 + t165 * t32;
	t169 = t28 * t168;
	t170 = t23 * t169;
	t171 = t154 * t31;
	t172 = t157 * t171;
	t174 = t152 * t158 - t170 * t172;
	t175 = t174 * t137;
	t176 = t30 * t43;
	t177 = t83 * t176;
	t179 = t56 * pkin(1);
	t180 = t142 * t179;
	t184 = -0.1e1 / t18 / t17;
	t185 = t184 * t5;
	t195 = 0.2e1 * qJD(2) * t12 + 0.2e1 * qJD(2) * t16 - 0.2e1 * t138 * t67 - 0.2e1 * t140 * t63;
	t206 = qJD(2) * t32;
	t216 = t38 * t97;
	t225 = t122 * t157 * t31;
	t228 = t157 * t31 * qJD(2);
	t230 = qJD(5) * t23;
	t233 = t157 * pkin(2) * t21;
	t237 = t156 ^ 2;
	t238 = 0.1e1 / t237;
	t243 = 0.1e1 / t44 / t43;
	t246 = -t122 * t243 * t34 + t154 * t28 * t78;
	t247 = 0.2e1 * t246 * t238 * t31;
	t251 = t184 * t20;
	t275 = t38 * t112;
	t290 = t157 * t154 * pkin(2) * t21;
	t295 = t122 * t157 * t243 * t31;
	t299 = 0.2e1 * t246 * t238 * t171;
	t301 = t158 * t151 * (t32 * t30 * (-t180 * t53 / 0.2e1 - t69 * t142 * t185 / 0.4e1 + t195 * t57 / 0.2e1 - 0.2e1 * t23 * t3 * t72 + 0.2e1 * qJD(2) * t21) - t206 * t35 * t146 + 0.2e1 * t59 * t38 * t147 - t32 * t35 * t78 + 0.2e1 * t206 * t102 * t28 - 0.2e1 * t59 * t216) - t225 * t23 * t154 * t150 + t228 * t152 - 0.2e1 * t233 * t230 * t152 - t247 * t23 * t152 - t172 * t23 * t28 * (t32 * t30 * (t180 * t113 / 0.2e1 + t69 * t160 * t251 / 0.4e1 - t195 * pkin(1) * t115 / 0.2e1 - 0.2e1 * t23 * pkin(1) * t53 + 0.2e1 * qJD(2) * t5) - t206 * t35 * t164 + 0.2e1 * t59 * t38 * t165 - t32 * t35 * t122 + 0.2e1 * t206 * t102 * t43 - 0.2e1 * t59 * t275) - t172 * t23 * t78 * t168 - t172 * qJD(2) * t169 + 0.2e1 * t290 * t230 * t169 + 0.2e1 * t295 * t170 + t299 * t170;
	t302 = t301 * t1;
	t305 = t174 * t1;
	t308 = t43 * t305;
	t311 = qJD(2) * t49 * t32 * t35;
	t313 = t38 * t176;
	t318 = t132 * t95 * t33;
	t326 = pkin(2) * t16 * t21 + t12 * t20 * t58;
	t330 = t20 ^ 2;
	t331 = t330 * t8;
	t334 = -0.2e1 * pkin(2) * t331 - t26 * t4 + t326 * t57 - t41;
	t335 = t30 * t334;
	t337 = t30 * t28;
	t338 = t38 * t337;
	t341 = t32 * t335 + 0.2e1 * t338 * t89;
	t342 = t151 * t341;
	t346 = 0.2e1 * t326 * pkin(1);
	t352 = pkin(1) * t18 * t3 - t346 * t115 / 0.2e1 - t27 - 0.2e1 * t58 * t20 * t5;
	t353 = t30 * t352;
	t357 = 0.2e1 * t313 * t89 + t32 * t353;
	t358 = t28 * t357;
	t359 = t23 * t358;
	t361 = t158 * t342 - t172 * t359;
	t362 = t361 * t137;
	t364 = 0.2e1 * t326 * t179;
	t378 = pkin(2) * t21 * t67 - qJD(5) * t12 * t6 - t113 * t16 * t58 + t20 * t58 * t63;
	t400 = pkin(2) * qJD(2) * t21;
	t405 = qJD(5) * t22 * t331;
	t408 = t58 * t113;
	t475 = t158 * t151 * (t32 * t30 * (t114 - t118 - t364 * t53 / 0.2e1 - t69 * t326 * t185 / 0.2e1 + t378 * t57 - t120 - 0.2e1 * t76 * t4 + 0.4e1 * t3 * qJD(5) * pkin(2) * t20 * t8) - t206 * t35 * t334 + 0.2e1 * t59 * t38 * t335 + 0.2e1 * t89 * t38 * t30 * t78 - 0.2e1 * t400 * t216 + 0.8e1 * t405 * t108 * t337 - 0.2e1 * t408 * t338) - t225 * t23 * t154 * t341 + t228 * t342 - 0.2e1 * t233 * t230 * t342 - t247 * t23 * t342 - t172 * t23 * t28 * (t32 * t30 * (t55 + t116 * t56 * t3 / 0.2e1 + t364 * t113 / 0.2e1 + t69 * t346 * t251 / 0.4e1 - t378 * pkin(1) * t115 + t74 - t77 + 0.2e1 * pkin(2) * t8 * t330 * qJD(5) + 0.2e1 * t6 * qJD(5) * t5) - t206 * t35 * t352 + 0.2e1 * t59 * t38 * t353 + 0.2e1 * t89 * t38 * t30 * t122 - 0.2e1 * t400 * t275 + 0.8e1 * t405 * t108 * t176 - 0.2e1 * t408 * t313) - t172 * t23 * t78 * t357 - t172 * qJD(2) * t358 + 0.2e1 * t290 * t230 * t358 + 0.2e1 * t295 * t359 + t299 * t359;
	t476 = t475 * t1;
	t479 = t361 * t1;
	t482 = t43 * t479;
	t494 = t28 * t1;
	t504 = t174 * t2;
	t506 = t301 * t52;
	t509 = t174 * t52;
	t512 = t43 * t509;
	t520 = t361 * t2;
	t522 = t475 * t52;
	t525 = t361 * t52;
	t528 = t43 * t525;
	t540 = t28 * t174;
	t554 = t28 * t361;
	t568 = t43 * t52;
	t578 = t83 * t337;
	t584 = t28 * t305;
	t597 = t28 * t479;
	t609 = t43 * t1;
	t624 = t28 * t509;
	t637 = t28 * t525;
	t649 = t43 * t174;
	t663 = t43 * t361;
	unknown(1,1) = -t50 * t28 * t2 - t50 * t78 * t52 + t84 * t35 * t81 - 0.2e1 * t90 * t86 * t81 + t133 * t30 * t81 / 0.2e1;
	unknown(1,2) = -t177 * t175 + t50 * t43 * t302 + t50 * t122 * t305 - t311 * t308 + 0.2e1 * t90 * t313 * t305 - t318 * t308 / 0.2e1;
	unknown(1,3) = 0.0e0;
	unknown(1,4) = 0.0e0;
	unknown(1,5) = -t177 * t362 + t50 * t43 * t476 + t50 * t122 * t479 - t311 * t482 + 0.2e1 * t90 * t313 * t479 - t318 * t482 / 0.2e1;
	unknown(2,1) = -t50 * t28 * t137 + t50 * t78 * t1 - t84 * t35 * t494 + 0.2e1 * t90 * t86 * t494 - t133 * t30 * t494 / 0.2e1;
	unknown(2,2) = t177 * t504 + t50 * t43 * t506 + t50 * t122 * t509 - t311 * t512 + 0.2e1 * t90 * t313 * t509 - t318 * t512 / 0.2e1;
	unknown(2,3) = 0.0e0;
	unknown(2,4) = 0.0e0;
	unknown(2,5) = t177 * t520 + t50 * t43 * t522 + t50 * t122 * t525 - t311 * t528 + 0.2e1 * t90 * t313 * t525 - t318 * t528 / 0.2e1;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = t50 * t28 * t301 + t50 * t78 * t174 - t84 * t35 * t540 + 0.2e1 * t90 * t86 * t540 - t133 * t30 * t540 / 0.2e1;
	unknown(3,3) = 0.0e0;
	unknown(3,4) = 0.0e0;
	unknown(3,5) = t50 * t28 * t475 + t50 * t78 * t361 - t84 * t35 * t554 + 0.2e1 * t90 * t86 * t554 - t133 * t30 * t554 / 0.2e1;
	unknown(4,1) = t137;
	unknown(4,2) = 0.0e0;
	unknown(4,3) = 0.0e0;
	unknown(4,4) = 0.0e0;
	unknown(4,5) = 0.0e0;
	unknown(5,1) = -t2;
	unknown(5,2) = 0.0e0;
	unknown(5,3) = 0.0e0;
	unknown(5,4) = 0.0e0;
	unknown(5,5) = 0.0e0;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = 0.0e0;
	unknown(6,3) = 0.0e0;
	unknown(6,4) = 0.0e0;
	unknown(6,5) = 0.0e0;
	unknown(7,1) = -t50 * t43 * t2 - t50 * t122 * t52 + t84 * t35 * t568 - 0.2e1 * t90 * t86 * t568 + t133 * t30 * t568 / 0.2e1;
	unknown(7,2) = t578 * t175 - t50 * t28 * t302 - t50 * t78 * t305 + t311 * t584 - 0.2e1 * t90 * t338 * t305 + t318 * t584 / 0.2e1;
	unknown(7,3) = 0.0e0;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = t578 * t362 - t50 * t28 * t476 - t50 * t78 * t479 + t311 * t597 - 0.2e1 * t90 * t338 * t479 + t318 * t597 / 0.2e1;
	unknown(8,1) = -t50 * t43 * t137 + t50 * t122 * t1 - t84 * t35 * t609 + 0.2e1 * t90 * t86 * t609 - t133 * t30 * t609 / 0.2e1;
	unknown(8,2) = -t578 * t504 - t50 * t28 * t506 - t50 * t78 * t509 + t311 * t624 - 0.2e1 * t90 * t338 * t509 + t318 * t624 / 0.2e1;
	unknown(8,3) = 0.0e0;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = -t578 * t520 - t50 * t28 * t522 - t50 * t78 * t525 + t311 * t637 - 0.2e1 * t90 * t338 * t525 + t318 * t637 / 0.2e1;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = t50 * t43 * t301 + t50 * t122 * t174 - t84 * t35 * t649 + 0.2e1 * t90 * t86 * t649 - t133 * t30 * t649 / 0.2e1;
	unknown(9,3) = 0.0e0;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = t50 * t43 * t475 + t50 * t122 * t361 - t84 * t35 * t663 + 0.2e1 * t90 * t86 * t663 - t133 * t30 * t663 / 0.2e1;
	JRD_rot = unknown;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:38
	% EndTime: 2020-04-11 22:53:42
	% DurationCPUTime: 3.43s
	% Computational Cost: add. (250397->587), mult. (258830->1480), div. (13420->31), fcn. (63950->10), ass. (0->491)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = t1 * qJD(1);
	t3 = sin(qJ(5));
	t4 = pkin(1) * t3;
	t5 = -t4 + pkin(2);
	t6 = pkin(2) * t4;
	t7 = 0.2e1 * t6;
	t8 = pkin(1) ^ 2;
	t9 = pkin(2) + qJ(2) + pkin(6) + pkin(3);
	t10 = pkin(2) - qJ(2) - pkin(6) - pkin(3);
	t12 = t10 * t9 - t7 + t8;
	t13 = pkin(2) + qJ(2) + pkin(6) - pkin(3);
	t14 = pkin(2) - qJ(2) - pkin(6) + pkin(3);
	t16 = t14 * t13 - t7 + t8;
	t17 = t16 * t12;
	t18 = sqrt(-t17);
	t20 = cos(qJ(5));
	t21 = t20 * pkin(1);
	t22 = pkin(2) ^ 2;
	t23 = qJ(2) + pkin(6);
	t24 = t23 ^ 2;
	t25 = pkin(3) ^ 2;
	t26 = -t7 + t8 + t22 + t24 - t25;
	t27 = t26 * t21;
	t28 = t18 * t5 + t27;
	t29 = 0.1e1 / t24;
	t30 = t29 * t28;
	t31 = t30 * t2;
	t32 = -t7 + t8 + t22;
	t33 = 0.1e1 / t32;
	t34 = t28 ^ 2;
	t35 = t29 * t34;
	t36 = t32 ^ 2;
	t37 = 0.1e1 / t36;
	t40 = pkin(1) * t18 * t20;
	t42 = t26 * t5 - t40;
	t43 = t42 ^ 2;
	t44 = t29 * t43;
	t46 = t37 * t35 + t37 * t44;
	t47 = sqrt(t46);
	t48 = 0.1e1 / t47;
	t49 = t48 * t33;
	t50 = 0.1e1 / pkin(3);
	t52 = 0.1e1 / t25;
	t53 = t52 * t29;
	t55 = t7 - t8 - t22 + t24 + t25;
	t56 = t55 ^ 2;
	t59 = t52 * t29 * t56 - t17 * t53;
	t60 = sqrt(t59);
	t61 = 0.1e1 / t60;
	t62 = t61 * t18 * t50;
	t63 = t62 * t49;
	t65 = sin(qJ(1));
	t66 = t20 * qJD(5);
	t67 = t18 * pkin(1);
	t68 = t67 * t66;
	t69 = 0.1e1 / t18;
	t70 = t69 * t5;
	t71 = pkin(1) * pkin(2);
	t72 = t71 * t66;
	t73 = 0.2e1 * t72;
	t76 = t10 * qJD(2) - qJD(2) * t9 - t73;
	t77 = t16 * t76;
	t80 = -qJD(2) * t13 + t14 * qJD(2) - t73;
	t81 = t80 * t12;
	t82 = -t77 - t81;
	t85 = pkin(1) * qJD(5);
	t87 = t26 * t3 * t85;
	t88 = qJD(2) * t23;
	t89 = -t72 + t88;
	t90 = 0.2e1 * t89 * t21;
	t91 = -t68 + t82 * t70 / 0.2e1 - t87 + t90;
	t93 = t33 * t29;
	t94 = t93 * t91 * t65;
	t95 = t50 * t48;
	t96 = t61 * t18;
	t97 = t96 * t95;
	t99 = t28 * t65;
	t101 = 0.1e1 / t24 / t23;
	t102 = t33 * t101;
	t103 = t102 * t99;
	t104 = qJD(2) * t96;
	t105 = t104 * t95;
	t108 = t29 * t99;
	t109 = t48 * t37;
	t110 = t50 * t109;
	t113 = pkin(2) * t21;
	t114 = t113 * qJD(5) * t96;
	t117 = t93 * t99;
	t119 = 0.1e1 / t47 / t46;
	t125 = qJD(2) * t37;
	t129 = 0.1e1 / t36 / t32;
	t133 = t29 * t42;
	t134 = t3 * qJD(5);
	t135 = t67 * t134;
	t136 = t69 * t20;
	t137 = t82 * pkin(1);
	t139 = t137 * t136 / 0.2e1;
	t141 = t26 * pkin(1) * t66;
	t143 = 0.2e1 * t89 * t5 + t135 - t139 - t141;
	t153 = -0.2e1 * t125 * t101 * t34 - 0.2e1 * t125 * t101 * t43 + 0.4e1 * t72 * t129 * t35 + 0.4e1 * t72 * t129 * t44 + 0.2e1 * t143 * t37 * t133 + 0.2e1 * t91 * t37 * t30;
	t154 = t153 * t96;
	t155 = t154 * t50 * t119;
	t159 = t82 * t61 * t69;
	t160 = t159 * t95;
	t164 = 0.1e1 / t60 / t59;
	t172 = t29 * t55;
	t173 = t72 + t88;
	t181 = 0.2e1 * qJD(2) * t17 * t52 * t101 - 0.2e1 * qJD(2) * t52 * t101 * t56 + 0.4e1 * t173 * t52 * t172 - t77 * t53 - t81 * t53;
	t182 = t181 * t164 * t18;
	t183 = t182 * t95;
	t186 = t133 * t2;
	t188 = t61 * t50 * t55;
	t189 = t188 * t49;
	t192 = t93 * t143 * t65;
	t193 = t55 * t48;
	t194 = t61 * t50;
	t195 = t194 * t193;
	t197 = t42 * t65;
	t198 = t102 * t197;
	t199 = qJD(2) * t194;
	t200 = t199 * t193;
	t203 = t29 * t197;
	t204 = t55 * t109;
	t207 = t113 * qJD(5) * t194;
	t210 = t93 * t197;
	t212 = t153 * t194;
	t213 = t212 * t55 * t119;
	t217 = 0.2e1 * t194 * t173 * t48;
	t220 = t181 * t164 * t50;
	t221 = t220 * t193;
	t224 = t63 * t31 + t97 * t94 - 0.2e1 * t105 * t103 + 0.2e1 * t114 * t110 * t108 - t155 * t117 / 0.2e1 + t160 * t117 / 0.2e1 - t183 * t117 / 0.2e1 - t189 * t186 - t195 * t192 + 0.2e1 * t200 * t198 - 0.2e1 * t207 * t204 * t203 + t213 * t210 / 0.2e1 - t217 * t210 + t221 * t210 / 0.2e1;
	t225 = -qJ(2) - pkin(6) - pkin(3);
	t227 = -qJ(2) - pkin(6) + pkin(3);
	t229 = -0.2e1 * t227 * t12 - 0.2e1 * t16 * t225;
	t233 = t229 * t70 / 0.2e1 + 0.2e1 * t23 * t21;
	t234 = 0.1e1 / t23;
	t235 = t234 * t233;
	t237 = t33 * t30;
	t238 = t33 * t235 - t237;
	t239 = 0.1e1 / t42;
	t240 = t239 * t238;
	t242 = 0.1e1 / t43;
	t244 = t242 * t34 + 0.1e1;
	t245 = 0.1e1 / t244;
	t246 = t245 * t32 * t23;
	t248 = t229 * pkin(1);
	t252 = -t248 * t136 / 0.2e1 + 0.2e1 * t23 * t5;
	t253 = t234 * t252;
	t255 = t33 * t133;
	t256 = t33 * t253 - t255;
	t257 = t28 * t256;
	t258 = t23 * t257;
	t259 = t242 * t32;
	t260 = t245 * t259;
	t262 = t246 * t240 - t260 * t258;
	t263 = t262 * t1;
	t266 = t48 * t37 * t29;
	t267 = t266 * t28 * t263;
	t268 = t72 * t188;
	t271 = t42 * t1;
	t272 = t29 * t271;
	t273 = t50 * t29;
	t275 = t50 * t234;
	t276 = t229 * t69;
	t279 = -t18 * t273 + t276 * t275 / 0.2e1;
	t280 = 0.1e1 / t55;
	t281 = t280 * t279;
	t283 = 0.1e1 / t56;
	t285 = -t283 * t17 + 0.1e1;
	t286 = 0.1e1 / t285;
	t287 = t286 * pkin(3) * t23;
	t292 = 0.2e1 * t50 * t234 * t23 - t50 * t172;
	t294 = pkin(3) * t23 * t292;
	t295 = t283 * t18;
	t296 = t286 * t295;
	t298 = t287 * t281 - t296 * t294;
	t299 = t298 * t109;
	t300 = t299 * t272;
	t301 = t72 * t62;
	t305 = t266 * t42 * t263;
	t308 = t28 * t1;
	t309 = t29 * t308;
	t310 = t299 * t309;
	t313 = t65 * qJD(1);
	t314 = t42 * t262;
	t315 = t29 * t314;
	t316 = t315 * t313;
	t318 = t237 * t313;
	t319 = t298 * t48;
	t320 = t188 * t319;
	t322 = t28 * t262;
	t323 = t29 * t322;
	t324 = t323 * t313;
	t326 = t255 * t313;
	t327 = t62 * t319;
	t329 = t101 * t42;
	t330 = t33 * t329;
	t331 = t330 * t263;
	t334 = t48 * t102;
	t335 = t334 * t308;
	t336 = t55 * t298;
	t337 = t199 * t336;
	t340 = t101 * t28;
	t341 = t33 * t340;
	t342 = t263 * t341;
	t345 = t334 * t271;
	t346 = t50 * t298;
	t347 = t104 * t346;
	t350 = t255 * t263;
	t357 = t119 * t93;
	t358 = t357 * t308;
	t359 = t212 * t336;
	t362 = -0.2e1 * t268 * t267 - 0.2e1 * t301 * t300 - 0.2e1 * t301 * t305 - 0.2e1 * t268 * t310 + t63 * t316 + t320 * t318 + t189 * t324 + t327 * t326 + 0.2e1 * t105 * t331 + 0.2e1 * t337 * t335 + 0.2e1 * t200 * t342 + 0.2e1 * t347 * t345 + t155 * t350 / 0.2e1 - t160 * t350 / 0.2e1 + t183 * t350 / 0.2e1 + t359 * t358 / 0.2e1;
	t363 = t48 * t93;
	t364 = t363 * t308;
	t365 = t220 * t336;
	t368 = t237 * t263;
	t373 = t357 * t271;
	t374 = t154 * t346;
	t377 = t363 * t271;
	t378 = t159 * t346;
	t381 = t182 * t346;
	t384 = t93 * t308;
	t396 = -0.1e1 / t18 / t17;
	t407 = 0.2e1 * qJD(2) * t12 + 0.2e1 * t16 * qJD(2) - 0.2e1 * t80 * t225 - 0.2e1 * t227 * t76;
	t423 = t285 ^ 2;
	t424 = 0.1e1 / t423;
	t429 = 0.1e1 / t56 / t55;
	t433 = 0.4e1 * t173 * t429 * t17 - t283 * t77 - t283 * t81;
	t440 = qJD(2) * t50;
	t456 = t82 * t286 * t283 * t69;
	t461 = 0.2e1 * t173 * t286 * t429 * t18;
	t465 = t433 * t424 * t295;
	t467 = t287 * t280 * (0.2e1 * qJD(2) * t18 * t50 * t101 - t82 * t69 * t273 / 0.2e1 - qJD(2) * t276 * t273 / 0.2e1 - t82 * t229 * t396 * t275 / 0.4e1 + t407 * t69 * t275 / 0.2e1) - 0.2e1 * t173 * t286 * pkin(3) * t23 * t283 * t279 + t286 * pkin(3) * qJD(2) * t281 - t433 * t424 * pkin(3) * t23 * t281 - t296 * pkin(3) * t23 * (0.2e1 * t50 * t234 * qJD(2) + 0.2e1 * t440 * t101 * t55 - 0.2e1 * t50 * t29 * t173 - 0.2e1 * t440 * t29 * t23) - t296 * pkin(3) * qJD(2) * t292 - t456 * t294 / 0.2e1 + 0.2e1 * t461 * t294 + t465 * t294;
	t468 = t467 * t48;
	t469 = t188 * t468;
	t472 = 0.2e1 * t61 * t50 * t173;
	t473 = t472 * t319;
	t475 = t69 * pkin(1);
	t476 = t229 * t475;
	t479 = t396 * t5;
	t493 = qJD(2) * t33;
	t498 = t29 * t91;
	t502 = t37 * t30;
	t511 = t143 * t245 * t32;
	t514 = t245 * t32 * qJD(2);
	t516 = qJD(5) * t23;
	t519 = t245 * pkin(2) * t21;
	t523 = t244 ^ 2;
	t524 = 0.1e1 / t523;
	t529 = 0.1e1 / t43 / t42;
	t532 = -t143 * t529 * t34 + t91 * t242 * t28;
	t533 = 0.2e1 * t532 * t524 * t32;
	t537 = t396 * t20;
	t556 = t29 * t143;
	t560 = t37 * t133;
	t575 = t245 * t242 * pkin(2) * t21;
	t580 = t143 * t245 * t529 * t32;
	t584 = 0.2e1 * t532 * t524 * t259;
	t586 = t246 * t239 * (t33 * t234 * (-t476 * t66 / 0.2e1 - t82 * t229 * t479 / 0.4e1 + t407 * t70 / 0.2e1 - 0.2e1 * t23 * t3 * t85 + 0.2e1 * qJD(2) * t21) - t493 * t29 * t233 + 0.2e1 * t72 * t37 * t235 - t33 * t498 + 0.2e1 * t493 * t340 - 0.2e1 * t72 * t502) - t511 * t23 * t242 * t238 + t514 * t240 - 0.2e1 * t519 * t516 * t240 - t533 * t23 * t240 - t260 * t23 * t28 * (t33 * t234 * (t476 * t134 / 0.2e1 + t82 * t248 * t537 / 0.4e1 - t407 * pkin(1) * t136 / 0.2e1 - 0.2e1 * t23 * pkin(1) * t66 + 0.2e1 * qJD(2) * t5) - t493 * t29 * t252 + 0.2e1 * t72 * t37 * t253 - t33 * t556 + 0.2e1 * t493 * t329 - 0.2e1 * t72 * t560) - t260 * t23 * t91 * t256 - t260 * qJD(2) * t257 + 0.2e1 * t575 * t516 * t257 + 0.2e1 * t580 * t258 + t584 * t258;
	t587 = t586 * t1;
	t588 = t30 * t587;
	t590 = t498 * t263;
	t593 = t472 * t49;
	t596 = t93 * t143 * t1;
	t598 = t93 * t271;
	t599 = t62 * t468;
	t601 = t133 * t587;
	t603 = t556 * t263;
	t606 = t93 * t91 * t1;
	t608 = t365 * t364 / 0.2e1 + t213 * t368 / 0.2e1 + t221 * t368 / 0.2e1 + t374 * t373 / 0.2e1 - t378 * t377 / 0.2e1 + t381 * t377 / 0.2e1 - t469 * t384 - t473 * t384 - t189 * t588 - t189 * t590 - t593 * t30 * t263 - t327 * t596 - t599 * t598 - t63 * t601 - t63 * t603 - t320 * t606;
	t614 = t16 * pkin(2) * t21 + t71 * t20 * t12;
	t618 = t20 ^ 2;
	t619 = t618 * t8;
	t622 = -0.2e1 * pkin(2) * t619 - t26 * t4 + t614 * t70 - t40;
	t623 = t234 * t622;
	t625 = t234 * t28;
	t626 = t37 * t625;
	t629 = 0.2e1 * t113 * t626 + t33 * t623;
	t630 = t239 * t629;
	t634 = 0.2e1 * t614 * pkin(1);
	t640 = pkin(1) * t18 * t3 - t634 * t136 / 0.2e1 - t27 - 0.2e1 * t71 * t20 * t5;
	t641 = t234 * t640;
	t643 = t234 * t42;
	t644 = t37 * t643;
	t647 = 0.2e1 * t113 * t644 + t33 * t641;
	t648 = t28 * t647;
	t649 = t23 * t648;
	t651 = t246 * t630 - t260 * t649;
	t652 = t651 * t1;
	t654 = t266 * t28 * t652;
	t657 = 0.2e1 * t614 * t69;
	t658 = t286 * t280;
	t663 = t658 * t657 / 0.2e1 - 0.2e1 * t296 * t113;
	t664 = t663 * t109;
	t665 = t664 * t272;
	t669 = t266 * t42 * t652;
	t672 = t664 * t309;
	t675 = t255 * t652;
	t682 = t55 * t663;
	t683 = t212 * t682;
	t686 = t220 * t682;
	t689 = t237 * t652;
	t694 = t50 * t663;
	t695 = t154 * t694;
	t698 = t159 * t694;
	t701 = t182 * t694;
	t704 = t42 * t651;
	t705 = t29 * t704;
	t706 = t705 * t313;
	t708 = t663 * t48;
	t709 = t188 * t708;
	t711 = -0.2e1 * t268 * t654 - 0.2e1 * t301 * t665 - 0.2e1 * t301 * t669 - 0.2e1 * t268 * t672 + t155 * t675 / 0.2e1 - t160 * t675 / 0.2e1 + t183 * t675 / 0.2e1 + t683 * t358 / 0.2e1 + t686 * t364 / 0.2e1 + t213 * t689 / 0.2e1 + t221 * t689 / 0.2e1 + t695 * t373 / 0.2e1 - t698 * t377 / 0.2e1 + t701 * t377 / 0.2e1 + t63 * t706 + t709 * t318;
	t712 = t28 * t651;
	t713 = t29 * t712;
	t714 = t713 * t313;
	t716 = t62 * t708;
	t718 = t330 * t652;
	t721 = t199 * t682;
	t724 = t341 * t652;
	t727 = t104 * t694;
	t745 = t80 * pkin(2) * t21 - t6 * qJD(5) * t12 - t16 * t71 * t134 + t71 * t20 * t76;
	t749 = t286 * t283;
	t767 = -t82 * t658 * t614 * t396 / 0.2e1 + t658 * t745 * t69 - t173 * t749 * t657 - t433 * t424 * t280 * t657 / 0.2e1 + 0.2e1 * t749 * t18 * pkin(2) * pkin(1) * t134 - t456 * t113 + 0.4e1 * t461 * t113 + 0.2e1 * t465 * t113;
	t768 = t767 * t48;
	t769 = t62 * t768;
	t771 = 0.2e1 * t614 * t475;
	t798 = pkin(2) * qJD(2) * t21;
	t803 = qJD(5) * t22 * t619;
	t806 = t71 * t134;
	t873 = t246 * t239 * (t33 * t234 * (t135 - t139 - t771 * t66 / 0.2e1 - t82 * t614 * t479 / 0.2e1 + t745 * t70 - t141 - 0.2e1 * t89 * t4 + 0.4e1 * t3 * qJD(5) * pkin(2) * t20 * t8) - t493 * t29 * t622 + 0.2e1 * t72 * t37 * t623 + 0.2e1 * t113 * t37 * t234 * t91 - 0.2e1 * t798 * t502 + 0.8e1 * t803 * t129 * t625 - 0.2e1 * t806 * t626) - t511 * t23 * t242 * t629 + t514 * t630 - 0.2e1 * t519 * t516 * t630 - t533 * t23 * t630 - t260 * t23 * t28 * (t33 * t234 * (t68 + t137 * t69 * t3 / 0.2e1 + t771 * t134 / 0.2e1 + t82 * t634 * t537 / 0.4e1 - t745 * pkin(1) * t136 + t87 - t90 + 0.2e1 * pkin(2) * t8 * t618 * qJD(5) + 0.2e1 * t6 * qJD(5) * t5) - t493 * t29 * t640 + 0.2e1 * t72 * t37 * t641 + 0.2e1 * t113 * t37 * t234 * t143 - 0.2e1 * t798 * t560 + 0.8e1 * t803 * t129 * t643 - 0.2e1 * t806 * t644) - t260 * t23 * t91 * t647 - t260 * qJD(2) * t648 + 0.2e1 * t575 * t516 * t648 + 0.2e1 * t580 * t649 + t584 * t649;
	t874 = t873 * t1;
	t875 = t133 * t874;
	t877 = t556 * t652;
	t880 = t188 * t768;
	t882 = t472 * t708;
	t884 = t30 * t874;
	t886 = t498 * t652;
	t888 = -t593 * t30 * t652 + 0.2e1 * t105 * t718 + t189 * t714 - t189 * t884 - t189 * t886 + 0.2e1 * t200 * t724 + t716 * t326 + 0.2e1 * t721 * t335 + 0.2e1 * t727 * t345 - t880 * t384 - t882 * t384 - t716 * t596 - t769 * t598 - t709 * t606 - t63 * t875 - t63 * t877;
	t890 = t30 * t313;
	t893 = t102 * t308;
	t905 = t133 * t313;
	t908 = t102 * t271;
	t919 = t63 * t890 - t97 * t606 + 0.2e1 * t105 * t893 - 0.2e1 * t114 * t110 * t309 + t155 * t384 / 0.2e1 - t160 * t384 / 0.2e1 + t183 * t384 / 0.2e1 - t189 * t905 + t195 * t596 - 0.2e1 * t200 * t908 + 0.2e1 * t207 * t204 * t272 - t213 * t598 / 0.2e1 + t217 * t598 - t221 * t598 / 0.2e1;
	t920 = t262 * t65;
	t922 = t266 * t42 * t920;
	t925 = t299 * t108;
	t929 = t266 * t28 * t920;
	t932 = t299 * t203;
	t935 = t586 * t65;
	t936 = t133 * t935;
	t938 = t556 * t920;
	t943 = t30 * t935;
	t945 = t498 * t920;
	t951 = t315 * t2;
	t953 = t237 * t2;
	t955 = -t593 * t30 * t920 - t469 * t117 - t473 * t117 - t189 * t943 - t189 * t945 - t327 * t192 - t599 * t210 - 0.2e1 * t268 * t925 - 0.2e1 * t268 * t929 - 0.2e1 * t301 * t922 - 0.2e1 * t301 * t932 - t320 * t94 - t320 * t953 - t63 * t936 - t63 * t938 - t63 * t951;
	t956 = t323 * t2;
	t958 = t255 * t2;
	t960 = t330 * t920;
	t963 = t334 * t99;
	t966 = t341 * t920;
	t969 = t334 * t197;
	t972 = t255 * t920;
	t979 = t357 * t99;
	t982 = t363 * t99;
	t985 = t237 * t920;
	t990 = t357 * t197;
	t993 = t363 * t197;
	t998 = -t189 * t956 - t327 * t958 + 0.2e1 * t105 * t960 + 0.2e1 * t337 * t963 + 0.2e1 * t200 * t966 + 0.2e1 * t347 * t969 + t155 * t972 / 0.2e1 - t160 * t972 / 0.2e1 + t183 * t972 / 0.2e1 + t359 * t979 / 0.2e1 + t365 * t982 / 0.2e1 + t213 * t985 / 0.2e1 + t221 * t985 / 0.2e1 + t374 * t990 / 0.2e1 - t378 * t993 / 0.2e1 + t381 * t993 / 0.2e1;
	t1000 = t651 * t65;
	t1002 = t266 * t42 * t1000;
	t1005 = t664 * t108;
	t1009 = t266 * t28 * t1000;
	t1012 = t664 * t203;
	t1016 = t873 * t65;
	t1017 = t133 * t1016;
	t1019 = t556 * t1000;
	t1024 = t30 * t1016;
	t1026 = t498 * t1000;
	t1031 = t255 * t1000;
	t1036 = -0.2e1 * t301 * t1002 - 0.2e1 * t268 * t1005 - 0.2e1 * t268 * t1009 - 0.2e1 * t301 * t1012 - t769 * t210 - t63 * t1017 - t63 * t1019 - t709 * t94 - t880 * t117 - t882 * t117 - t189 * t1024 - t189 * t1026 - t593 * t30 * t1000 - t716 * t192 + t155 * t1031 / 0.2e1 - t160 * t1031 / 0.2e1;
	t1043 = t237 * t1000;
	t1054 = t705 * t2;
	t1057 = t713 * t2;
	t1060 = t330 * t1000;
	t1065 = t341 * t1000;
	t1070 = t183 * t1031 / 0.2e1 + t683 * t979 / 0.2e1 + t686 * t982 / 0.2e1 + t213 * t1043 / 0.2e1 + t221 * t1043 / 0.2e1 + t695 * t990 / 0.2e1 - t698 * t993 / 0.2e1 + t701 * t993 / 0.2e1 - t63 * t1054 - t709 * t953 - t189 * t1057 - t716 * t958 + 0.2e1 * t105 * t1060 + 0.2e1 * t721 * t963 + 0.2e1 * t200 * t1065 + 0.2e1 * t727 * t969;
	t1072 = t119 * t33;
	t1073 = t1072 * t133;
	t1076 = t49 * t133;
	t1079 = t93 * t314;
	t1084 = t1072 * t30;
	t1087 = t49 * t30;
	t1092 = t93 * t322;
	t1095 = t102 * t322;
	t1098 = t49 * t329;
	t1101 = t102 * t314;
	t1104 = t49 * t340;
	t1111 = -t359 * t1073 / 0.2e1 - t365 * t1076 / 0.2e1 - t213 * t1079 / 0.2e1 - t221 * t1079 / 0.2e1 + t374 * t1084 / 0.2e1 - t378 * t1087 / 0.2e1 + t381 * t1087 / 0.2e1 + t155 * t1092 / 0.2e1 + 0.2e1 * t105 * t1095 - 0.2e1 * t337 * t1098 - 0.2e1 * t200 * t1101 + 0.2e1 * t347 * t1104 - t160 * t1092 / 0.2e1 + t183 * t1092 / 0.2e1;
	t1112 = t49 * t556;
	t1113 = t194 * t336;
	t1116 = t194 * t55 * t467;
	t1119 = 0.2e1 * t194 * t173 * t298;
	t1122 = t93 * t42 * t586;
	t1125 = t93 * t143 * t262;
	t1128 = t49 * t498;
	t1129 = t96 * t346;
	t1132 = t96 * t50 * t467;
	t1135 = t93 * t28 * t586;
	t1138 = t93 * t91 * t262;
	t1143 = t55 * t319;
	t1150 = t50 * t319;
	t1154 = -0.2e1 * t114 * t110 * t323 - 0.2e1 * t114 * t1150 * t502 + 0.2e1 * t207 * t1143 * t560 + 0.2e1 * t207 * t204 * t315 + t1116 * t1076 + t1119 * t1076 + t217 * t1079 - t1132 * t1087 + t1113 * t1112 + t195 * t1122 + t195 * t1125 - t1129 * t1128 - t97 * t1135 - t97 * t1138;
	t1162 = t93 * t712;
	t1169 = t102 * t704;
	t1174 = t102 * t712;
	t1183 = t93 * t704;
	t1188 = t695 * t1084 / 0.2e1 - t698 * t1087 / 0.2e1 + t701 * t1087 / 0.2e1 + t155 * t1162 / 0.2e1 - t160 * t1162 / 0.2e1 - 0.2e1 * t721 * t1098 - 0.2e1 * t200 * t1169 + 0.2e1 * t727 * t1104 + 0.2e1 * t105 * t1174 + t183 * t1162 / 0.2e1 - t683 * t1073 / 0.2e1 - t686 * t1076 / 0.2e1 - t213 * t1183 / 0.2e1 - t221 * t1183 / 0.2e1;
	t1190 = t93 * t28 * t873;
	t1193 = t93 * t91 * t651;
	t1195 = t194 * t682;
	t1198 = t194 * t55 * t767;
	t1201 = 0.2e1 * t194 * t173 * t663;
	t1204 = t93 * t42 * t873;
	t1207 = t93 * t143 * t651;
	t1210 = t96 * t694;
	t1213 = t96 * t50 * t767;
	t1218 = t50 * t708;
	t1225 = t55 * t708;
	t1229 = -0.2e1 * t114 * t110 * t713 - 0.2e1 * t114 * t1218 * t502 + 0.2e1 * t207 * t1225 * t560 + 0.2e1 * t207 * t204 * t705 + t1198 * t1076 + t1201 * t1076 - t1213 * t1087 + t1195 * t1112 - t1210 * t1128 + t217 * t1183 - t97 * t1190 - t97 * t1193 + t195 * t1204 + t195 * t1207;
	t1256 = t189 * t31 + t195 * t94 - 0.2e1 * t200 * t103 + 0.2e1 * t207 * t204 * t108 - t213 * t117 / 0.2e1 + t217 * t117 - t221 * t117 / 0.2e1 + t63 * t186 + t97 * t192 - 0.2e1 * t105 * t198 + 0.2e1 * t114 * t110 * t203 - t155 * t210 / 0.2e1 + t160 * t210 / 0.2e1 - t183 * t210 / 0.2e1;
	t1287 = -t63 * t324 + t320 * t326 + 0.2e1 * t200 * t331 - 0.2e1 * t347 * t335 - 0.2e1 * t105 * t342 + 0.2e1 * t337 * t345 + t213 * t350 / 0.2e1 + t221 * t350 / 0.2e1 - t374 * t358 / 0.2e1 + t378 * t364 / 0.2e1 - t381 * t364 / 0.2e1 - t155 * t368 / 0.2e1 + t160 * t368 / 0.2e1 - t183 * t368 / 0.2e1 + t359 * t373 / 0.2e1 + t365 * t377 / 0.2e1;
	t1309 = -t593 * t133 * t263 + t189 * t316 - t189 * t601 - t189 * t603 + 0.2e1 * t301 * t267 - 0.2e1 * t268 * t300 - 0.2e1 * t268 * t305 + 0.2e1 * t301 * t310 - t327 * t318 - t320 * t596 + t327 * t606 + t599 * t384 - t469 * t598 - t473 * t598 + t63 * t588 + t63 * t590;
	t1339 = -t695 * t358 / 0.2e1 + t698 * t364 / 0.2e1 - t701 * t364 / 0.2e1 - t155 * t689 / 0.2e1 + t160 * t689 / 0.2e1 - t183 * t689 / 0.2e1 + t683 * t373 / 0.2e1 + t686 * t377 / 0.2e1 + t189 * t706 - t716 * t318 - t63 * t714 + t709 * t326 + 0.2e1 * t200 * t718 - 0.2e1 * t727 * t335 - 0.2e1 * t105 * t724 + 0.2e1 * t721 * t345;
	t1363 = t213 * t675 / 0.2e1 + t221 * t675 / 0.2e1 - 0.2e1 * t268 * t665 - 0.2e1 * t268 * t669 + 0.2e1 * t301 * t672 + 0.2e1 * t301 * t654 - t189 * t875 - t189 * t877 - t593 * t133 * t652 + t716 * t606 + t769 * t384 + t63 * t884 + t63 * t886 - t709 * t596 - t880 * t598 - t882 * t598;
	t1390 = t189 * t890 - t195 * t606 + 0.2e1 * t200 * t893 - 0.2e1 * t207 * t204 * t309 + t213 * t384 / 0.2e1 - t217 * t384 + t221 * t384 / 0.2e1 + t63 * t905 - t97 * t596 + 0.2e1 * t105 * t908 - 0.2e1 * t114 * t110 * t272 + t155 * t598 / 0.2e1 - t160 * t598 / 0.2e1 + t183 * t598 / 0.2e1;
	t1420 = -0.2e1 * t268 * t922 + 0.2e1 * t301 * t925 + 0.2e1 * t301 * t929 - 0.2e1 * t268 * t932 + t63 * t956 - t320 * t958 - t189 * t951 - 0.2e1 * t105 * t966 + 0.2e1 * t337 * t969 + 0.2e1 * t200 * t960 - 0.2e1 * t347 * t963 - t374 * t979 / 0.2e1 + t378 * t982 / 0.2e1 - t381 * t982 / 0.2e1 - t155 * t985 / 0.2e1 + t160 * t985 / 0.2e1;
	t1443 = -t183 * t985 / 0.2e1 + t359 * t990 / 0.2e1 + t365 * t993 / 0.2e1 + t213 * t972 / 0.2e1 + t221 * t972 / 0.2e1 + t327 * t953 + t63 * t943 + t63 * t945 - t320 * t192 - t469 * t210 - t473 * t210 - t189 * t936 - t189 * t938 - t593 * t133 * t920 + t327 * t94 + t599 * t117;
	t1475 = -0.2e1 * t268 * t1002 + 0.2e1 * t301 * t1005 + 0.2e1 * t301 * t1009 - 0.2e1 * t268 * t1012 + t213 * t1031 / 0.2e1 + t221 * t1031 / 0.2e1 - t695 * t979 / 0.2e1 + t698 * t982 / 0.2e1 - t701 * t982 / 0.2e1 - t155 * t1043 / 0.2e1 + t160 * t1043 / 0.2e1 - t183 * t1043 / 0.2e1 + t683 * t990 / 0.2e1 + t686 * t993 / 0.2e1 - t189 * t1054 + t716 * t953;
	t1497 = -t593 * t133 * t1000 - t189 * t1017 - t189 * t1019 + t63 * t1024 + t63 * t1026 - 0.2e1 * t105 * t1065 + t63 * t1057 + 0.2e1 * t200 * t1060 + t769 * t117 - t709 * t192 - t880 * t210 - t882 * t210 - t709 * t958 + t716 * t94 + 0.2e1 * t721 * t969 - 0.2e1 * t727 * t963;
	t1517 = 0.2e1 * t105 * t1101 - t1132 * t1076 - t1116 * t1087 - t1119 * t1087 - t217 * t1092 + 0.2e1 * t200 * t1095 + 0.2e1 * t347 * t1098 + 0.2e1 * t337 * t1104 - t1129 * t1112 - t1113 * t1128 - t97 * t1122 - t97 * t1125 - t195 * t1135 - t195 * t1138;
	t1550 = t213 * t1092 / 0.2e1 + t221 * t1092 / 0.2e1 + t374 * t1073 / 0.2e1 - t378 * t1076 / 0.2e1 + t381 * t1076 / 0.2e1 + t155 * t1079 / 0.2e1 - t160 * t1079 / 0.2e1 + t183 * t1079 / 0.2e1 + t359 * t1084 / 0.2e1 + t365 * t1087 / 0.2e1 - 0.2e1 * t207 * t204 * t323 - 0.2e1 * t114 * t1150 * t560 - 0.2e1 * t114 * t110 * t315 - 0.2e1 * t207 * t1143 * t502;
	t1570 = 0.2e1 * t105 * t1169 - t1213 * t1076 - t1198 * t1087 - t1201 * t1087 + 0.2e1 * t727 * t1098 + 0.2e1 * t721 * t1104 - t1210 * t1112 - t1195 * t1128 - t217 * t1162 + 0.2e1 * t200 * t1174 - t195 * t1190 - t195 * t1193 - t97 * t1204 - t97 * t1207;
	t1603 = t213 * t1162 / 0.2e1 + t221 * t1162 / 0.2e1 + t695 * t1073 / 0.2e1 - t698 * t1076 / 0.2e1 + t701 * t1076 / 0.2e1 + t155 * t1183 / 0.2e1 - t160 * t1183 / 0.2e1 + t183 * t1183 / 0.2e1 + t683 * t1084 / 0.2e1 + t686 * t1087 / 0.2e1 - 0.2e1 * t207 * t204 * t713 - 0.2e1 * t114 * t1218 * t560 - 0.2e1 * t114 * t110 * t705 - 0.2e1 * t207 * t1225 * t502;
	unknown(1,1) = t224;
	unknown(1,2) = t608 + t362;
	unknown(1,3) = 0.0e0;
	unknown(1,4) = 0.0e0;
	unknown(1,5) = t888 + t711;
	unknown(2,1) = t919;
	unknown(2,2) = t998 + t955;
	unknown(2,3) = 0.0e0;
	unknown(2,4) = 0.0e0;
	unknown(2,5) = t1070 + t1036;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = t1154 + t1111;
	unknown(3,3) = 0.0e0;
	unknown(3,4) = 0.0e0;
	unknown(3,5) = t1229 + t1188;
	unknown(4,1) = t1256;
	unknown(4,2) = t1309 + t1287;
	unknown(4,3) = 0.0e0;
	unknown(4,4) = 0.0e0;
	unknown(4,5) = t1363 + t1339;
	unknown(5,1) = t1390;
	unknown(5,2) = t1443 + t1420;
	unknown(5,3) = 0.0e0;
	unknown(5,4) = 0.0e0;
	unknown(5,5) = t1497 + t1475;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = t1550 + t1517;
	unknown(6,3) = 0.0e0;
	unknown(6,4) = 0.0e0;
	unknown(6,5) = t1603 + t1570;
	unknown(7,1) = -t313;
	unknown(7,2) = 0.0e0;
	unknown(7,3) = 0.0e0;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = 0.0e0;
	unknown(8,1) = t2;
	unknown(8,2) = 0.0e0;
	unknown(8,3) = 0.0e0;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = 0.0e0;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = 0.0e0;
	unknown(9,3) = 0.0e0;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = 0.0e0;
	JRD_rot = unknown;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:41
	% EndTime: 2020-04-11 22:53:44
	% DurationCPUTime: 3.32s
	% Computational Cost: add. (246683->551), mult. (251278->1240), div. (13076->27), fcn. (63650->11), ass. (0->466)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = t1 * qJD(1);
	t3 = sin(qJ(5));
	t4 = pkin(1) * t3;
	t5 = -t4 + pkin(2);
	t6 = pkin(2) * t4;
	t7 = 0.2e1 * t6;
	t8 = pkin(1) ^ 2;
	t9 = pkin(2) + qJ(2) + pkin(6) + pkin(3);
	t10 = pkin(2) - qJ(2) - pkin(6) - pkin(3);
	t12 = t10 * t9 - t7 + t8;
	t13 = pkin(2) + qJ(2) + pkin(6) - pkin(3);
	t14 = pkin(2) - qJ(2) - pkin(6) + pkin(3);
	t16 = t14 * t13 - t7 + t8;
	t17 = t16 * t12;
	t18 = sqrt(-t17);
	t20 = cos(qJ(5));
	t21 = t20 * pkin(1);
	t22 = pkin(2) ^ 2;
	t23 = qJ(2) + pkin(6);
	t24 = t23 ^ 2;
	t25 = pkin(3) ^ 2;
	t26 = -t7 + t8 + t22 + t24 - t25;
	t27 = t26 * t21;
	t28 = t18 * t5 + t27;
	t29 = t28 * t2;
	t30 = 0.1e1 / t23;
	t31 = -t7 + t8 + t22;
	t32 = 0.1e1 / t31;
	t33 = t32 * t30;
	t34 = t28 ^ 2;
	t35 = 0.1e1 / t24;
	t36 = t35 * t34;
	t37 = t31 ^ 2;
	t38 = 0.1e1 / t37;
	t41 = pkin(1) * t18 * t20;
	t43 = t26 * t5 - t41;
	t44 = t43 ^ 2;
	t45 = t35 * t44;
	t47 = t38 * t36 + t38 * t45;
	t48 = sqrt(t47);
	t49 = 0.1e1 / t48;
	t50 = 0.1e1 / pkin(3);
	t51 = t50 * t30;
	t53 = t7 - t8 - t22 + t24 + t25;
	t56 = atan2(t18 * t51, t50 * t30 * t53);
	t57 = t56 + qJ(3);
	t58 = sin(t57);
	t59 = t58 * t49;
	t60 = t59 * t33;
	t62 = sin(qJ(1));
	t63 = t20 * qJD(5);
	t64 = t18 * pkin(1);
	t65 = t64 * t63;
	t66 = 0.1e1 / t18;
	t67 = t66 * t5;
	t68 = pkin(1) * pkin(2);
	t69 = t68 * t63;
	t70 = 0.2e1 * t69;
	t73 = t10 * qJD(2) - qJD(2) * t9 - t70;
	t74 = t16 * t73;
	t77 = -qJD(2) * t13 + t14 * qJD(2) - t70;
	t78 = t77 * t12;
	t79 = -t74 - t78;
	t82 = pkin(1) * qJD(5);
	t84 = t26 * t3 * t82;
	t85 = qJD(2) * t23;
	t86 = -t69 + t85;
	t87 = 0.2e1 * t86 * t21;
	t88 = -t65 + t79 * t67 / 0.2e1 - t84 + t87;
	t90 = t30 * t88 * t62;
	t91 = t49 * t32;
	t92 = t58 * t91;
	t94 = t28 * t62;
	t95 = t35 * t94;
	t96 = qJD(2) * t58;
	t97 = t96 * t91;
	t100 = t49 * t38 * t30;
	t101 = t100 * t94;
	t103 = pkin(2) * t21;
	t104 = t103 * qJD(5) * t58;
	t107 = t30 * t94;
	t109 = 0.1e1 / t48 / t47;
	t110 = t109 * t32;
	t111 = t35 * t28;
	t116 = 0.1e1 / t24 / t23;
	t118 = qJD(2) * t38;
	t122 = 0.1e1 / t37 / t31;
	t126 = t35 * t43;
	t127 = t3 * qJD(5);
	t128 = t64 * t127;
	t129 = t66 * t20;
	t130 = t79 * pkin(1);
	t132 = t130 * t129 / 0.2e1;
	t134 = t26 * pkin(1) * t63;
	t136 = 0.2e1 * t86 * t5 + t128 - t132 - t134;
	t146 = 0.2e1 * t88 * t38 * t111 - 0.2e1 * t118 * t116 * t34 - 0.2e1 * t118 * t116 * t44 + 0.4e1 * t69 * t122 * t36 + 0.4e1 * t69 * t122 * t45 + 0.2e1 * t136 * t38 * t126;
	t147 = t146 * t58;
	t148 = t147 * t110;
	t151 = t50 * t35;
	t152 = qJD(2) * t18;
	t154 = t79 * t66;
	t158 = 0.1e1 / t53;
	t161 = t53 ^ 2;
	t162 = 0.1e1 / t161;
	t164 = -t162 * t17 + 0.1e1;
	t165 = 0.1e1 / t164;
	t166 = t165 * pkin(3) * t23;
	t168 = t69 + t85;
	t171 = t35 * t53;
	t172 = qJD(2) * t50;
	t177 = t162 * t18;
	t178 = t165 * t177;
	t180 = t166 * t158 * (-t152 * t151 + t154 * t51 / 0.2e1) - t178 * pkin(3) * t23 * (0.2e1 * t50 * t30 * t168 - t172 * t171) + qJD(3);
	t181 = cos(t57);
	t182 = t181 * t180;
	t183 = t182 * t91;
	t185 = t43 * t2;
	t186 = t181 * t49;
	t187 = t186 * t33;
	t190 = t30 * t136 * t62;
	t191 = t181 * t91;
	t193 = t43 * t62;
	t194 = t35 * t193;
	t195 = qJD(2) * t181;
	t196 = t195 * t91;
	t198 = t100 * t193;
	t200 = t103 * qJD(5) * t181;
	t203 = t30 * t193;
	t204 = t146 * t181;
	t205 = t204 * t110;
	t208 = t58 * t180;
	t209 = t208 * t91;
	t211 = t60 * t29 + t92 * t90 - t97 * t95 + 0.2e1 * t104 * t101 - t148 * t107 / 0.2e1 + t183 * t107 - t187 * t185 - t191 * t190 + t196 * t194 - 0.2e1 * t200 * t198 + t205 * t203 / 0.2e1 + t209 * t203;
	t212 = t28 * t1;
	t213 = t100 * t212;
	t215 = -qJ(2) - pkin(6) - pkin(3);
	t217 = -qJ(2) - pkin(6) + pkin(3);
	t219 = -0.2e1 * t217 * t12 - 0.2e1 * t16 * t215;
	t220 = t219 * t66;
	t223 = -t18 * t151 + t220 * t51 / 0.2e1;
	t224 = t158 * t223;
	t229 = 0.2e1 * t50 * t30 * t23 - t50 * t171;
	t231 = pkin(3) * t23 * t229;
	t233 = t166 * t224 - t178 * t231;
	t234 = t181 * t233;
	t236 = t103 * qJD(5) * t234;
	t239 = t43 * t1;
	t240 = t100 * t239;
	t241 = t58 * t233;
	t243 = t103 * qJD(5) * t241;
	t249 = t219 * t67 / 0.2e1 + 0.2e1 * t23 * t21;
	t250 = t30 * t249;
	t252 = t32 * t111;
	t253 = t32 * t250 - t252;
	t254 = 0.1e1 / t43;
	t255 = t254 * t253;
	t257 = 0.1e1 / t44;
	t259 = t257 * t34 + 0.1e1;
	t260 = 0.1e1 / t259;
	t261 = t260 * t31 * t23;
	t263 = t219 * pkin(1);
	t267 = -t263 * t129 / 0.2e1 + 0.2e1 * t23 * t5;
	t268 = t30 * t267;
	t270 = t32 * t126;
	t271 = t32 * t268 - t270;
	t272 = t28 * t271;
	t273 = t23 * t272;
	t274 = t257 * t31;
	t275 = t274 * t260;
	t277 = t261 * t255 - t275 * t273;
	t278 = t277 * t1;
	t279 = t30 * t43;
	t280 = t38 * t279;
	t281 = t280 * t278;
	t283 = t103 * qJD(5) * t59;
	t286 = t30 * t28;
	t287 = t38 * t286;
	t288 = t287 * t278;
	t290 = t103 * qJD(5) * t186;
	t293 = t62 * qJD(1);
	t294 = t43 * t277;
	t295 = t294 * t293;
	t297 = t28 * t277;
	t298 = t297 * t293;
	t300 = t126 * t278;
	t302 = t111 * t278;
	t304 = t279 * t278;
	t308 = t30 * t88 * t1;
	t309 = t234 * t91;
	t311 = t30 * t212;
	t321 = -0.1e1 / t18 / t17;
	t332 = 0.2e1 * qJD(2) * t12 + 0.2e1 * t16 * qJD(2) - 0.2e1 * t77 * t215 - 0.2e1 * t217 * t73;
	t348 = t164 ^ 2;
	t349 = 0.1e1 / t348;
	t354 = 0.1e1 / t161 / t53;
	t358 = 0.4e1 * t168 * t354 * t17 - t162 * t74 - t162 * t78;
	t380 = t79 * t165 * t162 * t66;
	t385 = 0.2e1 * t168 * t165 * t354 * t18;
	t389 = t358 * t349 * t177;
	t391 = t166 * t158 * (0.2e1 * t152 * t50 * t116 - t154 * t151 / 0.2e1 - qJD(2) * t220 * t151 / 0.2e1 - t79 * t219 * t321 * t51 / 0.4e1 + t332 * t66 * t51 / 0.2e1) - 0.2e1 * t168 * t165 * pkin(3) * t23 * t162 * t223 + t165 * pkin(3) * qJD(2) * t224 - t358 * t349 * pkin(3) * t23 * t224 - t178 * pkin(3) * t23 * (0.2e1 * t50 * t30 * qJD(2) + 0.2e1 * t172 * t116 * t53 - 0.2e1 * t50 * t35 * t168 - 0.2e1 * t172 * t35 * t23) - t178 * pkin(3) * qJD(2) * t229 - t380 * t231 / 0.2e1 + 0.2e1 * t385 * t231 + t389 * t231;
	t393 = t181 * t391 * t91;
	t396 = t30 * t136 * t1;
	t397 = t241 * t91;
	t399 = t30 * t239;
	t401 = t58 * t391 * t91;
	t403 = t66 * pkin(1);
	t404 = t219 * t403;
	t407 = t321 * t5;
	t421 = qJD(2) * t32;
	t431 = t38 * t111;
	t440 = t136 * t260 * t31;
	t443 = t260 * t31 * qJD(2);
	t445 = qJD(5) * t23;
	t448 = t260 * pkin(2) * t21;
	t452 = t259 ^ 2;
	t453 = 0.1e1 / t452;
	t458 = 0.1e1 / t44 / t43;
	t461 = -t136 * t458 * t34 + t88 * t257 * t28;
	t462 = 0.2e1 * t461 * t453 * t31;
	t466 = t321 * t20;
	t490 = t38 * t126;
	t505 = t260 * t257 * pkin(2) * t21;
	t510 = t136 * t260 * t458 * t31;
	t514 = 0.2e1 * t461 * t453 * t274;
	t516 = t261 * t254 * (t32 * t30 * (-t404 * t63 / 0.2e1 - t79 * t219 * t407 / 0.4e1 + t332 * t67 / 0.2e1 - 0.2e1 * t23 * t3 * t82 + 0.2e1 * qJD(2) * t21) - t421 * t35 * t249 + 0.2e1 * t69 * t38 * t250 - t32 * t35 * t88 + 0.2e1 * t421 * t116 * t28 - 0.2e1 * t69 * t431) - t440 * t23 * t257 * t253 + t443 * t255 - 0.2e1 * t448 * t445 * t255 - t462 * t23 * t255 - t275 * t23 * t28 * (t32 * t30 * (t404 * t127 / 0.2e1 + t79 * t263 * t466 / 0.4e1 - t332 * pkin(1) * t129 / 0.2e1 - 0.2e1 * t23 * pkin(1) * t63 + 0.2e1 * qJD(2) * t5) - t421 * t35 * t267 + 0.2e1 * t69 * t38 * t268 - t32 * t35 * t136 + 0.2e1 * t421 * t116 * t43 - 0.2e1 * t69 * t490) - t275 * t23 * t88 * t271 - t275 * qJD(2) * t272 + 0.2e1 * t505 * t445 * t272 + 0.2e1 * t510 * t273 + t514 * t273;
	t517 = t516 * t1;
	t518 = t43 * t517;
	t520 = -0.2e1 * t236 * t213 - 0.2e1 * t243 * t240 - 0.2e1 * t283 * t281 - 0.2e1 * t290 * t288 + t60 * t295 + t187 * t298 + t97 * t300 + t196 * t302 + t148 * t304 / 0.2e1 - t309 * t308 - t393 * t311 - t397 * t396 - t401 * t399 - t60 * t518;
	t521 = t136 * t278;
	t523 = t28 * t517;
	t525 = t88 * t278;
	t527 = t286 * t278;
	t532 = t279 * t293;
	t534 = t286 * t293;
	t536 = t32 * t35;
	t537 = t536 * t239;
	t538 = t233 * t49;
	t539 = t96 * t538;
	t541 = t536 * t212;
	t542 = t195 * t538;
	t544 = t33 * t239;
	t545 = t233 * t109;
	t546 = t147 * t545;
	t549 = t33 * t212;
	t550 = t204 * t545;
	t553 = t182 * t538;
	t555 = t208 * t538;
	t557 = -t60 * t521 - t187 * t523 - t187 * t525 + t205 * t527 / 0.2e1 - t183 * t304 + t209 * t527 + t397 * t532 + t309 * t534 + t539 * t537 + t542 * t541 + t546 * t544 / 0.2e1 + t550 * t549 / 0.2e1 - t553 * t544 + t555 * t549;
	t559 = t28 * t293;
	t562 = t35 * t212;
	t569 = t43 * t293;
	t572 = t35 * t239;
	t579 = t187 * t559 - t191 * t308 + t196 * t562 - 0.2e1 * t200 * t213 + t205 * t311 / 0.2e1 + t209 * t311 + t60 * t569 - t92 * t396 + t97 * t572 - 0.2e1 * t104 * t240 + t148 * t399 / 0.2e1 - t183 * t399;
	t584 = t16 * pkin(2) * t21 + t68 * t20 * t12;
	t585 = 0.2e1 * t584 * t66;
	t586 = t165 * t158;
	t591 = t586 * t585 / 0.2e1 - 0.2e1 * t178 * t103;
	t592 = t58 * t591;
	t594 = t103 * qJD(5) * t592;
	t597 = t181 * t591;
	t599 = t103 * qJD(5) * t597;
	t605 = t20 ^ 2;
	t606 = t605 * t8;
	t609 = -0.2e1 * pkin(2) * t606 - t26 * t4 + t584 * t67 - t41;
	t610 = t30 * t609;
	t614 = 0.2e1 * t103 * t287 + t32 * t610;
	t615 = t254 * t614;
	t619 = 0.2e1 * t584 * pkin(1);
	t625 = pkin(1) * t18 * t3 - t619 * t129 / 0.2e1 - t27 - 0.2e1 * t68 * t20 * t5;
	t626 = t30 * t625;
	t630 = 0.2e1 * t103 * t280 + t32 * t626;
	t631 = t28 * t630;
	t632 = t23 * t631;
	t634 = t261 * t615 - t275 * t632;
	t635 = t634 * t1;
	t636 = t280 * t635;
	t639 = t287 * t635;
	t642 = t597 * t91;
	t656 = t77 * pkin(2) * t21 - t6 * qJD(5) * t12 - t16 * t68 * t127 + t68 * t20 * t73;
	t660 = t165 * t162;
	t678 = -t79 * t586 * t584 * t321 / 0.2e1 + t586 * t656 * t66 - t168 * t660 * t585 - t358 * t349 * t158 * t585 / 0.2e1 + 0.2e1 * t660 * t18 * pkin(2) * pkin(1) * t127 - t380 * t103 + 0.4e1 * t385 * t103 + 0.2e1 * t389 * t103;
	t680 = t181 * t678 * t91;
	t682 = t592 * t91;
	t685 = t58 * t678 * t91;
	t687 = 0.2e1 * t584 * t403;
	t709 = t30 * t88;
	t714 = pkin(2) * qJD(2) * t21;
	t719 = qJD(5) * t22 * t606;
	t722 = t68 * t127;
	t763 = t30 * t136;
	t789 = t261 * t254 * (t32 * t30 * (t128 - t132 - t687 * t63 / 0.2e1 - t79 * t584 * t407 / 0.2e1 + t656 * t67 - t134 - 0.2e1 * t86 * t4 + 0.4e1 * t3 * qJD(5) * pkin(2) * t20 * t8) - t421 * t35 * t609 + 0.2e1 * t69 * t38 * t610 + 0.2e1 * t103 * t38 * t709 - 0.2e1 * t714 * t431 + 0.8e1 * t719 * t122 * t286 - 0.2e1 * t722 * t287) - t440 * t23 * t257 * t614 + t443 * t615 - 0.2e1 * t448 * t445 * t615 - t462 * t23 * t615 - t275 * t23 * t28 * (t32 * t30 * (t65 + t130 * t66 * t3 / 0.2e1 + t687 * t127 / 0.2e1 + t79 * t619 * t466 / 0.4e1 - t656 * pkin(1) * t129 + t84 - t87 + 0.2e1 * pkin(2) * t8 * t605 * qJD(5) + 0.2e1 * t6 * qJD(5) * t5) - t421 * t35 * t625 + 0.2e1 * t69 * t38 * t626 + 0.2e1 * t103 * t38 * t763 - 0.2e1 * t714 * t490 + 0.8e1 * t719 * t122 * t279 - 0.2e1 * t722 * t280) - t275 * t23 * t88 * t630 - t275 * qJD(2) * t631 + 0.2e1 * t505 * t445 * t631 + 0.2e1 * t510 * t632 + t514 * t632;
	t790 = t789 * t1;
	t791 = t43 * t790;
	t793 = t136 * t635;
	t795 = t28 * t790;
	t797 = t88 * t635;
	t799 = t591 * t49;
	t800 = t208 * t799;
	t802 = t182 * t799;
	t804 = -t187 * t795 - t187 * t797 - 0.2e1 * t599 * t213 - 0.2e1 * t594 * t240 - 0.2e1 * t283 * t636 - 0.2e1 * t290 * t639 - t642 * t308 - t680 * t311 - t682 * t396 - t685 * t399 - t802 * t544 + t800 * t549 - t60 * t791 - t60 * t793;
	t805 = t43 * t634;
	t806 = t805 * t293;
	t808 = t28 * t634;
	t809 = t808 * t293;
	t811 = t126 * t635;
	t813 = t111 * t635;
	t815 = t279 * t635;
	t818 = t286 * t635;
	t825 = t195 * t799;
	t827 = t96 * t799;
	t829 = t591 * t109;
	t830 = t204 * t829;
	t833 = t147 * t829;
	t836 = t60 * t806 + t187 * t809 + t97 * t811 + t196 * t813 + t148 * t815 / 0.2e1 + t205 * t818 / 0.2e1 - t183 * t815 + t209 * t818 + t642 * t534 + t682 * t532 + t825 * t541 + t827 * t537 + t830 * t549 / 0.2e1 + t833 * t544 / 0.2e1;
	t854 = t60 * t559 - t92 * t308 + t97 * t562 - 0.2e1 * t104 * t213 + t148 * t311 / 0.2e1 - t183 * t311 - t187 * t569 + t191 * t396 - t196 * t572 + 0.2e1 * t200 * t240 - t205 * t399 / 0.2e1 - t209 * t399;
	t855 = t277 * t62;
	t856 = t280 * t855;
	t859 = t287 * t855;
	t870 = t516 * t62;
	t871 = t43 * t870;
	t873 = t136 * t855;
	t875 = t28 * t870;
	t877 = t88 * t855;
	t879 = t286 * t855;
	t882 = t279 * t855;
	t884 = -0.2e1 * t283 * t856 - 0.2e1 * t290 * t859 - 0.2e1 * t236 * t101 - 0.2e1 * t243 * t198 - t309 * t90 - t393 * t107 - t397 * t190 - t401 * t203 - t60 * t871 - t60 * t873 - t187 * t875 - t187 * t877 + t205 * t879 / 0.2e1 - t183 * t882;
	t886 = t297 * t2;
	t888 = t126 * t855;
	t890 = t111 * t855;
	t894 = t294 * t2;
	t896 = t33 * t94;
	t899 = t33 * t193;
	t904 = t286 * t2;
	t906 = t279 * t2;
	t908 = t536 * t94;
	t910 = t536 * t193;
	t912 = t209 * t879 - t187 * t886 + t97 * t888 + t196 * t890 + t148 * t882 / 0.2e1 - t60 * t894 + t550 * t896 / 0.2e1 + t546 * t899 / 0.2e1 + t555 * t896 - t553 * t899 - t309 * t904 - t397 * t906 + t542 * t908 + t539 * t910;
	t930 = -t187 * t29 - t191 * t90 + t196 * t95 - 0.2e1 * t200 * t101 + t205 * t107 / 0.2e1 + t209 * t107 - t60 * t185 - t92 * t190 + t97 * t194 - 0.2e1 * t104 * t198 + t148 * t203 / 0.2e1 - t183 * t203;
	t935 = t634 * t62;
	t936 = t280 * t935;
	t939 = t287 * t935;
	t942 = t111 * t935;
	t944 = t279 * t935;
	t947 = t286 * t935;
	t959 = -0.2e1 * t599 * t101 - 0.2e1 * t594 * t198 - 0.2e1 * t283 * t936 - 0.2e1 * t290 * t939 + t196 * t942 + t148 * t944 / 0.2e1 + t205 * t947 / 0.2e1 - t183 * t944 + t209 * t947 + t827 * t910 + t830 * t896 / 0.2e1 + t833 * t899 / 0.2e1 + t800 * t896 - t802 * t899;
	t960 = t805 * t2;
	t962 = t808 * t2;
	t964 = t126 * t935;
	t973 = t789 * t62;
	t974 = t43 * t973;
	t976 = t136 * t935;
	t978 = t28 * t973;
	t980 = t88 * t935;
	t982 = -t680 * t107 - t187 * t962 - t187 * t978 - t187 * t980 - t682 * t190 - t685 * t203 - t60 * t960 - t60 * t974 - t60 * t976 - t642 * t90 - t642 * t904 - t682 * t906 + t825 * t908 + t97 * t964;
	t985 = t30 * t28 * t516;
	t988 = t30 * t88 * t277;
	t990 = t35 * t297;
	t992 = t100 * t297;
	t995 = t30 * t297;
	t999 = t32 * t763;
	t1000 = t181 * t538;
	t1003 = t49 * t38;
	t1004 = t233 * t1003;
	t1005 = t1004 * t279;
	t1008 = t32 * t279;
	t1011 = t391 * t49;
	t1012 = t181 * t1011;
	t1015 = -t92 * t985 - t92 * t988 + t97 * t990 - 0.2e1 * t104 * t992 + t148 * t995 / 0.2e1 - t183 * t995 + t1000 * t999 - t542 * t270 + 0.2e1 * t200 * t1005 - t550 * t1008 / 0.2e1 + t1012 * t1008 - t555 * t1008;
	t1017 = t30 * t43 * t516;
	t1020 = t30 * t136 * t277;
	t1022 = t35 * t294;
	t1024 = t100 * t294;
	t1027 = t30 * t294;
	t1031 = t32 * t709;
	t1032 = t58 * t538;
	t1035 = t1004 * t286;
	t1038 = t32 * t286;
	t1041 = t58 * t1011;
	t1044 = t191 * t1017 + t191 * t1020 - t196 * t1022 + 0.2e1 * t200 * t1024 - t205 * t1027 / 0.2e1 - t209 * t1027 - t1032 * t1031 + t539 * t252 - 0.2e1 * t104 * t1035 + t546 * t1038 / 0.2e1 - t1041 * t1038 - t553 * t1038;
	t1047 = qJD(2) * t186;
	t1049 = t1003 * t279;
	t1053 = t146 * t181 * t109;
	t1056 = t180 * t49;
	t1057 = t58 * t1056;
	t1060 = qJD(2) * t59;
	t1062 = t1003 * t286;
	t1066 = t146 * t58 * t109;
	t1069 = t181 * t1056;
	t1073 = t30 * t28 * t789;
	t1076 = t30 * t88 * t634;
	t1078 = t35 * t808;
	t1080 = t100 * t808;
	t1083 = t30 * t808;
	t1087 = t181 * t799;
	t1090 = t591 * t1003;
	t1091 = t1090 * t279;
	t1096 = t678 * t49;
	t1097 = t181 * t1096;
	t1100 = -t92 * t1073 - t92 * t1076 + t97 * t1078 - 0.2e1 * t104 * t1080 + t148 * t1083 / 0.2e1 - t183 * t1083 + t1087 * t999 - t825 * t270 + 0.2e1 * t200 * t1091 - t830 * t1008 / 0.2e1 + t1097 * t1008 - t800 * t1008;
	t1102 = t30 * t43 * t789;
	t1105 = t30 * t136 * t634;
	t1107 = t35 * t805;
	t1109 = t100 * t805;
	t1112 = t30 * t805;
	t1116 = t58 * t799;
	t1119 = t1090 * t286;
	t1124 = t58 * t1096;
	t1127 = t191 * t1102 + t191 * t1105 - t196 * t1107 + 0.2e1 * t200 * t1109 - t205 * t1112 / 0.2e1 - t209 * t1112 - t1116 * t1031 + t827 * t252 - 0.2e1 * t104 * t1119 + t833 * t1038 / 0.2e1 - t1124 * t1038 - t802 * t1038;
	t1149 = 0.2e1 * t283 * t288 - 0.2e1 * t236 * t240 + 0.2e1 * t243 * t213 - 0.2e1 * t290 * t281 + t187 * t295 - t60 * t298 + t196 * t300 - t97 * t302 + t205 * t304 / 0.2e1 - t148 * t527 / 0.2e1 + t209 * t304 + t183 * t527 - t397 * t534 + t309 * t532;
	t1166 = t542 * t537 - t539 * t541 - t546 * t549 / 0.2e1 + t550 * t544 / 0.2e1 + t553 * t549 + t555 * t544 + t397 * t308 + t401 * t311 - t309 * t396 - t393 * t399 - t187 * t518 - t187 * t521 + t60 * t523 + t60 * t525;
	t1189 = 0.2e1 * t594 * t213 - 0.2e1 * t599 * t240 - 0.2e1 * t290 * t636 + 0.2e1 * t283 * t639 - t148 * t818 / 0.2e1 + t209 * t815 + t183 * t818 - t682 * t534 + t642 * t532 - t827 * t541 + t825 * t537 - t833 * t549 / 0.2e1 + t830 * t544 / 0.2e1 + t802 * t549;
	t1205 = t800 * t544 + t187 * t806 - t60 * t809 + t196 * t811 - t97 * t813 + t205 * t815 / 0.2e1 + t682 * t308 + t685 * t311 - t642 * t396 - t680 * t399 - t187 * t791 - t187 * t793 + t60 * t795 + t60 * t797;
	t1227 = 0.2e1 * t243 * t101 - 0.2e1 * t236 * t198 - 0.2e1 * t290 * t856 + 0.2e1 * t283 * t859 + t397 * t904 - t309 * t906 - t539 * t908 + t542 * t910 - t546 * t896 / 0.2e1 + t550 * t899 / 0.2e1 + t553 * t896 + t555 * t899 - t187 * t894 + t60 * t886;
	t1244 = t196 * t888 - t97 * t890 + t205 * t882 / 0.2e1 - t148 * t879 / 0.2e1 + t209 * t882 + t183 * t879 + t397 * t90 + t401 * t107 - t309 * t190 - t393 * t203 - t187 * t871 - t187 * t873 + t60 * t875 + t60 * t877;
	t1264 = 0.2e1 * t594 * t101 + t682 * t904 - t642 * t906 - t827 * t908 + t825 * t910 - t833 * t896 / 0.2e1 + t830 * t899 / 0.2e1 + t802 * t896 + t800 * t899 - t187 * t960 + t60 * t962 + t196 * t964 - t97 * t942 + t205 * t944 / 0.2e1;
	t1283 = -t148 * t947 / 0.2e1 + t209 * t944 + t183 * t947 - 0.2e1 * t599 * t198 - 0.2e1 * t290 * t936 + 0.2e1 * t283 * t939 + t682 * t90 + t685 * t107 - t642 * t190 - t680 * t203 - t187 * t974 - t187 * t976 + t60 * t978 + t60 * t980;
	t1301 = -t191 * t985 - t191 * t988 + t196 * t990 - 0.2e1 * t200 * t992 + t205 * t995 / 0.2e1 + t209 * t995 - t1032 * t999 + t539 * t270 - 0.2e1 * t104 * t1005 + t546 * t1008 / 0.2e1 - t1041 * t1008 - t553 * t1008;
	t1318 = -t92 * t1017 - t92 * t1020 + t97 * t1022 - 0.2e1 * t104 * t1024 + t148 * t1027 / 0.2e1 - t183 * t1027 - t1000 * t1031 + t542 * t252 - 0.2e1 * t200 * t1035 + t550 * t1038 / 0.2e1 - t1012 * t1038 + t555 * t1038;
	t1351 = -t191 * t1073 - t191 * t1076 + t196 * t1078 - 0.2e1 * t200 * t1080 + t205 * t1083 / 0.2e1 + t209 * t1083 - t1116 * t999 + t827 * t270 - 0.2e1 * t104 * t1091 + t833 * t1008 / 0.2e1 - t1124 * t1008 - t802 * t1008;
	t1368 = -t92 * t1102 - t92 * t1105 + t97 * t1107 - 0.2e1 * t104 * t1109 + t148 * t1112 / 0.2e1 - t183 * t1112 - t1087 * t1031 + t825 * t252 - 0.2e1 * t200 * t1119 + t830 * t1038 / 0.2e1 - t1097 * t1038 + t800 * t1038;
	unknown(1,1) = t211;
	unknown(1,2) = t557 + t520;
	unknown(1,3) = t579;
	unknown(1,4) = 0.0e0;
	unknown(1,5) = t836 + t804;
	unknown(2,1) = t854;
	unknown(2,2) = t912 + t884;
	unknown(2,3) = t930;
	unknown(2,4) = 0.0e0;
	unknown(2,5) = t982 + t959;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = t1044 + t1015;
	unknown(3,3) = t191 * t763 - t1047 * t270 + 0.2e1 * t200 * t1049 - t1053 * t1008 / 0.2e1 - t1057 * t1008 - t92 * t709 + t1060 * t252 - 0.2e1 * t104 * t1062 + t1066 * t1038 / 0.2e1 - t1069 * t1038;
	unknown(3,4) = 0.0e0;
	unknown(3,5) = t1127 + t1100;
	unknown(4,1) = -t930;
	unknown(4,2) = t1166 + t1149;
	unknown(4,3) = -t854;
	unknown(4,4) = 0.0e0;
	unknown(4,5) = t1205 + t1189;
	unknown(5,1) = t579;
	unknown(5,2) = t1244 + t1227;
	unknown(5,3) = t211;
	unknown(5,4) = 0.0e0;
	unknown(5,5) = t1283 + t1264;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = t1318 + t1301;
	unknown(6,3) = -t92 * t763 + t1060 * t270 - 0.2e1 * t104 * t1049 + t1066 * t1008 / 0.2e1 - t1069 * t1008 - t191 * t709 + t1047 * t252 - 0.2e1 * t200 * t1062 + t1053 * t1038 / 0.2e1 + t1057 * t1038;
	unknown(6,4) = 0.0e0;
	unknown(6,5) = t1368 + t1351;
	unknown(7,1) = -t293;
	unknown(7,2) = 0.0e0;
	unknown(7,3) = 0.0e0;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = 0.0e0;
	unknown(8,1) = t2;
	unknown(8,2) = 0.0e0;
	unknown(8,3) = 0.0e0;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = 0.0e0;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = 0.0e0;
	unknown(9,3) = 0.0e0;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = 0.0e0;
	JRD_rot = unknown;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:54:03
	% EndTime: 2020-04-11 22:54:08
	% DurationCPUTime: 4.81s
	% Computational Cost: add. (403525->614), mult. (411550->1359), div. (21982->27), fcn. (104856->13), ass. (0->498)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = t1 * qJD(1);
	t3 = sin(qJ(5));
	t4 = pkin(1) * t3;
	t5 = -t4 + pkin(2);
	t6 = pkin(2) * t4;
	t7 = 0.2e1 * t6;
	t8 = pkin(1) ^ 2;
	t9 = pkin(2) + qJ(2) + pkin(6) + pkin(3);
	t10 = pkin(2) - qJ(2) - pkin(6) - pkin(3);
	t12 = t10 * t9 - t7 + t8;
	t13 = pkin(2) + qJ(2) + pkin(6) - pkin(3);
	t14 = pkin(2) - qJ(2) - pkin(6) + pkin(3);
	t16 = t14 * t13 - t7 + t8;
	t17 = t16 * t12;
	t18 = sqrt(-t17);
	t20 = cos(qJ(5));
	t21 = t20 * pkin(1);
	t22 = pkin(2) ^ 2;
	t23 = qJ(2) + pkin(6);
	t24 = t23 ^ 2;
	t25 = pkin(3) ^ 2;
	t26 = -t7 + t8 + t22 + t24 - t25;
	t27 = t26 * t21;
	t28 = t18 * t5 + t27;
	t29 = t28 * t2;
	t30 = 0.1e1 / t23;
	t31 = -t7 + t8 + t22;
	t32 = 0.1e1 / t31;
	t33 = t32 * t30;
	t34 = t28 ^ 2;
	t35 = 0.1e1 / t24;
	t36 = t35 * t34;
	t37 = t31 ^ 2;
	t38 = 0.1e1 / t37;
	t41 = pkin(1) * t18 * t20;
	t43 = t26 * t5 - t41;
	t44 = t43 ^ 2;
	t45 = t35 * t44;
	t47 = t38 * t36 + t38 * t45;
	t48 = sqrt(t47);
	t49 = 0.1e1 / t48;
	t50 = 0.1e1 / pkin(3);
	t51 = t50 * t30;
	t53 = t7 - t8 - t22 + t24 + t25;
	t56 = atan2(t18 * t51, t50 * t30 * t53);
	t57 = t56 + qJ(3);
	t58 = cos(t57);
	t59 = t58 * t49;
	t60 = t59 * t33;
	t62 = sin(qJ(1));
	t63 = t20 * qJD(5);
	t64 = t18 * pkin(1);
	t65 = t64 * t63;
	t66 = 0.1e1 / t18;
	t67 = t66 * t5;
	t68 = pkin(1) * pkin(2);
	t69 = t68 * t63;
	t70 = 0.2e1 * t69;
	t73 = t10 * qJD(2) - qJD(2) * t9 - t70;
	t74 = t16 * t73;
	t77 = -qJD(2) * t13 + t14 * qJD(2) - t70;
	t78 = t77 * t12;
	t79 = -t74 - t78;
	t82 = pkin(1) * qJD(5);
	t84 = t26 * t3 * t82;
	t85 = qJD(2) * t23;
	t86 = -t69 + t85;
	t87 = 0.2e1 * t86 * t21;
	t88 = -t65 + t79 * t67 / 0.2e1 - t84 + t87;
	t90 = t30 * t88 * t62;
	t91 = t49 * t32;
	t92 = t58 * t91;
	t94 = t28 * t62;
	t95 = t35 * t94;
	t96 = qJD(2) * t58;
	t97 = t96 * t91;
	t100 = t49 * t38 * t30;
	t101 = t100 * t94;
	t103 = pkin(2) * t21;
	t104 = t103 * qJD(5) * t58;
	t107 = t30 * t94;
	t109 = 0.1e1 / t48 / t47;
	t110 = t109 * t32;
	t111 = t35 * t28;
	t116 = 0.1e1 / t24 / t23;
	t118 = qJD(2) * t38;
	t122 = 0.1e1 / t37 / t31;
	t126 = t35 * t43;
	t127 = t3 * qJD(5);
	t128 = t64 * t127;
	t129 = t66 * t20;
	t130 = t79 * pkin(1);
	t132 = t130 * t129 / 0.2e1;
	t134 = t26 * pkin(1) * t63;
	t136 = 0.2e1 * t86 * t5 + t128 - t132 - t134;
	t146 = 0.2e1 * t88 * t38 * t111 - 0.2e1 * t118 * t116 * t34 - 0.2e1 * t118 * t116 * t44 + 0.4e1 * t69 * t122 * t36 + 0.4e1 * t69 * t122 * t45 + 0.2e1 * t136 * t38 * t126;
	t147 = t146 * t58;
	t148 = t147 * t110;
	t151 = t50 * t35;
	t152 = qJD(2) * t18;
	t154 = t79 * t66;
	t158 = 0.1e1 / t53;
	t161 = t53 ^ 2;
	t162 = 0.1e1 / t161;
	t164 = -t162 * t17 + 0.1e1;
	t165 = 0.1e1 / t164;
	t166 = t165 * pkin(3) * t23;
	t168 = t69 + t85;
	t171 = t35 * t53;
	t172 = qJD(2) * t50;
	t177 = t162 * t18;
	t178 = t165 * t177;
	t180 = t166 * t158 * (-t152 * t151 + t154 * t51 / 0.2e1) - t178 * pkin(3) * t23 * (0.2e1 * t50 * t30 * t168 - t172 * t171) + qJD(3);
	t181 = sin(t57);
	t182 = t181 * t180;
	t183 = t182 * t91;
	t185 = t43 * t2;
	t186 = t181 * t49;
	t187 = t186 * t33;
	t190 = t30 * t136 * t62;
	t191 = t181 * t91;
	t193 = t43 * t62;
	t194 = t35 * t193;
	t195 = qJD(2) * t181;
	t196 = t195 * t91;
	t198 = t100 * t193;
	t200 = t103 * qJD(5) * t181;
	t203 = t30 * t193;
	t204 = t146 * t181;
	t205 = t204 * t110;
	t208 = t58 * t180;
	t209 = t208 * t91;
	t211 = t60 * t29 + t92 * t90 - t97 * t95 + 0.2e1 * t104 * t101 - t148 * t107 / 0.2e1 - t183 * t107 + t187 * t185 + t191 * t190 - t196 * t194 + 0.2e1 * t200 * t198 - t205 * t203 / 0.2e1 + t209 * t203;
	t212 = cos(qJ(4));
	t216 = t92 * t107 + t191 * t203;
	t217 = qJD(4) * t216;
	t218 = sin(qJ(4));
	t220 = t62 * qJD(1);
	t221 = t218 * t220;
	t222 = qJD(4) * t1;
	t223 = t212 * t222;
	t225 = t43 * t1;
	t226 = t33 * t225;
	t228 = -qJ(2) - pkin(6) - pkin(3);
	t230 = -qJ(2) - pkin(6) + pkin(3);
	t232 = -0.2e1 * t230 * t12 - 0.2e1 * t16 * t228;
	t233 = t232 * t66;
	t236 = -t18 * t151 + t233 * t51 / 0.2e1;
	t237 = t158 * t236;
	t242 = 0.2e1 * t50 * t30 * t23 - t50 * t171;
	t244 = pkin(3) * t23 * t242;
	t246 = t166 * t237 - t178 * t244;
	t247 = t246 * t109;
	t248 = t147 * t247;
	t254 = t232 * t67 / 0.2e1 + 0.2e1 * t23 * t21;
	t255 = t30 * t254;
	t257 = t32 * t111;
	t258 = t32 * t255 - t257;
	t259 = 0.1e1 / t43;
	t260 = t259 * t258;
	t262 = 0.1e1 / t44;
	t264 = t262 * t34 + 0.1e1;
	t265 = 0.1e1 / t264;
	t266 = t265 * t31 * t23;
	t268 = t232 * pkin(1);
	t272 = -t268 * t129 / 0.2e1 + 0.2e1 * t23 * t5;
	t273 = t30 * t272;
	t275 = t32 * t126;
	t276 = t32 * t273 - t275;
	t277 = t28 * t276;
	t278 = t23 * t277;
	t279 = t262 * t31;
	t280 = t265 * t279;
	t282 = t266 * t260 - t280 * t278;
	t283 = t43 * t282;
	t284 = t283 * t220;
	t286 = t28 * t282;
	t287 = t286 * t220;
	t289 = t282 * t1;
	t290 = t30 * t43;
	t291 = t290 * t289;
	t294 = t30 * t28;
	t295 = t294 * t289;
	t300 = t126 * t289;
	t302 = t111 * t289;
	t304 = t28 * t1;
	t305 = t32 * t35;
	t306 = t305 * t304;
	t307 = t246 * t49;
	t308 = t195 * t307;
	t310 = t305 * t225;
	t311 = t96 * t307;
	t313 = t294 * t220;
	t314 = t181 * t246;
	t315 = t314 * t91;
	t317 = t290 * t220;
	t318 = t58 * t246;
	t319 = t318 * t91;
	t321 = t38 * t294;
	t322 = t321 * t289;
	t324 = qJD(5) * t186 * t103;
	t327 = t248 * t226 / 0.2e1 + t60 * t284 - t187 * t287 + t148 * t291 / 0.2e1 - t205 * t295 / 0.2e1 + t183 * t291 + t209 * t295 + t97 * t300 - t196 * t302 - t308 * t306 + t311 * t310 - t315 * t313 + t319 * t317 + 0.2e1 * t324 * t322;
	t328 = t100 * t304;
	t330 = t103 * qJD(5) * t314;
	t333 = t100 * t225;
	t335 = t103 * qJD(5) * t318;
	t338 = t38 * t290;
	t339 = t338 * t289;
	t341 = t103 * qJD(5) * t59;
	t344 = t182 * t307;
	t346 = t33 * t304;
	t347 = t204 * t247;
	t350 = t208 * t307;
	t353 = t30 * t136 * t1;
	t355 = t30 * t225;
	t365 = -0.1e1 / t18 / t17;
	t376 = 0.2e1 * qJD(2) * t12 + 0.2e1 * t16 * qJD(2) - 0.2e1 * t77 * t228 - 0.2e1 * t230 * t73;
	t392 = t164 ^ 2;
	t393 = 0.1e1 / t392;
	t398 = 0.1e1 / t161 / t53;
	t402 = 0.4e1 * t168 * t398 * t17 - t162 * t74 - t162 * t78;
	t424 = t79 * t165 * t162 * t66;
	t429 = 0.2e1 * t168 * t165 * t398 * t18;
	t433 = t402 * t393 * t177;
	t435 = t166 * t158 * (0.2e1 * t152 * t50 * t116 - t154 * t151 / 0.2e1 - qJD(2) * t233 * t151 / 0.2e1 - t79 * t232 * t365 * t51 / 0.4e1 + t376 * t66 * t51 / 0.2e1) - 0.2e1 * t168 * t165 * pkin(3) * t23 * t162 * t236 + t165 * pkin(3) * qJD(2) * t237 - t402 * t393 * pkin(3) * t23 * t237 - t178 * pkin(3) * t23 * (0.2e1 * t50 * t30 * qJD(2) + 0.2e1 * t172 * t116 * t53 - 0.2e1 * t50 * t35 * t168 - 0.2e1 * t172 * t35 * t23) - t178 * pkin(3) * qJD(2) * t242 - t424 * t244 / 0.2e1 + 0.2e1 * t429 * t244 + t433 * t244;
	t437 = t58 * t435 * t91;
	t440 = t30 * t88 * t1;
	t442 = t30 * t304;
	t444 = t181 * t435 * t91;
	t446 = t88 * t289;
	t448 = pkin(1) * t66;
	t449 = t232 * t448;
	t452 = t365 * t5;
	t466 = qJD(2) * t32;
	t476 = t38 * t111;
	t485 = t136 * t265 * t31;
	t488 = t265 * t31 * qJD(2);
	t490 = qJD(5) * t23;
	t493 = t265 * pkin(2) * t21;
	t497 = t264 ^ 2;
	t498 = 0.1e1 / t497;
	t503 = 0.1e1 / t44 / t43;
	t506 = -t136 * t503 * t34 + t88 * t262 * t28;
	t507 = 0.2e1 * t506 * t498 * t31;
	t511 = t365 * t20;
	t535 = t38 * t126;
	t550 = t265 * t262 * pkin(2) * t21;
	t555 = t136 * t265 * t503 * t31;
	t559 = 0.2e1 * t506 * t498 * t279;
	t561 = t266 * t259 * (t32 * t30 * (-t449 * t63 / 0.2e1 - t79 * t232 * t452 / 0.4e1 + t376 * t67 / 0.2e1 - 0.2e1 * t23 * t3 * t82 + 0.2e1 * qJD(2) * t21) - t466 * t254 * t35 + 0.2e1 * t69 * t38 * t255 - t32 * t35 * t88 + 0.2e1 * t466 * t116 * t28 - 0.2e1 * t69 * t476) - t485 * t23 * t262 * t258 + t488 * t260 - 0.2e1 * t493 * t490 * t260 - t507 * t23 * t260 - t280 * t23 * t28 * (t32 * t30 * (t449 * t127 / 0.2e1 + t79 * t268 * t511 / 0.4e1 - t376 * pkin(1) * t129 / 0.2e1 - 0.2e1 * t23 * pkin(1) * t63 + 0.2e1 * qJD(2) * t5) - t466 * t35 * t272 + 0.2e1 * t69 * t38 * t273 - t32 * t35 * t136 + 0.2e1 * t466 * t116 * t43 - 0.2e1 * t69 * t535) - t280 * t23 * t88 * t276 - t280 * qJD(2) * t277 + 0.2e1 * t550 * t490 * t277 + 0.2e1 * t555 * t278 + t559 * t278;
	t562 = t561 * t1;
	t563 = t43 * t562;
	t565 = t136 * t289;
	t567 = t28 * t562;
	t569 = 0.2e1 * t330 * t328 - 0.2e1 * t335 * t333 - 0.2e1 * t341 * t339 + t344 * t226 - t347 * t346 / 0.2e1 + t350 * t346 - t319 * t353 - t437 * t355 + t315 * t440 + t444 * t442 + t187 * t446 - t60 * t563 - t60 * t565 + t187 * t567;
	t570 = t569 + t327;
	t579 = qJD(4) * (t187 * t28 * t289 - t60 * t43 * t289 + t315 * t442 - t319 * t355);
	t582 = t28 * t220;
	t585 = t35 * t304;
	t592 = t43 * t220;
	t595 = t35 * t225;
	t602 = -t187 * t582 + t191 * t440 - t196 * t585 + 0.2e1 * t200 * t328 - t205 * t442 / 0.2e1 + t209 * t442 + t60 * t592 - t92 * t353 + t97 * t595 - 0.2e1 * t104 * t333 + t148 * t355 / 0.2e1 + t183 * t355;
	t607 = qJD(4) * (t191 * t442 - t92 * t355);
	t626 = t60 * t582 - t92 * t440 + t97 * t585 - 0.2e1 * t104 * t328 + t148 * t442 / 0.2e1 + t183 * t442 + t187 * t592 - t191 * t353 + t196 * t595 - 0.2e1 * t200 * t333 + t205 * t355 / 0.2e1 - t209 * t355;
	t631 = qJD(4) * (-t191 * t355 - t92 * t442);
	t634 = qJD(4) * t62;
	t636 = -t212 * t2 + t212 * t631 + t218 * t626 + t218 * t634;
	t641 = t16 * pkin(2) * t21 + t68 * t20 * t12;
	t645 = t20 ^ 2;
	t646 = t645 * t8;
	t649 = -0.2e1 * pkin(2) * t646 - t26 * t4 + t641 * t67 - t41;
	t650 = t30 * t649;
	t654 = 0.2e1 * t103 * t321 + t32 * t650;
	t655 = t259 * t654;
	t659 = 0.2e1 * t641 * pkin(1);
	t665 = pkin(1) * t18 * t3 - t659 * t129 / 0.2e1 - t27 - 0.2e1 * t68 * t20 * t5;
	t666 = t30 * t665;
	t670 = 0.2e1 * t103 * t338 + t32 * t666;
	t671 = t28 * t670;
	t672 = t23 * t671;
	t674 = t266 * t655 - t280 * t672;
	t675 = t674 * t1;
	t676 = t321 * t675;
	t679 = 0.2e1 * t641 * t66;
	t680 = t165 * t158;
	t685 = t680 * t679 / 0.2e1 - 0.2e1 * t178 * t103;
	t686 = t58 * t685;
	t688 = t103 * qJD(5) * t686;
	t691 = t181 * t685;
	t693 = t103 * qJD(5) * t691;
	t696 = t338 * t675;
	t699 = t685 * t109;
	t700 = t147 * t699;
	t703 = t685 * t49;
	t704 = t208 * t703;
	t706 = t182 * t703;
	t708 = t204 * t699;
	t711 = t294 * t675;
	t713 = t290 * t675;
	t719 = t43 * t674;
	t720 = t719 * t220;
	t722 = t28 * t674;
	t723 = t722 * t220;
	t725 = 0.2e1 * t324 * t676 - 0.2e1 * t688 * t333 + 0.2e1 * t693 * t328 - 0.2e1 * t341 * t696 + t700 * t226 / 0.2e1 + t704 * t346 + t706 * t226 - t708 * t346 / 0.2e1 + t209 * t711 + t148 * t713 / 0.2e1 - t205 * t711 / 0.2e1 + t183 * t713 + t60 * t720 - t187 * t723;
	t726 = t126 * t675;
	t728 = t111 * t675;
	t730 = t96 * t703;
	t732 = t691 * t91;
	t734 = t686 * t91;
	t736 = t195 * t703;
	t751 = t77 * pkin(2) * t21 - t6 * qJD(5) * t12 - t16 * t68 * t127 + t68 * t20 * t73;
	t755 = t165 * t162;
	t773 = -t79 * t680 * t641 * t365 / 0.2e1 + t680 * t751 * t66 - t168 * t755 * t679 - t402 * t393 * t158 * t679 / 0.2e1 + 0.2e1 * t755 * t18 * pkin(2) * pkin(1) * t127 - t424 * t103 + 0.4e1 * t429 * t103 + 0.2e1 * t433 * t103;
	t775 = t181 * t773 * t91;
	t777 = 0.2e1 * t641 * t448;
	t799 = t30 * t88;
	t804 = pkin(2) * qJD(2) * t21;
	t809 = qJD(5) * t22 * t646;
	t812 = t68 * t127;
	t853 = t30 * t136;
	t879 = t266 * t259 * (t32 * t30 * (t128 - t132 - t777 * t63 / 0.2e1 - t79 * t641 * t452 / 0.2e1 + t751 * t67 - t134 - 0.2e1 * t86 * t4 + 0.4e1 * t3 * qJD(5) * pkin(2) * t20 * t8) - t466 * t35 * t649 + 0.2e1 * t69 * t38 * t650 + 0.2e1 * t103 * t38 * t799 - 0.2e1 * t804 * t476 + 0.8e1 * t809 * t122 * t294 - 0.2e1 * t812 * t321) - t485 * t23 * t262 * t654 + t488 * t655 - 0.2e1 * t493 * t490 * t655 - t507 * t23 * t655 - t280 * t23 * t28 * (t32 * t30 * (t65 + t130 * t66 * t3 / 0.2e1 + t777 * t127 / 0.2e1 + t79 * t659 * t511 / 0.4e1 - t751 * pkin(1) * t129 + t84 - t87 + 0.2e1 * pkin(2) * t8 * t645 * qJD(5) + 0.2e1 * t6 * qJD(5) * t5) - t466 * t35 * t665 + 0.2e1 * t69 * t38 * t666 + 0.2e1 * t103 * t38 * t853 - 0.2e1 * t804 * t535 + 0.8e1 * t809 * t122 * t290 - 0.2e1 * t812 * t338) - t280 * t23 * t88 * t670 - t280 * qJD(2) * t671 + 0.2e1 * t550 * t490 * t671 + 0.2e1 * t555 * t672 + t559 * t672;
	t880 = t879 * t1;
	t881 = t43 * t880;
	t883 = t136 * t675;
	t885 = t28 * t880;
	t887 = t88 * t675;
	t891 = t58 * t773 * t91;
	t893 = t187 * t885 + t187 * t887 - t196 * t728 - t736 * t306 + t730 * t310 - t732 * t313 + t734 * t317 - t734 * t353 - t891 * t355 + t732 * t440 + t775 * t442 - t60 * t881 - t60 * t883 + t97 * t726;
	t894 = t893 + t725;
	t903 = qJD(4) * (t187 * t28 * t675 - t60 * t43 * t675 - t734 * t355 + t732 * t442);
	t910 = -t218 * t2 - t212 * t626 - t212 * t634 + t218 * t631;
	t911 = t282 * t62;
	t912 = t338 * t911;
	t915 = t321 * t911;
	t922 = t33 * t94;
	t924 = t33 * t193;
	t926 = t294 * t2;
	t928 = t290 * t2;
	t930 = t305 * t94;
	t932 = t305 * t193;
	t934 = t294 * t911;
	t937 = t290 * t911;
	t940 = t126 * t911;
	t942 = t111 * t911;
	t944 = -0.2e1 * t341 * t912 + 0.2e1 * t324 * t915 + 0.2e1 * t330 * t101 - 0.2e1 * t335 * t198 + t350 * t922 + t344 * t924 + t315 * t926 - t319 * t928 - t308 * t930 + t311 * t932 - t205 * t934 / 0.2e1 + t148 * t937 / 0.2e1 + t97 * t940 - t196 * t942;
	t945 = t286 * t2;
	t947 = t283 * t2;
	t959 = t136 * t911;
	t961 = t561 * t62;
	t962 = t28 * t961;
	t964 = t88 * t911;
	t966 = t43 * t961;
	t968 = t187 * t945 - t60 * t947 + t209 * t934 + t183 * t937 - t347 * t922 / 0.2e1 + t248 * t924 / 0.2e1 - t319 * t190 - t437 * t203 + t315 * t90 + t444 * t107 - t60 * t959 + t187 * t962 + t187 * t964 - t60 * t966;
	t969 = t968 + t944;
	t978 = qJD(4) * (t187 * t28 * t911 - t60 * t43 * t911 + t315 * t107 - t319 * t203);
	t997 = t187 * t29 + t191 * t90 - t196 * t95 + 0.2e1 * t200 * t101 - t205 * t107 / 0.2e1 + t209 * t107 - t60 * t185 - t92 * t190 + t97 * t194 - 0.2e1 * t104 * t198 + t148 * t203 / 0.2e1 + t183 * t203;
	t1002 = qJD(4) * (t191 * t107 - t92 * t203);
	t1006 = -qJD(4) * t216;
	t1008 = t212 * t220;
	t1009 = t218 * t222;
	t1021 = t719 * t2;
	t1023 = t722 * t2;
	t1025 = t674 * t62;
	t1026 = t126 * t1025;
	t1028 = t111 * t1025;
	t1030 = t290 * t1025;
	t1033 = t294 * t1025;
	t1036 = t706 * t924 - t708 * t922 / 0.2e1 + t700 * t924 / 0.2e1 + t732 * t926 - t734 * t928 - t736 * t930 + t730 * t932 + t704 * t922 - t60 * t1021 + t187 * t1023 + t97 * t1026 - t196 * t1028 + t148 * t1030 / 0.2e1 - t205 * t1033 / 0.2e1;
	t1043 = t338 * t1025;
	t1046 = t321 * t1025;
	t1049 = t879 * t62;
	t1050 = t43 * t1049;
	t1056 = t136 * t1025;
	t1058 = t28 * t1049;
	t1060 = t88 * t1025;
	t1062 = 0.2e1 * t693 * t101 + t183 * t1030 + t209 * t1033 - 0.2e1 * t341 * t1043 + 0.2e1 * t324 * t1046 - t60 * t1050 - t60 * t1056 + t187 * t1058 + t187 * t1060 + t775 * t107 - t734 * t190 - 0.2e1 * t688 * t198 - t891 * t203 + t732 * t90;
	t1063 = t1062 + t1036;
	t1072 = qJD(4) * (t187 * t28 * t1025 - t60 * t43 * t1025 + t732 * t107 - t734 * t203);
	t1076 = t30 * t28 * t561;
	t1079 = t30 * t88 * t282;
	t1081 = t35 * t286;
	t1083 = t100 * t286;
	t1086 = t30 * t286;
	t1090 = t32 * t853;
	t1091 = t181 * t307;
	t1094 = t49 * t38;
	t1095 = t246 * t1094;
	t1096 = t1095 * t290;
	t1099 = t32 * t290;
	t1102 = t435 * t49;
	t1103 = t181 * t1102;
	t1106 = -t92 * t1076 - t92 * t1079 + t97 * t1081 - 0.2e1 * t104 * t1083 + t148 * t1086 / 0.2e1 + t183 * t1086 - t1091 * t1090 + t308 * t275 - 0.2e1 * t200 * t1096 + t347 * t1099 / 0.2e1 - t1103 * t1099 - t350 * t1099;
	t1108 = t30 * t43 * t561;
	t1111 = t30 * t136 * t282;
	t1113 = t35 * t283;
	t1115 = t100 * t283;
	t1118 = t30 * t283;
	t1122 = t32 * t799;
	t1123 = t58 * t307;
	t1126 = t1095 * t294;
	t1129 = t32 * t294;
	t1132 = t58 * t1102;
	t1135 = -t191 * t1108 - t191 * t1111 + t196 * t1113 - 0.2e1 * t200 * t1115 + t205 * t1118 / 0.2e1 - t209 * t1118 - t1123 * t1122 + t311 * t257 - 0.2e1 * t104 * t1126 + t248 * t1129 / 0.2e1 - t1132 * t1129 + t344 * t1129;
	t1136 = t1135 + t1106;
	t1143 = qJD(4) * (-t92 * t1086 - t1091 * t1099 - t191 * t1118 - t1123 * t1129);
	t1147 = qJD(2) * t186;
	t1149 = t1094 * t290;
	t1153 = t146 * t181 * t109;
	t1156 = t180 * t49;
	t1157 = t58 * t1156;
	t1160 = qJD(2) * t59;
	t1162 = t1094 * t294;
	t1166 = t146 * t58 * t109;
	t1169 = t181 * t1156;
	t1171 = -t191 * t853 + t1147 * t275 - 0.2e1 * t200 * t1149 + t1153 * t1099 / 0.2e1 - t1157 * t1099 - t92 * t799 + t1160 * t257 - 0.2e1 * t104 * t1162 + t1166 * t1129 / 0.2e1 + t1169 * t1129;
	t1176 = qJD(4) * (-t191 * t290 - t92 * t294);
	t1193 = t92 * t853 - t1160 * t275 + 0.2e1 * t104 * t1149 - t1166 * t1099 / 0.2e1 - t1169 * t1099 - t191 * t799 + t1147 * t257 - 0.2e1 * t200 * t1162 + t1153 * t1129 / 0.2e1 - t1157 * t1129;
	t1198 = qJD(4) * (-t191 * t294 + t92 * t290);
	t1202 = t30 * t28 * t879;
	t1205 = t30 * t88 * t674;
	t1207 = t35 * t722;
	t1209 = t100 * t722;
	t1212 = t30 * t722;
	t1216 = t181 * t703;
	t1219 = t685 * t1094;
	t1220 = t1219 * t290;
	t1225 = t773 * t49;
	t1226 = t181 * t1225;
	t1229 = -t92 * t1202 - t92 * t1205 + t97 * t1207 - 0.2e1 * t104 * t1209 + t148 * t1212 / 0.2e1 + t183 * t1212 - t1216 * t1090 + t736 * t275 - 0.2e1 * t200 * t1220 + t708 * t1099 / 0.2e1 - t1226 * t1099 - t704 * t1099;
	t1231 = t30 * t43 * t879;
	t1234 = t30 * t136 * t674;
	t1236 = t35 * t719;
	t1238 = t100 * t719;
	t1241 = t30 * t719;
	t1245 = t58 * t703;
	t1248 = t1219 * t294;
	t1253 = t58 * t1225;
	t1256 = -t191 * t1231 - t191 * t1234 + t196 * t1236 - 0.2e1 * t200 * t1238 + t205 * t1241 / 0.2e1 - t209 * t1241 - t1245 * t1122 + t730 * t257 - 0.2e1 * t104 * t1248 + t700 * t1129 / 0.2e1 - t1253 * t1129 + t706 * t1129;
	t1257 = t1256 + t1229;
	t1264 = qJD(4) * (-t1216 * t1099 - t1245 * t1129 - t92 * t1212 - t191 * t1241);
	t1319 = t148 * t295 / 0.2e1 - t209 * t291 + t183 * t295 + t196 * t300 + t97 * t302 + t187 * t284 + t60 * t287 + t319 * t313 + t315 * t317 + t311 * t306 + t308 * t310 + t248 * t346 / 0.2e1 - t350 * t226 + t344 * t346;
	t1340 = t347 * t226 / 0.2e1 + t205 * t291 / 0.2e1 - t187 * t565 - t60 * t567 - 0.2e1 * t341 * t322 - 0.2e1 * t324 * t339 - 0.2e1 * t335 * t328 - 0.2e1 * t330 * t333 - t437 * t442 - t315 * t353 - t444 * t355 - t319 * t440 - t60 * t446 - t187 * t563;
	t1360 = -0.2e1 * t341 * t676 + t148 * t711 / 0.2e1 - t209 * t713 + t183 * t711 + t734 * t313 + t732 * t317 + t730 * t306 + t736 * t310 + t706 * t346 - t704 * t226 + t700 * t346 / 0.2e1 + t708 * t226 / 0.2e1 + t196 * t726 + t97 * t728;
	t1379 = t187 * t720 + t60 * t723 + t205 * t713 / 0.2e1 - t732 * t353 - t775 * t355 - t734 * t440 - t891 * t442 - t187 * t883 - t60 * t885 - t60 * t887 - t187 * t881 - 0.2e1 * t688 * t328 - 0.2e1 * t693 * t333 - 0.2e1 * t324 * t696;
	t1399 = -0.2e1 * t324 * t912 - 0.2e1 * t341 * t915 - 0.2e1 * t335 * t101 + t196 * t940 + t97 * t942 - t187 * t947 - t60 * t945 - t319 * t926 - t315 * t928 + t311 * t930 + t308 * t932 + t344 * t922 - t350 * t924 + t248 * t922 / 0.2e1;
	t1418 = t347 * t924 / 0.2e1 + t205 * t937 / 0.2e1 + t148 * t934 / 0.2e1 - t209 * t937 + t183 * t934 - t187 * t966 - t187 * t959 - t60 * t962 - t60 * t964 - t437 * t107 - t315 * t190 - t444 * t203 - t319 * t90 - 0.2e1 * t330 * t198;
	t1438 = t196 * t1026 + t97 * t1028 - t187 * t1021 - t60 * t1023 + t148 * t1033 / 0.2e1 + t205 * t1030 / 0.2e1 + t183 * t1033 - t209 * t1030 + t730 * t930 + t736 * t932 - t734 * t926 - t732 * t928 + t700 * t922 / 0.2e1 + t708 * t924 / 0.2e1;
	t1457 = -0.2e1 * t688 * t101 - 0.2e1 * t324 * t1043 - 0.2e1 * t341 * t1046 - t187 * t1050 - t187 * t1056 - t60 * t1058 - t60 * t1060 - t891 * t107 - t732 * t190 - 0.2e1 * t693 * t198 - t775 * t203 - t704 * t924 + t706 * t922 - t734 * t90;
	t1475 = -t191 * t1076 - t191 * t1079 + t196 * t1081 - 0.2e1 * t200 * t1083 + t205 * t1086 / 0.2e1 - t209 * t1086 + t1123 * t1090 - t311 * t275 + 0.2e1 * t104 * t1096 - t248 * t1099 / 0.2e1 + t1132 * t1099 - t344 * t1099;
	t1492 = t92 * t1108 + t92 * t1111 - t97 * t1113 + 0.2e1 * t104 * t1115 - t148 * t1118 / 0.2e1 - t183 * t1118 - t1091 * t1122 + t308 * t257 - 0.2e1 * t200 * t1126 + t347 * t1129 / 0.2e1 - t1103 * t1129 - t350 * t1129;
	t1510 = -t191 * t1202 - t191 * t1205 + t196 * t1207 - 0.2e1 * t200 * t1209 + t205 * t1212 / 0.2e1 - t209 * t1212 + t1245 * t1090 - t730 * t275 + 0.2e1 * t104 * t1220 - t700 * t1099 / 0.2e1 + t1253 * t1099 - t706 * t1099;
	t1527 = t92 * t1231 + t92 * t1234 - t97 * t1236 + 0.2e1 * t104 * t1238 - t148 * t1241 / 0.2e1 - t183 * t1241 - t1216 * t1122 + t736 * t257 - 0.2e1 * t200 * t1248 + t708 * t1129 / 0.2e1 - t1226 * t1129 - t704 * t1129;
	unknown(1,1) = -t212 * t211 + t218 * t217 + t221 - t223;
	unknown(1,2) = -t212 * t570 + t218 * t579;
	unknown(1,3) = -t212 * t602 + t218 * t607;
	unknown(1,4) = t636;
	unknown(1,5) = -t212 * t894 + t218 * t903;
	unknown(2,1) = t910;
	unknown(2,2) = -t212 * t969 + t218 * t978;
	unknown(2,3) = t218 * t1002 - t212 * t997;
	unknown(2,4) = t212 * t1006 - t218 * t211 - t1008 - t1009;
	unknown(2,5) = -t212 * t1063 + t218 * t1072;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = -t212 * t1136 + t218 * t1143;
	unknown(3,3) = -t212 * t1171 + t218 * t1176;
	unknown(3,4) = t218 * t1193 + t212 * t1198;
	unknown(3,5) = -t212 * t1257 + t218 * t1264;
	unknown(4,1) = t218 * t211 + t212 * t217 + t1008 + t1009;
	unknown(4,2) = t212 * t579 + t218 * t570;
	unknown(4,3) = t212 * t607 + t218 * t602;
	unknown(4,4) = -t910;
	unknown(4,5) = t212 * t903 + t218 * t894;
	unknown(5,1) = t636;
	unknown(5,2) = t212 * t978 + t218 * t969;
	unknown(5,3) = t212 * t1002 + t218 * t997;
	unknown(5,4) = -t218 * t1006 - t212 * t211 + t221 - t223;
	unknown(5,5) = t218 * t1063 + t212 * t1072;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = t218 * t1136 + t212 * t1143;
	unknown(6,3) = t218 * t1171 + t212 * t1176;
	unknown(6,4) = t212 * t1193 - t218 * t1198;
	unknown(6,5) = t218 * t1257 + t212 * t1264;
	unknown(7,1) = t997;
	unknown(7,2) = t1340 + t1319;
	unknown(7,3) = t626;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = t1379 + t1360;
	unknown(8,1) = -t602;
	unknown(8,2) = t1418 + t1399;
	unknown(8,3) = -t211;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = t1457 + t1438;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = t1492 + t1475;
	unknown(9,3) = t1193;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = t1527 + t1510;
	JRD_rot = unknown;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 1
	% StartTime: 2020-04-11 22:53:32
	% EndTime: 2020-04-11 22:53:32
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (10->8), mult. (36->14), div. (0->0), fcn. (36->4), ass. (0->57)
	unknown=NaN(9,5);
	t1 = cos(qJ(1));
	t2 = qJD(1) * t1;
	t3 = sin(qJ(5));
	t5 = sin(qJ(1));
	t6 = t5 * qJD(5);
	t7 = cos(qJ(5));
	t9 = t2 * t3 + t6 * t7;
	t10 = qJD(1) * t5;
	t12 = t1 * qJD(5);
	t14 = t10 * t7 + t12 * t3;
	t17 = t10 * t3 - t12 * t7;
	t20 = -t2 * t7 + t6 * t3;
	unknown(1,1) = t9;
	unknown(1,2) = 0.0e0;
	unknown(1,3) = 0.0e0;
	unknown(1,4) = 0.0e0;
	unknown(1,5) = t14;
	unknown(2,1) = t17;
	unknown(2,2) = 0.0e0;
	unknown(2,3) = 0.0e0;
	unknown(2,4) = 0.0e0;
	unknown(2,5) = t20;
	unknown(3,1) = 0.0e0;
	unknown(3,2) = 0.0e0;
	unknown(3,3) = 0.0e0;
	unknown(3,4) = 0.0e0;
	unknown(3,5) = -qJD(5) * t7;
	unknown(4,1) = -t20;
	unknown(4,2) = 0.0e0;
	unknown(4,3) = 0.0e0;
	unknown(4,4) = 0.0e0;
	unknown(4,5) = -t17;
	unknown(5,1) = t14;
	unknown(5,2) = 0.0e0;
	unknown(5,3) = 0.0e0;
	unknown(5,4) = 0.0e0;
	unknown(5,5) = t9;
	unknown(6,1) = 0.0e0;
	unknown(6,2) = 0.0e0;
	unknown(6,3) = 0.0e0;
	unknown(6,4) = 0.0e0;
	unknown(6,5) = qJD(5) * t3;
	unknown(7,1) = -t10;
	unknown(7,2) = 0.0e0;
	unknown(7,3) = 0.0e0;
	unknown(7,4) = 0.0e0;
	unknown(7,5) = 0.0e0;
	unknown(8,1) = t2;
	unknown(8,2) = 0.0e0;
	unknown(8,3) = 0.0e0;
	unknown(8,4) = 0.0e0;
	unknown(8,5) = 0.0e0;
	unknown(9,1) = 0.0e0;
	unknown(9,2) = 0.0e0;
	unknown(9,3) = 0.0e0;
	unknown(9,4) = 0.0e0;
	unknown(9,5) = 0.0e0;
	JRD_rot = unknown;
else
	JRD_rot=NaN(9,5);
end