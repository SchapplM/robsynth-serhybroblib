% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% mg10hlTE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [17x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AC,AE,CG,DC,ED,GK,GP,HP,LW,ML,OT,PM,TA,TE,phi23,phi3,phi34]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   13:  mdh base (link 0) -> mdh frame (13-1), link (13-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-11 12:29
% Revision: f5729c120b58d1b0137ade1aa9321d1ea2b3cc0a (2020-04-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = mg10hlTE_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(17,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'mg10hlTE_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [17 1]), ...
  'mg10hlTE_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [17x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 1
% StartTime: 2020-04-11 12:25:03
% EndTime: 2020-04-11 12:25:05
% DurationCPUTime: 1.96s
% Computational Cost: add. (103623->337), mult. (128813->349), div. (11643->7), fcn. (76235->23), ass. (0->428)
unknown=NaN(64,4);
t1 = cos(qJ(1));
t2 = sin(qJ(1));
t3 = (pkin(11) + 0);
t4 = sin(qJ(2));
t5 = t4 * t1;
t6 = cos(qJ(2));
t7 = t6 * t1;
t8 = pkin(13) * t1;
t10 = t4 * t2;
t11 = t6 * t2;
t12 = pkin(13) * t2;
t14 = cos(pkin(15));
t15 = t14 * t6;
t16 = sin(pkin(15));
t17 = t16 * t4;
t18 = t15 - t17;
t19 = t18 * pkin(2);
t22 = t14 * t4 + t16 * t6;
t23 = pkin(1) * t22;
t25 = 0.2e1 * pkin(2) * t23;
t26 = pkin(1) ^ 2;
t36 = sqrt(-(-t25 + t26 + (pkin(2) + pkin(5) - pkin(4)) * (pkin(2) - pkin(5) + pkin(4))) * (-t25 + t26 + (pkin(2) + pkin(5) + pkin(4)) * (pkin(2) - pkin(5) - pkin(4))));
t39 = -pkin(2) * t22 + pkin(1);
t40 = pkin(2) ^ 2;
t41 = pkin(5) ^ 2;
t42 = pkin(4) ^ 2;
t43 = -t25 + t26 + t40 - t41 + t42;
t45 = -t19 * t36 + t39 * t43;
t47 = 0.1e1 / pkin(4);
t49 = 0.1e1 / (-t25 + t26 + t40);
t50 = t49 * t47;
t54 = t19 * t43 + t36 * t39;
t57 = -t14 * t45 * t50 + t16 * t50 * t54;
t63 = -t14 * t50 * t54 - t16 * t45 * t50;
t65 = -t57 * t5 / 0.2e1 - t63 * t7 / 0.2e1;
t68 = t63 * t5 / 0.2e1 - t57 * t7 / 0.2e1;
t69 = pkin(1) * t14;
t70 = t69 * t5;
t71 = pkin(1) * t16;
t72 = t71 * t7;
t76 = -t57 * t10 / 0.2e1 - t63 * t11 / 0.2e1;
t79 = t63 * t10 / 0.2e1 - t57 * t11 / 0.2e1;
t80 = t69 * t10;
t81 = t71 * t11;
t85 = t57 * t6 / 0.2e1 - t63 * t4 / 0.2e1;
t88 = -t63 * t6 / 0.2e1 - t57 * t4 / 0.2e1;
t89 = pkin(1) * t15;
t90 = pkin(1) * t17;
t92 = cos(pkin(17));
t93 = 1 / pkin(7);
t94 = qJ(6) + pkin(8);
t95 = 1 / t94;
t96 = t95 * t93;
t97 = pkin(6) - pkin(7) - pkin(8) - qJ(6);
t98 = pkin(6) - pkin(7) + pkin(8) + qJ(6);
t100 = pkin(6) + pkin(7) - pkin(8) - qJ(6);
t101 = pkin(6) + pkin(7) + pkin(8) + qJ(6);
t104 = sqrt(-t101 * t100 * t98 * t97);
t106 = (pkin(6) ^ 2);
t107 = (pkin(7) ^ 2);
t108 = (pkin(8) ^ 2);
t110 = 2 * pkin(8) * qJ(6);
t111 = qJ(6) ^ 2;
t112 = t106 - t107 - t108 - t110 - t111;
t114 = atan2(t104 * t96, t112 * t96);
t115 = t114 + pkin(16);
t116 = cos(t115);
t118 = sin(pkin(17));
t119 = sin(t115);
t121 = -t116 * t92 - t118 * t119;
t125 = -t116 * t118 + t119 * t92;
t127 = t121 * t65 + t125 * t68;
t130 = t121 * t68 - t125 * t65;
t132 = pkin(3) * t92 * t65;
t134 = pkin(3) * t118 * t68;
t135 = t132 + t134 - t70 - t72 + t8 + 0;
t138 = t121 * t76 + t125 * t79;
t141 = t121 * t79 - t125 * t76;
t143 = pkin(3) * t92 * t76;
t145 = pkin(3) * t118 * t79;
t146 = t143 + t145 - t80 - t81 + t12 + 0;
t149 = t121 * t85 + t125 * t88;
t152 = t121 * t88 - t125 * t85;
t154 = pkin(3) * t92 * t85;
t156 = pkin(3) * t118 * t88;
t157 = t154 + t156 + t89 - t90 + pkin(11) + 0;
t159 = t94 ^ 2;
t161 = 0.1e1 / t159 / pkin(6);
t163 = t93 * (t106 - t107 + t108 + t110 + t111);
t171 = -t100 * t101 * t161 * t93 * t97 * t98 + t112 * t161 * t163;
t172 = cos(pkin(16));
t179 = -t104 * t112 * t161 * t93 + t104 * t161 * t163;
t180 = sin(pkin(16));
t182 = t172 * t171 / 0.4e1 - t180 * t179 / 0.4e1;
t186 = -t172 * t179 / 0.4e1 - t180 * t171 / 0.4e1;
t188 = t127 * t182 + t130 * t186;
t191 = -t127 * t186 + t130 * t182;
t192 = pkin(7) * t127;
t196 = t138 * t182 + t141 * t186;
t199 = -t138 * t186 + t141 * t182;
t200 = pkin(7) * t138;
t204 = t149 * t182 + t152 * t186;
t207 = -t149 * t186 + t152 * t182;
t208 = pkin(7) * t149;
t210 = cos(qJ(3));
t212 = sin(qJ(3));
t214 = t191 * t210 + t2 * t212;
t217 = -t191 * t212 + t2 * t210;
t218 = pkin(12) * t188;
t222 = -t1 * t212 + t199 * t210;
t225 = -t1 * t210 - t199 * t212;
t226 = pkin(12) * t196;
t228 = t210 * t207;
t229 = t212 * t207;
t230 = pkin(12) * t204;
t232 = sin(qJ(4));
t234 = cos(qJ(4));
t236 = t188 * t234 + t214 * t232;
t239 = -t188 * t232 + t214 * t234;
t240 = pkin(10) * t188;
t244 = t196 * t234 + t222 * t232;
t247 = -t196 * t232 + t222 * t234;
t248 = pkin(10) * t196;
t252 = t204 * t234 + t228 * t232;
t255 = -t204 * t232 + t228 * t234;
t256 = pkin(10) * t204;
t258 = cos(qJ(5));
t260 = sin(qJ(5));
t284 = t93 * t127;
t285 = t112 * t95;
t287 = t93 * t130;
t288 = t104 * t95;
t290 = t284 * t285 + t287 * t288;
t293 = -t284 * t288 + t285 * t287;
t294 = t93 * t138;
t296 = t93 * t141;
t298 = t285 * t294 + t288 * t296;
t301 = t285 * t296 - t288 * t294;
t302 = t93 * t149;
t304 = t93 * t152;
t306 = t285 * t302 + t288 * t304;
t309 = t285 * t304 - t288 * t302;
t312 = t23 - pkin(2);
t313 = -t25 + t26 + t40 + t41 - t42;
t315 = -pkin(1) * t18 * t36 - t312 * t313;
t316 = t315 * t1;
t317 = 0.1e1 / pkin(5);
t318 = t49 * t317;
t324 = pkin(1) * t18 * t313 - t312 * t36;
t325 = t324 * t1;
t328 = pkin(14) * t1;
t330 = t315 * t2;
t333 = t324 * t2;
t336 = pkin(14) * t2;
t338 = t317 * t324;
t341 = t317 * t315;
t344 = t25 - t26 - t40 + t41 + t42;
t346 = t47 * t317;
t349 = t36 * t47;
t351 = -t346 * t344 * t290 / 0.2e1 - t349 * t317 * t293 / 0.2e1;
t356 = t349 * t317 * t290 / 0.2e1 - t346 * t344 * t293 / 0.2e1;
t357 = pkin(6) * t290 / 0.2e1;
t363 = -t346 * t344 * t298 / 0.2e1 - t349 * t317 * t301 / 0.2e1;
t368 = t349 * t317 * t298 / 0.2e1 - t346 * t344 * t301 / 0.2e1;
t369 = pkin(6) * t298 / 0.2e1;
t375 = -t346 * t344 * t306 / 0.2e1 - t349 * t317 * t309 / 0.2e1;
t380 = t349 * t317 * t306 / 0.2e1 - t346 * t344 * t309 / 0.2e1;
t381 = pkin(6) * t306 / 0.2e1;
t383 = -t171 * t318 / 0.4e1;
t385 = -t179 * t318 / 0.4e1;
t388 = t179 * t318 / 0.4e1;
t404 = -t171 * t49 / 0.4e1;
unknown(1,1) = 1;
unknown(1,2) = 0;
unknown(1,3) = 0;
unknown(1,4) = 0;
unknown(2,1) = 0;
unknown(2,2) = 1;
unknown(2,3) = 0;
unknown(2,4) = 0;
unknown(3,1) = 0;
unknown(3,2) = 0;
unknown(3,3) = 1;
unknown(3,4) = 0;
unknown(4,1) = 0;
unknown(4,2) = 0;
unknown(4,3) = 0;
unknown(4,4) = 1;
unknown(5,1) = t1;
unknown(5,2) = -t2;
unknown(5,3) = 0;
unknown(5,4) = 0;
unknown(6,1) = t2;
unknown(6,2) = t1;
unknown(6,3) = 0;
unknown(6,4) = 0;
unknown(7,1) = 0;
unknown(7,2) = 0;
unknown(7,3) = 1;
unknown(7,4) = t3;
unknown(8,1) = 0;
unknown(8,2) = 0;
unknown(8,3) = 0;
unknown(8,4) = 1;
unknown(9,1) = -t5;
unknown(9,2) = -t7;
unknown(9,3) = t2;
unknown(9,4) = (t8 + 0);
unknown(10,1) = -t10;
unknown(10,2) = -t11;
unknown(10,3) = -t1;
unknown(10,4) = (t12 + 0);
unknown(11,1) = t6;
unknown(11,2) = -t4;
unknown(11,3) = 0;
unknown(11,4) = t3;
unknown(12,1) = 0;
unknown(12,2) = 0;
unknown(12,3) = 0;
unknown(12,4) = 1;
unknown(13,1) = t65;
unknown(13,2) = t68;
unknown(13,3) = t2;
unknown(13,4) = (-t70 - t72 + t8 + 0);
unknown(14,1) = t76;
unknown(14,2) = t79;
unknown(14,3) = -t1;
unknown(14,4) = (-t80 - t81 + t12 + 0);
unknown(15,1) = t85;
unknown(15,2) = t88;
unknown(15,3) = 0;
unknown(15,4) = (t89 - t90 + pkin(11) + 0);
unknown(16,1) = 0;
unknown(16,2) = 0;
unknown(16,3) = 0;
unknown(16,4) = 1;
unknown(17,1) = t127;
unknown(17,2) = t130;
unknown(17,3) = t2;
unknown(17,4) = t135;
unknown(18,1) = t138;
unknown(18,2) = t141;
unknown(18,3) = -t1;
unknown(18,4) = t146;
unknown(19,1) = t149;
unknown(19,2) = t152;
unknown(19,3) = 0;
unknown(19,4) = t157;
unknown(20,1) = 0;
unknown(20,2) = 0;
unknown(20,3) = 0;
unknown(20,4) = 1;
unknown(21,1) = t188;
unknown(21,2) = t191;
unknown(21,3) = t2;
unknown(21,4) = (t192 + t132 + t134 - t70 - t72 + t8 + 0);
unknown(22,1) = t196;
unknown(22,2) = t199;
unknown(22,3) = -t1;
unknown(22,4) = (t200 + t143 + t145 - t80 - t81 + t12 + 0);
unknown(23,1) = t204;
unknown(23,2) = t207;
unknown(23,3) = 0;
unknown(23,4) = (t208 + t154 + t156 + t89 - t90 + pkin(11) + 0);
unknown(24,1) = 0;
unknown(24,2) = 0;
unknown(24,3) = 0;
unknown(24,4) = 1;
unknown(25,1) = t214;
unknown(25,2) = t217;
unknown(25,3) = t188;
unknown(25,4) = (t218 + t192 + t132 + t134 - t70 - t72 + t8 + 0);
unknown(26,1) = t222;
unknown(26,2) = t225;
unknown(26,3) = t196;
unknown(26,4) = (t226 + t200 + t143 + t145 - t80 - t81 + t12 + 0);
unknown(27,1) = t228;
unknown(27,2) = -t229;
unknown(27,3) = t204;
unknown(27,4) = (t230 + t208 + t154 + t156 + t89 - t90 + pkin(11) + 0);
unknown(28,1) = 0;
unknown(28,2) = 0;
unknown(28,3) = 0;
unknown(28,4) = 1;
unknown(29,1) = t236;
unknown(29,2) = t239;
unknown(29,3) = t217;
unknown(29,4) = (t240 + t218 + t192 + t132 + t134 - t70 - t72 + t8 + 0);
unknown(30,1) = t244;
unknown(30,2) = t247;
unknown(30,3) = t225;
unknown(30,4) = (t248 + t226 + t200 + t143 + t145 - t80 - t81 + t12 + 0);
unknown(31,1) = t252;
unknown(31,2) = t255;
unknown(31,3) = -t229;
unknown(31,4) = (t256 + t230 + t208 + t154 + t156 + t89 - t90 + pkin(11) + 0);
unknown(32,1) = 0;
unknown(32,2) = 0;
unknown(32,3) = 0;
unknown(32,4) = 1;
unknown(33,1) = (t217 * t260 + t239 * t258);
unknown(33,2) = (t217 * t258 - t239 * t260);
unknown(33,3) = t236;
unknown(33,4) = (pkin(9) * t236 + t132 + t134 + t192 + t218 + t240 - t70 - t72 + t8 + 0);
unknown(34,1) = (t225 * t260 + t247 * t258);
unknown(34,2) = (t225 * t258 - t247 * t260);
unknown(34,3) = t244;
unknown(34,4) = (pkin(9) * t244 + t12 + t143 + t145 + t200 + t226 + t248 - t80 - t81 + 0);
unknown(35,1) = (-t229 * t260 + t255 * t258);
unknown(35,2) = (-t229 * t258 - t255 * t260);
unknown(35,3) = t252;
unknown(35,4) = (pkin(9) * t252 + pkin(11) + t154 + t156 + t208 + t230 + t256 + t89 - t90 + 0);
unknown(36,1) = 0;
unknown(36,2) = 0;
unknown(36,3) = 0;
unknown(36,4) = 1;
unknown(37,1) = (t290 / 0.2e1);
unknown(37,2) = (t293 / 0.2e1);
unknown(37,3) = t2;
unknown(37,4) = t135;
unknown(38,1) = (t298 / 0.2e1);
unknown(38,2) = (t301 / 0.2e1);
unknown(38,3) = -t1;
unknown(38,4) = t146;
unknown(39,1) = (t306 / 0.2e1);
unknown(39,2) = (t309 / 0.2e1);
unknown(39,3) = 0;
unknown(39,4) = t157;
unknown(40,1) = 0;
unknown(40,2) = 0;
unknown(40,3) = 0;
unknown(40,4) = 1;
unknown(41,1) = (t318 * t316 / 0.2e1);
unknown(41,2) = -(t318 * t325 / 0.2e1);
unknown(41,3) = t2;
unknown(41,4) = (-t328 + 0);
unknown(42,1) = (t318 * t330 / 0.2e1);
unknown(42,2) = -(t318 * t333 / 0.2e1);
unknown(42,3) = -t1;
unknown(42,4) = (-t336 + 0);
unknown(43,1) = (t49 * t338 / 0.2e1);
unknown(43,2) = (t49 * t341 / 0.2e1);
unknown(43,3) = 0;
unknown(43,4) = t3;
unknown(44,1) = 0;
unknown(44,2) = 0;
unknown(44,3) = 0;
unknown(44,4) = 1;
unknown(45,1) = (t351 / 0.2e1);
unknown(45,2) = (t356 / 0.2e1);
unknown(45,3) = t2;
unknown(45,4) = (t357 + t132 + t134 - t70 - t72 + t8 + 0);
unknown(46,1) = (t363 / 0.2e1);
unknown(46,2) = (t368 / 0.2e1);
unknown(46,3) = -t1;
unknown(46,4) = (t369 + t143 + t145 - t80 - t81 + t12 + 0);
unknown(47,1) = (t375 / 0.2e1);
unknown(47,2) = (t380 / 0.2e1);
unknown(47,3) = 0;
unknown(47,4) = (t381 + t154 + t156 + t89 - t90 + pkin(11) + 0);
unknown(48,1) = 0;
unknown(48,2) = 0;
unknown(48,3) = 0;
unknown(48,4) = 1;
unknown(49,1) = (t383 * t316 / 0.2e1 - t385 * t325 / 0.2e1);
unknown(49,2) = (t388 * t316 / 0.2e1 - t383 * t325 / 0.2e1);
unknown(49,3) = t2;
unknown(49,4) = (t49 * t316 / 0.2e1 - t328 + 0);
unknown(50,1) = (t383 * t330 / 0.2e1 - t385 * t333 / 0.2e1);
unknown(50,2) = (t388 * t330 / 0.2e1 - t383 * t333 / 0.2e1);
unknown(50,3) = -t1;
unknown(50,4) = (t49 * t330 / 0.2e1 - t336 + 0);
unknown(51,1) = (t404 * t338 / 0.2e1 - t179 * t49 * t341 / 0.8e1);
unknown(51,2) = (t179 * t49 * t338 / 0.8e1 + t404 * t341 / 0.2e1);
unknown(51,3) = 0;
unknown(51,4) = (t49 * t324 / 0.2e1 + pkin(11) + 0);
unknown(52,1) = 0;
unknown(52,2) = 0;
unknown(52,3) = 0;
unknown(52,4) = 1;
unknown(53,1) = -(t356 / 0.2e1);
unknown(53,2) = -t2;
unknown(53,3) = (t351 / 0.2e1);
unknown(53,4) = (qJ(6) * t351 / 0.2e1 + t357 + t132 + t134 - t70 - t72 + t8 + 0);
unknown(54,1) = -(t368 / 0.2e1);
unknown(54,2) = t1;
unknown(54,3) = (t363 / 0.2e1);
unknown(54,4) = (qJ(6) * t363 / 0.2e1 + t369 + t143 + t145 - t80 - t81 + t12 + 0);
unknown(55,1) = -(t380 / 0.2e1);
unknown(55,2) = 0;
unknown(55,3) = (t375 / 0.2e1);
unknown(55,4) = (qJ(6) * t375 / 0.2e1 + t381 + t154 + t156 + t89 - t90 + pkin(11) + 0);
unknown(56,1) = 0;
unknown(56,2) = 0;
unknown(56,3) = 0;
unknown(56,4) = 1;
unknown(57,1) = t65;
unknown(57,2) = t68;
unknown(57,3) = t2;
unknown(57,4) = (-pkin(4) * t65 - t70 - t72 + t8 + 0);
unknown(58,1) = t76;
unknown(58,2) = t79;
unknown(58,3) = -t1;
unknown(58,4) = (-pkin(4) * t76 + t12 - t80 - t81 + 0);
unknown(59,1) = t85;
unknown(59,2) = t88;
unknown(59,3) = 0;
unknown(59,4) = (-pkin(4) * t85 + pkin(11) + t89 - t90 + 0);
unknown(60,1) = 0;
unknown(60,2) = 0;
unknown(60,3) = 0;
unknown(60,4) = 1;
unknown(61,1) = -t191;
unknown(61,2) = -t2;
unknown(61,3) = t188;
unknown(61,4) = (-pkin(8) * t188 + t132 + t134 + t192 - t70 - t72 + t8 + 0);
unknown(62,1) = -t199;
unknown(62,2) = t1;
unknown(62,3) = t196;
unknown(62,4) = (-pkin(8) * t196 + t12 + t143 + t145 + t200 - t80 - t81 + 0);
unknown(63,1) = -t207;
unknown(63,2) = 0;
unknown(63,3) = t204;
unknown(63,4) = (-pkin(8) * t204 + pkin(11) + t154 + t156 + t208 + t89 - t90 + 0);
unknown(64,1) = 0;
unknown(64,2) = 0;
unknown(64,3) = 0;
unknown(64,4) = 1;
T_ges = unknown;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
