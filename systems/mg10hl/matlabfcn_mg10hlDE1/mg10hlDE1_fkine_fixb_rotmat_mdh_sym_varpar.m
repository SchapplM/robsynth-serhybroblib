% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% mg10hlDE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [17x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AC,AE,CG,DC,ED,GK,GP,HP,LW,ML,OT,PM,TA,TE,phi23,phi3,phi34]';
% 
% Output:
% T_c_mdh [4x4x(15+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   13:  mdh base (link 0) -> mdh frame (13-1), link (13-1)
%   ...
%   15+1:  mdh base (link 0) -> mdh frame (15)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-11 12:53
% Revision: 6ae2d958c5b90587a0d08029b131cb7b66342a68 (2020-04-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = mg10hlDE1_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(17,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'mg10hlDE1_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [17 1]), ...
  'mg10hlDE1_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [17x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 1
% StartTime: 2020-04-11 12:45:55
% EndTime: 2020-04-11 12:46:00
% DurationCPUTime: 5.88s
% Computational Cost: add. (263672->348), mult. (364220->343), div. (26199->17), fcn. (213221->35), ass. (0->463)
unknown=NaN(64,4);
t1 = cos(qJ(1));
t2 = sin(qJ(1));
t3 = (pkin(11) + 0);
t4 = sin(qJ(2));
t5 = t4 * t1;
t6 = cos(qJ(2));
t7 = t6 * t1;
t8 = pkin(13) * t1;
t10 = t4 * t2;
t11 = t6 * t2;
t12 = pkin(13) * t2;
t14 = cos(pkin(15));
t15 = t14 * t6;
t16 = sin(pkin(15));
t17 = t16 * t4;
t18 = t15 - t17;
t19 = t18 * pkin(2);
t22 = t14 * t4 + t16 * t6;
t23 = pkin(1) * t22;
t25 = 0.2e1 * pkin(2) * t23;
t26 = pkin(1) ^ 2;
t35 = (-t25 + t26 + (pkin(2) + pkin(5) - pkin(4)) * (pkin(2) - pkin(5) + pkin(4))) * (-t25 + t26 + (pkin(2) + pkin(5) + pkin(4)) * (pkin(2) - pkin(5) - pkin(4)));
t36 = sqrt(-t35);
t39 = -t22 * pkin(2) + pkin(1);
t40 = pkin(2) ^ 2;
t41 = pkin(5) ^ 2;
t42 = pkin(4) ^ 2;
t43 = -t25 + t26 + t40 - t41 + t42;
t45 = -t36 * t19 + t43 * t39;
t47 = 0.1e1 / pkin(4);
t48 = -t25 + t26 + t40;
t49 = 0.1e1 / t48;
t53 = t43 * t19 + t36 * t39;
t54 = t53 ^ 2;
t55 = 0.1e1 / t42;
t57 = t48 ^ 2;
t58 = 0.1e1 / t57;
t60 = t45 ^ 2;
t64 = sqrt(t58 * t55 * t54 + t58 * t55 * t60);
t66 = 0.1e1 / t64 * t49 * t47;
t70 = -t66 * t45 * t14 + t66 * t53 * t16;
t76 = -t66 * t53 * t14 - t66 * t45 * t16;
t78 = -t70 * t5 - t76 * t7;
t81 = t76 * t5 - t70 * t7;
t82 = pkin(1) * t14;
t83 = t82 * t5;
t84 = pkin(1) * t16;
t85 = t84 * t7;
t89 = -t70 * t10 - t76 * t11;
t92 = t76 * t10 - t70 * t11;
t93 = t82 * t10;
t94 = t84 * t11;
t98 = -t76 * t4 + t70 * t6;
t101 = -t70 * t4 - t76 * t6;
t102 = pkin(1) * t15;
t103 = pkin(1) * t17;
t105 = cos(pkin(17));
t106 = 1 / pkin(7);
t107 = qJ(6) + pkin(8);
t108 = 0.1e1 / t107;
t109 = t108 * t106;
t110 = pkin(6) - pkin(7) - pkin(8) - qJ(6);
t111 = pkin(6) - pkin(7) + pkin(8) + qJ(6);
t113 = pkin(6) + pkin(7) - pkin(8) - qJ(6);
t114 = pkin(6) + pkin(7) + pkin(8) + qJ(6);
t117 = sqrt(-t114 * t113 * t111 * t110);
t119 = (pkin(6) ^ 2);
t120 = (pkin(7) ^ 2);
t121 = (pkin(8) ^ 2);
t123 = 2 * pkin(8) * qJ(6);
t124 = qJ(6) ^ 2;
t125 = t119 - t120 - t121 - t123 - t124;
t127 = atan2(t117 * t109, t125 * t109);
t128 = t127 + pkin(16);
t129 = cos(t128);
t131 = sin(pkin(17));
t132 = sin(t128);
t134 = -t129 * t105 - t132 * t131;
t138 = t132 * t105 - t129 * t131;
t140 = t134 * t78 + t138 * t81;
t143 = t134 * t81 - t138 * t78;
t145 = pkin(3) * t105 * t78;
t147 = pkin(3) * t131 * t81;
t148 = t145 + t147 - t83 - t85 + t8 + 0;
t151 = t134 * t89 + t138 * t92;
t154 = t134 * t92 - t138 * t89;
t156 = pkin(3) * t105 * t89;
t158 = pkin(3) * t131 * t92;
t159 = t156 + t158 - t93 - t94 + t12 + 0;
t162 = t138 * t101 + t134 * t98;
t165 = t134 * t101 - t138 * t98;
t167 = pkin(3) * t105 * t98;
t169 = pkin(3) * t131 * t101;
t170 = t167 + t169 + t102 - t103 + pkin(11) + 0;
t172 = t107 ^ 2;
t173 = 1 / t172;
t174 = t173 / pkin(6);
t176 = t106 * (t119 - t120 + t121 + t123 + t124);
t180 = t113 * t111;
t184 = -t106 * t114 * t180 * t110 * t174 + t125 * t176 * t174;
t185 = cos(pkin(16));
t192 = -t125 * t106 * t117 * t174 + t117 * t176 * t174;
t193 = sin(pkin(16));
t195 = -t185 * t184 / 0.4e1 + t193 * t192 / 0.4e1;
t199 = t185 * t192 / 0.4e1 + t193 * t184 / 0.4e1;
t200 = t199 ^ 2;
t201 = t195 ^ 2;
t203 = sqrt(t200 + t201);
t204 = 0.1e1 / t203;
t208 = -t204 * t195 * t140 - t204 * t199 * t143;
t213 = t204 * t199 * t140 - t204 * t195 * t143;
t214 = pkin(7) * t140;
t220 = -t204 * t195 * t151 - t204 * t199 * t154;
t225 = t204 * t199 * t151 - t204 * t195 * t154;
t226 = pkin(7) * t151;
t232 = -t204 * t195 * t162 - t204 * t199 * t165;
t237 = t204 * t199 * t162 - t204 * t195 * t165;
t238 = pkin(7) * t162;
t240 = cos(qJ(3));
t242 = sin(qJ(3));
t244 = t242 * t2 + t240 * t213;
t247 = t240 * t2 - t242 * t213;
t248 = pkin(12) * t208;
t252 = -t242 * t1 + t240 * t225;
t255 = -t240 * t1 - t242 * t225;
t256 = pkin(12) * t220;
t258 = t240 * t237;
t259 = t242 * t237;
t260 = pkin(12) * t232;
t262 = sin(qJ(4));
t264 = cos(qJ(4));
t266 = t264 * t208 + t262 * t244;
t269 = -t262 * t208 + t264 * t244;
t270 = pkin(10) * t208;
t274 = t264 * t220 + t262 * t252;
t277 = -t262 * t220 + t264 * t252;
t278 = pkin(10) * t220;
t282 = t264 * t232 + t262 * t258;
t285 = -t262 * t232 + t264 * t258;
t286 = pkin(10) * t232;
t288 = cos(qJ(5));
t290 = sin(qJ(5));
t314 = t106 * t140;
t317 = t173 / t120;
t321 = t125 ^ 2;
t324 = sqrt(-t114 * t180 * t110 * t317 + (t321 * t317));
t325 = 0.1e1 / t324;
t326 = t325 * t125 * t108;
t328 = t106 * t143;
t330 = t325 * t117 * t108;
t332 = t326 * t314 + t330 * t328;
t335 = -t330 * t314 + t326 * t328;
t336 = t106 * t151;
t338 = t106 * t154;
t340 = t326 * t336 + t330 * t338;
t343 = t326 * t338 - t330 * t336;
t344 = t106 * t162;
t346 = t106 * t165;
t348 = t326 * t344 + t330 * t346;
t351 = t326 * t346 - t330 * t344;
t354 = t23 - pkin(2);
t355 = -t25 + t26 + t40 + t41 - t42;
t357 = -pkin(1) * t36 * t18 - t355 * t354;
t358 = t357 * t1;
t359 = 0.1e1 / pkin(5);
t364 = t355 * t18 * pkin(1) - t36 * t354;
t365 = t364 ^ 2;
t366 = 0.1e1 / t41;
t369 = t357 ^ 2;
t373 = sqrt(t58 * t366 * t365 + t58 * t366 * t369);
t374 = 0.1e1 / t373;
t375 = t374 * t49 * t359;
t377 = t364 * t1;
t379 = pkin(14) * t1;
t381 = t357 * t2;
t383 = t364 * t2;
t385 = pkin(14) * t2;
t387 = t359 * t364;
t388 = t374 * t49;
t390 = t359 * t357;
t392 = t25 - t26 - t40 + t41 + t42;
t397 = t392 ^ 2;
t401 = sqrt(-t35 * t55 * t366 + t55 * t366 * t397);
t402 = 0.1e1 / t401;
t403 = t402 * t47 * t359;
t407 = t402 * t36 * t47;
t409 = -t403 * t392 * t332 - t407 * t359 * t335;
t414 = t407 * t359 * t332 - t403 * t392 * t335;
t415 = pkin(6) * t332;
t421 = -t403 * t392 * t340 - t407 * t359 * t343;
t426 = t407 * t359 * t340 - t403 * t392 * t343;
t427 = pkin(6) * t340;
t433 = -t403 * t392 * t348 - t407 * t359 * t351;
t438 = t407 * t359 * t348 - t403 * t392 * t351;
t439 = pkin(6) * t348;
t441 = t359 * t358;
t445 = sqrt(t192 ^ 2 / 0.16e2 + t184 ^ 2 / 0.16e2);
t446 = 0.1e1 / t445;
t448 = t446 * t184 * t388 / 0.4e1;
t450 = t359 * t377;
t452 = t446 * t192 * t388 / 0.4e1;
t460 = t359 * t381;
t462 = t359 * t383;
t470 = t49 * t387;
t472 = t446 * t184 * t374 / 0.4e1;
t474 = t49 * t390;
t476 = t446 * t192 * t374 / 0.4e1;
unknown(1,1) = 1;
unknown(1,2) = 0;
unknown(1,3) = 0;
unknown(1,4) = 0;
unknown(2,1) = 0;
unknown(2,2) = 1;
unknown(2,3) = 0;
unknown(2,4) = 0;
unknown(3,1) = 0;
unknown(3,2) = 0;
unknown(3,3) = 1;
unknown(3,4) = 0;
unknown(4,1) = 0;
unknown(4,2) = 0;
unknown(4,3) = 0;
unknown(4,4) = 1;
unknown(5,1) = t1;
unknown(5,2) = -t2;
unknown(5,3) = 0;
unknown(5,4) = 0;
unknown(6,1) = t2;
unknown(6,2) = t1;
unknown(6,3) = 0;
unknown(6,4) = 0;
unknown(7,1) = 0;
unknown(7,2) = 0;
unknown(7,3) = 1;
unknown(7,4) = t3;
unknown(8,1) = 0;
unknown(8,2) = 0;
unknown(8,3) = 0;
unknown(8,4) = 1;
unknown(9,1) = -t5;
unknown(9,2) = -t7;
unknown(9,3) = t2;
unknown(9,4) = (t8 + 0);
unknown(10,1) = -t10;
unknown(10,2) = -t11;
unknown(10,3) = -t1;
unknown(10,4) = (t12 + 0);
unknown(11,1) = t6;
unknown(11,2) = -t4;
unknown(11,3) = 0;
unknown(11,4) = t3;
unknown(12,1) = 0;
unknown(12,2) = 0;
unknown(12,3) = 0;
unknown(12,4) = 1;
unknown(13,1) = t78;
unknown(13,2) = t81;
unknown(13,3) = t2;
unknown(13,4) = (-t83 - t85 + t8 + 0);
unknown(14,1) = t89;
unknown(14,2) = t92;
unknown(14,3) = -t1;
unknown(14,4) = (-t93 - t94 + t12 + 0);
unknown(15,1) = t98;
unknown(15,2) = t101;
unknown(15,3) = 0;
unknown(15,4) = (t102 - t103 + pkin(11) + 0);
unknown(16,1) = 0;
unknown(16,2) = 0;
unknown(16,3) = 0;
unknown(16,4) = 1;
unknown(17,1) = t140;
unknown(17,2) = t143;
unknown(17,3) = t2;
unknown(17,4) = t148;
unknown(18,1) = t151;
unknown(18,2) = t154;
unknown(18,3) = -t1;
unknown(18,4) = t159;
unknown(19,1) = t162;
unknown(19,2) = t165;
unknown(19,3) = 0;
unknown(19,4) = t170;
unknown(20,1) = 0;
unknown(20,2) = 0;
unknown(20,3) = 0;
unknown(20,4) = 1;
unknown(21,1) = t208;
unknown(21,2) = t213;
unknown(21,3) = t2;
unknown(21,4) = (t214 + t145 + t147 - t83 - t85 + t8 + 0);
unknown(22,1) = t220;
unknown(22,2) = t225;
unknown(22,3) = -t1;
unknown(22,4) = (t226 + t156 + t158 - t93 - t94 + t12 + 0);
unknown(23,1) = t232;
unknown(23,2) = t237;
unknown(23,3) = 0;
unknown(23,4) = (t238 + t167 + t169 + t102 - t103 + pkin(11) + 0);
unknown(24,1) = 0;
unknown(24,2) = 0;
unknown(24,3) = 0;
unknown(24,4) = 1;
unknown(25,1) = t244;
unknown(25,2) = t247;
unknown(25,3) = t208;
unknown(25,4) = (t248 + t214 + t145 + t147 - t83 - t85 + t8 + 0);
unknown(26,1) = t252;
unknown(26,2) = t255;
unknown(26,3) = t220;
unknown(26,4) = (t256 + t226 + t156 + t158 - t93 - t94 + t12 + 0);
unknown(27,1) = t258;
unknown(27,2) = -t259;
unknown(27,3) = t232;
unknown(27,4) = (t260 + t238 + t167 + t169 + t102 - t103 + pkin(11) + 0);
unknown(28,1) = 0;
unknown(28,2) = 0;
unknown(28,3) = 0;
unknown(28,4) = 1;
unknown(29,1) = t266;
unknown(29,2) = t269;
unknown(29,3) = t247;
unknown(29,4) = (t270 + t248 + t214 + t145 + t147 - t83 - t85 + t8 + 0);
unknown(30,1) = t274;
unknown(30,2) = t277;
unknown(30,3) = t255;
unknown(30,4) = (t278 + t256 + t226 + t156 + t158 - t93 - t94 + t12 + 0);
unknown(31,1) = t282;
unknown(31,2) = t285;
unknown(31,3) = -t259;
unknown(31,4) = (t286 + t260 + t238 + t167 + t169 + t102 - t103 + pkin(11) + 0);
unknown(32,1) = 0;
unknown(32,2) = 0;
unknown(32,3) = 0;
unknown(32,4) = 1;
unknown(33,1) = (t290 * t247 + t288 * t269);
unknown(33,2) = (t288 * t247 - t290 * t269);
unknown(33,3) = t266;
unknown(33,4) = (pkin(9) * t266 + t145 + t147 + t214 + t248 + t270 + t8 - t83 - t85 + 0);
unknown(34,1) = (t290 * t255 + t288 * t277);
unknown(34,2) = (t288 * t255 - t290 * t277);
unknown(34,3) = t274;
unknown(34,4) = (pkin(9) * t274 + t12 + t156 + t158 + t226 + t256 + t278 - t93 - t94 + 0);
unknown(35,1) = (-t290 * t259 + t288 * t285);
unknown(35,2) = (-t288 * t259 - t290 * t285);
unknown(35,3) = t282;
unknown(35,4) = (pkin(9) * t282 + pkin(11) + t102 - t103 + t167 + t169 + t238 + t260 + t286 + 0);
unknown(36,1) = 0;
unknown(36,2) = 0;
unknown(36,3) = 0;
unknown(36,4) = 1;
unknown(37,1) = t332;
unknown(37,2) = t335;
unknown(37,3) = t2;
unknown(37,4) = t148;
unknown(38,1) = t340;
unknown(38,2) = t343;
unknown(38,3) = -t1;
unknown(38,4) = t159;
unknown(39,1) = t348;
unknown(39,2) = t351;
unknown(39,3) = 0;
unknown(39,4) = t170;
unknown(40,1) = 0;
unknown(40,2) = 0;
unknown(40,3) = 0;
unknown(40,4) = 1;
unknown(41,1) = (t375 * t358);
unknown(41,2) = -(t375 * t377);
unknown(41,3) = t2;
unknown(41,4) = (-t379 + 0);
unknown(42,1) = (t375 * t381);
unknown(42,2) = -(t375 * t383);
unknown(42,3) = -t1;
unknown(42,4) = (-t385 + 0);
unknown(43,1) = (t388 * t387);
unknown(43,2) = (t388 * t390);
unknown(43,3) = 0;
unknown(43,4) = t3;
unknown(44,1) = 0;
unknown(44,2) = 0;
unknown(44,3) = 0;
unknown(44,4) = 1;
unknown(45,1) = t409;
unknown(45,2) = t414;
unknown(45,3) = t2;
unknown(45,4) = (t415 + t145 + t147 - t83 - t85 + t8 + 0);
unknown(46,1) = t421;
unknown(46,2) = t426;
unknown(46,3) = -t1;
unknown(46,4) = (t427 + t156 + t158 - t93 - t94 + t12 + 0);
unknown(47,1) = t433;
unknown(47,2) = t438;
unknown(47,3) = 0;
unknown(47,4) = (t439 + t167 + t169 + t102 - t103 + pkin(11) + 0);
unknown(48,1) = 0;
unknown(48,2) = 0;
unknown(48,3) = 0;
unknown(48,4) = 1;
unknown(49,1) = (-t448 * t441 + t452 * t450);
unknown(49,2) = (t452 * t441 + t448 * t450);
unknown(49,3) = t2;
unknown(49,4) = (t388 * t358 - t379 + 0);
unknown(50,1) = (-t448 * t460 + t452 * t462);
unknown(50,2) = (t448 * t462 + t452 * t460);
unknown(50,3) = -t1;
unknown(50,4) = (t388 * t381 - t385 + 0);
unknown(51,1) = (-t472 * t470 - t476 * t474);
unknown(51,2) = (t476 * t470 - t472 * t474);
unknown(51,3) = 0;
unknown(51,4) = (t374 * t49 * t364 + pkin(11) + 0);
unknown(52,1) = 0;
unknown(52,2) = 0;
unknown(52,3) = 0;
unknown(52,4) = 1;
unknown(53,1) = -t414;
unknown(53,2) = -t2;
unknown(53,3) = t409;
unknown(53,4) = (qJ(6) * t409 + t145 + t147 + t415 + t8 - t83 - t85 + 0);
unknown(54,1) = -t426;
unknown(54,2) = t1;
unknown(54,3) = t421;
unknown(54,4) = (qJ(6) * t421 + t12 + t156 + t158 + t427 - t93 - t94 + 0);
unknown(55,1) = -t438;
unknown(55,2) = 0;
unknown(55,3) = t433;
unknown(55,4) = (qJ(6) * t433 + pkin(11) + t102 - t103 + t167 + t169 + t439 + 0);
unknown(56,1) = 0;
unknown(56,2) = 0;
unknown(56,3) = 0;
unknown(56,4) = 1;
unknown(57,1) = t78;
unknown(57,2) = t81;
unknown(57,3) = t2;
unknown(57,4) = (-pkin(4) * t78 + t8 - t83 - t85 + 0);
unknown(58,1) = t89;
unknown(58,2) = t92;
unknown(58,3) = -t1;
unknown(58,4) = (-pkin(4) * t89 + t12 - t93 - t94 + 0);
unknown(59,1) = t98;
unknown(59,2) = t101;
unknown(59,3) = 0;
unknown(59,4) = (-pkin(4) * t98 + pkin(11) + t102 - t103 + 0);
unknown(60,1) = 0;
unknown(60,2) = 0;
unknown(60,3) = 0;
unknown(60,4) = 1;
unknown(61,1) = -t213;
unknown(61,2) = -t2;
unknown(61,3) = t208;
unknown(61,4) = (-pkin(8) * t208 + t145 + t147 + t214 + t8 - t83 - t85 + 0);
unknown(62,1) = -t225;
unknown(62,2) = t1;
unknown(62,3) = t220;
unknown(62,4) = (-pkin(8) * t220 + t12 + t156 + t158 + t226 - t93 - t94 + 0);
unknown(63,1) = -t237;
unknown(63,2) = 0;
unknown(63,3) = t232;
unknown(63,4) = (-pkin(8) * t232 + pkin(11) + t102 - t103 + t167 + t169 + t238 + 0);
unknown(64,1) = 0;
unknown(64,2) = 0;
unknown(64,3) = 0;
unknown(64,4) = 1;
T_ges = unknown;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,15+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,15+1]); end % symbolisch
for i = 1:15+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
