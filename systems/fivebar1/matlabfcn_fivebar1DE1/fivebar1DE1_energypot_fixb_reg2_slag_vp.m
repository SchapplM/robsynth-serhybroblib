% Calculate inertial parameters regressor of potential energy for
% fivebar1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% U_reg [1x(2*10)]
%   inertial parameter regressor of Potential energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 04:13
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function U_reg = fivebar1DE1_energypot_fixb_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1DE1_energypot_fixb_reg2_slag_vp: qJ has to be [2x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'fivebar1DE1_energypot_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1DE1_energypot_fixb_reg2_slag_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From energy_potential_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 03:02:18
% EndTime: 2020-04-27 03:02:23
% DurationCPUTime: 4.78s
% Computational Cost: add. (28320->398), mult. (83129->489), div. (256->5), fcn. (9996->12), ass. (0->209)
t762 = 4 * pkin(3);
t622 = pkin(5) ^ 2;
t573 = -t622 / 0.3e1;
t625 = pkin(4) ^ 2;
t761 = t573 - t625 / 0.3e1;
t621 = t622 ^ 2;
t624 = t625 ^ 2;
t760 = -t621 / 0.6e1 + t624 / 0.6e1;
t594 = cos(qJ(2));
t559 = t594 ^ 2;
t759 = -0.2e1 * t559;
t630 = pkin(3) ^ 2;
t628 = t630 ^ 2;
t758 = 4 * t628;
t757 = 2 * t630;
t608 = 6 * t630;
t634 = (pkin(2) ^ 2);
t756 = 2 * t634;
t636 = (pkin(1) ^ 2);
t619 = 2 * t636;
t641 = t634 ^ 2;
t611 = 5 * t641;
t755 = -pkin(4) - pkin(5);
t754 = pkin(5) - pkin(4);
t593 = sin(qJ(1));
t551 = pkin(2) * t593;
t595 = cos(qJ(1));
t753 = pkin(2) * t595;
t592 = sin(qJ(2));
t752 = pkin(3) * t592;
t550 = pkin(3) * t594;
t751 = g(2) * t592;
t644 = pkin(3) * t630;
t701 = t630 * t551;
t750 = (-t592 * t644 + t701) * t559;
t537 = pkin(1) - t753;
t749 = t537 * t594;
t618 = 3 * t636;
t721 = t622 + t625;
t541 = t618 - t721;
t748 = t541 * t630;
t553 = t630 + t636;
t680 = -t622 + t553;
t536 = -t625 + t680;
t547 = t553 ^ 2;
t747 = t547 * t536;
t746 = t721 * t636;
t562 = t595 ^ 2;
t745 = t562 ^ 2 * t641;
t640 = pkin(2) * t634;
t744 = t595 * t562 * t640;
t743 = t592 * t593;
t742 = t593 * t594;
t741 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t740 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t739 = t628 * t559 ^ 2;
t738 = t630 * t559;
t737 = t634 * t562;
t736 = t636 * t622;
t735 = t636 * t630;
t558 = t594 * t559;
t734 = t644 * t558;
t576 = -0.3e1 / 0.2e1 * t622;
t631 = t640 ^ 2;
t635 = t636 ^ 2;
t719 = t628 + t635;
t731 = t621 / 0.2e1 - t624 / 0.2e1;
t733 = t553 * ((t576 + t619) * t630 - 0.3e1 / 0.2e1 * t736 + t719 + t731) + t631;
t580 = 0.2e1 / 0.3e1 * t625;
t575 = -0.2e1 / 0.3e1 * t622;
t685 = t575 + t553;
t732 = t553 * (t580 + t685) + t641;
t571 = -t622 / 0.6e1;
t730 = t571 - t625 / 0.6e1;
t585 = -0.2e1 / 0.3e1 * t625;
t729 = t575 + t585;
t728 = t576 + t618;
t545 = -t630 / 0.3e1 + t636;
t590 = t634 / 0.2e1;
t727 = t590 + t636;
t726 = 0.4e1 / 0.7e1 * t636 - t622 / 0.7e1;
t602 = 10 * t630;
t725 = t602 + t619;
t555 = -3 * t630 + t636;
t724 = t619 - t622;
t723 = t621 - t624;
t722 = -t622 + t625;
t720 = t622 - t636;
t718 = t630 - t636;
t717 = -t634 + t636;
t716 = t634 + t636;
t715 = t635 - t628;
t714 = t635 + t641;
t713 = 0.4e1 * pkin(1);
t712 = 0.2e1 * t752;
t711 = 0.2e1 * t550;
t710 = pkin(1) * t753;
t709 = pkin(1) * t550;
t708 = 0.8e1 * t744;
t707 = 0.8e1 * t739;
t706 = -0.4e1 * t738;
t705 = 0.4e1 * t738;
t704 = 0.2e1 * t737;
t703 = pkin(1) * t734;
t702 = pkin(2) * t743;
t700 = t644 * t551;
t699 = 0.12e2 * t738;
t698 = 0.16e2 * t734;
t697 = -t752 / 0.2e1;
t675 = pkin(3) * t702;
t532 = -0.2e1 * t675;
t540 = -0.2e1 * t710;
t681 = t630 + t716;
t513 = 0.1e1 / (t537 * t711 + t532 + t540 + t681);
t696 = t513 / pkin(5) / pkin(4) ^ 2;
t695 = t592 * t740;
t539 = 0.2e1 * t709;
t694 = 0.4e1 * t709;
t693 = 0.6e1 * t709;
t692 = 0.4e1 / 0.3e1 * t622 + 0.4e1 / 0.3e1 * t625 - (2 * t636);
t617 = 4 * t636;
t691 = 0.2e1 / 0.3e1 * t622 + t580 + t617;
t581 = t625 / 0.3e1;
t690 = t622 / 0.3e1 + t581 + t619;
t689 = t636 + t730;
t688 = t636 + t761;
t574 = -t622 / 0.2e1;
t687 = t574 - t625 / 0.2e1 + t636;
t686 = t575 + t580 + t619;
t609 = 3 * t630;
t684 = t609 + t716;
t683 = t618 + t722;
t682 = t625 + t720;
t520 = t540 + t704 + t717;
t613 = -3 * t634;
t656 = t634 + t536;
t655 = t540 + t656;
t510 = sqrt(t520 * t706 + 0.4e1 * t718 * t737 + 0.4e1 * t656 * t710 - t628 + (t613 + t682) * t757 - (t636 + (pkin(2) - t754) * (pkin(2) + t754)) * (t636 + (pkin(2) - t755) * (pkin(2) + t755)) + (-(t532 + t655) * t749 + t655 * t702) * t762);
t518 = t724 * t630 + t719 - t736 - t760;
t546 = t636 - t634 / 0.3e1;
t521 = t546 * t532;
t525 = t573 + t581 + t681;
t526 = t537 + t550;
t556 = t613 + t636;
t676 = 0.8e1 * t703;
t529 = t556 * t676;
t531 = 0.10e2 * t748;
t534 = t574 + t681;
t535 = t625 + t680;
t538 = pkin(1) + t550;
t543 = (t617 + t622) * t630;
t548 = 0.10e2 / 0.3e1 * t630;
t549 = -0.30e2 * t622 + (60 * t636);
t572 = -t622 / 0.4e1;
t586 = 0.4e1 / 0.3e1 * t630;
t587 = t630 / 0.3e1;
t588 = t630 / 0.2e1;
t600 = 15 * t628;
t601 = 15 * t630;
t603 = -0.2e1 * t622;
t604 = -0.5e1 * t622;
t605 = 7 * t628;
t606 = 5 * t628;
t607 = 7 * t630;
t612 = 3 * t634;
t615 = 3 * t635;
t616 = 8 * t636;
t637 = pkin(1) * t636;
t653 = t518 + t641;
t654 = -t675 + t727;
t668 = -0.3e1 * t736 + t615 + t731;
t671 = -0.6e1 * t675;
t658 = ((t548 + t724) * t634 + t653) * t671 + (t600 + (-0.9e1 * t622 + (18 * t636)) * t630 + t668) * t634 + (t601 + t728) * t641 + t733;
t670 = -0.4e1 * t675;
t659 = t534 * t670;
t661 = -(t612 + t553) * t752 + t684 * t551;
t662 = -(t611 + ((5 * t630) + t541) * t756 + t553 * (t585 + t685)) * t752 + (t641 + (t725 + t729) * t634 + t606 + 0.2e1 * t748 + t636 * (t636 + t729)) * t551;
t665 = t630 + t688;
t666 = t590 + t689;
t667 = -0.6e1 * t736 + (6 * t635) + t723;
t669 = t525 * t670 + (t608 + t686) * t634 + t732;
t672 = t558 * t700;
t673 = t739 * t551;
t674 = pkin(1) * t698;
t677 = 0.20e2 / 0.3e1 * t630;
t679 = ((-0.24e2 * (0.4e1 / 0.3e1 * t738 + t539 + t545) * t745 * t752 - 0.12e2 * (-0.8e1 / 0.3e1 * t673 + ((t586 + t666) * t551 - (0.4e1 / 0.3e1 * t634 + t588 + t689) * t752) * t705 + (-(t634 * t718) - 0.5e1 / 0.3e1 * t628 + t690 * t630 + t636 * t688) * t551 + (-t641 + (-t677 + t691) * t634 - (3 * t628) + t692 * t630 + t635) * t697 + (-t592 * t628 * t558 + ((t630 + t666) * t551 + (t756 - t718) * t697) * t550) * t713) * t737 + 0.24e2 * t546 * t673 + ((t612 + 0.3e1 / 0.2e1 * t630 + t687) * t551 + t556 * t752 / 0.2e1) * t674 - 0.6e1 * ((-(3 * t641) + (-t677 + t692) * t634 + t691 * t630 + t715) * t551 - 0.2e1 * (-0.5e1 / 0.3e1 * t641 + (-t630 + t690) * t634 + t636 * t665) * t752) * t738 - 0.6e1 * t662 * t709 - (t631 + ((21 * t630) + t541) * t641 + (t531 + t615 + (35 * t628) - 0.2e1 * t746) * t634 + (t605 + (t604 + t616 - 0.5e1 * t625) * t630 - t636 * t682) * t553) * t551 + (0.7e1 * t631 + (t607 + t541) * t611 + (t531 + (21 * t628) + (9 * t635) - 0.6e1 * t746) * t634 + t747) * t752) * t510 + t526 * (0.16e2 * (t707 + t674 + (-8 * t628 + 12 * t735) * t559 + (-0.12e2 * pkin(1) * t644 + t637 * t762) * t594 - (6 * t735) + t719) * t745 + 0.24e2 * ((t636 - 0.2e1 / 0.3e1 * t634) * t707 + 0.14e2 * (-0.32e2 / 0.21e2 * (t636 + t634 / 0.4e1 + t630 / 0.4e1 - t622 / 0.8e1) * t675 + t641 / 0.7e1 + (0.16e2 / 0.21e2 * t630 + t726) * t634 + t628 / 0.7e1 + t726 * t630 + t635 - 0.3e1 / 0.7e1 * t736 + t621 / 0.42e2 - t624 / 0.42e2) * t738 + t545 * t659 - (t718 * t641) + (t543 - 0.10e2 / 0.3e1 * t628 + (2 * t635) - t736) * t634 + t518 * t741 + ((-0.2e1 / 0.3e1 * t675 + t636 + t588 + t572) * t698 + 0.6e1 * (-0.8e1 / 0.3e1 * (t572 + t587 + t727) * t675 + t641 / 0.3e1 + (0.4e1 / 0.3e1 * t636 + t586 + t573) * t634 + t635 + 0.2e1 / 0.3e1 * t735 - 0.2e1 / 0.3e1 * t736 - t628 / 0.3e1 + t621 / 0.18e2 - t624 / 0.18e2) * t550) * pkin(1)) * t737 + 0.16e2 * (-6 * t636 * t634 + t714) * t739 + 0.32e2 * (t532 * t740 + t534 * t556) * t703 + 0.24e2 * (t546 * t659 - t631 + (-t548 + t720) * t641 + (t543 + t715 + t760) * t634 + t636 * t518) * t738 + 0.8e1 * t658 * t709 - 0.8e1 * ((t607 + t728) * t641 + (t605 + (t604 + (10 * t636)) * t630 + t668) * t634 + t733) * t675 + (t641 ^ 2) + (t603 + t617 + (28 * t630)) * t631 + (t549 * t630 + (70 * t628) + t667) * t641 + (t549 * t628 + t667 * t608 + t723 * t619 - 0.6e1 * t635 * t622 + 0.4e1 * t637 ^ 2 + (28 * t644 ^ 2)) * t634 + t535 * t747) + (((0.4e1 * t750 + (t551 + t712) * t539 + t555 * t551 + (0.3e1 / 0.2e1 * t634 + t609 + t687) * t712) * t708 + 0.6e1 * ((0.2e1 * (t588 + t634 + t730) * t551 + pkin(3) * t695) * t706 + (-0.8e1 * t672 + 0.4e1 * ((t684 + t761) * t551 - (t612 + t665) * t752) * t550) * pkin(1) + t662) * t753) * t510 + t526 * (-0.32e2 * (t676 + (-0.4e1 * t592 * t700 + t758 + ((4 * t634) + t603 + t616) * t630) * t559 + (t572 - t630 + t654) * t694 + t532 * t741 + t534 * t555) * t744 - 0.8e1 * (t529 + (t534 * t740 + t521) * t699 + (t659 + (t608 + t724) * t634 + t653) * t693 + t658) * t753)) * t538) / ((-0.4e1 * (0.2e1 * t750 + (t757 + t634) * t752 + (-t718 + t539) * t551) * t737 + 0.8e1 * pkin(1) * t672 + ((pkin(2) * t758 + 0.8e1 * t630 * t640) * t593 + 0.4e1 * t644 * t695) * t559 - 0.4e1 * t661 * t709 - (t725 * t634 + t606 + t714 + 6 * t735) * t551 + (t611 + (t602 + 6 * t636) * t634 + t547) * t752) * t510 + t526 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t675 + t636 + t634 / 0.3e1 + t587 + t625 / 0.9e1 - t622 / 0.9e1) * t738 + t545 * t532 + t525 * t741 + (t734 + (t625 / 0.6e1 + t571 + t654) * t550) * t713) * t737 + t529 + (t525 * t740 + t521) * t699 + t669 * t693 + ((t548 + t686) * t634 + t732) * t671 + t631 + (t601 + t683) * t641 + (t683 * t608 + t722 * t619 + t600 + t615) * t634 + t547 * t535) + ((t708 * t752 + 0.4e1 * (t701 * t759 + (t551 - t752) * t539 + t661) * t753) * t510 + t526 * (-0.8e1 * (t539 + t705 + t555) * t744 - 0.6e1 * (t717 * t705 + (t532 + t525) * t694 + t669) * t753)) * t538) / 0.4e1;
t678 = t513 / pkin(4) / 0.2e1;
t664 = t716 + t722;
t663 = -pkin(3) + t702;
t660 = -g(1) * t595 - g(2) * t593;
t657 = t609 + t664;
t524 = t594 * t595 + t743;
t523 = t592 * t595 - t742;
t519 = t540 + t630 + t664;
t509 = (-t663 + t749) * t510 + (t537 * t519 + t520 * t711) * t592 + (t519 * t594 + (0.4e1 * t559 - 0.2e1) * t537 * pkin(3)) * t551;
t508 = (pkin(2) * t742 + t537 * t592) * t510 - (t540 + t657 + t670) * t749 + t663 * t540 + t657 * t702 + (t520 * t759 - t535 - t612 + t704) * pkin(3);
t507 = atan2(t509 * t678, t508 * t678);
t506 = cos(t507);
t505 = sin(t507);
t503 = -t505 * t592 + t506 * t594;
t502 = t505 * t594 + t506 * t592;
t500 = (t508 * t510 / 0.4e1 + t509 * t679) * t696;
t499 = (t508 * t679 - t509 * t510 / 0.4e1) * t696;
t498 = atan2(t499 * t523 + t500 * t524, t499 * t524 - t500 * t523);
t497 = cos(t498);
t496 = sin(t498);
t495 = t496 * t593 - t497 * t595;
t494 = -t496 * t595 - t497 * t593;
t1 = [0, 0, 0, 0, 0, 0, t660, g(1) * t593 - g(2) * t595, -g(3), 0, 0, 0, 0, 0, 0, 0, -g(1) * t495 - g(2) * t494, g(1) * t494 - g(2) * t495, -g(3), t660 * pkin(2), 0, 0, 0, 0, 0, 0, -g(1) * t594 - t751, g(1) * t592 - g(2) * t594, -g(3), -g(1) * pkin(1), 0, 0, 0, 0, 0, 0, -g(1) * t503 - g(2) * t502, g(1) * t502 - g(2) * t503, -g(3), -pkin(3) * t751 - g(1) * t538;];
U_reg = t1;
