% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% fivebar1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% T_c_mdh [4x4x(6+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   5:  mdh base (link 0) -> mdh frame (5-1), link (5-1)
%   ...
%   6+1:  mdh base (link 0) -> mdh frame (6)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 04:13
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_c_mdh = fivebar1DE1_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1DE1_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1DE1_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 02:21:23
% EndTime: 2020-04-27 02:21:30
% DurationCPUTime: 6.81s
% Computational Cost: add. (77553->402), mult. (227916->487), div. (712->5), fcn. (27320->15), ass. (0->222)
t282 = 4 * pkin(3);
t137 = pkin(4) ^ 2;
t134 = pkin(5) ^ 2;
t85 = -t134 / 0.3e1;
t281 = t85 - t137 / 0.3e1;
t133 = t134 ^ 2;
t136 = t137 ^ 2;
t280 = -t133 / 0.6e1 + t136 / 0.6e1;
t106 = cos(qJ(2));
t71 = t106 ^ 2;
t279 = -0.2e1 * t71;
t142 = pkin(3) ^ 2;
t140 = t142 ^ 2;
t278 = 4 * t140;
t277 = 2 * t142;
t120 = 6 * t142;
t146 = (pkin(2) ^ 2);
t276 = 2 * t146;
t148 = (pkin(1) ^ 2);
t131 = 2 * t148;
t153 = t146 ^ 2;
t123 = 5 * t153;
t104 = sin(qJ(2));
t107 = cos(qJ(1));
t105 = sin(qJ(1));
t248 = t105 * t106;
t33 = t104 * t107 - t248;
t249 = t104 * t105;
t34 = t106 * t107 + t249;
t124 = 3 * t146;
t121 = 3 * t142;
t233 = t146 + t148;
t239 = -t134 + t137;
t176 = t233 + t239;
t169 = t121 + t176;
t214 = pkin(2) * t249;
t175 = -pkin(3) + t214;
t186 = pkin(3) * t214;
t177 = -0.4e1 * t186;
t125 = -3 * t146;
t65 = t142 + t148;
t192 = -t134 + t65;
t46 = -t137 + t192;
t168 = t146 + t46;
t63 = pkin(2) * t107;
t227 = pkin(1) * t63;
t50 = -0.2e1 * t227;
t167 = t50 + t168;
t237 = t134 - t148;
t194 = t137 + t237;
t260 = t142 * t71;
t224 = -0.4e1 * t260;
t235 = t142 - t148;
t74 = t107 ^ 2;
t259 = t146 * t74;
t47 = -t63 + pkin(1);
t262 = t106 * t47;
t272 = -pkin(4) + pkin(5);
t273 = -pkin(4) - pkin(5);
t222 = 0.2e1 * t259;
t234 = -t146 + t148;
t30 = t50 + t222 + t234;
t42 = -0.2e1 * t186;
t20 = sqrt(t30 * t224 + 0.4e1 * t235 * t259 + 0.4e1 * t168 * t227 - t140 + (t125 + t194) * t277 - (t148 + (pkin(2) - t272) * (pkin(2) + t272)) * (t148 + (pkin(2) - t273) * (pkin(2) + t273)) + (-(t42 + t167) * t262 + t167 * t214) * t282);
t45 = t137 + t192;
t18 = (pkin(2) * t248 + t104 * t47) * t20 - (t169 + t50 + t177) * t262 + t175 * t50 + t169 * t214 + (t30 * t279 - t124 + t222 - t45) * pkin(3);
t61 = pkin(3) * t106;
t229 = 0.2e1 * t61;
t29 = t142 + t50 + t176;
t62 = pkin(2) * t105;
t19 = (-t175 + t262) * t20 + (t229 * t30 + t29 * t47) * t104 + (t106 * t29 + (0.4e1 * t71 - 0.2e1) * t47 * pkin(3)) * t62;
t100 = t142 / 0.2e1;
t112 = 15 * t140;
t113 = 15 * t142;
t114 = 10 * t142;
t115 = -0.2e1 * t134;
t116 = -0.5e1 * t134;
t117 = 7 * t140;
t118 = 5 * t140;
t119 = 7 * t142;
t147 = t148 ^ 2;
t127 = 3 * t147;
t128 = 8 * t148;
t129 = 4 * t148;
t152 = pkin(2) * t146;
t143 = t152 ^ 2;
t149 = pkin(1) * t148;
t156 = pkin(3) * t142;
t236 = t140 + t147;
t241 = t131 - t134;
t245 = t148 * t134;
t28 = t241 * t142 + t236 - t245 - t280;
t165 = t153 + t28;
t102 = t146 / 0.2e1;
t243 = t102 + t148;
t166 = -t186 + t243;
t193 = t142 + t233;
t86 = -t134 / 0.2e1;
t44 = t86 + t193;
t170 = t44 * t177;
t178 = -0.6e1 * t186;
t266 = t133 / 0.2e1 - t136 / 0.2e1;
t183 = t127 - 0.3e1 * t245 + t266;
t130 = 3 * t148;
t88 = -0.3e1 / 0.2e1 * t134;
t250 = t88 + t130;
t252 = t143 + t65 * ((t88 + t131) * t142 - 0.3e1 / 0.2e1 * t245 + t236 + t266);
t58 = 0.10e2 / 0.3e1 * t142;
t171 = ((t58 + t241) * t146 + t165) * t178 + (t112 + (-0.9e1 * t134 + (18 * t148)) * t142 + t183) * t146 + (t113 + t250) * t153 + t252;
t87 = -0.2e1 / 0.3e1 * t134;
t201 = t87 + t65;
t242 = t114 + t131;
t238 = t134 + t137;
t51 = t130 - t238;
t254 = t51 * t142;
t97 = -0.2e1 / 0.3e1 * t137;
t264 = t87 + t97;
t60 = pkin(3) * t104;
t174 = -(t123 + ((5 * t142) + t51) * t276 + t65 * (t97 + t201)) * t60 + (t153 + (t242 + t264) * t146 + t118 + 0.2e1 * t254 + t148 * (t148 + t264)) * t62;
t240 = t133 - t136;
t179 = (6 * t147) - 0.6e1 * t245 + t240;
t205 = t148 + t281;
t180 = t142 + t205;
t83 = -t134 / 0.6e1;
t265 = t83 - t137 / 0.6e1;
t210 = t148 + t265;
t181 = t102 + t210;
t92 = 0.2e1 / 0.3e1 * t137;
t211 = t131 + t87 + t92;
t251 = t153 + t65 * (t92 + t201);
t93 = t137 / 0.3e1;
t35 = t85 + t93 + t193;
t182 = t35 * t177 + t251 + (t120 + t211) * t146;
t213 = t156 * t62;
t70 = t106 * t71;
t184 = t70 * t213;
t261 = t140 * t71 ^ 2;
t185 = t261 * t62;
t255 = t156 * t70;
t215 = 0.16e2 * t255;
t187 = pkin(1) * t215;
t188 = 0.20e2 / 0.3e1 * t142;
t217 = pkin(1) * t255;
t190 = 0.8e1 * t217;
t195 = t130 + t239;
t196 = t121 + t233;
t226 = pkin(1) * t61;
t197 = 0.6e1 * t226;
t198 = 0.4e1 * t226;
t246 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t200 = t104 * t246;
t203 = -t60 / 0.2e1;
t206 = t134 / 0.3e1 + t93 + t131;
t207 = 0.2e1 / 0.3e1 * t134 + t92 + t129;
t208 = 0.4e1 / 0.3e1 * t134 + 0.4e1 / 0.3e1 * t137 - (2 * t148);
t209 = t148 + t86 - t137 / 0.2e1;
t212 = t142 * t62;
t216 = 0.12e2 * t260;
t257 = t152 * t107 * t74;
t221 = 0.8e1 * t257;
t223 = 0.4e1 * t260;
t225 = 0.8e1 * t261;
t230 = 0.4e1 * pkin(1);
t231 = t147 + t153;
t232 = t147 - t140;
t244 = t148 * t142;
t247 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t253 = 0.4e1 / 0.7e1 * t148 - t134 / 0.7e1;
t256 = t153 * t74 ^ 2;
t258 = t148 * t238;
t263 = t104 * (t124 + t65);
t57 = t65 ^ 2;
t267 = t57 * t46;
t268 = (-t104 * t156 + t212) * t71;
t270 = pkin(1) * t106;
t56 = t148 - t146 / 0.3e1;
t31 = t56 * t42;
t36 = t61 + t47;
t68 = t125 + t148;
t39 = t68 * t190;
t40 = t196 * t62;
t41 = 0.10e2 * t254;
t48 = pkin(1) + t61;
t49 = 0.2e1 * t226;
t53 = (t129 + t134) * t142;
t55 = -t142 / 0.3e1 + t148;
t59 = -0.30e2 * t134 + (60 * t148);
t67 = -3 * t142 + t148;
t84 = -t134 / 0.4e1;
t98 = 0.4e1 / 0.3e1 * t142;
t99 = t142 / 0.3e1;
t269 = ((-0.24e2 * (0.4e1 / 0.3e1 * t260 + t49 + t55) * t256 * t60 - 0.12e2 * (-0.8e1 / 0.3e1 * t185 + ((t98 + t181) * t62 - (0.4e1 / 0.3e1 * t146 + t100 + t210) * t60) * t223 + (-(t146 * t235) - 0.5e1 / 0.3e1 * t140 + t206 * t142 + t148 * t205) * t62 + (-t153 + (-t188 + t207) * t146 - (3 * t140) + t208 * t142 + t147) * t203 + (-t104 * t140 * t70 + ((t142 + t181) * t62 + (t276 - t235) * t203) * t61) * t230) * t259 + 0.24e2 * t56 * t185 + ((t124 + 0.3e1 / 0.2e1 * t142 + t209) * t62 + t68 * t60 / 0.2e1) * t187 - 0.6e1 * ((-(3 * t153) + (-t188 + t208) * t146 + t207 * t142 + t232) * t62 - 0.2e1 * (-0.5e1 / 0.3e1 * t153 + (-t142 + t206) * t146 + t148 * t180) * t60) * t260 - 0.6e1 * t174 * t226 - (t143 + ((21 * t142) + t51) * t153 + (t127 + (35 * t140) + t41 - 0.2e1 * t258) * t146 + (t117 + (t116 + t128 - 0.5e1 * t137) * t142 - t148 * t194) * t65) * t62 + (0.7e1 * t143 + (t119 + t51) * t123 + ((21 * t140) + (9 * t147) + t41 - 0.6e1 * t258) * t146 + t267) * t60) * t20 + t36 * (0.16e2 * (t225 + t187 + (-8 * t140 + 12 * t244) * t71 + (-0.12e2 * pkin(1) * t156 + t149 * t282) * t106 - (6 * t244) + t236) * t256 + 0.24e2 * ((t148 - 0.2e1 / 0.3e1 * t146) * t225 + 0.14e2 * (-0.32e2 / 0.21e2 * (t148 + t146 / 0.4e1 + t142 / 0.4e1 - t134 / 0.8e1) * t186 + t153 / 0.7e1 + (0.16e2 / 0.21e2 * t142 + t253) * t146 + t140 / 0.7e1 + t253 * t142 + t147 - 0.3e1 / 0.7e1 * t245 + t133 / 0.42e2 - t136 / 0.42e2) * t260 + t55 * t170 - (t235 * t153) + (-0.10e2 / 0.3e1 * t140 + (2 * t147) - t245 + t53) * t146 + t28 * t247 + ((-0.2e1 / 0.3e1 * t186 + t148 + t100 + t84) * t215 + 0.6e1 * (-0.8e1 / 0.3e1 * (t84 + t99 + t243) * t186 + t153 / 0.3e1 + (0.4e1 / 0.3e1 * t148 + t98 + t85) * t146 + t147 + 0.2e1 / 0.3e1 * t244 - 0.2e1 / 0.3e1 * t245 - t140 / 0.3e1 + t133 / 0.18e2 - t136 / 0.18e2) * t61) * pkin(1)) * t259 + 0.16e2 * (-6 * t148 * t146 + t231) * t261 + 0.32e2 * (t246 * t42 + t44 * t68) * t217 + 0.24e2 * (t56 * t170 - t143 + (-t58 + t237) * t153 + (t53 + t232 + t280) * t146 + t148 * t28) * t260 + 0.8e1 * t171 * t226 - 0.8e1 * ((t119 + t250) * t153 + (t117 + (t116 + (10 * t148)) * t142 + t183) * t146 + t252) * t186 + (t153 ^ 2) + (t115 + t129 + (28 * t142)) * t143 + (t142 * t59 + (70 * t140) + t179) * t153 + (t120 * t179 + t131 * t240 - 0.6e1 * t147 * t134 + t59 * t140 + 0.4e1 * t149 ^ 2 + (28 * t156 ^ 2)) * t146 + t45 * t267) + (((t67 * t62 + 0.4e1 * t268 + 0.2e1 * ((t62 + 0.2e1 * t60) * t270 + (0.3e1 / 0.2e1 * t146 + t121 + t209) * t104) * pkin(3)) * t221 + 0.6e1 * ((0.2e1 * (t100 + t146 + t265) * t62 + pkin(3) * t200) * t224 + (-0.8e1 * t184 + 0.4e1 * ((t196 + t281) * t62 - (t124 + t180) * t60) * t61) * pkin(1) + t174) * t63) * t20 + t36 * (-0.32e2 * (t190 + (-0.4e1 * t104 * t213 + t278 + ((4 * t146) + t115 + t128) * t142) * t71 + (-t142 + t166 + t84) * t198 + t42 * t247 + t44 * t67) * t257 - 0.8e1 * (t39 + (t246 * t44 + t31) * t216 + (t170 + (t120 + t241) * t146 + t165) * t197 + t171) * t63)) * t48) / ((-0.4e1 * (0.2e1 * t268 + (t277 + t146) * t60 + (-t235 + t49) * t62) * t259 + 0.8e1 * pkin(1) * t184 + ((pkin(2) * t278 + 0.8e1 * t142 * t152) * t105 + 0.4e1 * t156 * t200) * t71 - 0.4e1 * (-pkin(3) * t263 + t40) * t226 - (t146 * t242 + t118 + t231 + 6 * t244) * t62 + (t123 + (t114 + 6 * t148) * t146 + t57) * t60) * t20 + t36 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t186 + t148 + t146 / 0.3e1 + t99 + t137 / 0.9e1 - t134 / 0.9e1) * t260 + t55 * t42 + t35 * t247 + (t255 + (t137 / 0.6e1 + t83 + t166) * t61) * t230) * t259 + t39 + (t246 * t35 + t31) * t216 + t182 * t197 + ((t58 + t211) * t146 + t251) * t178 + t143 + (t113 + t195) * t153 + (t120 * t195 + t131 * t239 + t112 + t127) * t146 + t57 * t45) + ((t221 * t60 + 0.4e1 * (t212 * t279 + t40 + (0.2e1 * (-t60 + t62) * t270 - t263) * pkin(3)) * t63) * t20 + t36 * (-0.8e1 * (t49 + t223 + t67) * t257 - 0.6e1 * (t234 * t223 + (t42 + t35) * t198 + t182) * t63)) * t48);
t202 = t269 / 0.4e1;
t135 = 0.1e1 / pkin(5);
t23 = 0.1e1 / (t229 * t47 + t193 + t42 + t50);
t204 = t135 / pkin(4) ^ 2 * t23;
t6 = (t18 * t202 - t19 * t20 / 0.4e1) * t204;
t7 = (t18 * t20 / 0.4e1 + t19 * t202) * t204;
t5 = atan2(t33 * t6 + t34 * t7, -t33 * t7 + t34 * t6);
t275 = cos(t5);
t274 = sin(t5);
t271 = 0.1e1 / pkin(4) / 0.2e1;
t228 = pkin(1) + 0;
t220 = t60 + 0;
t219 = t62 + 0;
t218 = t63 + 0;
t199 = t23 * t271;
t191 = t135 * t271;
t189 = t61 + t228;
t17 = atan2(t19 * t199, t18 * t199);
t15 = sin(t17);
t16 = cos(t17);
t12 = t104 * t16 + t106 * t15;
t13 = -t104 * t15 + t106 * t16;
t10 = atan2(t20 * t191, t191 * t269);
t8 = sin(t10);
t9 = cos(t10);
t173 = t12 * t9 + t13 * t8;
t172 = t12 * t8 - t13 * t9;
t2 = t105 * t274 - t107 * t275;
t1 = -t105 * t275 - t107 * t274;
t3 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t107, -t105, 0, 0; t105, t107, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t2, -t1, 0, t218; t1, t2, 0, t219; 0, 0, 1, 0; 0, 0, 0, 1; t106, -t104, 0, t228; t104, t106, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t13, -t12, 0, t189; t12, t13, 0, t220; 0, 0, 1, 0; 0, 0, 0, 1; t172, t173, 0, pkin(4) * t13 + t189; -t173, t172, 0, pkin(4) * t12 + t220; 0, 0, 1, 0; 0, 0, 0, 1; t2, -t1, 0, pkin(5) * t2 + t218; t1, t2, 0, pkin(5) * t1 + t219; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t3;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,6+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,6+1]); end % symbolisch
for i = 1:6+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
