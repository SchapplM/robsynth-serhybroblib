% Calculate kinetic energy for
% fivebar1DE1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% qJD [2x1]
%   Generalized joint velocities
% V_base [6x1]
%   Base Velocity (twist: stacked translational and angular velocity) in base frame
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% m [5x1]
%   mass of all robot links (including the base)
% rSges [5x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (starting with base)
%   columns: x-, y-, z-coordinates
% Icges [5x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (starting with base)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
% 
% Output:
% T [1x1]
%   kinetic energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 04:13
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T = fivebar1DE1_energykin_floatb_twist_slag_vp1(qJ, qJD, V_base, ...
  pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(2,1),zeros(6,1),zeros(5,1),zeros(5,1),zeros(5,3),zeros(5,6)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: qJ has to be [2x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [2 1]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: qJD has to be [2x1] (double)');
assert(isreal(V_base) && all(size(V_base) == [6 1]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: V_base has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: pkin has to be [5x1] (double)');
assert(isreal(m) && all(size(m) == [5 1]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: m has to be [5x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [5,3]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: rSges has to be [5x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [5 6]), ...
  'fivebar1DE1_energykin_floatb_twist_slag_vp1: Icges has to be [5x6] (double)'); 

%% Symbolic Calculation
% From energy_kinetic_floatb_twist_worldframe_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 02:23:31
% EndTime: 2020-04-27 02:24:06
% DurationCPUTime: 31.85s
% Computational Cost: add. (503491->739), mult. (1499678->1120), div. (4036->13), fcn. (184114->12), ass. (0->481)
t848 = pkin(5) ^ 2;
t847 = t848 ^ 2;
t851 = pkin(4) ^ 2;
t850 = t851 ^ 2;
t1019 = t847 - t850;
t862 = (pkin(1) ^ 2);
t846 = -2 * t862;
t815 = sin(qJ(2));
t818 = cos(qJ(1));
t1010 = qJD(1) * t818;
t753 = pkin(2) * t1010;
t936 = pkin(3) * t753;
t909 = t815 * t936;
t1083 = pkin(2) * pkin(3);
t817 = cos(qJ(2));
t1006 = qJD(2) * t817;
t816 = sin(qJ(1));
t950 = t816 * t1006;
t910 = t950 * t1083;
t1111 = -0.6e1 * t910 - 0.6e1 * t909;
t1110 = t910 + t909;
t1070 = pkin(2) * t818;
t1011 = qJD(1) * t816;
t770 = pkin(3) * t817;
t747 = pkin(1) + t770;
t954 = t747 * t1011;
t1008 = qJD(2) * t815;
t977 = pkin(3) * t1008;
t1100 = pkin(2) * t954 + t977 * t1070;
t1109 = 0.2e1 * pkin(1);
t1002 = 0.4e1 * pkin(3);
t856 = pkin(3) ^ 2;
t860 = pkin(2) ^ 2;
t868 = t860 ^ 2;
t796 = -t848 / 0.3e1;
t1101 = t796 - t851 / 0.3e1;
t962 = t862 + t1101;
t923 = t856 + t962;
t804 = t851 / 0.3e1;
t845 = 2 * t862;
t964 = t848 / 0.3e1 + t804 + t845;
t1106 = 0.10e2 / 0.3e1 * t868 - 0.2e1 * (-t856 + t964) * t860 + t923 * t846;
t1105 = 0.2e1 * t753;
t771 = pkin(2) * t816;
t1104 = 0.2e1 * t771;
t1103 = 0.4e1 * t856;
t835 = 0.6e1 * t856;
t825 = 0.10e2 * t856;
t1069 = pkin(2) * t856;
t780 = t817 ^ 2;
t1067 = pkin(3) * t780;
t775 = -0.3e1 * t856 + t862;
t1039 = t856 * t780;
t992 = 0.4e1 * t1039;
t1102 = t775 + t992;
t949 = t815 * t1010;
t886 = t949 + t950;
t844 = 3 * t862;
t1099 = t844 - t848 - t851;
t1098 = qJD(1) - qJD(2);
t1097 = -t847 / 0.6e1 + t850 / 0.6e1;
t1095 = 0.8e1 * pkin(1);
t1094 = -0.4e1 * pkin(3);
t1093 = -0.2e1 * t780;
t1092 = -0.4e1 * t815;
t1091 = -0.2e1 * t815;
t1090 = -0.2e1 * t817;
t1089 = -0.2e1 * t818;
t829 = -0.6e1 * t848;
t854 = t856 ^ 2;
t1088 = 0.4e1 * t854;
t1087 = -0.8e1 * t856;
t763 = t862 - t860 / 0.3e1;
t1086 = 0.24e2 * t763;
t1085 = pkin(1) * pkin(2);
t1084 = pkin(1) * pkin(3);
t1082 = -pkin(4) - pkin(5);
t1081 = -pkin(4) + pkin(5);
t1000 = pkin(1) * t1070;
t746 = pkin(1) - t1070;
t1058 = t746 * t817;
t1016 = -t860 + t862;
t749 = -0.2e1 * t1000;
t783 = t818 ^ 2;
t1048 = t783 * t860;
t994 = 0.2e1 * t1048;
t685 = t749 + t994 + t1016;
t1059 = t685 * t780;
t1012 = t862 - t848;
t955 = t860 + t1012;
t922 = t856 + t955;
t735 = -t851 + t922;
t682 = t749 + t735;
t1047 = t815 * t816;
t983 = pkin(3) * t1047;
t939 = pkin(2) * t983;
t737 = -0.2e1 * t939;
t661 = t737 + t682;
t1038 = t860 * t862;
t784 = t860 * t1103;
t750 = t784 - 0.4e1 * t1038;
t830 = 0.2e1 * t851;
t987 = pkin(2) * t1047;
t863 = sqrt(t750 * t783 + 0.4e1 * t735 * t1000 - t854 - (t862 + (pkin(2) - t1081) * (pkin(2) + t1081)) * (t862 + (pkin(2) - t1082) * (pkin(2) + t1082)) + (t830 + t846 + 0.2e1 * t848 - 0.6e1 * t860 - 0.4e1 * t1059) * t856 + (-t1058 * t661 + t682 * t987) * t1002);
t1073 = -t863 / 0.4e1;
t779 = t817 * t780;
t871 = pkin(3) * t856;
t1052 = t779 * t871;
t773 = t856 + t862;
t767 = t773 ^ 2;
t956 = t856 + t1012;
t1055 = t767 * (-t851 + t956);
t1057 = t747 * t818;
t1037 = t862 * t848;
t1042 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t1025 = 0.4e1 / 0.7e1 * t862 - t848 / 0.7e1;
t730 = t862 + t860 / 0.4e1 + t856 / 0.4e1 - t848 / 0.8e1;
t861 = t862 ^ 2;
t615 = -0.32e2 / 0.21e2 * t730 * t939 + t868 / 0.7e1 + (0.16e2 / 0.21e2 * t856 + t1025) * t860 + t854 / 0.7e1 + t1025 * t856 + t861 - 0.3e1 / 0.7e1 * t1037 + t1019 / 0.42e2;
t1074 = 0.4e1 / 0.3e1 * t860;
t813 = t860 / 0.2e1;
t1026 = t813 + t862;
t795 = -t848 / 0.4e1;
t810 = t856 / 0.3e1;
t731 = t795 + t810 + t1026;
t798 = -0.2e1 / 0.3e1 * t848;
t809 = 0.4e1 / 0.3e1 * t856;
t617 = -0.8e1 / 0.3e1 * t731 * t939 + t868 / 0.3e1 + (t809 + t796) * t860 + t861 - t854 / 0.3e1 + (t1074 + 0.2e1 / 0.3e1 * t856 + t798) * t862 + t1019 / 0.18e2;
t1017 = t854 + t861;
t1020 = t845 - t848;
t675 = t1020 * t856 + t1017 - t1037 - t1097;
t811 = t856 / 0.2e1;
t678 = -0.2e1 / 0.3e1 * t939 + t862 + t811 + t795;
t843 = 4 * t862;
t757 = (t843 + t848) * t856;
t762 = -t856 / 0.3e1 + t862;
t764 = t862 - 0.2e1 / 0.3e1 * t860;
t774 = -t856 + t862;
t797 = -t848 / 0.2e1;
t1015 = t860 + t862;
t957 = t856 + t1015;
t739 = t797 + t957;
t926 = -0.4e1 * t939;
t902 = t739 * t926;
t981 = 0.16e2 * t1052;
t778 = t780 ^ 2;
t1054 = t778 * t854;
t998 = 0.8e1 * t1054;
t598 = t764 * t998 + 0.14e2 * t615 * t1039 + t762 * t902 + t774 * t868 + (-t1037 + t757 - 0.10e2 / 0.3e1 * t854 + (2 * t861)) * t860 + t675 * t1042 + (0.6e1 * t617 * t770 + t678 * t981) * pkin(1);
t1024 = 0.15e2 * t856 + t844;
t1029 = t847 / 0.2e1 - t850 / 0.2e1;
t799 = -0.3e1 / 0.2e1 * t848;
t867 = pkin(2) * t860;
t857 = t867 ^ 2;
t1033 = t773 * ((t799 + t845) * t856 - 0.3e1 / 0.2e1 * t1037 + t1017 + t1029) + t857;
t786 = 0.10e2 / 0.3e1 * t856;
t885 = t675 + t868;
t647 = (t786 + t1020) * t860 + t885;
t823 = 0.15e2 * t854;
t826 = 18 * t862;
t840 = 3 * t861;
t925 = -0.3e1 * t1037 + t840 + t1029;
t605 = -0.6e1 * t647 * t939 + t1033 + (t823 + (t826 - 0.9e1 * t848) * t856 + t925) * t860 + (t799 + t1024) * t868;
t621 = t902 + (t835 + t1020) * t860 + t885;
t1041 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t686 = t763 * t737;
t643 = t1041 * t739 + t686;
t776 = -0.3e1 * t860 + t862;
t997 = 0.8e1 * t1052;
t941 = pkin(1) * t997;
t722 = t776 * t941;
t999 = pkin(1) * t770;
t968 = 0.6e1 * t999;
t979 = 0.12e2 * t1039;
t599 = t621 * t968 + t643 * t979 + t605 + t722;
t1001 = 0.4e1 * t770;
t827 = -0.2e1 * t848;
t841 = 8 * t862;
t985 = t871 * t771;
t670 = t985 * t1092 + t784 + t1088 + (t827 + t841) * t856;
t889 = -t939 + t1026;
t676 = t795 - t856 + t889;
t608 = t737 * t1042 + t670 * t780 + t739 * t775 + (t1001 * t676 + t997) * pkin(1);
t1014 = t861 - t854;
t609 = t763 * t902 - t857 + (-t786 - t1012) * t868 + (t757 + t1014 + t1097) * t860 + t862 * t675;
t828 = -0.5e1 * t848;
t833 = 0.7e1 * t854;
t614 = (t799 + t844 + 0.7e1 * t856) * t868 + (t833 + (t828 + (10 * t862)) * t856 + t925) * t860 + t1033;
t1036 = t862 * t856;
t864 = pkin(1) * t862;
t745 = -0.12e2 * pkin(1) * t871 + t864 * t1002;
t759 = -0.8e1 * t854 + 0.12e2 * t1036;
t938 = pkin(1) * t981;
t630 = t745 * t817 + t759 * t780 + t1017 - 0.6e1 * t1036 + t938 + t998;
t648 = t1041 * t737 + t739 * t776;
t1013 = t861 + t868;
t724 = 0.16e2 * (t1013 - 0.6e1 * t1038) * t854;
t743 = t851 + t956;
t768 = -0.30e2 * t848 + (60 * t862);
t781 = t783 ^ 2;
t892 = t1019 + (6 * t861) - 0.6e1 * t1037;
t782 = t818 * t783;
t1049 = t782 * t867;
t971 = t747 * t1049;
t929 = -0.32e2 * t971;
t581 = t608 * t929 + t724 * t778 + 0.24e2 * t609 * t1039 + (t827 + t843 + 0.28e2 * t856) * t857 + t743 * t1055 + (t1019 * t845 + 0.24e2 * t598 * t783 + t768 * t854 + t829 * t861 + t892 * t835 + 0.4e1 * t864 ^ 2 + 0.28e2 * t871 ^ 2) * t860 + 0.8e1 * (-t1057 * t599 - t614 * t983) * pkin(2) + (0.32e2 * t1052 * t648 + 0.8e1 * t605 * t770) * pkin(1) + (0.16e2 * t630 * t781 + t768 * t856 + 0.70e2 * t854 + t868 + t892) * t868;
t1071 = pkin(1) * t817;
t1004 = 0.4e1 * pkin(1);
t1053 = t779 * t854;
t1068 = pkin(3) * t815;
t794 = -t848 / 0.6e1;
t1028 = t794 - t851 / 0.6e1;
t963 = t862 + t1028;
t695 = t1074 + t811 + t963;
t924 = t813 + t963;
t696 = t809 + t924;
t633 = -t1068 * t695 + t696 * t771;
t699 = t856 + t924;
t755 = 0.2e1 * t860 + t774;
t974 = -t1068 / 0.2e1;
t646 = t699 * t771 + t755 * t974;
t649 = t860 * t774 - 0.5e1 / 0.3e1 * t854 + t964 * t856 + t862 * t962;
t787 = -0.20e2 / 0.3e1 * t856;
t803 = 0.2e1 / 0.3e1 * t851;
t965 = 0.2e1 / 0.3e1 * t848 + t803 + t843;
t966 = 0.4e1 / 0.3e1 * t848 + 0.4e1 / 0.3e1 * t851 + t846;
t650 = -t868 + (t787 + t965) * t860 - 0.3e1 * t854 + t966 * t856 + t861;
t600 = t633 * t992 + t650 * t974 + (-0.8e1 / 0.3e1 * t1054 + t649) * t771 + (-t1053 * t815 + t646 * t770) * t1004;
t1023 = t825 + t845;
t808 = -0.2e1 / 0.3e1 * t851;
t1027 = t798 + t808;
t834 = 0.5e1 * t854;
t1022 = t827 - 0.2e1 * t851;
t842 = 6 * t862;
t958 = t842 + t1022;
t636 = t868 + (t1023 + t1027) * t860 + t834 + t958 * t856 + t862 * (t862 + t1027);
t838 = 0.5e1 * t868;
t959 = t798 + t773;
t654 = t838 + (t825 + t958) * t860 + t773 * (t808 + t959);
t610 = -t1068 * t654 + t636 * t771;
t839 = 0.3e1 * t860;
t701 = t839 + t923;
t836 = 0.3e1 * t856;
t756 = t836 + t1015;
t702 = t756 + t1101;
t637 = -t1068 * t701 + t702 * t771;
t729 = t811 + t860 + t1028;
t655 = t1041 * t1068 + t729 * t1104;
t601 = -0.4e1 * t655 * t1039 + (t1001 * t637 - 0.8e1 * t779 * t985) * pkin(1) + t610;
t651 = -0.3e1 * t868 + (t787 + t966) * t860 + t965 * t856 + t1014;
t611 = t1068 * t1106 + t651 * t771;
t1003 = 0.2e1 * pkin(3);
t961 = t797 - t851 / 0.2e1 + t862;
t698 = 0.3e1 / 0.2e1 * t860 + t836 + t961;
t986 = t816 * t1069;
t890 = -t815 * t871 + t986;
t705 = 0.4e1 * t890;
t733 = t771 + 0.2e1 * t1068;
t612 = t775 * t771 + t705 * t780 + (t1071 * t733 + t698 * t815) * t1003;
t1021 = t828 - 0.5e1 * t851;
t740 = t1099 * t825;
t613 = t857 + (0.21e2 * t856 + t1099) * t868 + (t1022 * t862 + t740 + t840 + 0.35e2 * t854) * t860 + (t833 + (t841 + t1021) * t856 + t862 * (-t851 + t1012)) * t773;
t620 = 0.7e1 * t857 + (0.35e2 * t856 + (15 * t862) + t1021) * t868 + (0.21e2 * t854 + t740 + (9 * t861) + (t829 - 0.6e1 * t851) * t862) * t860 + t1055;
t700 = t839 + 0.3e1 / 0.2e1 * t856 + t961;
t975 = pkin(3) * t776 / 0.2e1;
t653 = t700 * t771 + t815 * t975;
t1050 = t781 * t868;
t748 = 0.2e1 * t999;
t679 = 0.4e1 / 0.3e1 * t1039 + t748 + t762;
t930 = -0.24e2 * t679 * t1050;
t934 = 0.8e1 * t971;
t980 = -0.12e2 * t1048;
t993 = -0.6e1 * t1039;
t587 = t653 * t938 + t612 * t934 + t600 * t980 + t611 * t993 + (-0.6e1 * t610 * t1071 + (t620 + t930) * t815) * pkin(3) + (0.6e1 * t601 * t1057 + (t1054 * t1086 - t613) * t816) * pkin(2);
t704 = t746 + t770;
t577 = t581 * t704 + t587 * t863;
t681 = t749 + t851 + t922;
t623 = t681 * t746 + 0.2e1 * t685 * t770;
t626 = t681 * t817 + (0.4e1 * t780 - 0.2e1) * t746 * pkin(3);
t736 = -pkin(3) + t987;
t672 = -t736 + t1058;
t596 = t623 * t815 + t626 * t771 + t672 * t863;
t664 = -0.4e1 / 0.9e1 * t939 + t862 + t860 / 0.3e1 + t810 + t851 / 0.9e1 - t848 / 0.9e1;
t673 = t851 / 0.6e1 + t794 + t889;
t703 = t796 + t804 + t957;
t606 = t762 * t737 + 0.6e1 * t664 * t1039 + t703 * t1042 + (t673 * t770 + t1052) * t1004;
t1031 = t773 * (t803 + t959) + t868;
t960 = t798 + t803 + t845;
t618 = t703 * t926 + t1031 + (t835 + t960) * t860;
t671 = t737 + t703;
t751 = t1016 * t1103;
t607 = 0.4e1 * t671 * t999 + t751 * t780 + t618;
t640 = t1041 * t703 + t686;
t645 = (t786 + t960) * t860 + t1031;
t684 = t748 + t1102;
t935 = -0.8e1 * t971;
t592 = t684 * t935 + t722 + t640 * t979 + t618 * t968 + t857 + (-t848 + t851 + t1024) * t868 + t767 * t743 + (0.12e2 * t606 * t783 + t823 + (t826 + t829 + 0.6e1 * t851) * t856 + t840 + (t827 + t830) * t862) * t860 + 0.6e1 * (-t1057 * t607 - t645 * t983) * pkin(2);
t754 = t839 + t773;
t1056 = t754 * t815;
t723 = t756 * t771;
t732 = t771 - t1068;
t619 = t986 * t1093 + t723 + (0.2e1 * t1071 * t732 - t1056) * pkin(3);
t706 = 0.2e1 * t890;
t772 = 0.2e1 * t856 + t860;
t921 = t774 + t748;
t622 = t1068 * t772 + t706 * t780 + t771 * t921;
t663 = -pkin(3) * t1056 + t723;
t752 = pkin(2) * t1088 + 0.8e1 * t856 * t867;
t969 = t871 * t1041;
t667 = t752 * t816 + 0.4e1 * t815 * t969;
t683 = t1023 * t860 + t1013 + 0.6e1 * t1036 + t834;
t690 = t838 + (t825 + t842) * t860 + t767;
t995 = -0.4e1 * t1048;
t597 = t622 * t995 + t667 * t780 + (-0.4e1 * t663 * t1071 + (t690 + t934) * t815) * pkin(3) + (0.4e1 * t619 * t1057 + (-t683 + t941) * t816) * pkin(2);
t586 = t592 * t704 + t597 * t863;
t1078 = 0.1e1 / t586 / 0.4e1;
t734 = t836 + t851 + t955;
t662 = t734 + t749 + t926;
t1044 = t816 * t817;
t674 = pkin(2) * t1044 + t746 * t815;
t594 = -t662 * t1058 + t674 * t863 + (pkin(1) * t1089 * t736 + t1047 * t734) * pkin(2) + (-t743 - t839 + t994 - 0.2e1 * t1059) * pkin(3);
t946 = t594 * t1078;
t887 = t1073 * t596 + t577 * t946;
t1040 = 0.1e1 / pkin(5) / pkin(4) ^ 2;
t984 = pkin(3) * t1058;
t641 = t737 + t749 + t957 + 0.2e1 * t984;
t638 = 0.1e1 / t641;
t972 = t638 * t1040;
t566 = t887 * t972;
t1072 = t863 / 0.4e1;
t945 = t596 * t1078;
t888 = t1072 * t594 + t577 * t945;
t567 = t888 * t972;
t1046 = t815 * t818;
t688 = -t1044 + t1046;
t689 = t817 * t818 + t1047;
t561 = t566 * t688 + t567 * t689;
t562 = t566 * t689 - t567 * t688;
t973 = atan2(t561, t562);
t919 = sin(t973);
t920 = cos(t973);
t552 = t816 * t919 - t818 * t920;
t1080 = t552 / 0.2e1;
t1077 = t638 / 0.2e1;
t852 = 0.1e1 / pkin(4);
t942 = t852 * t1077;
t590 = atan2(t596 * t942, t594 * t942);
t588 = sin(t590);
t589 = cos(t590);
t580 = -t588 * t815 + t589 * t817;
t1079 = t580 / 0.2e1;
t1076 = t817 / 0.2e1;
t1075 = t818 / 0.2e1;
t1066 = Icges(2,4) * t816;
t551 = -t816 * t920 - t818 * t919;
t1065 = Icges(3,4) * t551;
t1064 = Icges(4,4) * t815;
t579 = t588 * t817 + t589 * t815;
t1063 = Icges(5,4) * t579;
t1009 = qJD(1) * t860;
t978 = pkin(2) * t1011;
t742 = t978 * t1109;
t917 = t816 * t818 * t1009;
t908 = -0.4e1 * t917;
t677 = t742 + t908;
t1060 = t677 * t780;
t951 = t815 * t1006;
t916 = t685 * t951;
t931 = 0.4e1 * t950;
t1030 = 0.2e1 * t1110;
t967 = t742 - t1030;
t1062 = ((0.8e1 * t916 - 0.4e1 * t1060) * t856 + (-0.4e1 * t1085 * t735 + t1089 * t750) * t1011 + (t815 * t816 ^ 2 * t1009 * t1095 + 0.4e1 * (t1008 * t661 - t817 * t967) * t746 + (t682 * t931 + 0.4e1 * (-t1044 * t661 + t1046 * t682) * qJD(1)) * pkin(2)) * pkin(3)) / t863;
t1061 = ((-t1008 * t746 + t817 * t978) * t1003 + t967) / t641 ^ 2;
t1051 = t780 * t871;
t1045 = t815 * t863;
t1043 = t817 * t863;
t1035 = t1111 * t647;
t884 = t886 * pkin(3);
t988 = pkin(2) * t1039;
t880 = t763 * t884 * t988;
t990 = pkin(1) * t1051;
t907 = t990 * t1008;
t893 = -0.24e2 * t907;
t1034 = t776 * t893 - 0.24e2 * t880;
t1032 = -0.4e1 * t1110 * t703;
t1007 = qJD(2) * t816;
t996 = -0.2e1 * t1051;
t991 = V_base(6) * pkin(1) + V_base(2);
t989 = pkin(2) * t1057;
t976 = pkin(3) * t1006;
t970 = t815 * t1050;
t953 = t779 * t1008;
t952 = qJD(2) * t1049;
t948 = t1071 * t1069;
t652 = -0.4e1 * t886 * t948;
t691 = -t977 + t978;
t937 = pkin(1) * t977;
t741 = -0.2e1 * t937;
t777 = t815 ^ 2;
t901 = t783 * t867 * t954;
t891 = -0.24e2 * t901;
t895 = t762 * t909;
t896 = t762 * t910;
t897 = t756 * t753 - t754 * t976;
t913 = t856 * t951;
t903 = -0.24e2 * t913;
t904 = t753 * t1052;
t927 = pkin(3) * t952;
t906 = t815 * t927;
t912 = -0.6e1 * t937;
t914 = t1006 * t1041;
t932 = -0.2e1 * t951;
t940 = pkin(3) * t988;
t944 = t1062 / 0.2e1;
t947 = -((0.8e1 * t817 * t747 * t927 + t777 * t952 * t1087 + t891 * t1068 + ((pkin(3) * t772 + t1091 * t706 + t996) * t1006 + (t816 * t741 + (t921 + 0.2e1 * t1039) * t1010) * pkin(2)) * t995 + 0.8e1 * t622 * t917 + 0.4e1 * ((t1010 * t1093 + t815 * t931) * t1069 + ((t753 - t976) * t770 - t732 * t977) * t1109 + t897) * t989 + t904 * t1095 + t893 * t771 + (t1010 * t752 + 0.4e1 * t871 * t914) * t780 + t667 * t932 - 0.4e1 * t897 * t999 + 0.4e1 * t663 * t937 - t683 * t753 + t690 * t976 - 0.4e1 * t1100 * t619) * t863 + t597 * t944 + t691 * t592 + t704 * ((t741 - 0.8e1 * t913) * t935 + 0.12e2 * (-0.12e2 * t907 + 0.6e1 * (-0.4e1 / 0.9e1 * t950 - 0.4e1 / 0.9e1 * t949) * t940 - 0.12e2 * t664 * t913 + t652 - 0.4e1 * t673 * t937 - 0.2e1 * t896 - 0.2e1 * t895) * t1048 - 0.24e2 * t606 * t917 - 0.6e1 * (t751 * t932 + (-t1008 * t671 - t1030 * t817) * pkin(1) * t1002 + t1032) * t989 + t640 * t903 + t1032 * t968 + t618 * t912 + t1034 + (0.8e1 * t906 + 0.24e2 * t901) * t684 + t1111 * t645 + 0.6e1 * t1100 * t607)) / t586 ^ 2 / 0.4e1;
t943 = -t1061 / 0.2e1;
t761 = V_base(6) + qJD(1);
t760 = V_base(6) + qJD(2);
t918 = t782 * t868 * t1011;
t915 = t854 * t953;
t905 = t753 * t1054;
t898 = t636 * t753 - t654 * t976;
t894 = -0.48e2 * t907;
t883 = 0.4e1 * t886;
t882 = -0.2e1 * t884;
t881 = t883 * t770;
t766 = Icges(2,4) * t818;
t765 = Icges(4,4) * t817;
t728 = rSges(2,1) * t818 - rSges(2,2) * t816;
t727 = rSges(4,1) * t817 - rSges(4,2) * t815;
t726 = rSges(2,1) * t816 + rSges(2,2) * t818;
t725 = rSges(4,1) * t815 + rSges(4,2) * t817;
t719 = Icges(2,1) * t818 - t1066;
t718 = Icges(2,1) * t816 + t766;
t717 = Icges(4,1) * t817 - t1064;
t716 = Icges(4,1) * t815 + t765;
t715 = -Icges(2,2) * t816 + t766;
t714 = Icges(2,2) * t818 + t1066;
t713 = -Icges(4,2) * t815 + t765;
t712 = Icges(4,2) * t817 + t1064;
t694 = -rSges(1,1) * V_base(5) + rSges(1,2) * V_base(4) + V_base(3);
t693 = rSges(1,1) * V_base(6) - rSges(1,3) * V_base(4) + V_base(2);
t692 = -rSges(1,2) * V_base(6) + rSges(1,3) * V_base(5) + V_base(1);
t660 = V_base(5) * rSges(2,3) - t726 * t761 + V_base(1);
t659 = V_base(5) * rSges(4,3) - t725 * t760 + V_base(1);
t658 = -V_base(4) * rSges(2,3) + t728 * t761 + V_base(2);
t644 = -V_base(4) * rSges(4,3) + t727 * t760 + t991;
t642 = t726 * V_base(4) - t728 * V_base(5) + V_base(3);
t635 = t1098 * t689;
t634 = t1098 * t688;
t632 = t725 * V_base(4) + V_base(3) + (-pkin(1) - t727) * V_base(5);
t593 = 0.1e1 / t594 ^ 2;
t583 = t674 * t944 + (-t742 * t817 + (t662 * t815 + t1043) * qJD(2)) * t746 + (t908 + 0.4e1 * t916 - 0.2e1 * t1060) * pkin(3) + ((t734 * t817 - t1045) * t1007 + (-t1044 * t662 + t1046 * t734 + t689 * t863) * qJD(1) + t746 * t881 + (t1011 * t736 - t1070 * t886) * t1109) * pkin(2);
t582 = t672 * t944 + (-t1045 * t746 + t623 * t817) * qJD(2) + (-t1008 * t685 + t677 * t817) * t815 * t1003 + ((-t1043 + (-t681 - 0.8e1 * t984) * t815) * t1007 + ((t626 - t1045) * t818 + (t1043 + (t1109 * t746 + t681) * t815 + (-pkin(3) + t1071 + 0.2e1 * t1067) * t1104) * t816) * qJD(1)) * pkin(2);
t578 = Icges(5,4) * t580;
t576 = rSges(5,1) * t580 - rSges(5,2) * t579;
t575 = rSges(5,1) * t579 + rSges(5,2) * t580;
t574 = Icges(5,1) * t580 - t1063;
t573 = Icges(5,1) * t579 + t578;
t572 = -Icges(5,2) * t579 + t578;
t571 = Icges(5,2) * t580 + t1063;
t565 = t760 + 0.2e1 * ((t1077 * t582 + t596 * t943) / t594 - (t1077 * t583 + t594 * t943) * t596 * t593) * pkin(4) / (t593 * t596 ^ 2 + 0.1e1) * t641 * t852;
t564 = V_base(3) + (t575 + t1068) * V_base(4) + (-t576 - t747) * V_base(5);
t563 = (t930 * t976 - 0.24e2 * (-0.8e1 / 0.3e1 * t913 + t741) * pkin(3) * t970 + 0.96e2 * t679 * t918 * t1068 + (t1102 * t753 + 0.2e1 * (pkin(3) * t698 - t705 * t815 + t996) * t1006 + (t817 * t1105 + (t1091 * t733 + 0.4e1 * t1067) * qJD(2)) * t1084) * t934 + (-0.8e1 / 0.3e1 * t905 + (-t695 * t976 + t696 * t753) * t992 + t649 * t753 - t650 * t976 / 0.2e1 + (0.32e2 / 0.3e1 * t1053 * t771 + t633 * t817 * t1087) * t1008 + (0.4e1 * t699 * t817 * t936 + ((0.12e2 * t777 * t780 - 0.4e1 * t778) * t854 + (-0.2e1 * t1067 * t755 + t1092 * t646) * pkin(3)) * qJD(2)) * pkin(1)) * t980 + 0.24e2 * t600 * t917 + 0.6e1 * ((-0.4e1 * (pkin(3) * t914 + t729 * t1105) * t780 + 0.8e1 * t655 * t951) * t856 + (-0.8e1 * t904 + (-t701 * t976 + t702 * t753) * t1001 + (t1094 * t637 + 0.24e2 * t780 * t985) * t1008) * pkin(1) + t898) * t989 + t905 * t1086 - 0.96e2 * t763 * t915 * t771 + (t1006 * t975 + t700 * t753) * t938 + t653 * t894 + (t976 * t1106 + t651 * t753) * t993 + 0.12e2 * t611 * t913 - 0.6e1 * t898 * t999 + 0.6e1 * t610 * t937 - t613 * t753 + t620 * t976 + (-0.8e1 * t906 + t891) * t612 - 0.6e1 * t1100 * t601) * t863 + t587 * t944 + t691 * t581 + t704 * (0.16e2 * (t1090 * t759 - 0.32e2 * t1053 - t745 - 0.48e2 * t990) * qJD(2) * t970 - 0.64e2 * t630 * t918 + (t652 + (t670 * t1090 + (t1094 * t676 - 0.24e2 * t1051) * pkin(1)) * t1008 + (t1042 * t882 - t1051 * t883) * pkin(2)) * t929 + 0.24e2 * (-0.32e2 * t764 * t915 + (-0.2e1 / 0.3e1 * t950 - 0.2e1 / 0.3e1 * t949) * t938 * t1083 + t678 * t894 - 0.28e2 * t615 * t913 + 0.6e1 * (-0.8e1 / 0.3e1 * t950 - 0.8e1 / 0.3e1 * t949) * t731 * t948 + t617 * t912 + 0.4e1 * (-t896 - t895) * t739 - 0.64e2 / 0.3e1 * t886 * t730 * t940) * t1048 - 0.48e2 * t598 * t917 - 0.8e1 * (t643 * t903 + 0.6e1 * (-pkin(2) * t739 * t881 - t1008 * t621) * t1084 + t1034 + t1035) * t989 - 0.4e1 * t724 * t953 + 0.32e2 * t779 * t882 * t969 * t1085 - 0.96e2 * t648 * t907 - 0.96e2 * t739 * t880 - 0.48e2 * t609 * t913 + 0.8e1 * t1035 * t999 - 0.8e1 * t605 * t937 + (0.32e2 * t906 + 0.96e2 * t901) * t608 + 0.8e1 * t1100 * t599 - 0.8e1 * t1110 * t614);
t560 = 0.1e1 / t562 ^ 2;
t559 = V_base(5) * rSges(5,3) - t1068 * t760 - t565 * t575 + V_base(1);
t558 = -V_base(4) * rSges(5,3) + t565 * t576 + t760 * t770 + t991;
t554 = (-t888 * t1061 + (t583 * t1072 + t594 * t1062 / 0.8e1 + t563 * t945 + (t1078 * t582 + t596 * t947) * t577) * t638) * t1040;
t553 = (-t887 * t1061 + (t563 * t946 + t582 * t1073 - t596 * t1062 / 0.8e1 + (t1078 * t583 + t594 * t947) * t577) * t638) * t1040;
t550 = Icges(3,4) * t552;
t549 = rSges(3,1) * t552 - rSges(3,2) * t551;
t548 = rSges(3,1) * t551 + rSges(3,2) * t552;
t547 = Icges(3,1) * t552 - t1065;
t546 = Icges(3,1) * t551 + t550;
t545 = -Icges(3,2) * t551 + t550;
t544 = Icges(3,2) * t552 + t1065;
t541 = t548 * V_base(4) - t549 * V_base(5) + V_base(3) + (t816 * V_base(4) - t818 * V_base(5)) * pkin(2);
t540 = ((t553 * t688 + t554 * t689 - t566 * t635 + t567 * t634) / t562 - (t553 * t689 - t554 * t688 + t566 * t634 + t567 * t635) * t561 * t560) / (t560 * t561 ^ 2 + 0.1e1) + t761;
t539 = V_base(5) * rSges(3,3) - t540 * t548 - t761 * t771 + V_base(1);
t538 = -V_base(4) * rSges(3,3) + t1070 * t761 + t540 * t549 + V_base(2);
t1 = m(1) * (t692 ^ 2 + t693 ^ 2 + t694 ^ 2) / 0.2e1 + Icges(1,3) * V_base(6) ^ 2 / 0.2e1 + m(2) * (t642 ^ 2 + t658 ^ 2 + t660 ^ 2) / 0.2e1 + Icges(2,3) * t761 ^ 2 / 0.2e1 + m(3) * (t538 ^ 2 + t539 ^ 2 + t541 ^ 2) / 0.2e1 + Icges(3,3) * t540 ^ 2 / 0.2e1 + m(4) * (t632 ^ 2 + t644 ^ 2 + t659 ^ 2) / 0.2e1 + Icges(4,3) * t760 ^ 2 / 0.2e1 + m(5) * (t558 ^ 2 + t559 ^ 2 + t564 ^ 2) / 0.2e1 + Icges(5,3) * t565 ^ 2 / 0.2e1 + (Icges(1,6) * V_base(6) + (Icges(3,5) * t551 + Icges(3,6) * t552) * t540 + (Icges(5,5) * t579 + Icges(5,6) * t580) * t565 + (Icges(4,5) * t815 + Icges(4,6) * t817) * t760 + (Icges(2,5) * t816 + Icges(2,6) * t818) * t761 + (Icges(1,2) / 0.2e1 + t714 * t1075 + t718 * t816 / 0.2e1 + t544 * t1080 + t546 * t551 / 0.2e1 + t712 * t1076 + t716 * t815 / 0.2e1 + t571 * t1079 + t573 * t579 / 0.2e1) * V_base(5)) * V_base(5) + (Icges(1,4) * V_base(5) + Icges(1,5) * V_base(6) + (Icges(2,5) * t818 - Icges(2,6) * t816) * t761 + (Icges(3,5) * t552 - Icges(3,6) * t551) * t540 + (Icges(4,5) * t817 - Icges(4,6) * t815) * t760 + (Icges(5,5) * t580 - Icges(5,6) * t579) * t565 + ((t715 + t718) * t818 + (t713 + t716) * t817 + (-t714 + t719) * t816 + (-t712 + t717) * t815 + (t572 + t573) * t580 + (-t571 + t574) * t579 + (t545 + t546) * t552 + (-t544 + t547) * t551) * V_base(5) / 0.2e1 + (Icges(1,1) / 0.2e1 - t715 * t816 / 0.2e1 + t719 * t1075 - t545 * t551 / 0.2e1 + t547 * t1080 - t713 * t815 / 0.2e1 + t717 * t1076 - t572 * t579 / 0.2e1 + t574 * t1079) * V_base(4)) * V_base(4);
T = t1;
