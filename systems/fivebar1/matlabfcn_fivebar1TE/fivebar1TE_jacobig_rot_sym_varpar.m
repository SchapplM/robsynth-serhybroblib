% Rotatorische Teilmatrix der geometrischen Jacobi-Matrix für beliebiges Segment von
% fivebar1TE
% Use Code from Maple symbolic Code Generation
%
% Geometrische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorgeschwindigkeit und Geschw. der verallgemeinerten Koordinaten.
% 
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% Jg_rot [3x2]
%   Rotatorische Teilmatrix der geometrischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 10:28
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jg_rot = fivebar1TE_jacobig_rot_sym_varpar(qJ, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),uint8(0),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1TE_jacobig_rot_sym_varpar: qJ has to be [2x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'fivebar1TE_jacobig_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1TE_jacobig_rot_sym_varpar: pkin has to be [5x1] (double)');
Jg_rot=NaN(3,2);
if link_index == 0
	%% Symbolic Calculation
	% From jacobig_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 10:19:04
	% EndTime: 2020-04-27 10:19:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0; 0, 0; 0, 0;];
	Jg_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobig_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 10:19:04
	% EndTime: 2020-04-27 10:19:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0; 0, 0; 1, 0;];
	Jg_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobig_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 10:19:40
	% EndTime: 2020-04-27 10:19:50
	% DurationCPUTime: 9.93s
	% Computational Cost: add. (65317->621), mult. (196552->965), div. (464->9), fcn. (23660->6), ass. (0->419)
	t1248 = (pkin(2) ^ 2);
	t1244 = (pkin(3) ^ 2);
	t1250 = pkin(1) ^ 2;
	t1392 = t1244 - t1250;
	t1146 = t1392 * t1248;
	t1479 = 2 * pkin(1);
	t1478 = 2 * pkin(3);
	t1477 = 4 * pkin(3);
	t1207 = sin(qJ(2));
	t1208 = sin(qJ(1));
	t1422 = t1207 * t1208;
	t1135 = pkin(2) * t1422;
	t1298 = pkin(3) * t1135;
	t1130 = -0.2e1 * t1298;
	t1210 = cos(qJ(1));
	t1449 = pkin(2) * t1210;
	t1374 = pkin(1) * t1449;
	t1145 = -0.2e1 * t1374;
	t1390 = (t1248 + t1250);
	t1309 = t1244 + t1390;
	t1140 = pkin(1) - t1449;
	t1209 = cos(qJ(2));
	t1124 = t1140 * t1209;
	t1345 = pkin(3) * t1124;
	t1060 = t1130 + t1145 + t1309 + 0.2e1 * t1345;
	t1476 = -0.2e1 / t1060 ^ 2;
	t1163 = pkin(3) * t1209;
	t1112 = t1140 + t1163;
	t1466 = 0.8e1 * t1112;
	t1475 = 2 * t1244;
	t1474 = 8 * t1248;
	t1177 = t1210 ^ 2;
	t1410 = t1248 * t1177;
	t1373 = pkin(1) * t1163;
	t1143 = 0.2e1 * t1373;
	t1157 = -t1244 / 0.3e1 + t1250;
	t1174 = t1209 ^ 2;
	t1411 = t1244 * t1174;
	t1091 = 0.4e1 / 0.3e1 * t1411 + t1143 + t1157;
	t1237 = pkin(5) ^ 2;
	t1240 = pkin(4) ^ 2;
	t1165 = -t1237 - t1240;
	t1233 = 0.3e1 * t1250;
	t1149 = t1233 + t1165;
	t1432 = t1149 * t1244;
	t1123 = 0.10e2 * t1432;
	t1222 = 7 * t1244;
	t1256 = t1248 ^ 2;
	t1226 = 5 * t1256;
	t1242 = t1244 ^ 2;
	t1255 = pkin(2) * t1248;
	t1245 = t1255 ^ 2;
	t1249 = t1250 ^ 2;
	t1175 = t1177 ^ 2;
	t1426 = t1175 * t1256;
	t1429 = t1165 * t1250;
	t1167 = t1244 + t1250;
	t1160 = t1167 ^ 2;
	t1387 = t1250 - t1237;
	t1308 = t1244 + t1387;
	t1430 = t1160 * (-t1240 + t1308);
	t1473 = 0.7e1 * t1245 + (t1222 + t1149) * t1226 + (t1123 + (21 * t1242) + 0.9e1 * t1249 + 0.6e1 * t1429) * t1248 + t1430 - 0.24e2 * t1091 * t1426;
	t1169 = -(3 * t1244) + t1250;
	t1360 = 0.4e1 * t1411;
	t1472 = t1169 + t1360;
	t1188 = -t1237 / 0.3e1;
	t1471 = t1188 - t1240 / 0.3e1;
	t1236 = t1237 ^ 2;
	t1239 = t1240 ^ 2;
	t1470 = -t1236 / 0.6e1 + t1239 / 0.6e1;
	t1469 = -0.4e1 * pkin(2);
	t1161 = 0.10e2 / 0.3e1 * t1244;
	t1393 = t1242 + t1249;
	t1234 = 0.2e1 * t1250;
	t1396 = t1234 - t1237;
	t1409 = t1250 * t1237;
	t1088 = t1396 * t1244 + t1393 - t1409 - t1470;
	t1270 = t1088 + t1256;
	t1062 = (t1161 + t1396) * t1248 + t1270;
	t1468 = -0.6e1 * t1062;
	t1358 = 0.2e1 * t1410;
	t1391 = -t1248 + t1250;
	t1096 = t1145 + t1358 + t1391;
	t1467 = -0.2e1 * t1096;
	t1173 = t1209 * t1174;
	t1465 = -0.8e1 * t1173;
	t1464 = 0.4e1 * t1174;
	t1463 = -0.8e1 * t1209;
	t1462 = 4 * t1242;
	t1223 = 6 * t1244;
	t1461 = 2 * t1248;
	t1460 = pkin(1) * pkin(3);
	t1459 = -pkin(4) - pkin(5);
	t1458 = -pkin(4) + pkin(5);
	t1202 = t1244 / 0.3e1;
	t1078 = -0.4e1 / 0.9e1 * t1298 + t1250 + t1248 / 0.3e1 + t1202 + t1240 / 0.9e1 - t1237 / 0.9e1;
	t1186 = -t1237 / 0.6e1;
	t1205 = t1248 / 0.2e1;
	t1399 = t1205 + t1250;
	t1273 = -t1298 + t1399;
	t1086 = t1240 / 0.6e1 + t1186 + t1273;
	t1196 = t1240 / 0.3e1;
	t1111 = t1188 + t1196 + t1309;
	t1415 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
	t1259 = pkin(3) * t1244;
	t1427 = t1173 * t1259;
	t1439 = 4 * pkin(1);
	t1033 = t1157 * t1130 + 0.6e1 * t1078 * t1411 + t1111 * t1415 + (t1086 * t1163 + t1427) * t1439;
	t1286 = -0.4e1 * t1298;
	t1190 = -0.2e1 / 0.3e1 * t1237;
	t1195 = 0.2e1 / 0.3e1 * t1240;
	t1312 = t1190 + t1195 + t1234;
	t1311 = t1190 + t1167;
	t1405 = (t1195 + t1311) * t1167 + t1256;
	t1045 = t1111 * t1286 + (t1223 + t1312) * t1248 + t1405;
	t1084 = t1130 + t1111;
	t1147 = t1391 * t1244;
	t1334 = 0.4e1 * t1373;
	t1034 = t1084 * t1334 + t1147 * t1464 + t1045;
	t1158 = t1250 - t1248 / 0.3e1;
	t1097 = t1158 * t1130;
	t1414 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
	t1059 = t1111 * t1414 + t1097;
	t1061 = (t1161 + t1312) * t1248 + t1405;
	t1095 = t1143 + t1472;
	t1228 = -3 * t1248;
	t1170 = t1228 + t1250;
	t1355 = pkin(1) * t1427;
	t1306 = 0.8e1 * t1355;
	t1115 = t1170 * t1306;
	t1133 = t1240 + t1308;
	t1215 = 15 * t1242;
	t1216 = 15 * t1244;
	t1230 = 0.3e1 * t1249;
	t1141 = pkin(1) + t1163;
	t1176 = t1210 * t1177;
	t1425 = t1176 * t1255;
	t1329 = t1141 * t1425;
	t1292 = -0.8e1 * t1329;
	t1394 = -t1237 + t1240;
	t1310 = t1233 + t1394;
	t1333 = 0.6e1 * t1373;
	t1337 = 0.12e2 * t1411;
	t1343 = pkin(3) * t1422;
	t1433 = t1141 * t1210;
	t1019 = t1095 * t1292 + t1115 + t1059 * t1337 + t1045 * t1333 + t1245 + (t1216 + t1310) * t1256 + t1160 * t1133 + (0.12e2 * t1033 * t1177 + t1310 * t1223 + t1394 * t1234 + t1215 + t1230) * t1248 + 0.6e1 * (-t1034 * t1433 - t1061 * t1343) * pkin(2);
	t1224 = 3 * t1244;
	t1152 = t1224 + t1390;
	t1164 = pkin(2) * t1208;
	t1116 = t1152 * t1164;
	t1445 = pkin(3) * t1207;
	t1121 = t1164 - t1445;
	t1349 = t1244 * t1164;
	t1288 = t1174 * t1349;
	t1227 = 3 * t1248;
	t1150 = t1227 + t1167;
	t1431 = t1150 * t1207;
	t1451 = pkin(1) * t1209;
	t1046 = -0.2e1 * t1288 + t1116 + (0.2e1 * t1121 * t1451 - t1431) * pkin(3);
	t1166 = t1475 + t1248;
	t1420 = t1207 * t1259;
	t1113 = t1349 - t1420;
	t1434 = t1113 * t1174;
	t1047 = t1166 * t1445 + 0.2e1 * t1434 + (-t1392 + t1143) * t1164;
	t1077 = -pkin(3) * t1431 + t1116;
	t1148 = pkin(2) * t1462 + 0.8e1 * t1244 * t1255;
	t1325 = t1259 * t1414;
	t1079 = t1148 * t1208 + 0.4e1 * t1207 * t1325;
	t1221 = 5 * t1242;
	t1388 = t1249 + t1256;
	t1217 = 10 * t1244;
	t1397 = t1217 + t1234;
	t1408 = t1250 * t1244;
	t1094 = t1397 * t1248 + t1221 + t1388 + 0.6e1 * t1408;
	t1102 = t1226 + (t1217 + 0.6e1 * t1250) * t1248 + t1160;
	t1291 = 0.8e1 * t1329;
	t1359 = -0.4e1 * t1410;
	t1023 = t1047 * t1359 + t1079 * t1174 + (-0.4e1 * t1077 * t1451 + (t1102 + t1291) * t1207) * pkin(3) + (0.4e1 * t1046 * t1433 + (-t1094 + t1306) * t1208) * pkin(2);
	t1307 = t1248 + t1387;
	t1277 = t1244 + t1307;
	t1127 = -t1240 + t1277;
	t1093 = t1145 + t1127;
	t1074 = t1130 + t1093;
	t1276 = t1174 * t1467 - t1387;
	t1251 = sqrt(0.4e1 * t1146 * t1177 + 0.4e1 * t1127 * t1374 - t1242 - (t1250 + (pkin(2) - t1459) * (pkin(2) + t1459)) * (t1250 + (pkin(2) - t1458) * (pkin(2) + t1458)) + (t1228 + t1240 + t1276) * t1475 + (-t1074 * t1124 + t1093 * t1135) * t1477);
	t1013 = t1019 * t1112 + t1023 * t1251;
	t1457 = 0.1e1 / t1013 / 0.4e1;
	t1456 = -0.1e1 / t1013 ^ 2 / 0.4e1;
	t1455 = 0.4e1 / 0.3e1 * t1248;
	t1454 = -t1251 / 0.4e1;
	t1453 = t1251 / 0.4e1;
	t1452 = pkin(1) * (t1135 - pkin(3));
	t1450 = pkin(1) * t1242;
	t1448 = pkin(3) * t1140;
	t1447 = pkin(3) * t1157;
	t1446 = pkin(3) * t1174;
	t1219 = -0.5e1 * t1237;
	t1220 = 7 * t1242;
	t1403 = t1236 / 0.2e1 - t1239 / 0.2e1;
	t1281 = -0.3e1 * t1409 + t1230 + t1403;
	t1191 = -0.3e1 / 0.2e1 * t1237;
	t1400 = t1191 + t1233;
	t1406 = t1167 * ((t1191 + t1234) * t1244 - 0.3e1 / 0.2e1 * t1409 + t1393 + t1403) + t1245;
	t1042 = (t1222 + t1400) * t1256 + (t1220 + (t1219 + 0.10e2 * t1250) * t1244 + t1281) * t1248 + t1406;
	t1444 = t1042 * pkin(3);
	t1119 = t1250 + t1248 / 0.4e1 + t1244 / 0.4e1 - t1237 / 0.8e1;
	t1398 = 0.4e1 / 0.7e1 * t1250 - t1237 / 0.7e1;
	t1039 = -0.32e2 / 0.21e2 * t1119 * t1298 + t1256 / 0.7e1 + (0.16e2 / 0.21e2 * t1244 + t1398) * t1248 + t1242 / 0.7e1 + t1398 * t1244 + t1249 - 0.3e1 / 0.7e1 * t1409 + t1236 / 0.42e2 - t1239 / 0.42e2;
	t1187 = -t1237 / 0.4e1;
	t1120 = t1187 + t1202 + t1399;
	t1201 = 0.4e1 / 0.3e1 * t1244;
	t1043 = -0.8e1 / 0.3e1 * t1120 * t1298 + t1256 / 0.3e1 + (t1201 + t1188) * t1248 + t1249 - t1242 / 0.3e1 + (t1455 + 0.2e1 / 0.3e1 * t1244 + t1190) * t1250 + t1236 / 0.18e2 - t1239 / 0.18e2;
	t1203 = t1244 / 0.2e1;
	t1090 = -0.2e1 / 0.3e1 * t1298 + t1250 + t1203 + t1187;
	t1232 = 0.4e1 * t1250;
	t1153 = (t1232 + t1237) * t1244;
	t1159 = t1250 - 0.2e1 / 0.3e1 * t1248;
	t1189 = -t1237 / 0.2e1;
	t1132 = t1189 + t1309;
	t1274 = t1132 * t1286;
	t1339 = 0.16e2 * t1427;
	t1172 = t1174 ^ 2;
	t1412 = t1242 * t1172;
	t1364 = 0.8e1 * t1412;
	t1022 = t1159 * t1364 + 0.14e2 * t1039 * t1411 + t1157 * t1274 - t1392 * t1256 + (t1153 - 0.10e2 / 0.3e1 * t1242 + 0.2e1 * t1249 - t1409) * t1248 + t1088 * t1415 + (0.6e1 * t1043 * t1163 + t1090 * t1339) * pkin(1);
	t1032 = t1298 * t1468 + (t1215 + (-0.9e1 * t1237 + 0.18e2 * t1250) * t1244 + t1281) * t1248 + (t1216 + t1400) * t1256 + t1406;
	t1048 = t1274 + (t1223 + t1396) * t1248 + t1270;
	t1065 = t1132 * t1414 + t1097;
	t1024 = t1048 * t1333 + t1065 * t1337 + t1032 + t1115;
	t1218 = -0.2e1 * t1237;
	t1231 = 0.8e1 * t1250;
	t1302 = t1420 * t1469;
	t1083 = t1208 * t1302 + t1462 + ((4 * t1248) + t1218 + t1231) * t1244;
	t1089 = t1187 - t1244 + t1273;
	t1369 = 0.8e1 * t1427;
	t1375 = 0.4e1 * t1163;
	t1035 = t1130 * t1415 + t1083 * t1174 + t1132 * t1169 + (t1089 * t1375 + t1369) * pkin(1);
	t1389 = t1249 - t1242;
	t1037 = t1158 * t1274 - t1245 + (-t1161 - t1387) * t1256 + (t1153 + t1389 + t1470) * t1248 + t1088 * t1250;
	t1252 = pkin(1) * t1250;
	t1139 = -(12 * pkin(1) * t1259) + t1252 * t1477;
	t1156 = -(8 * t1242) + 0.12e2 * t1408;
	t1295 = pkin(1) * t1339;
	t1053 = t1139 * t1209 + t1156 * t1174 + t1295 + t1364 + t1393 - 0.6e1 * t1408;
	t1068 = t1130 * t1414 + t1132 * t1170;
	t1125 = (-0.6e1 * t1248 * t1250 + t1388) * t1242;
	t1162 = -0.30e2 * t1237 + 0.60e2 * t1250;
	t1395 = t1236 - t1239;
	t1280 = -0.6e1 * t1409 + 0.6e1 * t1249 + t1395;
	t1010 = -0.32e2 * t1035 * t1329 + 0.16e2 * t1125 * t1172 + 0.24e2 * t1037 * t1411 + (t1218 + t1232 + (28 * t1244)) * t1245 + t1133 * t1430 + (0.24e2 * t1022 * t1177 + t1162 * t1242 + t1280 * t1223 + t1395 * t1234 - 0.6e1 * t1249 * t1237 + 0.4e1 * t1252 ^ 2 + (28 * t1259 ^ 2)) * t1248 + 0.8e1 * (-t1024 * t1433 - t1042 * t1343) * pkin(2) + (0.8e1 * t1032 * t1163 + 0.32e2 * t1068 * t1427) * pkin(1) + (0.16e2 * t1053 * t1175 + t1162 * t1244 + (70 * t1242) + t1256 + t1280) * t1256;
	t1402 = t1186 - t1240 / 0.6e1;
	t1315 = t1250 + t1402;
	t1104 = t1455 + t1203 + t1315;
	t1279 = t1205 + t1315;
	t1105 = t1201 + t1279;
	t1054 = -t1104 * t1445 + t1105 * t1164;
	t1107 = t1244 + t1279;
	t1151 = t1461 - t1392;
	t1066 = t1107 * t1164 - t1151 * t1445 / 0.2e1;
	t1314 = t1250 + t1471;
	t1316 = t1237 / 0.3e1 + t1196 + t1234;
	t1282 = -0.8e1 / 0.3e1 * t1412 - t1146 - 0.5e1 / 0.3e1 * t1242 + t1316 * t1244 + t1250 * t1314;
	t1317 = 0.2e1 / 0.3e1 * t1237 + t1195 + t1232;
	t1318 = 0.4e1 / 0.3e1 * t1237 + 0.4e1 / 0.3e1 * t1240 - 0.2e1 * t1250;
	t1331 = 0.20e2 / 0.3e1 * t1244;
	t1341 = -(-t1256 + (t1317 - t1331) * t1248 - (3 * t1242) + t1318 * t1244 + t1249) * pkin(3) / 0.2e1;
	t1428 = t1173 * t1242;
	t1025 = t1054 * t1360 + t1207 * t1341 + t1282 * t1164 + (t1066 * t1163 - t1207 * t1428) * t1439;
	t1200 = -0.2e1 / 0.3e1 * t1240;
	t1401 = t1190 + t1200;
	t1055 = t1256 + (t1397 + t1401) * t1248 + t1221 + 0.2e1 * t1432 + t1250 * (t1250 + t1401);
	t1067 = t1226 + ((5 * t1244) + t1149) * t1461 + (t1200 + t1311) * t1167;
	t1036 = t1055 * t1164 - t1067 * t1445;
	t1278 = t1244 + t1314;
	t1109 = t1227 + t1278;
	t1110 = t1152 + t1471;
	t1056 = -t1109 * t1445 + t1110 * t1164;
	t1118 = t1203 + t1248 + t1402;
	t1384 = 0.2e1 * t1164;
	t1071 = t1118 * t1384 + t1414 * t1445;
	t1348 = t1259 * t1164;
	t1362 = -0.4e1 * t1411;
	t1026 = t1071 * t1362 + (t1056 * t1375 + t1348 * t1465) * pkin(1) + t1036;
	t1064 = -(3 * t1256) + (t1318 - t1331) * t1248 + t1317 * t1244 + t1389;
	t1072 = -0.5e1 / 0.3e1 * t1256 + (-t1244 + t1316) * t1248 + t1250 * t1278;
	t1378 = -0.2e1 * t1445;
	t1038 = t1064 * t1164 + t1072 * t1378;
	t1313 = t1189 - t1240 / 0.2e1 + t1250;
	t1106 = 0.3e1 / 0.2e1 * t1248 + t1224 + t1313;
	t1122 = t1164 + 0.2e1 * t1445;
	t1041 = t1169 * t1164 + 0.4e1 * t1434 + (t1106 * t1207 + t1122 * t1451) * t1478;
	t1108 = t1227 + 0.3e1 / 0.2e1 * t1244 + t1313;
	t1070 = t1108 * t1164 + t1170 * t1445 / 0.2e1;
	t1275 = 0.24e2 * t1158 * t1412 - t1245 - ((21 * t1244) + t1149) * t1256 - (t1123 + t1230 + (35 * t1242) + 0.2e1 * t1429) * t1248 - (t1220 + (t1219 + t1231 - 0.5e1 * t1240) * t1244 + t1250 * (-t1240 + t1387)) * t1167;
	t1336 = -0.12e2 * t1410;
	t1363 = -0.6e1 * t1411;
	t1014 = t1070 * t1295 + t1041 * t1291 + t1025 * t1336 + t1038 * t1363 + (-0.6e1 * t1036 * t1451 + t1473 * t1207) * pkin(3) + (0.6e1 * t1026 * t1433 + t1275 * t1208) * pkin(2);
	t1007 = t1010 * t1112 + t1014 * t1251;
	t1092 = t1145 + t1240 + t1277;
	t1346 = t1096 * t1163;
	t1049 = t1092 * t1140 + 0.2e1 * t1346;
	t1052 = t1092 * t1209 + (t1464 - 0.2e1) * t1448;
	t1404 = -t1135 + t1124;
	t1085 = pkin(3) + t1404;
	t1021 = t1049 * t1207 + t1052 * t1164 + t1085 * t1251;
	t1126 = t1224 + t1240 + t1307;
	t1075 = t1126 + t1145 + t1286;
	t1419 = t1209 * t1208;
	t1087 = pkin(2) * t1419 + t1140 * t1207;
	t1436 = t1087 * t1251;
	t1020 = -t1075 * t1124 + t1436 + (t1126 * t1422 - 0.2e1 * t1210 * t1452) * pkin(2) + (-t1227 - t1240 - t1244 + t1276 + t1358) * pkin(3);
	t1323 = t1020 * t1457;
	t1271 = t1007 * t1323 + t1021 * t1454;
	t1057 = 0.1e1 / t1060;
	t1413 = 0.1e1 / pkin(5) / pkin(4) ^ 2;
	t1330 = t1057 * t1413;
	t1005 = t1271 * t1330;
	t1418 = t1209 * t1210;
	t1100 = -t1418 - t1422;
	t1004 = t1005 * t1100;
	t1322 = t1021 * t1457;
	t1272 = t1007 * t1322 + t1020 * t1453;
	t1006 = t1272 * t1330;
	t1421 = t1207 * t1210;
	t1101 = -t1419 + t1421;
	t1000 = -t1006 * t1101 - t1004;
	t998 = 0.1e1 / t1000 ^ 2;
	t1003 = t1005 * t1101;
	t999 = -t1006 * t1100 + t1003;
	t1443 = t998 * t999;
	t1442 = -2 * t1460;
	t1142 = pkin(1) * t1378;
	t1171 = t1207 ^ 2;
	t1283 = t1173 * t1325;
	t1332 = 0.32e2 / 0.3e1 * t1242;
	t1284 = t1173 * t1332;
	t1285 = 0.64e2 / 0.3e1 * t1119 * t1259;
	t1289 = t1414 * t1450;
	t1407 = t1259 * t1174;
	t1353 = pkin(1) * t1407;
	t1293 = -0.12e2 * t1353;
	t1294 = -0.48e2 * t1353;
	t1296 = -0.16e2 * pkin(1) * t1120 * t1244;
	t1301 = -0.4e1 * t1132 * t1447;
	t1354 = pkin(1) * t1411;
	t1303 = 0.4e1 * t1354;
	t1304 = -0.2e1 * t1354;
	t1305 = -0.4e1 * t1354;
	t1417 = t1209 * t1244;
	t1324 = t1207 * t1417;
	t1326 = t1158 * t1427;
	t1338 = -0.64e2 * t1425;
	t1340 = -0.32e2 * t1428;
	t1342 = pkin(3) * t1415;
	t1344 = pkin(3) * t1425;
	t1351 = t1112 * t1164;
	t1356 = pkin(1) * t1412;
	t1357 = 0.3e1 * t1410;
	t1367 = 0.8e1 * t1425;
	t1368 = -0.8e1 * t1425;
	t1370 = -0.2e1 * t1427;
	t1371 = -0.4e1 * t1427;
	t1029 = 0.1e1 / t1251;
	t1361 = 0.2e1 * t1411;
	t1437 = t1029 * ((t1074 * t1448 + 0.2e1 * t1096 * t1417) * t1207 + (t1093 * t1163 + t1140 * t1361) * t1164);
	t1372 = 0.2e1 * t1437;
	t1376 = 0.2e1 * t1163;
	t1381 = 0.6e1 * t1449;
	t1383 = -0.6e1 * t1449;
	t1435 = t1112 * t1207 * t1293;
	t1001 = ((0.12e2 * t1171 * t1174 * t1450 + t1104 * t1371 + t1151 * t1304 + t1209 * t1341 - 0.4e1 * t1356) * t1336 + 0.8e1 * t1170 * t1356 + 0.12e2 * t1072 * t1427 + 0.6e1 * t1067 * t1354 + t1473 * t1163) * t1251 + t1014 * t1372 + (((t1106 * t1376 + t1303 + t1371) * t1367 + (-t1067 * t1163 + t1109 * t1305 - 0.4e1 * t1283) * t1381) * t1251 + t1338 * t1435) * t1141 + (0.24e2 * (-pkin(1) * t1172 * t1332 - t1173 * t1285 + t1174 * t1296 + t1209 * t1301) * t1410 - 0.64e2 * t1172 * t1289 - 0.96e2 * t1132 * t1326 - 0.48e2 * t1062 * t1354 + t1444 * t1463 + ((-t1209 * t1342 + t1304 + t1370) * t1338 - 0.48e2 * (-t1062 * t1163 + t1132 * t1305 - 0.4e1 * t1326) * t1449) * t1141) * t1351 + ((0.2e1 * (-0.2e1 * t1156 * t1209 - t1139 + t1294 + t1340) * t1426 + (-t1083 * t1209 + t1089 * t1442) * t1292 + 0.4e1 * t1035 * t1344 + (-0.28e2 * t1039 * t1417 - 0.6e1 * t1043 * t1460 + t1090 * t1294 + t1159 * t1340) * t1357 + pkin(3) * t1024 * t1449 + t1141 * (-t1048 * t1460 - 0.4e1 * t1065 * t1417 - 0.4e1 * t1170 * t1353) * t1383 + t1125 * t1465 + t1068 * t1293 - 0.6e1 * t1037 * t1417 - t1032 * t1460) * t1466 - t1010 * pkin(3) + ((-0.8e1 * t1054 * t1417 + t1284 * t1164) * t1336 - 0.96e2 * t1158 * t1428 * t1164 + t1070 * t1294 + 0.12e2 * t1038 * t1417 + (t1026 * t1383 + t1041 * t1368 + (-0.24e2 * t1142 + 0.64e2 * t1324) * t1426 + (0.48e2 * t1066 * t1410 + 0.6e1 * t1036) * pkin(1)) * pkin(3) + ((t1113 * t1463 + t1122 * t1442) * t1367 + (0.24e2 * pkin(1) * t1174 * t1348 - 0.4e1 * t1056 * t1460 + 0.8e1 * t1071 * t1417) * t1381) * t1141) * t1251) * t1207;
	t1335 = 0.12e2 * t1410;
	t1366 = t1208 * t1474;
	t1379 = -0.2e1 * t1447;
	t1380 = -0.4e1 * pkin(3) * t1111;
	t1382 = 0.4e1 * t1449;
	t1385 = t1046 * t1469;
	t1008 = (t1244 * t1171 * t1368 + (t1166 * t1163 + t1370) * t1359 + 0.4e1 * t1283 + t1150 * t1303 + t1102 * t1163) * t1251 + t1023 * t1372 + t1335 * t1435 + ((-0.8e1 / 0.3e1 * t1427 + t1305 + t1209 * t1379) * t1335 - 0.24e2 * t1326 - 0.24e2 * t1111 * t1354 - 0.6e1 * t1061 * t1163) * t1351 + (0.24e2 * (-t1112 * t1170 - t1251 * t1164) * t1353 + ((0.16e2 * t1113 * t1410 - 0.2e1 * t1079) * t1251 + (-0.144e3 * t1078 * t1410 - 0.24e2 * t1059) * t1112 * t1244) * t1209 + (t1210 * t1251 * t1385 + (t1034 * t1381 + t1095 * t1367) * t1112 - t1019 + ((pkin(2) * t1177 * t1366 + 0.4e1 * t1077) * t1251 + (-0.48e2 * t1086 * t1410 - 0.6e1 * t1045) * t1112) * pkin(1)) * pkin(3)) * t1207 + ((0.8e1 * t1209 * t1344 + ((-pkin(3) * t1150 + 0.4e1 * t1244 * t1135) * t1209 + (-t1121 * t1445 - t1411) * t1479) * t1382) * t1251 + ((t1142 - 0.8e1 * t1324) * t1368 + ((-0.8e1 * t1147 * t1207 + t1380 * t1164) * t1209 + (-0.4e1 * t1084 * t1445 - 0.8e1 * t1288) * pkin(1)) * t1383) * t1112) * t1141;
	t1300 = -0.8e1 * t1345;
	t1017 = -t1436 + t1085 * t1372 + pkin(3) * t1171 * t1467 + t1049 * t1209 + (-t1092 + t1300) * t1135;
	t1386 = -2 * pkin(1) * t1248;
	t1018 = t1404 * t1251 + t1087 * t1372 + (t1075 * t1140 + 0.4e1 * t1346) * t1207 + (t1386 * t1418 + (t1126 * t1209 + 0.4e1 * t1140 * t1446) * pkin(2)) * t1208;
	t1080 = t1087 * pkin(3);
	t1268 = t1271 * t1476;
	t1321 = t1020 * t1456;
	t1441 = t1006 - (-t1080 * t1268 + (t1001 * t1323 + t1017 * t1454 - t1021 * t1437 / 0.2e1 + (t1008 * t1321 + t1018 * t1457) * t1007) * t1057) * t1413;
	t1347 = pkin(2) * t1418;
	t1299 = pkin(1) * t1347;
	t1103 = -0.4e1 * t1244 * t1207 * t1299;
	t1117 = t1299 * t1478;
	t1155 = pkin(1) * t1164;
	t1144 = 0.2e1 * t1155;
	t1416 = t1210 * t1248;
	t1365 = -0.4e1 * t1416;
	t1290 = t1208 * t1365;
	t1099 = t1144 + t1290;
	t1350 = pkin(2) * t1421;
	t1297 = pkin(3) * t1350;
	t1377 = -0.4e1 * t1163;
	t1438 = (t1099 * t1362 + (t1155 - t1297) * t1300 + 0.4e1 * t1093 * t1297 + (pkin(2) * t1074 * t1377 - 0.8e1 * t1146 * t1210 + (t1127 * t1469 + t1343 * t1474) * pkin(1)) * t1208) * t1029;
	t1319 = t1438 / 0.2e1;
	t1327 = t1158 * t1407;
	t1423 = t1177 * t1255;
	t1328 = t1141 * t1423;
	t1352 = pkin(1) * t1417;
	t1424 = t1176 * t1256;
	t1002 = t1014 * t1319 + (-0.32e2 * t1103 * t1112 + 0.8e1 * t1117 * t1251) * t1329 + (0.24e2 * (0.4e1 * t1091 * t1424 * t1445 + t1025 * t1416 - t1041 * t1328) * t1251 + (-0.6e1 * t1022 * t1416 + 0.12e2 * t1035 * t1328 - 0.8e1 * t1053 * t1424) * t1466) * t1208 + ((t1010 + (t1024 * t1466 - 0.6e1 * t1026 * t1251) * t1141) * t1208 + (((t1105 * t1360 + t1107 * t1334 + t1282) * t1336 + t1108 * t1295 + t1064 * t1363 - 0.6e1 * t1055 * t1373 + (t1472 * t1367 + (t1110 * t1334 - 0.8e1 * t1118 * t1411 + t1055 - 0.8e1 * t1355) * t1381) * t1141 + t1275) * t1251 + ((-pkin(1) * t1284 - t1174 * t1285 + t1209 * t1296 + t1301) * t1357 + t1289 * t1465 - 0.12e2 * t1132 * t1327 + t1352 * t1468 - t1444 + (-0.4e1 * (-(2 * t1342) - 0.4e1 * t1407) * t1425 - (pkin(3) * t1468 - 0.24e2 * t1132 * t1352 - 0.24e2 * t1327) * t1449) * t1141) * t1207 * t1466) * t1210) * pkin(2);
	t1009 = (t1117 * t1359 + (t1047 * t1366 + t1148 * t1174 + ((-t1392 + t1361) * t1359 - t1094 + (t1152 * t1377 + t1369) * pkin(1)) * pkin(2)) * t1210 + ((t1117 + (t1152 - 0.2e1 * t1411) * t1449) * t1382 + (-0.24e2 * t1423 * t1445 + t1385) * t1208) * t1141) * t1251 + t1023 * t1319 + 0.6e1 * (0.4e1 * t1095 * t1208 * t1328 + (t1103 + (-0.8e1 / 0.3e1 * t1407 + t1379) * t1350) * t1358 + t1033 * t1290 + t1158 * t1210 * t1174 * t1302 + t1111 * t1103 - t1061 * t1297 + (-(-0.8e1 * t1352 + t1380) * t1207 * t1410 + t1034 * t1164) * t1141) * t1112 + t1019 * t1164;
	t1015 = t1085 * t1319 + t1099 * t1207 * t1376 + ((-t1207 * t1251 + t1052) * t1210 + (t1209 * t1251 + (t1140 * t1479 + t1092) * t1207 + (-pkin(3) + 0.2e1 * t1446 + t1451) * t1384) * t1208) * pkin(2);
	t1016 = (t1135 + t1347) * t1251 + t1087 * t1319 - 0.2e1 * t1099 * t1446 - (t1144 - 0.4e1 * t1297) * t1124 + t1177 * t1207 * t1386 + t1126 * t1350 + (pkin(3) * t1365 + (-t1075 * t1209 + 0.2e1 * t1452) * pkin(2)) * t1208;
	t1076 = -t1101 * pkin(3) * pkin(2) + t1155;
	t1440 = t1006 + (t1076 * t1268 + (t1002 * t1323 + t1015 * t1454 - t1021 * t1438 / 0.8e1 + (t1009 * t1321 + t1016 * t1457) * t1007) * t1057) * t1413;
	t1320 = t1021 * t1456;
	t1269 = t1272 * t1476;
	t997 = 0.1e1 / t1000;
	t996 = 0.1e1 / (t998 * t999 ^ 2 + 0.1e1);
	t995 = (t1076 * t1269 + (t1016 * t1453 + t1020 * t1438 / 0.8e1 + t1002 * t1322 + (t1009 * t1320 + t1015 * t1457) * t1007) * t1057) * t1413;
	t993 = (-t1080 * t1269 + (t1018 * t1453 + t1020 * t1437 / 0.2e1 + t1001 * t1322 + (t1008 * t1320 + t1017 * t1457) * t1007) * t1057) * t1413;
	t1 = [0, 0; 0, 0; 0.1e1 + ((t1440 * t1101 + (t1005 - t995) * t1100) * t997 - (-t1440 * t1100 - t1101 * t995 + t1003) * t1443) * t996, ((-t1100 * t993 - t1441 * t1101 - t1004) * t997 - ((-t1005 - t993) * t1101 + t1441 * t1100) * t1443) * t996;];
	Jg_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobig_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 10:19:04
	% EndTime: 2020-04-27 10:19:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0; 0, 0; 0, 1;];
	Jg_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobig_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 10:19:06
	% EndTime: 2020-04-27 10:19:06
	% DurationCPUTime: 0.60s
	% Computational Cost: add. (1788->105), mult. (3903->181), div. (28->6), fcn. (958->6), ass. (0->81)
	t301 = -4 * pkin(2);
	t256 = pkin(2) ^ 2;
	t250 = cos(qJ(1));
	t292 = pkin(2) * t250;
	t275 = pkin(1) * t292;
	t242 = -0.2e1 * t275;
	t257 = pkin(1) ^ 2;
	t278 = t242 + t257;
	t246 = t250 ^ 2;
	t298 = 0.2e1 * t246;
	t232 = t256 * t298 - t256 + t278;
	t300 = -0.2e1 * t232;
	t240 = pkin(1) - t292;
	t299 = 0.2e1 * t240;
	t297 = (-pkin(4) - pkin(5));
	t296 = (-pkin(4) + pkin(5));
	t247 = sin(qJ(2));
	t248 = sin(qJ(1));
	t283 = t247 * t248;
	t239 = pkin(2) * t283;
	t266 = pkin(3) * t239;
	t238 = -0.2e1 * t266;
	t255 = pkin(3) ^ 2;
	t249 = cos(qJ(2));
	t234 = t240 * t249;
	t270 = pkin(3) * t234;
	t223 = t238 + t255 + t256 + 0.2e1 * t270 + t278;
	t221 = 0.1e1 / t223;
	t295 = t221 / 0.2e1;
	t294 = pkin(1) * (t239 - pkin(3));
	t293 = pkin(2) * t248;
	t291 = pkin(3) * t240;
	t245 = t249 ^ 2;
	t290 = pkin(3) * t245;
	t289 = pkin(3) * t249;
	t222 = 0.1e1 / t223 ^ 2;
	t244 = pkin(1) * t293;
	t281 = t248 * t249;
	t282 = t247 * t250;
	t288 = t222 * (t244 + (t281 - t282) * pkin(3) * pkin(2));
	t229 = pkin(2) * t281 + t247 * t240;
	t287 = t222 * t229 * pkin(3);
	t253 = pkin(4) ^ 2;
	t277 = -pkin(5) ^ 2 + t257;
	t269 = t256 + t277;
	t263 = t255 + t269;
	t236 = -t253 + t263;
	t231 = t242 + t236;
	t224 = t238 + t231;
	t243 = (t255 - t257) * t256;
	t262 = t245 * t300 - t277;
	t258 = sqrt(0.4e1 * t243 * t246 + 0.4e1 * t236 * t275 - (t257 + ((pkin(2) - t297) * (pkin(2) + t297))) * (t257 + ((pkin(2) - t296) * (pkin(2) + t296))) + 0.4e1 * (-t224 * t234 + t231 * t239) * pkin(3) + (0.2e1 * t253 - (6 * t256) + 0.2e1 * t262 - t255) * t255);
	t286 = t229 * t258;
	t285 = t232 * t249;
	t284 = t245 * t255;
	t280 = t249 * t250;
	t279 = -t239 + t234;
	t276 = -0.2e1 * pkin(1) * t256;
	t216 = 0.1e1 / t258;
	t274 = 0.2e1 * t216 * ((t224 * t291 + 0.2e1 * t255 * t285) * t247 + (t231 * t289 + t284 * t299) * t293);
	t273 = -0.4e1 * t250 * t256;
	t272 = pkin(2) * t282;
	t271 = pkin(3) * t285;
	t241 = 0.2e1 * t244;
	t233 = t248 * t273 + t241;
	t265 = pkin(3) * t272;
	t267 = -0.8e1 * t270;
	t268 = (-0.4e1 * t233 * t284 + (t244 - t265) * t267 + 0.4e1 * t231 * t265 + (t224 * t289 * t301 - 0.8e1 * t243 * t250 + (0.8e1 * pkin(3) * t256 * t283 + t236 * t301) * pkin(1)) * t248) * t216 / 0.2e1;
	t235 = 0.3e1 * t255 + t253 + t269;
	t225 = t235 + t242 - 0.4e1 * t266;
	t212 = -t225 * t234 + t286 + (t235 * t283 - 0.2e1 * t250 * t294) * pkin(2) + (-t253 - t255 + (t298 - 0.3e1) * t256 + t262) * pkin(3);
	t211 = 0.1e1 / t212 ^ 2;
	t230 = t242 + t253 + t263;
	t219 = t230 * t240 + 0.2e1 * t271;
	t220 = t230 * t249 + (0.4e1 * t245 - 0.2e1) * t291;
	t228 = pkin(3) + t279;
	t213 = t219 * t247 + t220 * t293 + t228 * t258;
	t264 = 0.1e1 / (t211 * t213 ^ 2 + 0.1e1) * t223;
	t261 = 0.1e1 / t212 * t264;
	t260 = t211 * t213 * t264;
	t1 = [0, 0; 0, 0; 0.2e1 * ((0.2e1 * t233 * t247 * t289 + t228 * t268) * t295 - t213 * t288 + ((-t247 * t258 + t220) * t250 * t295 + (t249 * t258 / 0.2e1 + (pkin(1) * t299 + t230) * t247 / 0.2e1 + (pkin(1) * t249 - pkin(3) + 0.2e1 * t290) * t293) * t221 * t248) * pkin(2)) * t261 - 0.2e1 * (((pkin(2) * t280 + t239) * t258 + t229 * t268 - 0.2e1 * t233 * t290 - (t241 - 0.4e1 * t265) * t234 + t246 * t247 * t276 + t235 * t272 + (pkin(3) * t273 + (-t225 * t249 + 0.2e1 * t294) * pkin(2)) * t248) * t295 - t212 * t288) * t260, 0.1e1 + 0.2e1 * ((-t286 + t228 * t274 + t219 * t249 + ((-t230 + t267) * t293 + pkin(3) * t247 * t300) * t247) * t295 + t213 * t287) * t261 - 0.2e1 * ((t279 * t258 + t229 * t274 + (t225 * t240 + 0.4e1 * t271) * t247 + (t276 * t280 + (t235 * t249 + 0.4e1 * t240 * t290) * pkin(2)) * t248) * t295 + t212 * t287) * t260;];
	Jg_rot = t1;
end