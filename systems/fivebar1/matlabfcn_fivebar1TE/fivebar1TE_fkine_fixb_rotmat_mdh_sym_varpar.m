% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% fivebar1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% T_c_mdh [4x4x(6+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   5:  mdh base (link 0) -> mdh frame (5-1), link (5-1)
%   ...
%   6+1:  mdh base (link 0) -> mdh frame (6)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 10:28
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [T_c_mdh, Tc_stack] = fivebar1TE_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1TE_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1TE_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 09:11:29
% EndTime: 2020-04-27 09:11:34
% DurationCPUTime: 4.98s
% Computational Cost: add. (38799->403), mult. (113992->493), div. (356->5), fcn. (13636->6), ass. (0->217)
t283 = 4 * pkin(3);
t136 = pkin(4) ^ 2;
t133 = pkin(5) ^ 2;
t84 = -t133 / 0.3e1;
t282 = t84 - t136 / 0.3e1;
t103 = sin(qJ(2));
t145 = (pkin(2) ^ 2);
t123 = 3 * t145;
t141 = pkin(3) ^ 2;
t120 = 3 * t141;
t147 = (pkin(1) ^ 2);
t233 = t145 + t147;
t191 = -t133 + t233;
t170 = t120 + t136 + t191;
t104 = sin(qJ(1));
t250 = t103 * t104;
t214 = pkin(2) * t250;
t174 = -pkin(3) + t214;
t185 = pkin(3) * t214;
t176 = -0.4e1 * t185;
t124 = -3 * t145;
t139 = t141 ^ 2;
t175 = t141 + t191;
t169 = -t136 + t175;
t106 = cos(qJ(1));
t62 = pkin(2) * t106;
t227 = pkin(1) * t62;
t49 = -0.2e1 * t227;
t167 = t49 + t169;
t237 = t133 - t147;
t194 = t136 + t237;
t105 = cos(qJ(2));
t70 = t105 ^ 2;
t261 = t141 * t70;
t224 = -0.4e1 * t261;
t235 = t141 - t147;
t73 = t106 ^ 2;
t260 = t145 * t73;
t46 = -t62 + pkin(1);
t264 = t105 * t46;
t274 = -pkin(4) + pkin(5);
t275 = -pkin(4) - pkin(5);
t277 = 2 * t141;
t222 = 0.2e1 * t260;
t234 = -t145 + t147;
t29 = t49 + t222 + t234;
t41 = -0.2e1 * t185;
t19 = sqrt(t29 * t224 + 0.4e1 * t235 * t260 + 0.4e1 * t169 * t227 - t139 + (t124 + t194) * t277 - (t147 + (pkin(2) - t275) * (pkin(2) + t275)) * (t147 + (pkin(2) - t274) * (pkin(2) + t274)) + (-(t41 + t167) * t264 + t167 * t214) * t283);
t249 = t104 * t105;
t279 = -0.2e1 * t70;
t64 = t141 + t147;
t192 = -t133 + t64;
t44 = t136 + t192;
t17 = (pkin(2) * t249 + t103 * t46) * t19 - (t170 + t49 + t176) * t264 + t174 * t49 + t170 * t214 + (t29 * t279 - t123 + t222 - t44) * pkin(3);
t60 = pkin(3) * t105;
t229 = 0.2e1 * t60;
t28 = t136 + t49 + t175;
t61 = pkin(2) * t104;
t18 = (-t174 + t264) * t19 + (t229 * t29 + t28 * t46) * t103 + (t105 * t28 + (0.4e1 * t70 - 0.2e1) * t46 * pkin(3)) * t61;
t137 = 0.1e1 / pkin(4);
t193 = t141 + t233;
t22 = 0.1e1 / (t229 * t46 + t193 + t41 + t49);
t263 = t137 * t22;
t273 = t105 / 0.2e1;
t13 = (t103 * t17 / 0.2e1 + t18 * t273) * t263;
t14 = (t17 * t273 - t103 * t18 / 0.2e1) * t263;
t111 = 15 * t139;
t112 = 15 * t141;
t113 = 10 * t141;
t114 = -0.2e1 * t133;
t115 = -0.5e1 * t133;
t116 = 7 * t139;
t117 = 5 * t139;
t118 = 7 * t141;
t119 = 6 * t141;
t152 = t145 ^ 2;
t122 = 5 * t152;
t146 = t147 ^ 2;
t126 = 3 * t146;
t127 = 8 * t147;
t128 = 4 * t147;
t130 = 2 * t147;
t132 = t133 ^ 2;
t135 = t136 ^ 2;
t151 = pkin(2) * t145;
t142 = t151 ^ 2;
t148 = pkin(1) * t147;
t155 = pkin(3) * t141;
t236 = t139 + t146;
t241 = t130 - t133;
t245 = t147 * t133;
t280 = -t132 / 0.6e1 + t135 / 0.6e1;
t27 = t241 * t141 + t236 - t245 - t280;
t164 = t152 + t27;
t101 = t145 / 0.2e1;
t243 = t101 + t147;
t166 = -t185 + t243;
t85 = -t133 / 0.2e1;
t43 = t85 + t193;
t171 = t43 * t176;
t177 = -0.6e1 * t185;
t268 = t132 / 0.2e1 - t135 / 0.2e1;
t182 = t126 - 0.3e1 * t245 + t268;
t129 = 3 * t147;
t87 = -0.3e1 / 0.2e1 * t133;
t251 = t87 + t129;
t253 = t142 + t64 * ((t87 + t130) * t141 - 0.3e1 / 0.2e1 * t245 + t236 + t268);
t57 = 0.10e2 / 0.3e1 * t141;
t172 = ((t57 + t241) * t145 + t164) * t177 + (t111 + (-0.9e1 * t133 + (18 * t147)) * t141 + t182) * t145 + (t112 + t251) * t152 + t253;
t86 = -0.2e1 / 0.3e1 * t133;
t200 = t86 + t64;
t242 = t113 + t130;
t238 = t133 + t136;
t50 = t129 - t238;
t255 = t50 * t141;
t96 = -0.2e1 / 0.3e1 * t136;
t266 = t86 + t96;
t276 = 2 * t145;
t59 = pkin(3) * t103;
t173 = -(t122 + ((5 * t141) + t50) * t276 + (t96 + t200) * t64) * t59 + (t152 + (t242 + t266) * t145 + t117 + 0.2e1 * t255 + t147 * (t147 + t266)) * t61;
t240 = t132 - t135;
t178 = (6 * t146) - 0.6e1 * t245 + t240;
t205 = t147 + t282;
t179 = t141 + t205;
t82 = -t133 / 0.6e1;
t267 = t82 - t136 / 0.6e1;
t210 = t147 + t267;
t180 = t101 + t210;
t91 = 0.2e1 / 0.3e1 * t136;
t211 = t130 + t86 + t91;
t252 = t152 + (t91 + t200) * t64;
t92 = t136 / 0.3e1;
t34 = t84 + t92 + t193;
t181 = t34 * t176 + t252 + (t119 + t211) * t145;
t212 = t155 * t61;
t69 = t105 * t70;
t183 = t69 * t212;
t262 = t139 * t70 ^ 2;
t184 = t262 * t61;
t256 = t155 * t69;
t215 = 0.16e2 * t256;
t186 = pkin(1) * t215;
t187 = 0.20e2 / 0.3e1 * t141;
t217 = pkin(1) * t256;
t189 = 0.8e1 * t217;
t239 = -t133 + t136;
t195 = t129 + t239;
t196 = t120 + t233;
t226 = pkin(1) * t60;
t197 = 0.6e1 * t226;
t198 = 0.4e1 * t226;
t247 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t199 = t103 * t247;
t203 = -t59 / 0.2e1;
t206 = t133 / 0.3e1 + t92 + t130;
t207 = 0.2e1 / 0.3e1 * t133 + t91 + t128;
t208 = 0.4e1 / 0.3e1 * t133 + 0.4e1 / 0.3e1 * t136 - (2 * t147);
t209 = t147 + t85 - t136 / 0.2e1;
t213 = t141 * t61;
t216 = 0.12e2 * t261;
t258 = t151 * t106 * t73;
t221 = 0.8e1 * t258;
t223 = 0.4e1 * t261;
t225 = 0.8e1 * t262;
t230 = 0.4e1 * pkin(1);
t231 = t146 + t152;
t232 = t146 - t139;
t244 = t147 * t141;
t248 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t254 = 0.4e1 / 0.7e1 * t147 - t133 / 0.7e1;
t257 = t152 * t73 ^ 2;
t259 = t147 * t238;
t265 = t103 * (t123 + t64);
t56 = t64 ^ 2;
t269 = t56 * (-t136 + t192);
t270 = (-t103 * t155 + t213) * t70;
t272 = pkin(1) * t105;
t278 = 4 * t139;
t55 = t147 - t145 / 0.3e1;
t30 = t55 * t41;
t35 = t60 + t46;
t67 = t124 + t147;
t38 = t67 * t189;
t39 = t196 * t61;
t40 = 0.10e2 * t255;
t47 = pkin(1) + t60;
t48 = 0.2e1 * t226;
t52 = (t128 + t133) * t141;
t54 = -t141 / 0.3e1 + t147;
t58 = -0.30e2 * t133 + (60 * t147);
t66 = -3 * t141 + t147;
t83 = -t133 / 0.4e1;
t97 = 0.4e1 / 0.3e1 * t141;
t98 = t141 / 0.3e1;
t99 = t141 / 0.2e1;
t271 = ((-0.24e2 * (0.4e1 / 0.3e1 * t261 + t48 + t54) * t257 * t59 - 0.12e2 * (-0.8e1 / 0.3e1 * t184 + ((t97 + t180) * t61 - (0.4e1 / 0.3e1 * t145 + t99 + t210) * t59) * t223 + (-(t145 * t235) - 0.5e1 / 0.3e1 * t139 + t206 * t141 + t147 * t205) * t61 + (-t152 + (-t187 + t207) * t145 - (3 * t139) + t208 * t141 + t146) * t203 + (-t103 * t139 * t69 + ((t141 + t180) * t61 + (t276 - t235) * t203) * t60) * t230) * t260 + 0.24e2 * t55 * t184 + ((t123 + 0.3e1 / 0.2e1 * t141 + t209) * t61 + t67 * t59 / 0.2e1) * t186 - 0.6e1 * ((-(3 * t152) + (-t187 + t208) * t145 + t207 * t141 + t232) * t61 - 0.2e1 * (-0.5e1 / 0.3e1 * t152 + (-t141 + t206) * t145 + t147 * t179) * t59) * t261 - 0.6e1 * t173 * t226 - (t142 + ((21 * t141) + t50) * t152 + (t126 + (35 * t139) + t40 - 0.2e1 * t259) * t145 + (t116 + (t115 + t127 - 0.5e1 * t136) * t141 - t147 * t194) * t64) * t61 + (0.7e1 * t142 + (t118 + t50) * t122 + ((21 * t139) + (9 * t146) + t40 - 0.6e1 * t259) * t145 + t269) * t59) * t19 + (0.16e2 * (t225 + t186 + (-8 * t139 + 12 * t244) * t70 + (-0.12e2 * pkin(1) * t155 + t148 * t283) * t105 - (6 * t244) + t236) * t257 + 0.24e2 * ((t147 - 0.2e1 / 0.3e1 * t145) * t225 + 0.14e2 * (-0.32e2 / 0.21e2 * (t147 + t145 / 0.4e1 + t141 / 0.4e1 - t133 / 0.8e1) * t185 + t152 / 0.7e1 + (0.16e2 / 0.21e2 * t141 + t254) * t145 + t139 / 0.7e1 + t254 * t141 + t146 - 0.3e1 / 0.7e1 * t245 + t132 / 0.42e2 - t135 / 0.42e2) * t261 + t54 * t171 - (t235 * t152) + (-0.10e2 / 0.3e1 * t139 + (2 * t146) - t245 + t52) * t145 + t27 * t248 + ((-0.2e1 / 0.3e1 * t185 + t147 + t99 + t83) * t215 + 0.6e1 * (-0.8e1 / 0.3e1 * (t83 + t98 + t243) * t185 + t152 / 0.3e1 + (0.4e1 / 0.3e1 * t147 + t97 + t84) * t145 + t146 + 0.2e1 / 0.3e1 * t244 - 0.2e1 / 0.3e1 * t245 - t139 / 0.3e1 + t132 / 0.18e2 - t135 / 0.18e2) * t60) * pkin(1)) * t260 + 0.16e2 * (-6 * t147 * t145 + t231) * t262 + 0.32e2 * (t247 * t41 + t43 * t67) * t217 + 0.24e2 * (t55 * t171 - t142 + (-t57 + t237) * t152 + (t52 + t232 + t280) * t145 + t27 * t147) * t261 + 0.8e1 * t172 * t226 - 0.8e1 * ((t118 + t251) * t152 + (t116 + (t115 + (10 * t147)) * t141 + t182) * t145 + t253) * t185 + (t152 ^ 2) + (t114 + t128 + (28 * t141)) * t142 + (t141 * t58 + (70 * t139) + t178) * t152 + (t119 * t178 + t130 * t240 - 0.6e1 * t146 * t133 + t58 * t139 + 0.4e1 * t148 ^ 2 + (28 * t155 ^ 2)) * t145 + t44 * t269) * t35 + (((t66 * t61 + 0.4e1 * t270 + 0.2e1 * ((t61 + 0.2e1 * t59) * t272 + t103 * (0.3e1 / 0.2e1 * t145 + t120 + t209)) * pkin(3)) * t221 + 0.6e1 * ((0.2e1 * (t99 + t145 + t267) * t61 + pkin(3) * t199) * t224 + (-0.8e1 * t183 + 0.4e1 * ((t196 + t282) * t61 - (t123 + t179) * t59) * t60) * pkin(1) + t173) * t62) * t19 + (-0.32e2 * (t189 + (-0.4e1 * t103 * t212 + t278 + ((4 * t145) + t114 + t127) * t141) * t70 + (-t141 + t166 + t83) * t198 + t41 * t248 + t66 * t43) * t258 - 0.8e1 * (t38 + (t247 * t43 + t30) * t216 + (t171 + (t119 + t241) * t145 + t164) * t197 + t172) * t62) * t35) * t47) / ((-0.4e1 * (0.2e1 * t270 + (t277 + t145) * t59 + (-t235 + t48) * t61) * t260 + 0.8e1 * pkin(1) * t183 + ((pkin(2) * t278 + 0.8e1 * t141 * t151) * t104 + 0.4e1 * t155 * t199) * t70 - 0.4e1 * (-pkin(3) * t265 + t39) * t226 - (t242 * t145 + t117 + t231 + 6 * t244) * t61 + (t122 + (t113 + 6 * t147) * t145 + t56) * t59) * t19 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t185 + t147 + t145 / 0.3e1 + t98 + t136 / 0.9e1 - t133 / 0.9e1) * t261 + t54 * t41 + t34 * t248 + (t256 + (t136 / 0.6e1 + t82 + t166) * t60) * t230) * t260 + t38 + (t247 * t34 + t30) * t216 + t181 * t197 + ((t57 + t211) * t145 + t252) * t177 + t142 + (t112 + t195) * t152 + (t195 * t119 + t239 * t130 + t111 + t126) * t145 + t56 * t44) * t35 + ((t221 * t59 + 0.4e1 * (t213 * t279 + t39 + (0.2e1 * (-t59 + t61) * t272 - t265) * pkin(3)) * t62) * t19 + (-0.8e1 * (t48 + t223 + t66) * t258 - 0.6e1 * (t234 * t223 + (t41 + t34) * t198 + t181) * t62) * t35) * t47);
t202 = -t271 / 0.2e1;
t134 = 0.1e1 / pkin(5);
t246 = t134 * t137;
t281 = (t13 * t202 - t14 * t19 / 0.2e1) * t246;
t228 = pkin(1) + 0;
t220 = t59 + 0;
t219 = t61 + 0;
t218 = t62 + 0;
t204 = t134 / pkin(4) ^ 2 * t22;
t201 = t271 / 0.4e1;
t32 = t103 * t106 - t249;
t33 = t105 * t106 + t250;
t8 = (t17 * t201 - t18 * t19 / 0.4e1) * t204;
t9 = (t17 * t19 / 0.4e1 + t18 * t201) * t204;
t6 = t32 * t8 + t33 * t9;
t7 = t32 * t9 - t33 * t8;
t190 = t104 * t6 + t106 * t7;
t188 = t60 + t228;
t2 = t104 * t7 - t106 * t6;
t168 = (t13 * t19 / 0.2e1 + t14 * t202) * t246;
t1 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t106, -t104, 0, 0; t104, t106, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t190, -t2, 0, t218; t2, t190, 0, t219; 0, 0, 1, 0; 0, 0, 0, 1; t105, -t103, 0, t228; t103, t105, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t14, -t13, 0, t188; t13, t14, 0, t220; 0, 0, 1, 0; 0, 0, 0, 1; t168, -t281, 0, pkin(4) * t14 + t188; t281, t168, 0, pkin(4) * t13 + t220; 0, 0, 1, 0; 0, 0, 0, 1; t190, -t2, 0, pkin(5) * t190 + t218; t2, t190, 0, pkin(5) * t2 + t219; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,6+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,6+1]); end % symbolisch
for i = 1:6+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
Tc_stack = NaN(3*size(T_c_mdh,3),4);
for i = 1:size(T_c_mdh,3), Tc_stack((i-1)*3+1:3*i,1:4) = T_c_mdh(1:3,1:4,i); end
