% Calculate inertial parameters regressor of potential energy for
% fivebar1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% U_reg [1x(2*10)]
%   inertial parameter regressor of Potential energy

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 10:28
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function U_reg = fivebar1TE_energypot_fixb_reg2_slag_vp(qJ, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1TE_energypot_fixb_reg2_slag_vp: qJ has to be [2x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'fivebar1TE_energypot_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1TE_energypot_fixb_reg2_slag_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From energy_potential_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 09:40:50
% EndTime: 2020-04-27 09:40:54
% DurationCPUTime: 3.72s
% Computational Cost: add. (14172->399), mult. (41585->491), div. (128->5), fcn. (4996->6), ass. (0->206)
t762 = 4 * pkin(3);
t618 = pkin(5) ^ 2;
t569 = -t618 / 0.3e1;
t621 = pkin(4) ^ 2;
t761 = t569 - t621 / 0.3e1;
t617 = t618 ^ 2;
t620 = t621 ^ 2;
t760 = -t617 / 0.6e1 + t620 / 0.6e1;
t590 = cos(qJ(2));
t555 = t590 ^ 2;
t759 = -0.2e1 * t555;
t626 = pkin(3) ^ 2;
t624 = t626 ^ 2;
t758 = 4 * t624;
t757 = 2 * t626;
t604 = 6 * t626;
t630 = (pkin(2) ^ 2);
t756 = 2 * t630;
t632 = (pkin(1) ^ 2);
t615 = 2 * t632;
t637 = t630 ^ 2;
t607 = 5 * t637;
t755 = -pkin(4) - pkin(5);
t754 = pkin(5) - pkin(4);
t753 = t590 / 0.2e1;
t589 = sin(qJ(1));
t547 = pkin(2) * t589;
t591 = cos(qJ(1));
t752 = pkin(2) * t591;
t588 = sin(qJ(2));
t751 = pkin(3) * t588;
t546 = pkin(3) * t590;
t750 = g(2) * t588;
t740 = t588 * t589;
t700 = pkin(2) * t740;
t673 = pkin(3) * t700;
t528 = -0.2e1 * t673;
t533 = pkin(1) - t752;
t708 = pkin(1) * t752;
t536 = -0.2e1 * t708;
t714 = t630 + t632;
t679 = t626 + t714;
t709 = 0.2e1 * t546;
t509 = 0.1e1 / (t533 * t709 + t528 + t536 + t679);
t749 = t509 / pkin(4);
t640 = pkin(3) * t626;
t699 = t626 * t547;
t748 = (-t588 * t640 + t699) * t555;
t747 = t533 * t590;
t614 = 3 * t632;
t719 = t618 + t621;
t537 = t614 - t719;
t746 = t537 * t626;
t549 = t626 + t632;
t543 = t549 ^ 2;
t678 = -t618 + t549;
t745 = t543 * (-t621 + t678);
t744 = t719 * t632;
t558 = t591 ^ 2;
t743 = t558 ^ 2 * t637;
t636 = pkin(2) * t630;
t742 = t591 * t558 * t636;
t741 = t558 * t630;
t739 = t589 * t590;
t738 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t737 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t736 = t624 * t555 ^ 2;
t735 = t626 * t555;
t734 = t632 * t618;
t733 = t632 * t626;
t554 = t590 * t555;
t732 = t640 * t554;
t572 = -0.3e1 / 0.2e1 * t618;
t627 = t636 ^ 2;
t631 = t632 ^ 2;
t717 = t624 + t631;
t729 = t617 / 0.2e1 - t620 / 0.2e1;
t731 = t549 * ((t572 + t615) * t626 - 0.3e1 / 0.2e1 * t734 + t717 + t729) + t627;
t576 = 0.2e1 / 0.3e1 * t621;
t571 = -0.2e1 / 0.3e1 * t618;
t683 = t571 + t549;
t730 = (t576 + t683) * t549 + t637;
t567 = -t618 / 0.6e1;
t728 = t567 - t621 / 0.6e1;
t581 = -0.2e1 / 0.3e1 * t621;
t727 = t571 + t581;
t726 = t572 + t614;
t541 = -t626 / 0.3e1 + t632;
t586 = t630 / 0.2e1;
t725 = t586 + t632;
t724 = 0.4e1 / 0.7e1 * t632 - t618 / 0.7e1;
t598 = 10 * t626;
t723 = t598 + t615;
t551 = -3 * t626 + t632;
t722 = t615 - t618;
t721 = t617 - t620;
t720 = -t618 + t621;
t718 = t618 - t632;
t716 = t626 - t632;
t715 = -t630 + t632;
t713 = t631 - t624;
t712 = t631 + t637;
t711 = 0.4e1 * pkin(1);
t710 = 0.2e1 * t751;
t707 = pkin(1) * t546;
t706 = 0.8e1 * t742;
t705 = 0.2e1 * t741;
t704 = 0.8e1 * t736;
t703 = -0.4e1 * t735;
t702 = 0.4e1 * t735;
t701 = pkin(1) * t732;
t698 = t640 * t547;
t697 = 0.12e2 * t735;
t696 = 0.16e2 * t732;
t695 = -t751 / 0.2e1;
t694 = t509 / pkin(5) / pkin(4) ^ 2;
t693 = t588 * t737;
t535 = 0.2e1 * t707;
t692 = 0.4e1 * t707;
t691 = 0.6e1 * t707;
t690 = 0.4e1 / 0.3e1 * t618 + 0.4e1 / 0.3e1 * t621 - (2 * t632);
t613 = 4 * t632;
t689 = 0.2e1 / 0.3e1 * t618 + t576 + t613;
t577 = t621 / 0.3e1;
t688 = t618 / 0.3e1 + t577 + t615;
t687 = t632 + t728;
t686 = t632 + t761;
t570 = -t618 / 0.2e1;
t685 = t570 - t621 / 0.2e1 + t632;
t684 = t571 + t576 + t615;
t605 = 3 * t626;
t682 = t605 + t714;
t681 = t614 + t720;
t680 = t621 + t718;
t677 = -t618 + t714;
t516 = t536 + t705 + t715;
t609 = -3 * t630;
t661 = t626 + t677;
t653 = -t621 + t661;
t651 = t536 + t653;
t506 = sqrt(t516 * t703 + 0.4e1 * t716 * t741 + 0.4e1 * t653 * t708 - t624 + (t609 + t680) * t757 - (t632 + (pkin(2) - t755) * (pkin(2) + t755)) * (t632 + (pkin(2) - t754) * (pkin(2) + t754)) + (-(t528 + t651) * t747 + t651 * t700) * t762);
t514 = t722 * t626 + t717 - t734 - t760;
t542 = t632 - t630 / 0.3e1;
t517 = t542 * t528;
t521 = t569 + t577 + t679;
t522 = t533 + t546;
t552 = t609 + t632;
t674 = 0.8e1 * t701;
t525 = t552 * t674;
t527 = 0.10e2 * t746;
t530 = t570 + t679;
t531 = t621 + t678;
t534 = pkin(1) + t546;
t539 = (t613 + t618) * t626;
t544 = 0.10e2 / 0.3e1 * t626;
t545 = -0.30e2 * t618 + (60 * t632);
t568 = -t618 / 0.4e1;
t582 = 0.4e1 / 0.3e1 * t626;
t583 = t626 / 0.3e1;
t584 = t626 / 0.2e1;
t596 = 15 * t624;
t597 = 15 * t626;
t599 = -0.2e1 * t618;
t600 = -0.5e1 * t618;
t601 = 7 * t624;
t602 = 5 * t624;
t603 = 7 * t626;
t608 = 3 * t630;
t611 = 3 * t631;
t612 = 8 * t632;
t633 = pkin(1) * t632;
t649 = t514 + t637;
t650 = -t673 + t725;
t665 = -0.3e1 * t734 + t611 + t729;
t668 = -0.6e1 * t673;
t655 = ((t544 + t722) * t630 + t649) * t668 + (t596 + (-0.9e1 * t618 + (18 * t632)) * t626 + t665) * t630 + (t597 + t726) * t637 + t731;
t667 = -0.4e1 * t673;
t656 = t530 * t667;
t658 = -(t608 + t549) * t751 + t682 * t547;
t659 = -(t607 + ((5 * t626) + t537) * t756 + (t581 + t683) * t549) * t751 + (t637 + (t723 + t727) * t630 + t602 + 0.2e1 * t746 + t632 * (t632 + t727)) * t547;
t662 = t626 + t686;
t663 = t586 + t687;
t664 = -0.6e1 * t734 + (6 * t631) + t721;
t666 = t521 * t667 + (t604 + t684) * t630 + t730;
t669 = t554 * t698;
t670 = t736 * t547;
t672 = pkin(1) * t696;
t675 = 0.20e2 / 0.3e1 * t626;
t676 = ((-0.24e2 * (0.4e1 / 0.3e1 * t735 + t535 + t541) * t743 * t751 - 0.12e2 * (-0.8e1 / 0.3e1 * t670 + ((t582 + t663) * t547 - (0.4e1 / 0.3e1 * t630 + t584 + t687) * t751) * t702 + (-(t630 * t716) - 0.5e1 / 0.3e1 * t624 + t688 * t626 + t632 * t686) * t547 + (-t637 + (-t675 + t689) * t630 - (3 * t624) + t690 * t626 + t631) * t695 + (-t588 * t624 * t554 + ((t626 + t663) * t547 + (t756 - t716) * t695) * t546) * t711) * t741 + 0.24e2 * t542 * t670 + ((t608 + 0.3e1 / 0.2e1 * t626 + t685) * t547 + t552 * t751 / 0.2e1) * t672 - 0.6e1 * ((-(3 * t637) + (-t675 + t690) * t630 + t689 * t626 + t713) * t547 - 0.2e1 * (-0.5e1 / 0.3e1 * t637 + (-t626 + t688) * t630 + t632 * t662) * t751) * t735 - 0.6e1 * t659 * t707 - (t627 + ((21 * t626) + t537) * t637 + (t527 + t611 + (35 * t624) - 0.2e1 * t744) * t630 + (t601 + (t600 + t612 - 0.5e1 * t621) * t626 - t632 * t680) * t549) * t547 + (0.7e1 * t627 + (t603 + t537) * t607 + (t527 + (21 * t624) + (9 * t631) - 0.6e1 * t744) * t630 + t745) * t751) * t506 + (0.16e2 * (t704 + t672 + (-8 * t624 + 12 * t733) * t555 + (-0.12e2 * pkin(1) * t640 + t633 * t762) * t590 - (6 * t733) + t717) * t743 + 0.24e2 * ((t632 - 0.2e1 / 0.3e1 * t630) * t704 + 0.14e2 * (-0.32e2 / 0.21e2 * (t632 + t630 / 0.4e1 + t626 / 0.4e1 - t618 / 0.8e1) * t673 + t637 / 0.7e1 + (0.16e2 / 0.21e2 * t626 + t724) * t630 + t624 / 0.7e1 + t724 * t626 + t631 - 0.3e1 / 0.7e1 * t734 + t617 / 0.42e2 - t620 / 0.42e2) * t735 + t541 * t656 - (t716 * t637) + (t539 - 0.10e2 / 0.3e1 * t624 + (2 * t631) - t734) * t630 + t514 * t738 + ((-0.2e1 / 0.3e1 * t673 + t632 + t584 + t568) * t696 + 0.6e1 * (-0.8e1 / 0.3e1 * (t568 + t583 + t725) * t673 + t637 / 0.3e1 + (0.4e1 / 0.3e1 * t632 + t582 + t569) * t630 + t631 + 0.2e1 / 0.3e1 * t733 - 0.2e1 / 0.3e1 * t734 - t624 / 0.3e1 + t617 / 0.18e2 - t620 / 0.18e2) * t546) * pkin(1)) * t741 + 0.16e2 * (-6 * t632 * t630 + t712) * t736 + 0.32e2 * (t528 * t737 + t530 * t552) * t701 + 0.24e2 * (t542 * t656 - t627 + (-t544 + t718) * t637 + (t539 + t713 + t760) * t630 + t514 * t632) * t735 + 0.8e1 * t655 * t707 - 0.8e1 * ((t603 + t726) * t637 + (t601 + (t600 + (10 * t632)) * t626 + t665) * t630 + t731) * t673 + (t637 ^ 2) + (t599 + t613 + (28 * t626)) * t627 + (t545 * t626 + (70 * t624) + t664) * t637 + (t545 * t624 + t664 * t604 + t721 * t615 - 0.6e1 * t631 * t618 + 0.4e1 * t633 ^ 2 + (28 * t640 ^ 2)) * t630 + t531 * t745) * t522 + (((0.4e1 * t748 + (t547 + t710) * t535 + t551 * t547 + (0.3e1 / 0.2e1 * t630 + t605 + t685) * t710) * t706 + 0.6e1 * ((0.2e1 * (t584 + t630 + t728) * t547 + pkin(3) * t693) * t703 + (-0.8e1 * t669 + 0.4e1 * ((t682 + t761) * t547 - (t608 + t662) * t751) * t546) * pkin(1) + t659) * t752) * t506 + (-0.32e2 * (t674 + (-0.4e1 * t588 * t698 + t758 + ((4 * t630) + t599 + t612) * t626) * t555 + (t568 - t626 + t650) * t692 + t528 * t738 + t551 * t530) * t742 - 0.8e1 * (t525 + (t530 * t737 + t517) * t697 + (t656 + (t604 + t722) * t630 + t649) * t691 + t655) * t752) * t522) * t534) / ((-0.4e1 * (0.2e1 * t748 + (t757 + t630) * t751 + (-t716 + t535) * t547) * t741 + 0.8e1 * pkin(1) * t669 + ((pkin(2) * t758 + 0.8e1 * t626 * t636) * t589 + 0.4e1 * t640 * t693) * t555 - 0.4e1 * t658 * t707 - (t723 * t630 + t602 + t712 + 6 * t733) * t547 + (t607 + (t598 + 6 * t632) * t630 + t543) * t751) * t506 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t673 + t632 + t630 / 0.3e1 + t583 + t621 / 0.9e1 - t618 / 0.9e1) * t735 + t541 * t528 + t521 * t738 + (t732 + (t621 / 0.6e1 + t567 + t650) * t546) * t711) * t741 + t525 + (t521 * t737 + t517) * t697 + t666 * t691 + ((t544 + t684) * t630 + t730) * t668 + t627 + (t597 + t681) * t637 + (t681 * t604 + t720 * t615 + t596 + t611) * t630 + t543 * t531) * t522 + ((t706 * t751 + 0.4e1 * (t699 * t759 + (t547 - t751) * t535 + t658) * t752) * t506 + (-0.8e1 * (t535 + t702 + t551) * t742 - 0.6e1 * (t715 * t702 + (t528 + t521) * t692 + t666) * t752) * t522) * t534) / 0.4e1;
t654 = t605 + t621 + t677;
t660 = -pkin(3) + t700;
t504 = (pkin(2) * t739 + t533 * t588) * t506 - (t536 + t654 + t667) * t747 + t660 * t536 + t654 * t700 + (t516 * t759 - t531 - t608 + t705) * pkin(3);
t515 = t536 + t621 + t661;
t505 = (-t660 + t747) * t506 + (t515 * t533 + t516 * t709) * t588 + (t515 * t590 + (0.4e1 * t555 - 0.2e1) * t533 * pkin(3)) * t547;
t498 = (t504 * t676 - t505 * t506 / 0.4e1) * t694;
t499 = (t504 * t506 / 0.4e1 + t505 * t676) * t694;
t519 = t588 * t591 - t739;
t520 = t590 * t591 + t740;
t496 = t498 * t519 + t499 * t520;
t497 = -t498 * t520 + t499 * t519;
t671 = t496 * t589 + t497 * t591;
t657 = -g(1) * t591 - g(2) * t589;
t652 = t496 * t591 - t497 * t589;
t503 = (t504 * t753 - t588 * t505 / 0.2e1) * t749;
t502 = (t588 * t504 / 0.2e1 + t505 * t753) * t749;
t1 = [0, 0, 0, 0, 0, 0, t657, g(1) * t589 - g(2) * t591, -g(3), 0, 0, 0, 0, 0, 0, 0, -g(1) * t671 + g(2) * t652, -g(1) * t652 - g(2) * t671, -g(3), t657 * pkin(2), 0, 0, 0, 0, 0, 0, -g(1) * t590 - t750, g(1) * t588 - g(2) * t590, -g(3), -g(1) * pkin(1), 0, 0, 0, 0, 0, 0, -g(1) * t503 - g(2) * t502, g(1) * t502 - g(2) * t503, -g(3), -pkin(3) * t750 - g(1) * t534;];
U_reg = t1;
