% Calculate homogenous joint transformation matrices for
% fivebar1TE
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% T_mdh [4x4x6]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 10:28
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = fivebar1TE_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1TE_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1TE_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 09:11:34
% EndTime: 2020-04-27 09:11:37
% DurationCPUTime: 3.40s
% Computational Cost: add. (8482->384), mult. (25200->471), div. (74->5), fcn. (2920->6), ass. (0->207)
t549 = 4 * pkin(3);
t406 = pkin(5) ^ 2;
t357 = -t406 / 0.3e1;
t409 = pkin(4) ^ 2;
t548 = t357 - t409 / 0.3e1;
t405 = t406 ^ 2;
t408 = t409 ^ 2;
t547 = -t405 / 0.6e1 + t408 / 0.6e1;
t378 = cos(qJ(2));
t343 = t378 ^ 2;
t546 = -0.2e1 * t343;
t414 = pkin(3) ^ 2;
t412 = t414 ^ 2;
t545 = 4 * t412;
t544 = 2 * t414;
t392 = 6 * t414;
t418 = (pkin(2) ^ 2);
t543 = 2 * t418;
t420 = (pkin(1) ^ 2);
t403 = 2 * t420;
t425 = t418 ^ 2;
t395 = 5 * t425;
t542 = -pkin(4) - pkin(5);
t541 = -pkin(4) + pkin(5);
t377 = sin(qJ(1));
t335 = pkin(2) * t377;
t379 = cos(qJ(1));
t540 = pkin(2) * t379;
t376 = sin(qJ(2));
t539 = pkin(3) * t376;
t334 = pkin(3) * t378;
t495 = pkin(1) * t540;
t324 = -0.2e1 * t495;
t346 = t379 ^ 2;
t529 = t346 * t418;
t492 = 0.2e1 * t529;
t502 = -t418 + t420;
t304 = t324 + t492 + t502;
t528 = t376 * t377;
t487 = pkin(2) * t528;
t458 = pkin(3) * t487;
t316 = -0.2e1 * t458;
t397 = -3 * t418;
t501 = t418 + t420;
t464 = -t406 + t501;
t447 = t414 + t464;
t440 = -t409 + t447;
t439 = t324 + t440;
t505 = t406 - t420;
t467 = t409 + t505;
t522 = t414 * t343;
t490 = -0.4e1 * t522;
t503 = t414 - t420;
t321 = pkin(1) - t540;
t535 = t321 * t378;
t294 = sqrt(t304 * t490 + 0.4e1 * t503 * t529 + 0.4e1 * t440 * t495 - t412 + (t397 + t467) * t544 - (t420 + (pkin(2) - t542) * (pkin(2) + t542)) * (t420 + (pkin(2) - t541) * (pkin(2) + t541)) + (-(t316 + t439) * t535 + t439 * t487) * t549);
t419 = t420 ^ 2;
t504 = t412 + t419;
t509 = t403 - t406;
t521 = t420 * t406;
t302 = t509 * t414 + t504 - t521 - t547;
t330 = t420 - t418 / 0.3e1;
t305 = t330 * t316;
t365 = t409 / 0.3e1;
t466 = t414 + t501;
t309 = t357 + t365 + t466;
t310 = t321 + t334;
t340 = t397 + t420;
t342 = t378 * t343;
t428 = pkin(3) * t414;
t519 = t428 * t342;
t488 = pkin(1) * t519;
t459 = 0.8e1 * t488;
t313 = t340 * t459;
t402 = 3 * t420;
t506 = t406 + t409;
t325 = t402 - t506;
t534 = t325 * t414;
t315 = 0.10e2 * t534;
t358 = -t406 / 0.2e1;
t318 = t358 + t466;
t337 = t414 + t420;
t465 = -t406 + t337;
t319 = t409 + t465;
t322 = pkin(1) + t334;
t494 = pkin(1) * t334;
t323 = 0.2e1 * t494;
t401 = 4 * t420;
t327 = (t401 + t406) * t414;
t329 = -t414 / 0.3e1 + t420;
t331 = t337 ^ 2;
t332 = 0.10e2 / 0.3e1 * t414;
t333 = -0.30e2 * t406 + (60 * t420);
t339 = -3 * t414 + t420;
t355 = -t406 / 0.6e1;
t356 = -t406 / 0.4e1;
t370 = 0.4e1 / 0.3e1 * t414;
t371 = t414 / 0.3e1;
t372 = t414 / 0.2e1;
t384 = 15 * t412;
t385 = 15 * t414;
t386 = 10 * t414;
t387 = -0.2e1 * t406;
t388 = -0.5e1 * t406;
t389 = 7 * t412;
t390 = 5 * t412;
t391 = 7 * t414;
t393 = 3 * t414;
t396 = 3 * t418;
t399 = 3 * t419;
t400 = 8 * t420;
t424 = pkin(2) * t418;
t415 = t424 ^ 2;
t421 = pkin(1) * t420;
t437 = t302 + t425;
t374 = t418 / 0.2e1;
t512 = t374 + t420;
t438 = -t458 + t512;
t516 = t405 / 0.2e1 - t408 / 0.2e1;
t451 = -0.3e1 * t521 + t399 + t516;
t454 = -0.6e1 * t458;
t360 = -0.3e1 / 0.2e1 * t406;
t513 = t360 + t402;
t518 = t337 * ((t360 + t403) * t414 - 0.3e1 / 0.2e1 * t521 + t504 + t516) + t415;
t442 = ((t332 + t509) * t418 + t437) * t454 + (t384 + (-0.9e1 * t406 + (18 * t420)) * t414 + t451) * t418 + (t385 + t513) * t425 + t518;
t453 = -0.4e1 * t458;
t443 = t318 * t453;
t469 = t393 + t501;
t444 = -(t396 + t337) * t539 + t469 * t335;
t369 = -0.2e1 / 0.3e1 * t409;
t359 = -0.2e1 / 0.3e1 * t406;
t470 = t359 + t337;
t510 = t386 + t403;
t514 = t359 + t369;
t445 = -(t395 + ((5 * t414) + t325) * t543 + (t369 + t470) * t337) * t539 + (t425 + (t510 + t514) * t418 + t390 + 0.2e1 * t534 + t420 * (t420 + t514)) * t335;
t473 = t420 + t548;
t448 = t414 + t473;
t515 = t355 - t409 / 0.6e1;
t474 = t420 + t515;
t449 = t374 + t474;
t508 = t405 - t408;
t450 = -0.6e1 * t521 + (6 * t419) + t508;
t364 = 0.2e1 / 0.3e1 * t409;
t471 = t359 + t364 + t403;
t517 = (t364 + t470) * t337 + t425;
t452 = t309 * t453 + (t392 + t471) * t418 + t517;
t485 = t428 * t335;
t455 = t342 * t485;
t523 = t412 * t343 ^ 2;
t456 = t523 * t335;
t483 = 0.16e2 * t519;
t457 = pkin(1) * t483;
t460 = 0.20e2 / 0.3e1 * t414;
t507 = -t406 + t409;
t468 = t402 + t507;
t472 = t358 - t409 / 0.2e1 + t420;
t475 = t406 / 0.3e1 + t365 + t403;
t476 = 0.2e1 / 0.3e1 * t406 + t364 + t401;
t477 = 0.4e1 / 0.3e1 * t406 + 0.4e1 / 0.3e1 * t409 - (2 * t420);
t478 = 0.6e1 * t494;
t479 = 0.4e1 * t494;
t525 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t480 = t376 * t525;
t482 = -t539 / 0.2e1;
t484 = 0.12e2 * t522;
t486 = t414 * t335;
t489 = 0.4e1 * t522;
t491 = 0.8e1 * t523;
t530 = t379 * t346 * t424;
t493 = 0.8e1 * t530;
t497 = 0.2e1 * t539;
t498 = 0.4e1 * pkin(1);
t499 = t419 + t425;
t500 = t419 - t412;
t511 = 0.4e1 / 0.7e1 * t420 - t406 / 0.7e1;
t520 = t420 * t414;
t526 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t531 = t346 ^ 2 * t425;
t532 = t506 * t420;
t533 = t331 * (-t409 + t465);
t536 = (-t376 * t428 + t486) * t343;
t538 = ((-0.24e2 * (0.4e1 / 0.3e1 * t522 + t323 + t329) * t531 * t539 - 0.12e2 * (-0.8e1 / 0.3e1 * t456 + ((t370 + t449) * t335 - (0.4e1 / 0.3e1 * t418 + t372 + t474) * t539) * t489 + (-(t418 * t503) - 0.5e1 / 0.3e1 * t412 + t475 * t414 + t420 * t473) * t335 + (-t425 + (-t460 + t476) * t418 - (3 * t412) + t477 * t414 + t419) * t482 + (-t376 * t412 * t342 + ((t414 + t449) * t335 + (t543 - t503) * t482) * t334) * t498) * t529 + 0.24e2 * t330 * t456 + ((t396 + 0.3e1 / 0.2e1 * t414 + t472) * t335 + t340 * t539 / 0.2e1) * t457 - 0.6e1 * ((-(3 * t425) + (-t460 + t477) * t418 + t476 * t414 + t500) * t335 - 0.2e1 * (-0.5e1 / 0.3e1 * t425 + (-t414 + t475) * t418 + t420 * t448) * t539) * t522 - 0.6e1 * t445 * t494 - (t415 + ((21 * t414) + t325) * t425 + (t315 + t399 + (35 * t412) - 0.2e1 * t532) * t418 + (t389 + (t388 + t400 - 0.5e1 * t409) * t414 - t420 * t467) * t337) * t335 + (0.7e1 * t415 + (t391 + t325) * t395 + (t315 + (21 * t412) + (9 * t419) - 0.6e1 * t532) * t418 + t533) * t539) * t294 + (0.16e2 * (t491 + t457 + (-8 * t412 + 12 * t520) * t343 + (-0.12e2 * pkin(1) * t428 + t421 * t549) * t378 - (6 * t520) + t504) * t531 + 0.24e2 * ((t420 - 0.2e1 / 0.3e1 * t418) * t491 + 0.14e2 * (-0.32e2 / 0.21e2 * (t420 + t418 / 0.4e1 + t414 / 0.4e1 - t406 / 0.8e1) * t458 + t425 / 0.7e1 + (0.16e2 / 0.21e2 * t414 + t511) * t418 + t412 / 0.7e1 + t511 * t414 + t419 - 0.3e1 / 0.7e1 * t521 + t405 / 0.42e2 - t408 / 0.42e2) * t522 + t329 * t443 - (t503 * t425) + (t327 - 0.10e2 / 0.3e1 * t412 + (2 * t419) - t521) * t418 + t302 * t526 + ((-0.2e1 / 0.3e1 * t458 + t420 + t372 + t356) * t483 + 0.6e1 * (-0.8e1 / 0.3e1 * (t356 + t371 + t512) * t458 + t425 / 0.3e1 + (0.4e1 / 0.3e1 * t420 + t370 + t357) * t418 + t419 + 0.2e1 / 0.3e1 * t520 - 0.2e1 / 0.3e1 * t521 - t412 / 0.3e1 + t405 / 0.18e2 - t408 / 0.18e2) * t334) * pkin(1)) * t529 + 0.16e2 * (-6 * t420 * t418 + t499) * t523 + 0.32e2 * (t316 * t525 + t318 * t340) * t488 + 0.24e2 * (t330 * t443 - t415 + (-t332 + t505) * t425 + (t327 + t500 + t547) * t418 + t302 * t420) * t522 + 0.8e1 * t442 * t494 - 0.8e1 * ((t391 + t513) * t425 + (t389 + (t388 + (10 * t420)) * t414 + t451) * t418 + t518) * t458 + (t425 ^ 2) + (t387 + t401 + (28 * t414)) * t415 + (t414 * t333 + (70 * t412) + t450) * t425 + (t333 * t412 + t450 * t392 + t508 * t403 - 0.6e1 * t419 * t406 + 0.4e1 * t421 ^ 2 + (28 * t428 ^ 2)) * t418 + t319 * t533) * t310 + (((0.4e1 * t536 + (t335 + t497) * t323 + t339 * t335 + (0.3e1 / 0.2e1 * t418 + t393 + t472) * t497) * t493 + 0.6e1 * ((0.2e1 * (t372 + t418 + t515) * t335 + pkin(3) * t480) * t490 + (-0.8e1 * t455 + 0.4e1 * ((t469 + t548) * t335 - (t396 + t448) * t539) * t334) * pkin(1) + t445) * t540) * t294 + (-0.32e2 * (t459 + (-0.4e1 * t376 * t485 + t545 + ((4 * t418) + t387 + t400) * t414) * t343 + (t356 - t414 + t438) * t479 + t316 * t526 + t339 * t318) * t530 - 0.8e1 * (t313 + (t318 * t525 + t305) * t484 + (t443 + (t392 + t509) * t418 + t437) * t478 + t442) * t540) * t310) * t322) / ((-0.4e1 * (0.2e1 * t536 + (t544 + t418) * t539 + (-t503 + t323) * t335) * t529 + 0.8e1 * pkin(1) * t455 + ((pkin(2) * t545 + 0.8e1 * t414 * t424) * t377 + 0.4e1 * t428 * t480) * t343 - 0.4e1 * t444 * t494 - (t510 * t418 + t390 + t499 + 6 * t520) * t335 + (t395 + (t386 + 6 * t420) * t418 + t331) * t539) * t294 + (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t458 + t420 + t418 / 0.3e1 + t371 + t409 / 0.9e1 - t406 / 0.9e1) * t522 + t329 * t316 + t309 * t526 + (t519 + (t409 / 0.6e1 + t355 + t438) * t334) * t498) * t529 + t313 + (t309 * t525 + t305) * t484 + t452 * t478 + ((t332 + t471) * t418 + t517) * t454 + t415 + (t385 + t468) * t425 + (t468 * t392 + t507 * t403 + t384 + t399) * t418 + t331 * t319) * t310 + ((t493 * t539 + 0.4e1 * (t486 * t546 + (t335 - t539) * t323 + t444) * t540) * t294 + (-0.8e1 * (t323 + t489 + t339) * t530 - 0.6e1 * (t502 * t489 + (t316 + t309) * t479 + t452) * t540) * t310) * t322);
t496 = 0.2e1 * t334;
t297 = 0.1e1 / (t321 * t496 + t316 + t324 + t466);
t410 = 0.1e1 / pkin(4);
t537 = t297 * t410;
t527 = t377 * t378;
t407 = 0.1e1 / pkin(5);
t524 = t407 * t410;
t481 = t297 * t407 / pkin(4) ^ 2;
t463 = t538 / 0.4e1;
t462 = t537 / 0.2e1;
t461 = -t524 / 0.2e1;
t446 = -pkin(3) + t487;
t441 = t393 + t409 + t464;
t308 = t378 * t379 + t528;
t307 = t376 * t379 - t527;
t303 = t324 + t409 + t447;
t293 = (-t446 + t535) * t294 + (t303 * t321 + t304 * t496) * t376 + (t303 * t378 + (0.4e1 * t343 - 0.2e1) * t321 * pkin(3)) * t335;
t292 = (pkin(2) * t527 + t321 * t376) * t294 - (t324 + t441 + t453) * t535 + t446 * t324 + t441 * t487 + (t304 * t546 - t319 - t396 + t492) * pkin(3);
t291 = t292 * t462;
t288 = t461 * t538;
t287 = (t292 * t294 / 0.4e1 + t293 * t463) * t481;
t286 = (t292 * t463 - t293 * t294 / 0.4e1) * t481;
t285 = -t286 * t308 + t287 * t307;
t284 = t286 * t307 + t287 * t308;
t1 = [t379, -t377, 0, 0; t377, t379, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t285, t284, 0, pkin(2); -t284, t285, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t378, -t376, 0, pkin(1); t376, t378, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t291, -t293 * t537 / 0.2e1, 0, pkin(3); t293 * t462, t291, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t288, t294 * t524 / 0.2e1, 0, pkin(4); t294 * t461, t288, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(5); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,6);             % numerisch
else,                         T_mdh = sym('xx', [4,4,6]); end % symbolisch

for i = 1:6
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
