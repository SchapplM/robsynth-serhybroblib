% Calculate forward kinematics (homogenous transformation matrices) for fixed-base
% fivebar1DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% T_c_mdh [4x4x(6+1)]
%   homogenous transformation matrices for each (body) frame (MDH)
%   1:  mdh base (link 0) -> mdh base link 0 (unit matrix, no information)
%   ...
%   5:  mdh base (link 0) -> mdh frame (5-1), link (5-1)
%   ...
%   6+1:  mdh base (link 0) -> mdh frame (6)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 06:03
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_c_mdh = fivebar1DE2_fkine_fixb_rotmat_mdh_sym_varpar(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1DE2_fkine_fixb_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1DE2_fkine_fixb_rotmat_mdh_sym_varpar: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From fkine_mdh_floatb_twist_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 04:25:13
% EndTime: 2020-04-27 04:25:19
% DurationCPUTime: 5.10s
% Computational Cost: add. (38233->406), mult. (112728->475), div. (340->5), fcn. (13336->15), ass. (0->216)
t276 = 4 * pkin(3);
t134 = pkin(4) ^ 2;
t131 = pkin(5) ^ 2;
t82 = -t131 / 0.3e1;
t275 = t82 - t134 / 0.3e1;
t130 = t131 ^ 2;
t133 = t134 ^ 2;
t274 = -t130 / 0.6e1 + t133 / 0.6e1;
t103 = cos(qJ(2));
t68 = t103 ^ 2;
t273 = -0.2e1 * t68;
t139 = pkin(3) ^ 2;
t137 = t139 ^ 2;
t272 = 4 * t137;
t271 = 2 * t139;
t117 = 6 * t139;
t143 = (pkin(2) ^ 2);
t270 = 2 * t143;
t145 = (pkin(1) ^ 2);
t128 = 2 * t145;
t150 = t143 ^ 2;
t120 = 5 * t150;
t269 = (-pkin(4) - pkin(5));
t268 = (-pkin(4) + pkin(5));
t101 = sin(qJ(2));
t102 = sin(qJ(1));
t109 = 15 * t137;
t110 = 15 * t139;
t111 = 10 * t139;
t112 = -0.2e1 * t131;
t113 = -0.5e1 * t131;
t114 = 7 * t137;
t115 = 5 * t137;
t116 = 7 * t139;
t118 = 3 * t139;
t121 = 3 * t143;
t144 = t145 ^ 2;
t124 = 3 * t144;
t125 = 8 * t145;
t126 = 4 * t145;
t149 = pkin(2) * t143;
t140 = t149 ^ 2;
t146 = pkin(1) * t145;
t153 = pkin(3) * t139;
t232 = t137 + t144;
t237 = t128 - t131;
t240 = t145 * t131;
t25 = t237 * t139 + t232 - t240 - t274;
t162 = t150 + t25;
t244 = t101 * t102;
t210 = pkin(2) * t244;
t181 = pkin(3) * t210;
t99 = t143 / 0.2e1;
t247 = t145 + t99;
t163 = -t181 + t247;
t172 = -0.4e1 * t181;
t229 = t143 + t145;
t189 = t139 + t229;
t83 = -t131 / 0.2e1;
t41 = t83 + t189;
t167 = t41 * t172;
t173 = -0.6e1 * t181;
t262 = t130 / 0.2e1 - t133 / 0.2e1;
t178 = t124 - 0.3e1 * t240 + t262;
t127 = 3 * t145;
t85 = -0.3e1 / 0.2e1 * t131;
t245 = t85 + t127;
t62 = t139 + t145;
t248 = t140 + t62 * ((t85 + t128) * t139 - 0.3e1 / 0.2e1 * t240 + t232 + t262);
t55 = 0.10e2 / 0.3e1 * t139;
t168 = ((t55 + t237) * t143 + t162) * t173 + (t109 + (-0.9e1 * t131 + (18 * t145)) * t139 + t178) * t143 + (t110 + t245) * t150 + t248;
t84 = -0.2e1 / 0.3e1 * t131;
t197 = t84 + t62;
t238 = t111 + t128;
t234 = t131 + t134;
t48 = t127 - t234;
t250 = t48 * t139;
t94 = -0.2e1 / 0.3e1 * t134;
t260 = t84 + t94;
t57 = pkin(3) * t101;
t59 = pkin(2) * t102;
t169 = -(t120 + ((5 * t139) + t48) * t270 + t62 * (t94 + t197)) * t57 + (t150 + (t238 + t260) * t143 + t115 + 0.2e1 * t250 + t145 * (t145 + t260)) * t59;
t122 = -3 * t143;
t187 = -t131 + t229;
t171 = t139 + t187;
t165 = -t134 + t171;
t104 = cos(qJ(1));
t60 = pkin(2) * t104;
t223 = pkin(1) * t60;
t47 = -0.2e1 * t223;
t164 = t47 + t165;
t233 = t131 - t145;
t190 = t134 + t233;
t256 = t139 * t68;
t220 = -0.4e1 * t256;
t231 = t139 - t145;
t71 = t104 ^ 2;
t255 = t143 * t71;
t44 = -t60 + pkin(1);
t258 = t103 * t44;
t218 = 0.2e1 * t255;
t230 = -t143 + t145;
t27 = t47 + t218 + t230;
t39 = -0.2e1 * t181;
t17 = sqrt(t27 * t220 + 0.4e1 * t231 * t255 + 0.4e1 * t165 * t223 - t137 + (t122 + t190) * t271 - ((t145 + (pkin(2) - t268) * (pkin(2) + t268)) * (t145 + (pkin(2) - t269) * (pkin(2) + t269))) + (-(t39 + t164) * t258 + t164 * t210) * t276);
t236 = t130 - t133;
t174 = (6 * t144) - 0.6e1 * t240 + t236;
t200 = t145 + t275;
t175 = t139 + t200;
t80 = -t131 / 0.6e1;
t261 = t80 - t134 / 0.6e1;
t205 = t145 + t261;
t176 = t99 + t205;
t89 = 0.2e1 / 0.3e1 * t134;
t206 = t128 + t84 + t89;
t246 = t150 + t62 * (t89 + t197);
t90 = t134 / 0.3e1;
t32 = t82 + t90 + t189;
t177 = t32 * t172 + t246 + (t117 + t206) * t143;
t209 = t153 * t59;
t67 = t103 * t68;
t179 = t67 * t209;
t257 = t137 * t68 ^ 2;
t180 = t257 * t59;
t251 = t153 * t67;
t211 = 0.16e2 * t251;
t182 = pkin(1) * t211;
t183 = 0.20e2 / 0.3e1 * t139;
t213 = pkin(1) * t251;
t185 = 0.8e1 * t213;
t235 = -t131 + t134;
t191 = t127 + t235;
t192 = t118 + t229;
t58 = pkin(3) * t103;
t222 = pkin(1) * t58;
t193 = 0.6e1 * t222;
t194 = 0.4e1 * t222;
t241 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t196 = t101 * t241;
t198 = -t57 / 0.2e1;
t201 = t131 / 0.3e1 + t90 + t128;
t202 = 0.2e1 / 0.3e1 * t131 + t89 + t126;
t203 = 0.4e1 / 0.3e1 * t131 + 0.4e1 / 0.3e1 * t134 - (2 * t145);
t204 = t145 + t83 - t134 / 0.2e1;
t208 = t139 * t59;
t212 = 0.12e2 * t256;
t253 = t149 * t104 * t71;
t217 = 0.8e1 * t253;
t219 = 0.4e1 * t256;
t221 = 0.8e1 * t257;
t226 = 4 * pkin(1);
t227 = t144 + t150;
t228 = t144 - t137;
t239 = t145 * t139;
t242 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t249 = 0.4e1 / 0.7e1 * t145 - t131 / 0.7e1;
t252 = t150 * t71 ^ 2;
t254 = t145 * t234;
t259 = t101 * (t121 + t62);
t188 = -t131 + t62;
t54 = t62 ^ 2;
t263 = t54 * (-t134 + t188);
t264 = (-t101 * t153 + t208) * t68;
t265 = pkin(1) * t103;
t53 = t145 - t143 / 0.3e1;
t28 = t53 * t39;
t33 = t58 + t44;
t65 = t122 + t145;
t36 = t65 * t185;
t37 = t192 * t59;
t38 = 0.10e2 * t250;
t42 = t134 + t188;
t45 = pkin(1) + t58;
t46 = 0.2e1 * t222;
t50 = (t126 + t131) * t139;
t52 = -t139 / 0.3e1 + t145;
t56 = -0.30e2 * t131 + (60 * t145);
t64 = -3 * t139 + t145;
t81 = -t131 / 0.4e1;
t95 = 0.4e1 / 0.3e1 * t139;
t96 = t139 / 0.3e1;
t97 = t139 / 0.2e1;
t267 = 0.1e1 / ((-0.4e1 * (0.2e1 * t264 + (t271 + t143) * t57 + (-t231 + t46) * t59) * t255 + 0.8e1 * pkin(1) * t179 + ((pkin(2) * t272 + 8 * t139 * t149) * t102 + 0.4e1 * t153 * t196) * t68 - 0.4e1 * (-pkin(3) * t259 + t37) * t222 - (t238 * t143 + t115 + t227 + 6 * t239) * t59 + (t120 + (t111 + 6 * t145) * t143 + t54) * t57) * t17 + t33 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t181 + t145 + t143 / 0.3e1 + t96 + t134 / 0.9e1 - t131 / 0.9e1) * t256 + t52 * t39 + t32 * t242 + (t251 + (t134 / 0.6e1 + t80 + t163) * t58) * t226) * t255 + t36 + (t241 * t32 + t28) * t212 + t177 * t193 + ((t55 + t206) * t143 + t246) * t173 + t140 + (t110 + t191) * t150 + (t191 * t117 + t235 * t128 + t109 + t124) * t143 + t54 * t42) + ((t217 * t57 + 0.4e1 * (t208 * t273 + t37 + (0.2e1 * (-t57 + t59) * t265 - t259) * pkin(3)) * t60) * t17 + t33 * (-0.8e1 * (t46 + t219 + t64) * t253 - 0.6e1 * (t230 * t219 + (t39 + t32) * t194 + t177) * t60)) * t45) * ((-0.24e2 * (0.4e1 / 0.3e1 * t256 + t46 + t52) * t252 * t57 - 0.12e2 * (-0.8e1 / 0.3e1 * t180 + ((t95 + t176) * t59 - (0.4e1 / 0.3e1 * t143 + t97 + t205) * t57) * t219 + (-(t143 * t231) - 0.5e1 / 0.3e1 * t137 + t201 * t139 + t145 * t200) * t59 + (-t150 + (-t183 + t202) * t143 - (3 * t137) + t203 * t139 + t144) * t198 + (-t101 * t137 * t67 + ((t139 + t176) * t59 + (t270 - t231) * t198) * t58) * t226) * t255 + 0.24e2 * t53 * t180 + ((t121 + 0.3e1 / 0.2e1 * t139 + t204) * t59 + t65 * t57 / 0.2e1) * t182 - 0.6e1 * ((-(3 * t150) + (-t183 + t203) * t143 + t202 * t139 + t228) * t59 - 0.2e1 * (-0.5e1 / 0.3e1 * t150 + (-t139 + t201) * t143 + t145 * t175) * t57) * t256 - 0.6e1 * t169 * t222 - (t140 + ((21 * t139) + t48) * t150 + (t124 + (35 * t137) + t38 - 0.2e1 * t254) * t143 + (t114 + (t113 + t125 - 0.5e1 * t134) * t139 - t145 * t190) * t62) * t59 + ((7 * t140) + (t116 + t48) * t120 + ((21 * t137) + (9 * t144) + t38 - 0.6e1 * t254) * t143 + t263) * t57) * t17 + t33 * (0.16e2 * (t221 + t182 + (-8 * t137 + 12 * t239) * t68 + (-12 * pkin(1) * t153 + t146 * t276) * t103 - (6 * t239) + t232) * t252 + 0.24e2 * ((t145 - 0.2e1 / 0.3e1 * t143) * t221 + 0.14e2 * (-0.32e2 / 0.21e2 * (t145 + t143 / 0.4e1 + t139 / 0.4e1 - t131 / 0.8e1) * t181 + t150 / 0.7e1 + (0.16e2 / 0.21e2 * t139 + t249) * t143 + t137 / 0.7e1 + t249 * t139 + t144 - 0.3e1 / 0.7e1 * t240 + t130 / 0.42e2 - t133 / 0.42e2) * t256 + t52 * t167 - (t231 * t150) + (-0.10e2 / 0.3e1 * t137 + (2 * t144) - t240 + t50) * t143 + t25 * t242 + ((-0.2e1 / 0.3e1 * t181 + t145 + t97 + t81) * t211 + 0.6e1 * (-0.8e1 / 0.3e1 * (t81 + t96 + t247) * t181 + t150 / 0.3e1 + (0.4e1 / 0.3e1 * t145 + t95 + t82) * t143 + t144 + 0.2e1 / 0.3e1 * t239 - 0.2e1 / 0.3e1 * t240 - t137 / 0.3e1 + t130 / 0.18e2 - t133 / 0.18e2) * t58) * pkin(1)) * t255 + 0.16e2 * (-6 * t145 * t143 + t227) * t257 + 0.32e2 * (t241 * t39 + t41 * t65) * t213 + 0.24e2 * (t53 * t167 - t140 + (-t55 + t233) * t150 + (t50 + t228 + t274) * t143 + t145 * t25) * t256 + 0.8e1 * t168 * t222 - 0.8e1 * ((t116 + t245) * t150 + (t114 + (t113 + (10 * t145)) * t139 + t178) * t143 + t248) * t181 + (t150 ^ 2) + (t112 + t126 + (28 * t139)) * t140 + (t139 * t56 + (70 * t137) + t174) * t150 + (t174 * t117 + t236 * t128 - 0.6e1 * t144 * t131 + t56 * t137 + (4 * t146 ^ 2) + (28 * t153 ^ 2)) * t143 + t42 * t263) + (((t64 * t59 + 0.4e1 * t264 + 0.2e1 * ((t59 + 0.2e1 * t57) * t265 + (0.3e1 / 0.2e1 * t143 + t118 + t204) * t101) * pkin(3)) * t217 + 0.6e1 * ((0.2e1 * (t97 + t143 + t261) * t59 + pkin(3) * t196) * t220 + (-0.8e1 * t179 + 0.4e1 * ((t192 + t275) * t59 - (t121 + t175) * t57) * t58) * pkin(1) + t169) * t60) * t17 + t33 * (-0.32e2 * (t185 + (-0.4e1 * t101 * t209 + t272 + ((4 * t143) + t112 + t125) * t139) * t68 + (-t139 + t163 + t81) * t194 + t39 * t242 + t41 * t64) * t253 - 0.8e1 * (t36 + (t41 * t241 + t28) * t212 + (t167 + (t117 + t237) * t143 + t162) * t193 + t168) * t60)) * t45);
t266 = 0.1e1 / pkin(4) / 0.2e1;
t166 = t118 + t134 + t187;
t170 = -pkin(3) + t210;
t243 = t102 * t103;
t15 = (pkin(2) * t243 + t101 * t44) * t17 - (t166 + t47 + t172) * t258 + t170 * t47 + t166 * t210 + (t27 * t273 - t121 + t218 - t42) * pkin(3);
t225 = 0.2e1 * t58;
t26 = t134 + t47 + t171;
t16 = (-t170 + t258) * t17 + (t225 * t27 + t26 * t44) * t101 + (t103 * t26 + (0.4e1 * t68 - 0.2e1) * t44 * pkin(3)) * t59;
t20 = 0.1e1 / (t225 * t44 + t189 + t39 + t47);
t195 = t20 * t266;
t13 = qJ(2) + atan2(t16 * t195, t15 * t195);
t224 = pkin(1) + 0;
t216 = t57 + 0;
t215 = t59 + 0;
t214 = t60 + 0;
t207 = t267 / 0.4e1;
t132 = 0.1e1 / pkin(5);
t199 = t132 / pkin(4) ^ 2 * t20;
t186 = t132 * t266;
t184 = t58 + t224;
t31 = t103 * t104 + t244;
t30 = t101 * t104 - t243;
t12 = cos(t13);
t11 = sin(t13);
t8 = (t15 * t17 / 0.4e1 + t16 * t207) * t199;
t7 = (t15 * t207 - t16 * t17 / 0.4e1) * t199;
t6 = atan2(t17 * t186, t186 * t267) + t13;
t5 = cos(t6);
t4 = sin(t6);
t3 = qJ(1) + atan2(t30 * t7 + t31 * t8, -t30 * t8 + t31 * t7);
t2 = cos(t3);
t1 = sin(t3);
t9 = [1, 0, 0, 0; 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t104, -t102, 0, 0; t102, t104, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t2, t1, 0, t214; -t1, -t2, 0, t215; 0, 0, 1, 0; 0, 0, 0, 1; t103, -t101, 0, t224; t101, t103, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t12, -t11, 0, t184; t11, t12, 0, t216; 0, 0, 1, 0; 0, 0, 0, 1; -t5, t4, 0, pkin(4) * t12 + t184; -t4, -t5, 0, pkin(4) * t11 + t216; 0, 0, 1, 0; 0, 0, 0, 1; -t2, t1, 0, -pkin(5) * t2 + t214; -t1, -t2, 0, -pkin(5) * t1 + t215; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t9;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_c_mdh = NaN(4,4,6+1);               % numerisch
else,                         T_c_mdh = sym('xx', [4,4,6+1]); end % symbolisch
for i = 1:6+1
  T_c_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
