% Rotatorische Teilmatrix der geometrischen Jacobi-Matrix für beliebiges Segment von
% fivebar1DE2
% Use Code from Maple symbolic Code Generation
%
% Geometrische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorgeschwindigkeit und Geschw. der verallgemeinerten Koordinaten.
% 
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% Jg_rot [3x2]
%   Rotatorische Teilmatrix der geometrischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 06:03
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jg_rot = fivebar1DE2_jacobig_rot_sym_varpar(qJ, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),uint8(0),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1DE2_jacobig_rot_sym_varpar: qJ has to be [2x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'fivebar1DE2_jacobig_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1DE2_jacobig_rot_sym_varpar: pkin has to be [5x1] (double)');
Jg_rot=NaN(3,2);
if link_index == 0
	%% Symbolic Calculation
	% From jacobig_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 05:51:21
	% EndTime: 2020-04-27 05:51:21
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0; 0, 0; 0, 0;];
	Jg_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobig_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 05:51:21
	% EndTime: 2020-04-27 05:51:21
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0; 0, 0; 1, 0;];
	Jg_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobig_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 05:51:57
	% EndTime: 2020-04-27 05:52:07
	% DurationCPUTime: 10.12s
	% Computational Cost: add. (65317->621), mult. (196552->964), div. (464->9), fcn. (23660->6), ass. (0->420)
	t1266 = (pkin(2) ^ 2);
	t1262 = (pkin(3) ^ 2);
	t1268 = pkin(1) ^ 2;
	t1410 = t1262 - t1268;
	t1164 = t1410 * t1266;
	t1497 = 2 * pkin(1);
	t1496 = 2 * pkin(3);
	t1495 = 4 * pkin(3);
	t1225 = sin(qJ(2));
	t1226 = sin(qJ(1));
	t1442 = t1225 * t1226;
	t1153 = pkin(2) * t1442;
	t1316 = pkin(3) * t1153;
	t1148 = -0.2e1 * t1316;
	t1228 = cos(qJ(1));
	t1467 = pkin(2) * t1228;
	t1392 = pkin(1) * t1467;
	t1163 = -0.2e1 * t1392;
	t1408 = (t1266 + t1268);
	t1327 = t1262 + t1408;
	t1158 = pkin(1) - t1467;
	t1227 = cos(qJ(2));
	t1142 = t1158 * t1227;
	t1363 = pkin(3) * t1142;
	t1078 = t1148 + t1163 + t1327 + 0.2e1 * t1363;
	t1494 = -0.2e1 / t1078 ^ 2;
	t1181 = pkin(3) * t1227;
	t1130 = t1158 + t1181;
	t1484 = 0.8e1 * t1130;
	t1493 = 2 * t1262;
	t1492 = 8 * t1266;
	t1195 = t1228 ^ 2;
	t1430 = t1266 * t1195;
	t1391 = pkin(1) * t1181;
	t1161 = 0.2e1 * t1391;
	t1175 = -t1262 / 0.3e1 + t1268;
	t1192 = t1227 ^ 2;
	t1431 = t1262 * t1192;
	t1109 = 0.4e1 / 0.3e1 * t1431 + t1161 + t1175;
	t1255 = pkin(5) ^ 2;
	t1258 = pkin(4) ^ 2;
	t1183 = -t1255 - t1258;
	t1251 = 0.3e1 * t1268;
	t1167 = t1251 + t1183;
	t1452 = t1167 * t1262;
	t1141 = 0.10e2 * t1452;
	t1240 = 7 * t1262;
	t1274 = t1266 ^ 2;
	t1244 = 5 * t1274;
	t1260 = t1262 ^ 2;
	t1273 = pkin(2) * t1266;
	t1263 = t1273 ^ 2;
	t1267 = t1268 ^ 2;
	t1193 = t1195 ^ 2;
	t1446 = t1193 * t1274;
	t1449 = t1183 * t1268;
	t1185 = t1262 + t1268;
	t1178 = t1185 ^ 2;
	t1405 = t1268 - t1255;
	t1326 = t1262 + t1405;
	t1450 = t1178 * (-t1258 + t1326);
	t1491 = 0.7e1 * t1263 + (t1240 + t1167) * t1244 + (t1141 + (21 * t1260) + 0.9e1 * t1267 + 0.6e1 * t1449) * t1266 + t1450 - 0.24e2 * t1109 * t1446;
	t1187 = -(3 * t1262) + t1268;
	t1378 = 0.4e1 * t1431;
	t1490 = t1187 + t1378;
	t1206 = -t1255 / 0.3e1;
	t1489 = t1206 - t1258 / 0.3e1;
	t1254 = t1255 ^ 2;
	t1257 = t1258 ^ 2;
	t1488 = -t1254 / 0.6e1 + t1257 / 0.6e1;
	t1487 = -0.4e1 * pkin(2);
	t1179 = 0.10e2 / 0.3e1 * t1262;
	t1411 = t1260 + t1267;
	t1252 = 0.2e1 * t1268;
	t1414 = t1252 - t1255;
	t1429 = t1268 * t1255;
	t1106 = t1414 * t1262 + t1411 - t1429 - t1488;
	t1288 = t1106 + t1274;
	t1080 = (t1179 + t1414) * t1266 + t1288;
	t1486 = -0.6e1 * t1080;
	t1376 = 0.2e1 * t1430;
	t1409 = -t1266 + t1268;
	t1114 = t1163 + t1376 + t1409;
	t1485 = -0.2e1 * t1114;
	t1191 = t1227 * t1192;
	t1483 = -0.8e1 * t1191;
	t1482 = 0.4e1 * t1192;
	t1481 = -0.8e1 * t1227;
	t1480 = 4 * t1260;
	t1241 = 6 * t1262;
	t1479 = 2 * t1266;
	t1478 = pkin(1) * pkin(3);
	t1477 = -pkin(4) - pkin(5);
	t1476 = -pkin(4) + pkin(5);
	t1220 = t1262 / 0.3e1;
	t1096 = -0.4e1 / 0.9e1 * t1316 + t1268 + t1266 / 0.3e1 + t1220 + t1258 / 0.9e1 - t1255 / 0.9e1;
	t1204 = -t1255 / 0.6e1;
	t1223 = t1266 / 0.2e1;
	t1417 = t1223 + t1268;
	t1291 = -t1316 + t1417;
	t1104 = t1258 / 0.6e1 + t1204 + t1291;
	t1214 = t1258 / 0.3e1;
	t1129 = t1206 + t1214 + t1327;
	t1435 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
	t1277 = pkin(3) * t1262;
	t1447 = t1191 * t1277;
	t1460 = 4 * pkin(1);
	t1051 = t1175 * t1148 + 0.6e1 * t1096 * t1431 + t1129 * t1435 + (t1104 * t1181 + t1447) * t1460;
	t1304 = -0.4e1 * t1316;
	t1208 = -0.2e1 / 0.3e1 * t1255;
	t1213 = 0.2e1 / 0.3e1 * t1258;
	t1330 = t1208 + t1213 + t1252;
	t1329 = t1208 + t1185;
	t1423 = t1185 * (t1213 + t1329) + t1274;
	t1063 = t1129 * t1304 + (t1241 + t1330) * t1266 + t1423;
	t1102 = t1148 + t1129;
	t1165 = t1409 * t1262;
	t1352 = 0.4e1 * t1391;
	t1052 = t1102 * t1352 + t1165 * t1482 + t1063;
	t1176 = t1268 - t1266 / 0.3e1;
	t1115 = t1176 * t1148;
	t1434 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
	t1077 = t1129 * t1434 + t1115;
	t1079 = (t1179 + t1330) * t1266 + t1423;
	t1113 = t1161 + t1490;
	t1246 = -3 * t1266;
	t1188 = t1246 + t1268;
	t1373 = pkin(1) * t1447;
	t1324 = 0.8e1 * t1373;
	t1133 = t1188 * t1324;
	t1151 = t1258 + t1326;
	t1233 = 15 * t1260;
	t1234 = 15 * t1262;
	t1248 = 0.3e1 * t1267;
	t1159 = pkin(1) + t1181;
	t1194 = t1228 * t1195;
	t1445 = t1194 * t1273;
	t1347 = t1159 * t1445;
	t1310 = -0.8e1 * t1347;
	t1412 = -t1255 + t1258;
	t1328 = t1251 + t1412;
	t1351 = 0.6e1 * t1391;
	t1355 = 0.12e2 * t1431;
	t1361 = pkin(3) * t1442;
	t1453 = t1159 * t1228;
	t1037 = t1113 * t1310 + t1133 + t1077 * t1355 + t1063 * t1351 + t1263 + (t1234 + t1328) * t1274 + t1178 * t1151 + (0.12e2 * t1051 * t1195 + t1241 * t1328 + t1252 * t1412 + t1233 + t1248) * t1266 + 0.6e1 * (-t1052 * t1453 - t1079 * t1361) * pkin(2);
	t1242 = 3 * t1262;
	t1170 = t1242 + t1408;
	t1182 = pkin(2) * t1226;
	t1134 = t1170 * t1182;
	t1464 = pkin(3) * t1225;
	t1139 = t1182 - t1464;
	t1367 = t1262 * t1182;
	t1306 = t1192 * t1367;
	t1245 = 3 * t1266;
	t1168 = t1245 + t1185;
	t1451 = t1168 * t1225;
	t1469 = pkin(1) * t1227;
	t1064 = -0.2e1 * t1306 + t1134 + (0.2e1 * t1139 * t1469 - t1451) * pkin(3);
	t1184 = t1493 + t1266;
	t1440 = t1225 * t1277;
	t1131 = t1367 - t1440;
	t1454 = t1131 * t1192;
	t1065 = t1184 * t1464 + 0.2e1 * t1454 + (-t1410 + t1161) * t1182;
	t1095 = -pkin(3) * t1451 + t1134;
	t1166 = pkin(2) * t1480 + 0.8e1 * t1262 * t1273;
	t1343 = t1277 * t1434;
	t1097 = t1166 * t1226 + 0.4e1 * t1225 * t1343;
	t1239 = 5 * t1260;
	t1406 = t1267 + t1274;
	t1235 = 10 * t1262;
	t1415 = t1235 + t1252;
	t1428 = t1268 * t1262;
	t1112 = t1415 * t1266 + t1239 + t1406 + 0.6e1 * t1428;
	t1120 = t1244 + (t1235 + 0.6e1 * t1268) * t1266 + t1178;
	t1309 = 0.8e1 * t1347;
	t1377 = -0.4e1 * t1430;
	t1041 = t1065 * t1377 + t1097 * t1192 + (-0.4e1 * t1095 * t1469 + (t1120 + t1309) * t1225) * pkin(3) + (0.4e1 * t1064 * t1453 + (-t1112 + t1324) * t1226) * pkin(2);
	t1325 = t1266 + t1405;
	t1295 = t1262 + t1325;
	t1145 = -t1258 + t1295;
	t1111 = t1163 + t1145;
	t1092 = t1148 + t1111;
	t1294 = t1192 * t1485 - t1405;
	t1269 = sqrt(0.4e1 * t1164 * t1195 + 0.4e1 * t1145 * t1392 - t1260 - (t1268 + (pkin(2) - t1476) * (pkin(2) + t1476)) * (t1268 + (pkin(2) - t1477) * (pkin(2) + t1477)) + (t1246 + t1258 + t1294) * t1493 + (-t1092 * t1142 + t1111 * t1153) * t1495);
	t1031 = t1037 * t1130 + t1041 * t1269;
	t1475 = 0.1e1 / t1031 / 0.4e1;
	t1474 = -0.1e1 / t1031 ^ 2 / 0.4e1;
	t1473 = 0.4e1 / 0.3e1 * t1266;
	t1472 = -t1269 / 0.4e1;
	t1471 = t1269 / 0.4e1;
	t1470 = pkin(1) * (t1153 - pkin(3));
	t1468 = pkin(1) * t1260;
	t1466 = pkin(3) * t1158;
	t1465 = pkin(3) * t1192;
	t1237 = -0.5e1 * t1255;
	t1238 = 7 * t1260;
	t1421 = t1254 / 0.2e1 - t1257 / 0.2e1;
	t1299 = -0.3e1 * t1429 + t1248 + t1421;
	t1209 = -0.3e1 / 0.2e1 * t1255;
	t1418 = t1209 + t1251;
	t1424 = t1185 * ((t1209 + t1252) * t1262 - 0.3e1 / 0.2e1 * t1429 + t1411 + t1421) + t1263;
	t1060 = (t1240 + t1418) * t1274 + (t1238 + (t1237 + 0.10e2 * t1268) * t1262 + t1299) * t1266 + t1424;
	t1463 = t1060 * pkin(3);
	t1462 = t1175 * pkin(3);
	t1461 = -2 * t1478;
	t1137 = t1268 + t1266 / 0.4e1 + t1262 / 0.4e1 - t1255 / 0.8e1;
	t1416 = 0.4e1 / 0.7e1 * t1268 - t1255 / 0.7e1;
	t1057 = -0.32e2 / 0.21e2 * t1137 * t1316 + t1274 / 0.7e1 + (0.16e2 / 0.21e2 * t1262 + t1416) * t1266 + t1260 / 0.7e1 + t1416 * t1262 + t1267 - 0.3e1 / 0.7e1 * t1429 + t1254 / 0.42e2 - t1257 / 0.42e2;
	t1205 = -t1255 / 0.4e1;
	t1138 = t1205 + t1220 + t1417;
	t1219 = 0.4e1 / 0.3e1 * t1262;
	t1061 = -0.8e1 / 0.3e1 * t1138 * t1316 + t1274 / 0.3e1 + (t1219 + t1206) * t1266 + t1267 - t1260 / 0.3e1 + (t1473 + 0.2e1 / 0.3e1 * t1262 + t1208) * t1268 + t1254 / 0.18e2 - t1257 / 0.18e2;
	t1221 = t1262 / 0.2e1;
	t1108 = -0.2e1 / 0.3e1 * t1316 + t1268 + t1221 + t1205;
	t1250 = 0.4e1 * t1268;
	t1171 = (t1250 + t1255) * t1262;
	t1177 = t1268 - 0.2e1 / 0.3e1 * t1266;
	t1207 = -t1255 / 0.2e1;
	t1150 = t1207 + t1327;
	t1292 = t1150 * t1304;
	t1357 = 0.16e2 * t1447;
	t1190 = t1192 ^ 2;
	t1432 = t1260 * t1190;
	t1382 = 0.8e1 * t1432;
	t1040 = t1177 * t1382 + 0.14e2 * t1057 * t1431 + t1175 * t1292 - t1410 * t1274 + (t1171 - 0.10e2 / 0.3e1 * t1260 + 0.2e1 * t1267 - t1429) * t1266 + t1106 * t1435 + (0.6e1 * t1061 * t1181 + t1108 * t1357) * pkin(1);
	t1050 = t1316 * t1486 + (t1233 + (-0.9e1 * t1255 + 0.18e2 * t1268) * t1262 + t1299) * t1266 + (t1234 + t1418) * t1274 + t1424;
	t1066 = t1292 + (t1241 + t1414) * t1266 + t1288;
	t1083 = t1150 * t1434 + t1115;
	t1042 = t1066 * t1351 + t1083 * t1355 + t1050 + t1133;
	t1236 = -0.2e1 * t1255;
	t1249 = 0.8e1 * t1268;
	t1320 = t1440 * t1487;
	t1101 = t1226 * t1320 + t1480 + ((4 * t1266) + t1236 + t1249) * t1262;
	t1107 = t1205 - t1262 + t1291;
	t1387 = 0.8e1 * t1447;
	t1395 = 0.4e1 * t1181;
	t1053 = t1148 * t1435 + t1101 * t1192 + t1150 * t1187 + (t1107 * t1395 + t1387) * pkin(1);
	t1407 = t1267 - t1260;
	t1055 = t1176 * t1292 - t1263 + (-t1179 - t1405) * t1274 + (t1171 + t1407 + t1488) * t1266 + t1268 * t1106;
	t1270 = pkin(1) * t1268;
	t1157 = -(12 * pkin(1) * t1277) + t1270 * t1495;
	t1174 = -(8 * t1260) + 0.12e2 * t1428;
	t1313 = pkin(1) * t1357;
	t1071 = t1157 * t1227 + t1174 * t1192 + t1313 + t1382 + t1411 - 0.6e1 * t1428;
	t1086 = t1148 * t1434 + t1150 * t1188;
	t1143 = (-0.6e1 * t1266 * t1268 + t1406) * t1260;
	t1180 = -0.30e2 * t1255 + 0.60e2 * t1268;
	t1413 = t1254 - t1257;
	t1298 = -0.6e1 * t1429 + 0.6e1 * t1267 + t1413;
	t1028 = -0.32e2 * t1053 * t1347 + 0.16e2 * t1143 * t1190 + 0.24e2 * t1055 * t1431 + (t1236 + t1250 + (28 * t1262)) * t1263 + t1151 * t1450 + (0.24e2 * t1040 * t1195 + t1180 * t1260 + t1241 * t1298 + t1252 * t1413 - 0.6e1 * t1267 * t1255 + 0.4e1 * t1270 ^ 2 + (28 * t1277 ^ 2)) * t1266 + 0.8e1 * (-t1042 * t1453 - t1060 * t1361) * pkin(2) + (0.8e1 * t1050 * t1181 + 0.32e2 * t1086 * t1447) * pkin(1) + (0.16e2 * t1071 * t1193 + t1180 * t1262 + (70 * t1260) + t1274 + t1298) * t1274;
	t1420 = t1204 - t1258 / 0.6e1;
	t1333 = t1268 + t1420;
	t1122 = t1473 + t1221 + t1333;
	t1297 = t1223 + t1333;
	t1123 = t1219 + t1297;
	t1072 = -t1122 * t1464 + t1123 * t1182;
	t1335 = 0.2e1 / 0.3e1 * t1255 + t1213 + t1250;
	t1336 = 0.4e1 / 0.3e1 * t1255 + 0.4e1 / 0.3e1 * t1258 - 0.2e1 * t1268;
	t1349 = 0.20e2 / 0.3e1 * t1262;
	t1081 = -t1274 + (t1335 - t1349) * t1266 - (3 * t1260) + t1336 * t1262 + t1267;
	t1125 = t1262 + t1297;
	t1169 = t1479 - t1410;
	t1359 = -t1464 / 0.2e1;
	t1084 = t1125 * t1182 + t1169 * t1359;
	t1332 = t1268 + t1489;
	t1334 = t1255 / 0.3e1 + t1214 + t1252;
	t1300 = -0.8e1 / 0.3e1 * t1432 - t1164 - 0.5e1 / 0.3e1 * t1260 + t1334 * t1262 + t1268 * t1332;
	t1448 = t1191 * t1260;
	t1043 = t1072 * t1378 + t1081 * t1359 + t1300 * t1182 + (t1084 * t1181 - t1225 * t1448) * t1460;
	t1218 = -0.2e1 / 0.3e1 * t1258;
	t1419 = t1208 + t1218;
	t1073 = t1274 + (t1415 + t1419) * t1266 + t1239 + 0.2e1 * t1452 + t1268 * (t1268 + t1419);
	t1085 = t1244 + ((5 * t1262) + t1167) * t1479 + t1185 * (t1218 + t1329);
	t1054 = t1073 * t1182 - t1085 * t1464;
	t1296 = t1262 + t1332;
	t1127 = t1245 + t1296;
	t1128 = t1170 + t1489;
	t1074 = -t1127 * t1464 + t1128 * t1182;
	t1136 = t1221 + t1266 + t1420;
	t1403 = 0.2e1 * t1182;
	t1089 = t1136 * t1403 + t1434 * t1464;
	t1366 = t1277 * t1182;
	t1380 = -0.4e1 * t1431;
	t1044 = t1089 * t1380 + (t1074 * t1395 + t1366 * t1483) * pkin(1) + t1054;
	t1082 = -(3 * t1274) + (t1336 - t1349) * t1266 + t1335 * t1262 + t1407;
	t1090 = -0.5e1 / 0.3e1 * t1274 + (-t1262 + t1334) * t1266 + t1268 * t1296;
	t1398 = -0.2e1 * t1464;
	t1056 = t1082 * t1182 + t1090 * t1398;
	t1331 = t1207 - t1258 / 0.2e1 + t1268;
	t1124 = 0.3e1 / 0.2e1 * t1266 + t1242 + t1331;
	t1140 = t1182 + 0.2e1 * t1464;
	t1059 = t1187 * t1182 + 0.4e1 * t1454 + (t1124 * t1225 + t1140 * t1469) * t1496;
	t1126 = t1245 + 0.3e1 / 0.2e1 * t1262 + t1331;
	t1088 = t1126 * t1182 + t1188 * t1464 / 0.2e1;
	t1293 = 0.24e2 * t1176 * t1432 - t1263 - ((21 * t1262) + t1167) * t1274 - (t1141 + t1248 + (35 * t1260) + 0.2e1 * t1449) * t1266 - (t1238 + (t1237 + t1249 - 0.5e1 * t1258) * t1262 + t1268 * (-t1258 + t1405)) * t1185;
	t1354 = -0.12e2 * t1430;
	t1381 = -0.6e1 * t1431;
	t1032 = t1088 * t1313 + t1059 * t1309 + t1043 * t1354 + t1056 * t1381 + (-0.6e1 * t1054 * t1469 + t1225 * t1491) * pkin(3) + (0.6e1 * t1044 * t1453 + t1226 * t1293) * pkin(2);
	t1025 = t1028 * t1130 + t1032 * t1269;
	t1110 = t1163 + t1258 + t1295;
	t1364 = t1114 * t1181;
	t1067 = t1110 * t1158 + 0.2e1 * t1364;
	t1070 = t1110 * t1227 + (t1482 - 0.2e1) * t1466;
	t1422 = -t1153 + t1142;
	t1103 = pkin(3) + t1422;
	t1039 = t1067 * t1225 + t1070 * t1182 + t1103 * t1269;
	t1144 = t1242 + t1258 + t1325;
	t1093 = t1144 + t1163 + t1304;
	t1439 = t1227 * t1226;
	t1105 = pkin(2) * t1439 + t1158 * t1225;
	t1456 = t1105 * t1269;
	t1038 = -t1093 * t1142 + t1456 + (t1144 * t1442 - 0.2e1 * t1228 * t1470) * pkin(2) + (-t1245 - t1258 - t1262 + t1294 + t1376) * pkin(3);
	t1341 = t1038 * t1475;
	t1289 = t1025 * t1341 + t1039 * t1472;
	t1075 = 0.1e1 / t1078;
	t1433 = 0.1e1 / pkin(5) / pkin(4) ^ 2;
	t1348 = t1075 * t1433;
	t1023 = t1289 * t1348;
	t1438 = t1227 * t1228;
	t1118 = -t1438 - t1442;
	t1022 = t1023 * t1118;
	t1340 = t1039 * t1475;
	t1290 = t1025 * t1340 + t1038 * t1471;
	t1024 = t1290 * t1348;
	t1441 = t1225 * t1228;
	t1119 = -t1439 + t1441;
	t1018 = -t1024 * t1119 - t1022;
	t1016 = 0.1e1 / t1018 ^ 2;
	t1021 = t1023 * t1119;
	t1017 = -t1024 * t1118 + t1021;
	t1459 = t1016 * t1017;
	t1047 = 0.1e1 / t1269;
	t1173 = pkin(1) * t1182;
	t1162 = 0.2e1 * t1173;
	t1436 = t1228 * t1266;
	t1383 = -0.4e1 * t1436;
	t1308 = t1226 * t1383;
	t1117 = t1162 + t1308;
	t1368 = pkin(2) * t1441;
	t1315 = pkin(3) * t1368;
	t1318 = -0.8e1 * t1363;
	t1397 = -0.4e1 * t1181;
	t1458 = (t1117 * t1380 + (t1173 - t1315) * t1318 + 0.4e1 * t1111 * t1315 + (pkin(2) * t1092 * t1397 - 0.8e1 * t1164 * t1228 + (t1145 * t1487 + t1361 * t1492) * pkin(1)) * t1226) * t1047;
	t1379 = 0.2e1 * t1431;
	t1437 = t1227 * t1262;
	t1457 = t1047 * ((t1092 * t1466 + 0.2e1 * t1114 * t1437) * t1225 + (t1111 * t1181 + t1158 * t1379) * t1182);
	t1427 = t1277 * t1192;
	t1372 = pkin(1) * t1427;
	t1311 = -0.12e2 * t1372;
	t1455 = t1130 * t1225 * t1311;
	t1444 = t1194 * t1274;
	t1443 = t1195 * t1273;
	t1160 = pkin(1) * t1398;
	t1189 = t1225 ^ 2;
	t1301 = t1191 * t1343;
	t1350 = 0.32e2 / 0.3e1 * t1260;
	t1302 = t1191 * t1350;
	t1303 = 0.64e2 / 0.3e1 * t1137 * t1277;
	t1307 = t1434 * t1468;
	t1312 = -0.48e2 * t1372;
	t1314 = -0.16e2 * pkin(1) * t1138 * t1262;
	t1319 = -0.4e1 * t1150 * t1462;
	t1370 = pkin(1) * t1431;
	t1321 = 0.4e1 * t1370;
	t1322 = -0.2e1 * t1370;
	t1323 = -0.4e1 * t1370;
	t1342 = t1225 * t1437;
	t1344 = t1176 * t1447;
	t1356 = -0.64e2 * t1445;
	t1358 = -0.32e2 * t1448;
	t1360 = pkin(3) * t1435;
	t1362 = pkin(3) * t1445;
	t1369 = t1130 * t1182;
	t1374 = pkin(1) * t1432;
	t1375 = 0.3e1 * t1430;
	t1385 = 0.8e1 * t1445;
	t1386 = -0.8e1 * t1445;
	t1388 = -0.2e1 * t1447;
	t1389 = -0.4e1 * t1447;
	t1390 = 0.2e1 * t1457;
	t1396 = 0.2e1 * t1181;
	t1400 = 0.6e1 * t1467;
	t1402 = -0.6e1 * t1467;
	t1019 = ((0.12e2 * t1189 * t1192 * t1468 + t1122 * t1389 + t1169 * t1322 - 0.4e1 * t1374) * t1354 + 0.8e1 * t1188 * t1374 + 0.12e2 * t1090 * t1447 + 0.6e1 * t1085 * t1370 + (-t1081 * t1354 / 0.2e1 + t1491) * t1181) * t1269 + t1032 * t1390 + (((t1124 * t1396 + t1321 + t1389) * t1385 + (-t1085 * t1181 + t1127 * t1323 - 0.4e1 * t1301) * t1400) * t1269 + t1356 * t1455) * t1159 + (0.24e2 * (-pkin(1) * t1190 * t1350 - t1191 * t1303 + t1192 * t1314 + t1227 * t1319) * t1430 - 0.64e2 * t1190 * t1307 - 0.96e2 * t1150 * t1344 - 0.48e2 * t1080 * t1370 + t1463 * t1481 + ((-t1227 * t1360 + t1322 + t1388) * t1356 - 0.48e2 * (-t1080 * t1181 + t1150 * t1323 - 0.4e1 * t1344) * t1467) * t1159) * t1369 + (-pkin(3) * t1028 + (0.2e1 * (-0.2e1 * t1174 * t1227 - t1157 + t1312 + t1358) * t1446 + 0.4e1 * t1053 * t1362 + (-t1101 * t1227 + t1107 * t1461) * t1310 + (-0.28e2 * t1057 * t1437 - 0.6e1 * t1061 * t1478 + t1108 * t1312 + t1177 * t1358) * t1375 + pkin(3) * t1042 * t1467 + t1159 * (-t1066 * t1478 - 0.4e1 * t1083 * t1437 - 0.4e1 * t1188 * t1372) * t1402 + t1143 * t1483 + t1086 * t1311 - 0.6e1 * t1055 * t1437 - t1050 * t1478) * t1484 + ((-0.8e1 * t1072 * t1437 + t1182 * t1302) * t1354 - 0.96e2 * t1176 * t1448 * t1182 + t1088 * t1312 + 0.12e2 * t1056 * t1437 + (t1044 * t1402 + t1059 * t1386 + (-0.24e2 * t1160 + 0.64e2 * t1342) * t1446 + (0.48e2 * t1084 * t1430 + 0.6e1 * t1054) * pkin(1)) * pkin(3) + ((t1131 * t1481 + t1140 * t1461) * t1385 + (0.24e2 * pkin(1) * t1192 * t1366 - 0.4e1 * t1074 * t1478 + 0.8e1 * t1089 * t1437) * t1400) * t1159) * t1269) * t1225;
	t1353 = 0.12e2 * t1430;
	t1384 = t1226 * t1492;
	t1393 = -0.2e1 * t1462;
	t1394 = t1064 * t1487;
	t1399 = -0.4e1 * pkin(3) * t1129;
	t1401 = 0.4e1 * t1467;
	t1026 = (t1262 * t1189 * t1386 + (t1181 * t1184 + t1388) * t1377 + 0.4e1 * t1301 + t1168 * t1321 + t1120 * t1181) * t1269 + t1041 * t1390 + t1353 * t1455 + ((-0.8e1 / 0.3e1 * t1447 + t1323 + t1227 * t1393) * t1353 - 0.24e2 * t1344 - 0.24e2 * t1129 * t1370 - 0.6e1 * t1079 * t1181) * t1369 + (0.24e2 * (-t1130 * t1188 - t1182 * t1269) * t1372 + ((0.16e2 * t1131 * t1430 - 0.2e1 * t1097) * t1269 + t1130 * (-0.144e3 * t1096 * t1430 - 0.24e2 * t1077) * t1262) * t1227 + (t1228 * t1269 * t1394 - t1037 + t1130 * (t1052 * t1400 + t1113 * t1385) + ((pkin(2) * t1195 * t1384 + 0.4e1 * t1095) * t1269 + t1130 * (-0.48e2 * t1104 * t1430 - 0.6e1 * t1063)) * pkin(1)) * pkin(3)) * t1225 + ((0.8e1 * t1227 * t1362 + ((-pkin(3) * t1168 + 0.4e1 * t1153 * t1262) * t1227 + (-t1139 * t1464 - t1431) * t1497) * t1401) * t1269 + t1130 * ((t1160 - 0.8e1 * t1342) * t1386 + ((-0.8e1 * t1165 * t1225 + t1182 * t1399) * t1227 + (-0.4e1 * t1102 * t1464 - 0.8e1 * t1306) * pkin(1)) * t1402)) * t1159;
	t1035 = -t1456 + t1103 * t1390 + pkin(3) * t1189 * t1485 + t1067 * t1227 + (-t1110 + t1318) * t1153;
	t1404 = -2 * pkin(1) * t1266;
	t1036 = t1422 * t1269 + t1105 * t1390 + (t1093 * t1158 + 0.4e1 * t1364) * t1225 + (t1404 * t1438 + (t1144 * t1227 + 0.4e1 * t1158 * t1465) * pkin(2)) * t1226;
	t1098 = t1105 * pkin(3);
	t1286 = t1289 * t1494;
	t1339 = t1038 * t1474;
	t1426 = (-t1098 * t1286 + (t1019 * t1341 + t1035 * t1472 - t1039 * t1457 / 0.2e1 + (t1026 * t1339 + t1036 * t1475) * t1025) * t1075) * t1433 - t1024;
	t1365 = pkin(2) * t1438;
	t1317 = pkin(1) * t1365;
	t1121 = -0.4e1 * t1262 * t1225 * t1317;
	t1135 = t1317 * t1496;
	t1337 = t1458 / 0.2e1;
	t1345 = t1176 * t1427;
	t1346 = t1159 * t1443;
	t1371 = pkin(1) * t1437;
	t1020 = t1032 * t1337 + (-0.32e2 * t1121 * t1130 + 0.8e1 * t1135 * t1269) * t1347 + (0.24e2 * (0.4e1 * t1109 * t1444 * t1464 + t1043 * t1436 - t1059 * t1346) * t1269 + (-0.6e1 * t1040 * t1436 + 0.12e2 * t1053 * t1346 - 0.8e1 * t1071 * t1444) * t1484) * t1226 + ((t1028 + (t1042 * t1484 - 0.6e1 * t1044 * t1269) * t1159) * t1226 + (((t1123 * t1378 + t1125 * t1352 + t1300) * t1354 + t1126 * t1313 + t1082 * t1381 - 0.6e1 * t1073 * t1391 + (t1490 * t1385 + (t1128 * t1352 - 0.8e1 * t1136 * t1431 + t1073 - 0.8e1 * t1373) * t1400) * t1159 + t1293) * t1269 + ((-pkin(1) * t1302 - t1192 * t1303 + t1227 * t1314 + t1319) * t1375 + t1307 * t1483 - 0.12e2 * t1150 * t1345 + t1371 * t1486 - t1463 + (-0.4e1 * (-(2 * t1360) - 0.4e1 * t1427) * t1445 - (pkin(3) * t1486 - 0.24e2 * t1150 * t1371 - 0.24e2 * t1345) * t1467) * t1159) * t1225 * t1484) * t1228) * pkin(2);
	t1027 = (t1135 * t1377 + (t1065 * t1384 + t1166 * t1192 + ((-t1410 + t1379) * t1377 - t1112 + (t1170 * t1397 + t1387) * pkin(1)) * pkin(2)) * t1228 + ((t1135 + (t1170 - 0.2e1 * t1431) * t1467) * t1401 + (-0.24e2 * t1443 * t1464 + t1394) * t1226) * t1159) * t1269 + t1041 * t1337 + t1037 * t1182 + 0.6e1 * t1130 * (0.4e1 * t1113 * t1226 * t1346 + (t1121 + (-0.8e1 / 0.3e1 * t1427 + t1393) * t1368) * t1376 + t1051 * t1308 + t1176 * t1228 * t1192 * t1320 + t1129 * t1121 - t1079 * t1315 + (-(-0.8e1 * t1371 + t1399) * t1225 * t1430 + t1052 * t1182) * t1159);
	t1033 = t1103 * t1337 + t1117 * t1225 * t1396 + ((-t1225 * t1269 + t1070) * t1228 + (t1227 * t1269 + (t1158 * t1497 + t1110) * t1225 + (-pkin(3) + 0.2e1 * t1465 + t1469) * t1403) * t1226) * pkin(2);
	t1034 = (t1153 + t1365) * t1269 + t1105 * t1337 - 0.2e1 * t1117 * t1465 - (t1162 - 0.4e1 * t1315) * t1142 + t1195 * t1225 * t1404 + t1144 * t1368 + (pkin(3) * t1383 + (-t1093 * t1227 + 0.2e1 * t1470) * pkin(2)) * t1226;
	t1094 = -pkin(2) * pkin(3) * t1119 + t1173;
	t1425 = (t1094 * t1286 + (t1020 * t1341 + t1033 * t1472 - t1039 * t1458 / 0.8e1 + (t1027 * t1339 + t1034 * t1475) * t1025) * t1075) * t1433 + t1024;
	t1338 = t1039 * t1474;
	t1287 = t1290 * t1494;
	t1015 = 0.1e1 / t1018;
	t1014 = 0.1e1 / (t1016 * t1017 ^ 2 + 0.1e1);
	t1013 = (t1094 * t1287 + (t1034 * t1471 + t1038 * t1458 / 0.8e1 + t1020 * t1340 + (t1027 * t1338 + t1033 * t1475) * t1025) * t1075) * t1433;
	t1011 = (-t1098 * t1287 + (t1036 * t1471 + t1038 * t1457 / 0.2e1 + t1019 * t1340 + (t1026 * t1338 + t1035 * t1475) * t1025) * t1075) * t1433;
	t1 = [0, 0; 0, 0; 0.1e1 + ((t1425 * t1119 + (-t1013 + t1023) * t1118) * t1015 - (-t1013 * t1119 - t1118 * t1425 + t1021) * t1459) * t1014, ((-t1011 * t1118 + t1119 * t1426 - t1022) * t1015 - ((-t1011 - t1023) * t1119 - t1426 * t1118) * t1459) * t1014;];
	Jg_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobig_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 05:51:21
	% EndTime: 2020-04-27 05:51:21
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0; 0, 0; 0, 1;];
	Jg_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobig_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2020-04-27 05:51:24
	% EndTime: 2020-04-27 05:51:25
	% DurationCPUTime: 0.52s
	% Computational Cost: add. (1788->105), mult. (3903->181), div. (28->6), fcn. (958->6), ass. (0->81)
	t299 = -4 * pkin(2);
	t254 = pkin(2) ^ 2;
	t248 = cos(qJ(1));
	t290 = pkin(2) * t248;
	t273 = pkin(1) * t290;
	t240 = -0.2e1 * t273;
	t255 = pkin(1) ^ 2;
	t276 = t240 + t255;
	t244 = t248 ^ 2;
	t296 = 0.2e1 * t244;
	t230 = t254 * t296 - t254 + t276;
	t298 = -0.2e1 * t230;
	t238 = pkin(1) - t290;
	t297 = 0.2e1 * t238;
	t295 = (-pkin(4) - pkin(5));
	t294 = (-pkin(4) + pkin(5));
	t245 = sin(qJ(2));
	t246 = sin(qJ(1));
	t281 = t245 * t246;
	t237 = pkin(2) * t281;
	t264 = pkin(3) * t237;
	t236 = -0.2e1 * t264;
	t253 = pkin(3) ^ 2;
	t247 = cos(qJ(2));
	t232 = t238 * t247;
	t268 = pkin(3) * t232;
	t221 = t236 + t253 + t254 + 0.2e1 * t268 + t276;
	t219 = 0.1e1 / t221;
	t293 = t219 / 0.2e1;
	t292 = pkin(1) * (t237 - pkin(3));
	t291 = pkin(2) * t246;
	t289 = pkin(3) * t238;
	t243 = t247 ^ 2;
	t288 = pkin(3) * t243;
	t287 = pkin(3) * t247;
	t220 = 0.1e1 / t221 ^ 2;
	t242 = pkin(1) * t291;
	t279 = t246 * t247;
	t280 = t245 * t248;
	t286 = t220 * (t242 + (t279 - t280) * pkin(3) * pkin(2));
	t227 = pkin(2) * t279 + t245 * t238;
	t285 = t220 * t227 * pkin(3);
	t251 = pkin(4) ^ 2;
	t275 = -pkin(5) ^ 2 + t255;
	t267 = t254 + t275;
	t261 = t253 + t267;
	t234 = -t251 + t261;
	t229 = t240 + t234;
	t222 = t236 + t229;
	t241 = (t253 - t255) * t254;
	t260 = t243 * t298 - t275;
	t256 = sqrt(0.4e1 * t241 * t244 + 0.4e1 * t234 * t273 - (t255 + ((pkin(2) - t294) * (pkin(2) + t294))) * (t255 + ((pkin(2) - t295) * (pkin(2) + t295))) + 0.4e1 * (-t222 * t232 + t229 * t237) * pkin(3) + (0.2e1 * t251 - (6 * t254) + 0.2e1 * t260 - t253) * t253);
	t284 = t227 * t256;
	t283 = t230 * t247;
	t282 = t243 * t253;
	t278 = t247 * t248;
	t277 = -t237 + t232;
	t274 = -0.2e1 * pkin(1) * t254;
	t214 = 0.1e1 / t256;
	t272 = 0.2e1 * t214 * ((t222 * t289 + 0.2e1 * t253 * t283) * t245 + (t229 * t287 + t282 * t297) * t291);
	t271 = -0.4e1 * t248 * t254;
	t270 = pkin(2) * t280;
	t269 = pkin(3) * t283;
	t239 = 0.2e1 * t242;
	t231 = t246 * t271 + t239;
	t263 = pkin(3) * t270;
	t265 = -0.8e1 * t268;
	t266 = (-0.4e1 * t231 * t282 + (t242 - t263) * t265 + 0.4e1 * t229 * t263 + (t222 * t287 * t299 - 0.8e1 * t241 * t248 + (0.8e1 * pkin(3) * t254 * t281 + t234 * t299) * pkin(1)) * t246) * t214 / 0.2e1;
	t233 = 0.3e1 * t253 + t251 + t267;
	t223 = t233 + t240 - 0.4e1 * t264;
	t210 = -t223 * t232 + t284 + (t233 * t281 - 0.2e1 * t248 * t292) * pkin(2) + (-t251 - t253 + (t296 - 0.3e1) * t254 + t260) * pkin(3);
	t209 = 0.1e1 / t210 ^ 2;
	t228 = t240 + t251 + t261;
	t217 = t228 * t238 + 0.2e1 * t269;
	t218 = t228 * t247 + (0.4e1 * t243 - 0.2e1) * t289;
	t226 = pkin(3) + t277;
	t211 = t217 * t245 + t218 * t291 + t226 * t256;
	t262 = 0.1e1 / (t209 * t211 ^ 2 + 0.1e1) * t221;
	t259 = 0.1e1 / t210 * t262;
	t258 = t209 * t211 * t262;
	t1 = [0, 0; 0, 0; 0.2e1 * ((0.2e1 * t231 * t245 * t287 + t226 * t266) * t293 - t211 * t286 + ((-t245 * t256 + t218) * t248 * t293 + (t247 * t256 / 0.2e1 + (pkin(1) * t297 + t228) * t245 / 0.2e1 + (pkin(1) * t247 - pkin(3) + 0.2e1 * t288) * t291) * t219 * t246) * pkin(2)) * t259 - 0.2e1 * (((pkin(2) * t278 + t237) * t256 + t227 * t266 - 0.2e1 * t231 * t288 - (t239 - 0.4e1 * t263) * t232 + t244 * t245 * t274 + t233 * t270 + (pkin(3) * t271 + (-t223 * t247 + 0.2e1 * t292) * pkin(2)) * t246) * t293 - t210 * t286) * t258, 0.1e1 + 0.2e1 * ((-t284 + t226 * t272 + t217 * t247 + ((-t228 + t265) * t291 + pkin(3) * t245 * t298) * t245) * t293 + t211 * t285) * t259 - 0.2e1 * ((t277 * t256 + t227 * t272 + (t238 * t223 + 0.4e1 * t269) * t245 + (t274 * t278 + (t233 * t247 + 0.4e1 * t238 * t288) * pkin(2)) * t246) * t293 + t210 * t285) * t258;];
	Jg_rot = t1;
end