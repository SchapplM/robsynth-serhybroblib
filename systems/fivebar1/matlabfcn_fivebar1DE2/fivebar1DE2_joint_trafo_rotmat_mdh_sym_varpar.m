% Calculate homogenous joint transformation matrices for
% fivebar1DE2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [2x1]
%   Generalized joint coordinates (joint angles)
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[AB,AE,BC,CD,ED]';
% 
% Output:
% T_mdh [4x4x6]
%   homogenous transformation matrices for joint transformation (MDH)
%   Transformation matrices from one joint to the next (not: from base to joints)

% Quelle: HybrDyn-Toolbox
% Datum: 2020-04-27 06:03
% Revision: 970157063c8b7bcb25458a457551a083b21abdbd (2020-04-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function T_mdh = fivebar1DE2_joint_trafo_rotmat_mdh_sym_varpar(qJ, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(2,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [2 1]), ...
  'fivebar1DE2_joint_trafo_rotmat_mdh_sym_varpar: qJ has to be [2x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'fivebar1DE2_joint_trafo_rotmat_mdh_sym_varpar: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From joint_transformation_mdh_rotmat_matlab.m
% OptimizationMode: 2
% StartTime: 2020-04-27 04:25:19
% EndTime: 2020-04-27 04:25:23
% DurationCPUTime: 4.14s
% Computational Cost: add. (16969->390), mult. (50400->465), div. (148->5), fcn. (5856->15), ass. (0->210)
t546 = 4 * pkin(3);
t404 = pkin(5) ^ 2;
t355 = -t404 / 0.3e1;
t407 = pkin(4) ^ 2;
t545 = t355 - t407 / 0.3e1;
t403 = t404 ^ 2;
t406 = t407 ^ 2;
t544 = -t403 / 0.6e1 + t406 / 0.6e1;
t376 = cos(qJ(2));
t341 = t376 ^ 2;
t543 = -0.2e1 * t341;
t412 = pkin(3) ^ 2;
t410 = t412 ^ 2;
t542 = 4 * t410;
t541 = 2 * t412;
t390 = 6 * t412;
t416 = (pkin(2) ^ 2);
t540 = 2 * t416;
t418 = (pkin(1) ^ 2);
t401 = 2 * t418;
t423 = t416 ^ 2;
t393 = 5 * t423;
t539 = -pkin(4) - pkin(5);
t538 = -pkin(4) + pkin(5);
t537 = 0.1e1 / pkin(4) / 0.2e1;
t375 = sin(qJ(1));
t333 = pkin(2) * t375;
t377 = cos(qJ(1));
t536 = pkin(2) * t377;
t374 = sin(qJ(2));
t535 = pkin(3) * t374;
t332 = pkin(3) * t376;
t493 = pkin(1) * t536;
t322 = -0.2e1 * t493;
t344 = t377 ^ 2;
t526 = t344 * t416;
t490 = 0.2e1 * t526;
t500 = -t416 + t418;
t302 = t322 + t490 + t500;
t525 = t374 * t375;
t485 = pkin(2) * t525;
t456 = pkin(3) * t485;
t314 = -0.2e1 * t456;
t395 = -3 * t416;
t499 = t416 + t418;
t462 = -t404 + t499;
t445 = t412 + t462;
t438 = -t407 + t445;
t437 = t322 + t438;
t503 = t404 - t418;
t465 = t407 + t503;
t520 = t412 * t341;
t488 = -0.4e1 * t520;
t501 = t412 - t418;
t319 = pkin(1) - t536;
t532 = t319 * t376;
t292 = sqrt(t302 * t488 + 0.4e1 * t501 * t526 + 0.4e1 * t438 * t493 - t410 + (t395 + t465) * t541 - (t418 + (pkin(2) - t538) * (pkin(2) + t538)) * (t418 + (pkin(2) - t539) * (pkin(2) + t539)) + (-(t314 + t437) * t532 + t437 * t485) * t546);
t417 = t418 ^ 2;
t502 = t410 + t417;
t507 = t401 - t404;
t519 = t418 * t404;
t300 = t507 * t412 + t502 - t519 - t544;
t328 = t418 - t416 / 0.3e1;
t303 = t328 * t314;
t363 = t407 / 0.3e1;
t464 = t412 + t499;
t307 = t355 + t363 + t464;
t308 = t319 + t332;
t338 = t395 + t418;
t340 = t376 * t341;
t426 = pkin(3) * t412;
t517 = t426 * t340;
t486 = pkin(1) * t517;
t457 = 0.8e1 * t486;
t311 = t338 * t457;
t400 = 3 * t418;
t504 = t404 + t407;
t323 = t400 - t504;
t531 = t323 * t412;
t313 = 0.10e2 * t531;
t356 = -t404 / 0.2e1;
t316 = t356 + t464;
t335 = t412 + t418;
t463 = -t404 + t335;
t317 = t407 + t463;
t320 = pkin(1) + t332;
t492 = pkin(1) * t332;
t321 = 0.2e1 * t492;
t399 = 4 * t418;
t325 = (t399 + t404) * t412;
t327 = -t412 / 0.3e1 + t418;
t329 = t335 ^ 2;
t330 = 0.10e2 / 0.3e1 * t412;
t331 = -0.30e2 * t404 + (60 * t418);
t337 = -3 * t412 + t418;
t353 = -t404 / 0.6e1;
t354 = -t404 / 0.4e1;
t368 = 0.4e1 / 0.3e1 * t412;
t369 = t412 / 0.3e1;
t370 = t412 / 0.2e1;
t382 = 15 * t410;
t383 = 15 * t412;
t384 = 10 * t412;
t385 = -0.2e1 * t404;
t386 = -0.5e1 * t404;
t387 = 7 * t410;
t388 = 5 * t410;
t389 = 7 * t412;
t391 = 3 * t412;
t394 = 3 * t416;
t397 = 3 * t417;
t398 = 8 * t418;
t422 = pkin(2) * t416;
t413 = t422 ^ 2;
t419 = pkin(1) * t418;
t435 = t300 + t423;
t372 = t416 / 0.2e1;
t510 = t372 + t418;
t436 = -t456 + t510;
t514 = t403 / 0.2e1 - t406 / 0.2e1;
t449 = -0.3e1 * t519 + t397 + t514;
t452 = -0.6e1 * t456;
t358 = -0.3e1 / 0.2e1 * t404;
t511 = t358 + t400;
t516 = t335 * ((t358 + t401) * t412 - 0.3e1 / 0.2e1 * t519 + t502 + t514) + t413;
t440 = ((t330 + t507) * t416 + t435) * t452 + (t382 + (-0.9e1 * t404 + (18 * t418)) * t412 + t449) * t416 + (t383 + t511) * t423 + t516;
t451 = -0.4e1 * t456;
t441 = t316 * t451;
t467 = t391 + t499;
t442 = -(t394 + t335) * t535 + t467 * t333;
t367 = -0.2e1 / 0.3e1 * t407;
t357 = -0.2e1 / 0.3e1 * t404;
t468 = t357 + t335;
t508 = t384 + t401;
t512 = t357 + t367;
t443 = -(t393 + ((5 * t412) + t323) * t540 + t335 * (t367 + t468)) * t535 + (t423 + (t508 + t512) * t416 + t388 + 0.2e1 * t531 + t418 * (t418 + t512)) * t333;
t471 = t418 + t545;
t446 = t412 + t471;
t513 = t353 - t407 / 0.6e1;
t472 = t418 + t513;
t447 = t372 + t472;
t506 = t403 - t406;
t448 = -0.6e1 * t519 + (6 * t417) + t506;
t362 = 0.2e1 / 0.3e1 * t407;
t469 = t357 + t362 + t401;
t515 = t335 * (t362 + t468) + t423;
t450 = t307 * t451 + (t390 + t469) * t416 + t515;
t483 = t426 * t333;
t453 = t340 * t483;
t521 = t410 * t341 ^ 2;
t454 = t521 * t333;
t481 = 0.16e2 * t517;
t455 = pkin(1) * t481;
t458 = 0.20e2 / 0.3e1 * t412;
t505 = -t404 + t407;
t466 = t400 + t505;
t470 = t356 - t407 / 0.2e1 + t418;
t473 = t404 / 0.3e1 + t363 + t401;
t474 = 0.2e1 / 0.3e1 * t404 + t362 + t399;
t475 = 0.4e1 / 0.3e1 * t404 + 0.4e1 / 0.3e1 * t407 - (2 * t418);
t476 = 0.6e1 * t492;
t477 = 0.4e1 * t492;
t522 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t478 = t374 * t522;
t480 = -t535 / 0.2e1;
t482 = 0.12e2 * t520;
t484 = t412 * t333;
t487 = 0.4e1 * t520;
t489 = 0.8e1 * t521;
t527 = t377 * t344 * t422;
t491 = 0.8e1 * t527;
t495 = 0.2e1 * t535;
t496 = 0.4e1 * pkin(1);
t497 = t417 + t423;
t498 = t417 - t410;
t509 = 0.4e1 / 0.7e1 * t418 - t404 / 0.7e1;
t518 = t418 * t412;
t523 = (pkin(1) + pkin(3)) * (pkin(1) - pkin(3));
t528 = t344 ^ 2 * t423;
t529 = t504 * t418;
t530 = t329 * (-t407 + t463);
t533 = (-t374 * t426 + t484) * t341;
t534 = ((-0.24e2 * (0.4e1 / 0.3e1 * t520 + t321 + t327) * t528 * t535 - 0.12e2 * (-0.8e1 / 0.3e1 * t454 + ((t368 + t447) * t333 - (0.4e1 / 0.3e1 * t416 + t370 + t472) * t535) * t487 + (-(t416 * t501) - 0.5e1 / 0.3e1 * t410 + t473 * t412 + t418 * t471) * t333 + (-t423 + (-t458 + t474) * t416 - (3 * t410) + t475 * t412 + t417) * t480 + (-t374 * t410 * t340 + ((t412 + t447) * t333 + (t540 - t501) * t480) * t332) * t496) * t526 + 0.24e2 * t328 * t454 + ((t394 + 0.3e1 / 0.2e1 * t412 + t470) * t333 + t338 * t535 / 0.2e1) * t455 - 0.6e1 * ((-(3 * t423) + (-t458 + t475) * t416 + t474 * t412 + t498) * t333 - 0.2e1 * (-0.5e1 / 0.3e1 * t423 + (-t412 + t473) * t416 + t418 * t446) * t535) * t520 - 0.6e1 * t443 * t492 - (t413 + ((21 * t412) + t323) * t423 + (t313 + t397 + (35 * t410) - 0.2e1 * t529) * t416 + (t387 + (t386 + t398 - 0.5e1 * t407) * t412 - t418 * t465) * t335) * t333 + (0.7e1 * t413 + (t389 + t323) * t393 + (t313 + (21 * t410) + (9 * t417) - 0.6e1 * t529) * t416 + t530) * t535) * t292 + t308 * (0.16e2 * (t489 + t455 + (-8 * t410 + 12 * t518) * t341 + (-0.12e2 * pkin(1) * t426 + t419 * t546) * t376 - (6 * t518) + t502) * t528 + 0.24e2 * ((t418 - 0.2e1 / 0.3e1 * t416) * t489 + 0.14e2 * (-0.32e2 / 0.21e2 * (t418 + t416 / 0.4e1 + t412 / 0.4e1 - t404 / 0.8e1) * t456 + t423 / 0.7e1 + (0.16e2 / 0.21e2 * t412 + t509) * t416 + t410 / 0.7e1 + t509 * t412 + t417 - 0.3e1 / 0.7e1 * t519 + t403 / 0.42e2 - t406 / 0.42e2) * t520 + t327 * t441 - (t501 * t423) + (t325 - 0.10e2 / 0.3e1 * t410 + (2 * t417) - t519) * t416 + t300 * t523 + ((-0.2e1 / 0.3e1 * t456 + t418 + t370 + t354) * t481 + 0.6e1 * (-0.8e1 / 0.3e1 * (t354 + t369 + t510) * t456 + t423 / 0.3e1 + (0.4e1 / 0.3e1 * t418 + t368 + t355) * t416 + t417 + 0.2e1 / 0.3e1 * t518 - 0.2e1 / 0.3e1 * t519 - t410 / 0.3e1 + t403 / 0.18e2 - t406 / 0.18e2) * t332) * pkin(1)) * t526 + 0.16e2 * (-6 * t418 * t416 + t497) * t521 + 0.32e2 * (t314 * t522 + t316 * t338) * t486 + 0.24e2 * (t328 * t441 - t413 + (-t330 + t503) * t423 + (t325 + t498 + t544) * t416 + t418 * t300) * t520 + 0.8e1 * t440 * t492 - 0.8e1 * ((t389 + t511) * t423 + (t387 + (t386 + (10 * t418)) * t412 + t449) * t416 + t516) * t456 + (t423 ^ 2) + (t385 + t399 + (28 * t412)) * t413 + (t331 * t412 + (70 * t410) + t448) * t423 + (t331 * t410 + t448 * t390 + t506 * t401 - 0.6e1 * t417 * t404 + 0.4e1 * t419 ^ 2 + (28 * t426 ^ 2)) * t416 + t317 * t530) + (((0.4e1 * t533 + (t333 + t495) * t321 + t337 * t333 + (0.3e1 / 0.2e1 * t416 + t391 + t470) * t495) * t491 + 0.6e1 * ((0.2e1 * (t370 + t416 + t513) * t333 + pkin(3) * t478) * t488 + (-0.8e1 * t453 + 0.4e1 * ((t467 + t545) * t333 - (t394 + t446) * t535) * t332) * pkin(1) + t443) * t536) * t292 + t308 * (-0.32e2 * (t457 + (-0.4e1 * t374 * t483 + t542 + ((4 * t416) + t385 + t398) * t412) * t341 + (t354 - t412 + t436) * t477 + t314 * t523 + t316 * t337) * t527 - 0.8e1 * (t311 + (t316 * t522 + t303) * t482 + (t441 + (t390 + t507) * t416 + t435) * t476 + t440) * t536)) * t320) / ((-0.4e1 * (0.2e1 * t533 + (t541 + t416) * t535 + (-t501 + t321) * t333) * t526 + 0.8e1 * pkin(1) * t453 + ((pkin(2) * t542 + 0.8e1 * t412 * t422) * t375 + 0.4e1 * t426 * t478) * t341 - 0.4e1 * t442 * t492 - (t508 * t416 + t388 + t497 + 6 * t518) * t333 + (t393 + (t384 + 6 * t418) * t416 + t329) * t535) * t292 + t308 * (0.12e2 * (0.6e1 * (-0.4e1 / 0.9e1 * t456 + t418 + t416 / 0.3e1 + t369 + t407 / 0.9e1 - t404 / 0.9e1) * t520 + t327 * t314 + t307 * t523 + (t517 + (t407 / 0.6e1 + t353 + t436) * t332) * t496) * t526 + t311 + (t307 * t522 + t303) * t482 + t450 * t476 + ((t330 + t469) * t416 + t515) * t452 + t413 + (t383 + t466) * t423 + (t466 * t390 + t505 * t401 + t382 + t397) * t416 + t329 * t317) + ((t491 * t535 + 0.4e1 * (t484 * t543 + (t333 - t535) * t321 + t442) * t536) * t292 + t308 * (-0.8e1 * (t321 + t487 + t337) * t527 - 0.6e1 * (t500 * t487 + (t314 + t307) * t477 + t450) * t536)) * t320);
t524 = t375 * t376;
t494 = 0.2e1 * t332;
t295 = 0.1e1 / (t319 * t494 + t314 + t322 + t464);
t405 = 0.1e1 / pkin(5);
t479 = t295 * t405 / pkin(4) ^ 2;
t461 = t534 / 0.4e1;
t460 = t295 * t537;
t459 = t405 * t537;
t444 = -pkin(3) + t485;
t439 = t391 + t407 + t462;
t306 = t376 * t377 + t525;
t305 = t374 * t377 - t524;
t301 = t322 + t407 + t445;
t291 = (-t444 + t532) * t292 + (t301 * t319 + t302 * t494) * t374 + (t301 * t376 + (0.4e1 * t341 - 0.2e1) * t319 * pkin(3)) * t333;
t290 = (pkin(2) * t524 + t319 * t374) * t292 - (t322 + t439 + t451) * t532 + t444 * t322 + t439 * t485 + (t302 * t543 - t317 - t394 + t490) * pkin(3);
t289 = atan2(t291 * t460, t290 * t460);
t288 = cos(t289);
t287 = sin(t289);
t284 = atan2(t292 * t459, t459 * t534);
t283 = cos(t284);
t282 = sin(t284);
t281 = (t290 * t292 / 0.4e1 + t291 * t461) * t479;
t280 = (t290 * t461 - t291 * t292 / 0.4e1) * t479;
t279 = atan2(t280 * t305 + t281 * t306, t280 * t306 - t281 * t305);
t278 = cos(t279);
t277 = sin(t279);
t1 = [t377, -t375, 0, 0; t375, t377, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t278, t277, 0, pkin(2); -t277, -t278, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t376, -t374, 0, pkin(1); t374, t376, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; t288, -t287, 0, pkin(3); t287, t288, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; -t283, t282, 0, pkin(4); -t282, -t283, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1; 1, 0, 0, pkin(5); 0, 1, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1;];
T_ges = t1;
%% Postprocessing: Reshape Output
% Convert Maple format (2-dimensional tensor) to Matlab format (3-dimensional tensor)
% Fallunterscheidung der Initialisierung für symbolische Eingabe
if isa([qJ; pkin], 'double'), T_mdh = NaN(4,4,6);             % numerisch
else,                         T_mdh = sym('xx', [4,4,6]); end % symbolisch

for i = 1:6
  T_mdh(:,:,i) = T_ges((i-1)*4+1 : 4*i, :);
end
